type ProjectTask implements Node {
  id: ID!
  projectId: ID!
  project: Project!
  taskId: ID!
  task: Task!
  projectTaskSectionId: ID!
  projectTaskSection: ProjectTaskSection!
  createdAt: String!
  updatedAt: String!
}
type ProjectTaskConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ProjectTaskEdge]
}
type ProjectTaskEdge {
  node: ProjectTask
  cursor: Cursor!
}

input CreateProjectTaskInput {
  projectId: ID!
  projectTaskSectionId: ID!
  createdBy: ID!
  requestId: String!
}

input UpdateProjectTaskInput {
  id: ID!
  taskId: ID
  projectId: ID
  projectTaskSectionId: ID
}

extend type Subscription {
  projectTaskUpdated(id: ID!, requestId: String!): ProjectTask!
  projectTaskCreated(projectId: ID!, requestId: String!): ProjectTask!
}

extend type Query {
  projectTask(where: ProjectTaskWhereInput): ProjectTask
  projectTasks(after: Cursor, first: Int, before: Cursor, last: Int, where: ProjectTaskWhereInput): ProjectTaskConnection
}

extend type Mutation {
  createProjectTask(input: CreateProjectTaskInput!): ProjectTask!
  updateProjectTask(input: UpdateProjectTaskInput!): ProjectTask!
}
