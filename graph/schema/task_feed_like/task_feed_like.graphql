type TaskFeedLike implements Node {
  id: ID!
  teammateId: ID!
  taskId: ID!
  taskFeedId: ID!
  createdAt: String!
  updatedAt: String!
}
type TaskFeedLikeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TaskFeedLikeEdge]
}
type TaskFeedLikeEdge {
  node: TaskFeedLike
  cursor: Cursor!
}

input CreateTaskFeedLikeInput {
  taskId: ID!
  teammateId: ID!
  taskFeedId: ID!
}

input UpdateTaskFeedLikeInput {
  id: ID!
  taskId: ID
  teammateId: ID
  taskFeedId: ID
}

input DeleteTaskFeedLikeInput {
  id: ID!
}

extend type Subscription {
  taskFeedLikesUpdated(taskId: ID!): [TaskFeedLike!]!
}

extend type Query {
  taskFeedLike(where: TaskFeedLikeWhereInput): TaskFeedLike
  taskFeedLikes(after: Cursor, first: Int, before: Cursor, last: Int, where: TaskFeedLikeWhereInput): TaskFeedLikeConnection
}

extend type Mutation {
  createTaskFeedLike(input: CreateTaskFeedLikeInput!): TaskFeedLike!
  updateTaskFeedLike(input: UpdateTaskFeedLikeInput!): TaskFeedLike!
  deleteTaskFeedLike(input: DeleteTaskFeedLikeInput!): TaskFeedLike!
}
