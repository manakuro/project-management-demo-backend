// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/schema/ulid"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProjectTaskSection is the model entity for the ProjectTaskSection schema.
type ProjectTaskSection struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID ulid.ID `json:"project_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTaskSectionQuery when eager-loading is set.
	Edges ProjectTaskSectionEdges `json:"edges"`
}

// ProjectTaskSectionEdges holds the relations/edges for other nodes in the graph.
type ProjectTaskSectionEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// ProjectTasks holds the value of the projectTasks edge.
	ProjectTasks []*ProjectTask `json:"projectTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskSectionEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ProjectTasksOrErr returns the ProjectTasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectTaskSectionEdges) ProjectTasksOrErr() ([]*ProjectTask, error) {
	if e.loadedTypes[1] {
		return e.ProjectTasks, nil
	}
	return nil, &NotLoadedError{edge: "projectTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTaskSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttasksection.FieldName:
			values[i] = new(sql.NullString)
		case projecttasksection.FieldCreatedAt, projecttasksection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projecttasksection.FieldID, projecttasksection.FieldProjectID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectTaskSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTaskSection fields.
func (pts *ProjectTaskSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttasksection.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pts.ID = *value
			}
		case projecttasksection.FieldProjectID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pts.ProjectID = *value
			}
		case projecttasksection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pts.Name = value.String
			}
		case projecttasksection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pts.CreatedAt = value.Time
			}
		case projecttasksection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pts.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the ProjectTaskSection entity.
func (pts *ProjectTaskSection) QueryProject() *ProjectQuery {
	return (&ProjectTaskSectionClient{config: pts.config}).QueryProject(pts)
}

// QueryProjectTasks queries the "projectTasks" edge of the ProjectTaskSection entity.
func (pts *ProjectTaskSection) QueryProjectTasks() *ProjectTaskQuery {
	return (&ProjectTaskSectionClient{config: pts.config}).QueryProjectTasks(pts)
}

// Update returns a builder for updating this ProjectTaskSection.
// Note that you need to call ProjectTaskSection.Unwrap() before calling this method if this ProjectTaskSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (pts *ProjectTaskSection) Update() *ProjectTaskSectionUpdateOne {
	return (&ProjectTaskSectionClient{config: pts.config}).UpdateOne(pts)
}

// Unwrap unwraps the ProjectTaskSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pts *ProjectTaskSection) Unwrap() *ProjectTaskSection {
	tx, ok := pts.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectTaskSection is not a transactional entity")
	}
	pts.config.driver = tx.drv
	return pts
}

// String implements the fmt.Stringer.
func (pts *ProjectTaskSection) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTaskSection(")
	builder.WriteString(fmt.Sprintf("id=%v", pts.ID))
	builder.WriteString(", project_id=")
	builder.WriteString(fmt.Sprintf("%v", pts.ProjectID))
	builder.WriteString(", name=")
	builder.WriteString(pts.Name)
	builder.WriteString(", created_at=")
	builder.WriteString(pts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pts.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectTaskSections is a parsable slice of ProjectTaskSection.
type ProjectTaskSections []*ProjectTaskSection

func (pts ProjectTaskSections) config(cfg config) {
	for _i := range pts {
		pts[_i].config = cfg
	}
}
