// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/deletedprojecttask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeletedProjectTaskUpdate is the builder for updating DeletedProjectTask entities.
type DeletedProjectTaskUpdate struct {
	config
	hooks    []Hook
	mutation *DeletedProjectTaskMutation
}

// Where appends a list predicates to the DeletedProjectTaskUpdate builder.
func (dptu *DeletedProjectTaskUpdate) Where(ps ...predicate.DeletedProjectTask) *DeletedProjectTaskUpdate {
	dptu.mutation.Where(ps...)
	return dptu
}

// SetProjectID sets the "project_id" field.
func (dptu *DeletedProjectTaskUpdate) SetProjectID(u ulid.ID) *DeletedProjectTaskUpdate {
	dptu.mutation.SetProjectID(u)
	return dptu
}

// SetTaskID sets the "task_id" field.
func (dptu *DeletedProjectTaskUpdate) SetTaskID(u ulid.ID) *DeletedProjectTaskUpdate {
	dptu.mutation.SetTaskID(u)
	return dptu
}

// SetProjectTaskSectionID sets the "project_task_section_id" field.
func (dptu *DeletedProjectTaskUpdate) SetProjectTaskSectionID(u ulid.ID) *DeletedProjectTaskUpdate {
	dptu.mutation.SetProjectTaskSectionID(u)
	return dptu
}

// SetProjectTaskID sets the "project_task_id" field.
func (dptu *DeletedProjectTaskUpdate) SetProjectTaskID(u ulid.ID) *DeletedProjectTaskUpdate {
	dptu.mutation.SetProjectTaskID(u)
	return dptu
}

// SetProjectTaskCreatedAt sets the "project_task_created_at" field.
func (dptu *DeletedProjectTaskUpdate) SetProjectTaskCreatedAt(t time.Time) *DeletedProjectTaskUpdate {
	dptu.mutation.SetProjectTaskCreatedAt(t)
	return dptu
}

// SetProjectTaskUpdatedAt sets the "project_task_updated_at" field.
func (dptu *DeletedProjectTaskUpdate) SetProjectTaskUpdatedAt(t time.Time) *DeletedProjectTaskUpdate {
	dptu.mutation.SetProjectTaskUpdatedAt(t)
	return dptu
}

// SetProject sets the "project" edge to the Project entity.
func (dptu *DeletedProjectTaskUpdate) SetProject(p *Project) *DeletedProjectTaskUpdate {
	return dptu.SetProjectID(p.ID)
}

// SetTask sets the "task" edge to the Task entity.
func (dptu *DeletedProjectTaskUpdate) SetTask(t *Task) *DeletedProjectTaskUpdate {
	return dptu.SetTaskID(t.ID)
}

// Mutation returns the DeletedProjectTaskMutation object of the builder.
func (dptu *DeletedProjectTaskUpdate) Mutation() *DeletedProjectTaskMutation {
	return dptu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (dptu *DeletedProjectTaskUpdate) ClearProject() *DeletedProjectTaskUpdate {
	dptu.mutation.ClearProject()
	return dptu
}

// ClearTask clears the "task" edge to the Task entity.
func (dptu *DeletedProjectTaskUpdate) ClearTask() *DeletedProjectTaskUpdate {
	dptu.mutation.ClearTask()
	return dptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dptu *DeletedProjectTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dptu.hooks) == 0 {
		if err = dptu.check(); err != nil {
			return 0, err
		}
		affected, err = dptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedProjectTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dptu.check(); err != nil {
				return 0, err
			}
			dptu.mutation = mutation
			affected, err = dptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dptu.hooks) - 1; i >= 0; i-- {
			if dptu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dptu *DeletedProjectTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := dptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dptu *DeletedProjectTaskUpdate) Exec(ctx context.Context) error {
	_, err := dptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dptu *DeletedProjectTaskUpdate) ExecX(ctx context.Context) {
	if err := dptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dptu *DeletedProjectTaskUpdate) check() error {
	if _, ok := dptu.mutation.ProjectID(); dptu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeletedProjectTask.project"`)
	}
	if _, ok := dptu.mutation.TaskID(); dptu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeletedProjectTask.task"`)
	}
	return nil
}

func (dptu *DeletedProjectTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deletedprojecttask.Table,
			Columns: deletedprojecttask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedprojecttask.FieldID,
			},
		},
	}
	if ps := dptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dptu.mutation.ProjectTaskSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskSectionID,
		})
	}
	if value, ok := dptu.mutation.ProjectTaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskID,
		})
	}
	if value, ok := dptu.mutation.ProjectTaskCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskCreatedAt,
		})
	}
	if value, ok := dptu.mutation.ProjectTaskUpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskUpdatedAt,
		})
	}
	if dptu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.ProjectTable,
			Columns: []string{deletedprojecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dptu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.ProjectTable,
			Columns: []string{deletedprojecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dptu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.TaskTable,
			Columns: []string{deletedprojecttask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dptu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.TaskTable,
			Columns: []string{deletedprojecttask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletedprojecttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeletedProjectTaskUpdateOne is the builder for updating a single DeletedProjectTask entity.
type DeletedProjectTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeletedProjectTaskMutation
}

// SetProjectID sets the "project_id" field.
func (dptuo *DeletedProjectTaskUpdateOne) SetProjectID(u ulid.ID) *DeletedProjectTaskUpdateOne {
	dptuo.mutation.SetProjectID(u)
	return dptuo
}

// SetTaskID sets the "task_id" field.
func (dptuo *DeletedProjectTaskUpdateOne) SetTaskID(u ulid.ID) *DeletedProjectTaskUpdateOne {
	dptuo.mutation.SetTaskID(u)
	return dptuo
}

// SetProjectTaskSectionID sets the "project_task_section_id" field.
func (dptuo *DeletedProjectTaskUpdateOne) SetProjectTaskSectionID(u ulid.ID) *DeletedProjectTaskUpdateOne {
	dptuo.mutation.SetProjectTaskSectionID(u)
	return dptuo
}

// SetProjectTaskID sets the "project_task_id" field.
func (dptuo *DeletedProjectTaskUpdateOne) SetProjectTaskID(u ulid.ID) *DeletedProjectTaskUpdateOne {
	dptuo.mutation.SetProjectTaskID(u)
	return dptuo
}

// SetProjectTaskCreatedAt sets the "project_task_created_at" field.
func (dptuo *DeletedProjectTaskUpdateOne) SetProjectTaskCreatedAt(t time.Time) *DeletedProjectTaskUpdateOne {
	dptuo.mutation.SetProjectTaskCreatedAt(t)
	return dptuo
}

// SetProjectTaskUpdatedAt sets the "project_task_updated_at" field.
func (dptuo *DeletedProjectTaskUpdateOne) SetProjectTaskUpdatedAt(t time.Time) *DeletedProjectTaskUpdateOne {
	dptuo.mutation.SetProjectTaskUpdatedAt(t)
	return dptuo
}

// SetProject sets the "project" edge to the Project entity.
func (dptuo *DeletedProjectTaskUpdateOne) SetProject(p *Project) *DeletedProjectTaskUpdateOne {
	return dptuo.SetProjectID(p.ID)
}

// SetTask sets the "task" edge to the Task entity.
func (dptuo *DeletedProjectTaskUpdateOne) SetTask(t *Task) *DeletedProjectTaskUpdateOne {
	return dptuo.SetTaskID(t.ID)
}

// Mutation returns the DeletedProjectTaskMutation object of the builder.
func (dptuo *DeletedProjectTaskUpdateOne) Mutation() *DeletedProjectTaskMutation {
	return dptuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (dptuo *DeletedProjectTaskUpdateOne) ClearProject() *DeletedProjectTaskUpdateOne {
	dptuo.mutation.ClearProject()
	return dptuo
}

// ClearTask clears the "task" edge to the Task entity.
func (dptuo *DeletedProjectTaskUpdateOne) ClearTask() *DeletedProjectTaskUpdateOne {
	dptuo.mutation.ClearTask()
	return dptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dptuo *DeletedProjectTaskUpdateOne) Select(field string, fields ...string) *DeletedProjectTaskUpdateOne {
	dptuo.fields = append([]string{field}, fields...)
	return dptuo
}

// Save executes the query and returns the updated DeletedProjectTask entity.
func (dptuo *DeletedProjectTaskUpdateOne) Save(ctx context.Context) (*DeletedProjectTask, error) {
	var (
		err  error
		node *DeletedProjectTask
	)
	if len(dptuo.hooks) == 0 {
		if err = dptuo.check(); err != nil {
			return nil, err
		}
		node, err = dptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedProjectTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dptuo.check(); err != nil {
				return nil, err
			}
			dptuo.mutation = mutation
			node, err = dptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dptuo.hooks) - 1; i >= 0; i-- {
			if dptuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dptuo *DeletedProjectTaskUpdateOne) SaveX(ctx context.Context) *DeletedProjectTask {
	node, err := dptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dptuo *DeletedProjectTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := dptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dptuo *DeletedProjectTaskUpdateOne) ExecX(ctx context.Context) {
	if err := dptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dptuo *DeletedProjectTaskUpdateOne) check() error {
	if _, ok := dptuo.mutation.ProjectID(); dptuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeletedProjectTask.project"`)
	}
	if _, ok := dptuo.mutation.TaskID(); dptuo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeletedProjectTask.task"`)
	}
	return nil
}

func (dptuo *DeletedProjectTaskUpdateOne) sqlSave(ctx context.Context) (_node *DeletedProjectTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deletedprojecttask.Table,
			Columns: deletedprojecttask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedprojecttask.FieldID,
			},
		},
	}
	id, ok := dptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeletedProjectTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deletedprojecttask.FieldID)
		for _, f := range fields {
			if !deletedprojecttask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deletedprojecttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dptuo.mutation.ProjectTaskSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskSectionID,
		})
	}
	if value, ok := dptuo.mutation.ProjectTaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskID,
		})
	}
	if value, ok := dptuo.mutation.ProjectTaskCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskCreatedAt,
		})
	}
	if value, ok := dptuo.mutation.ProjectTaskUpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskUpdatedAt,
		})
	}
	if dptuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.ProjectTable,
			Columns: []string{deletedprojecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dptuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.ProjectTable,
			Columns: []string{deletedprojecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dptuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.TaskTable,
			Columns: []string{deletedprojecttask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dptuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.TaskTable,
			Columns: []string{deletedprojecttask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeletedProjectTask{config: dptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletedprojecttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
