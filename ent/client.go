// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"project-management-demo-backend/ent/migrate"
	"project-management-demo-backend/ent/schema/ulid"

	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/archivedtaskactivity"
	"project-management-demo-backend/ent/archivedtaskactivitytask"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/deletedtask"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/filetype"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/projecttask"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/tag"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskactivity"
	"project-management-demo-backend/ent/taskactivitytask"
	"project-management-demo-backend/ent/taskcollaborator"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/tasksection"
	"project-management-demo-backend/ent/tasktag"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceactivity"
	"project-management-demo-backend/ent/workspaceactivitytask"
	"project-management-demo-backend/ent/workspaceteammate"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ActivityType is the client for interacting with the ActivityType builders.
	ActivityType *ActivityTypeClient
	// ArchivedTaskActivity is the client for interacting with the ArchivedTaskActivity builders.
	ArchivedTaskActivity *ArchivedTaskActivityClient
	// ArchivedTaskActivityTask is the client for interacting with the ArchivedTaskActivityTask builders.
	ArchivedTaskActivityTask *ArchivedTaskActivityTaskClient
	// Color is the client for interacting with the Color builders.
	Color *ColorClient
	// DeletedTask is the client for interacting with the DeletedTask builders.
	DeletedTask *DeletedTaskClient
	// FavoriteProject is the client for interacting with the FavoriteProject builders.
	FavoriteProject *FavoriteProjectClient
	// FavoriteWorkspace is the client for interacting with the FavoriteWorkspace builders.
	FavoriteWorkspace *FavoriteWorkspaceClient
	// FileType is the client for interacting with the FileType builders.
	FileType *FileTypeClient
	// Icon is the client for interacting with the Icon builders.
	Icon *IconClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectBaseColor is the client for interacting with the ProjectBaseColor builders.
	ProjectBaseColor *ProjectBaseColorClient
	// ProjectIcon is the client for interacting with the ProjectIcon builders.
	ProjectIcon *ProjectIconClient
	// ProjectLightColor is the client for interacting with the ProjectLightColor builders.
	ProjectLightColor *ProjectLightColorClient
	// ProjectTask is the client for interacting with the ProjectTask builders.
	ProjectTask *ProjectTaskClient
	// ProjectTaskColumn is the client for interacting with the ProjectTaskColumn builders.
	ProjectTaskColumn *ProjectTaskColumnClient
	// ProjectTaskListStatus is the client for interacting with the ProjectTaskListStatus builders.
	ProjectTaskListStatus *ProjectTaskListStatusClient
	// ProjectTaskSection is the client for interacting with the ProjectTaskSection builders.
	ProjectTaskSection *ProjectTaskSectionClient
	// ProjectTeammate is the client for interacting with the ProjectTeammate builders.
	ProjectTeammate *ProjectTeammateClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// TaskActivity is the client for interacting with the TaskActivity builders.
	TaskActivity *TaskActivityClient
	// TaskActivityTask is the client for interacting with the TaskActivityTask builders.
	TaskActivityTask *TaskActivityTaskClient
	// TaskCollaborator is the client for interacting with the TaskCollaborator builders.
	TaskCollaborator *TaskCollaboratorClient
	// TaskColumn is the client for interacting with the TaskColumn builders.
	TaskColumn *TaskColumnClient
	// TaskFeed is the client for interacting with the TaskFeed builders.
	TaskFeed *TaskFeedClient
	// TaskFeedLike is the client for interacting with the TaskFeedLike builders.
	TaskFeedLike *TaskFeedLikeClient
	// TaskFile is the client for interacting with the TaskFile builders.
	TaskFile *TaskFileClient
	// TaskLike is the client for interacting with the TaskLike builders.
	TaskLike *TaskLikeClient
	// TaskListCompletedStatus is the client for interacting with the TaskListCompletedStatus builders.
	TaskListCompletedStatus *TaskListCompletedStatusClient
	// TaskListSortStatus is the client for interacting with the TaskListSortStatus builders.
	TaskListSortStatus *TaskListSortStatusClient
	// TaskPriority is the client for interacting with the TaskPriority builders.
	TaskPriority *TaskPriorityClient
	// TaskSection is the client for interacting with the TaskSection builders.
	TaskSection *TaskSectionClient
	// TaskTag is the client for interacting with the TaskTag builders.
	TaskTag *TaskTagClient
	// Teammate is the client for interacting with the Teammate builders.
	Teammate *TeammateClient
	// TeammateTask is the client for interacting with the TeammateTask builders.
	TeammateTask *TeammateTaskClient
	// TeammateTaskColumn is the client for interacting with the TeammateTaskColumn builders.
	TeammateTaskColumn *TeammateTaskColumnClient
	// TeammateTaskListStatus is the client for interacting with the TeammateTaskListStatus builders.
	TeammateTaskListStatus *TeammateTaskListStatusClient
	// TeammateTaskSection is the client for interacting with the TeammateTaskSection builders.
	TeammateTaskSection *TeammateTaskSectionClient
	// TeammateTaskTabStatus is the client for interacting with the TeammateTaskTabStatus builders.
	TeammateTaskTabStatus *TeammateTaskTabStatusClient
	// TestTodo is the client for interacting with the TestTodo builders.
	TestTodo *TestTodoClient
	// TestUser is the client for interacting with the TestUser builders.
	TestUser *TestUserClient
	// Workspace is the client for interacting with the Workspace builders.
	Workspace *WorkspaceClient
	// WorkspaceActivity is the client for interacting with the WorkspaceActivity builders.
	WorkspaceActivity *WorkspaceActivityClient
	// WorkspaceActivityTask is the client for interacting with the WorkspaceActivityTask builders.
	WorkspaceActivityTask *WorkspaceActivityTaskClient
	// WorkspaceTeammate is the client for interacting with the WorkspaceTeammate builders.
	WorkspaceTeammate *WorkspaceTeammateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ActivityType = NewActivityTypeClient(c.config)
	c.ArchivedTaskActivity = NewArchivedTaskActivityClient(c.config)
	c.ArchivedTaskActivityTask = NewArchivedTaskActivityTaskClient(c.config)
	c.Color = NewColorClient(c.config)
	c.DeletedTask = NewDeletedTaskClient(c.config)
	c.FavoriteProject = NewFavoriteProjectClient(c.config)
	c.FavoriteWorkspace = NewFavoriteWorkspaceClient(c.config)
	c.FileType = NewFileTypeClient(c.config)
	c.Icon = NewIconClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectBaseColor = NewProjectBaseColorClient(c.config)
	c.ProjectIcon = NewProjectIconClient(c.config)
	c.ProjectLightColor = NewProjectLightColorClient(c.config)
	c.ProjectTask = NewProjectTaskClient(c.config)
	c.ProjectTaskColumn = NewProjectTaskColumnClient(c.config)
	c.ProjectTaskListStatus = NewProjectTaskListStatusClient(c.config)
	c.ProjectTaskSection = NewProjectTaskSectionClient(c.config)
	c.ProjectTeammate = NewProjectTeammateClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.TaskActivity = NewTaskActivityClient(c.config)
	c.TaskActivityTask = NewTaskActivityTaskClient(c.config)
	c.TaskCollaborator = NewTaskCollaboratorClient(c.config)
	c.TaskColumn = NewTaskColumnClient(c.config)
	c.TaskFeed = NewTaskFeedClient(c.config)
	c.TaskFeedLike = NewTaskFeedLikeClient(c.config)
	c.TaskFile = NewTaskFileClient(c.config)
	c.TaskLike = NewTaskLikeClient(c.config)
	c.TaskListCompletedStatus = NewTaskListCompletedStatusClient(c.config)
	c.TaskListSortStatus = NewTaskListSortStatusClient(c.config)
	c.TaskPriority = NewTaskPriorityClient(c.config)
	c.TaskSection = NewTaskSectionClient(c.config)
	c.TaskTag = NewTaskTagClient(c.config)
	c.Teammate = NewTeammateClient(c.config)
	c.TeammateTask = NewTeammateTaskClient(c.config)
	c.TeammateTaskColumn = NewTeammateTaskColumnClient(c.config)
	c.TeammateTaskListStatus = NewTeammateTaskListStatusClient(c.config)
	c.TeammateTaskSection = NewTeammateTaskSectionClient(c.config)
	c.TeammateTaskTabStatus = NewTeammateTaskTabStatusClient(c.config)
	c.TestTodo = NewTestTodoClient(c.config)
	c.TestUser = NewTestUserClient(c.config)
	c.Workspace = NewWorkspaceClient(c.config)
	c.WorkspaceActivity = NewWorkspaceActivityClient(c.config)
	c.WorkspaceActivityTask = NewWorkspaceActivityTaskClient(c.config)
	c.WorkspaceTeammate = NewWorkspaceTeammateClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		ActivityType:             NewActivityTypeClient(cfg),
		ArchivedTaskActivity:     NewArchivedTaskActivityClient(cfg),
		ArchivedTaskActivityTask: NewArchivedTaskActivityTaskClient(cfg),
		Color:                    NewColorClient(cfg),
		DeletedTask:              NewDeletedTaskClient(cfg),
		FavoriteProject:          NewFavoriteProjectClient(cfg),
		FavoriteWorkspace:        NewFavoriteWorkspaceClient(cfg),
		FileType:                 NewFileTypeClient(cfg),
		Icon:                     NewIconClient(cfg),
		Project:                  NewProjectClient(cfg),
		ProjectBaseColor:         NewProjectBaseColorClient(cfg),
		ProjectIcon:              NewProjectIconClient(cfg),
		ProjectLightColor:        NewProjectLightColorClient(cfg),
		ProjectTask:              NewProjectTaskClient(cfg),
		ProjectTaskColumn:        NewProjectTaskColumnClient(cfg),
		ProjectTaskListStatus:    NewProjectTaskListStatusClient(cfg),
		ProjectTaskSection:       NewProjectTaskSectionClient(cfg),
		ProjectTeammate:          NewProjectTeammateClient(cfg),
		Tag:                      NewTagClient(cfg),
		Task:                     NewTaskClient(cfg),
		TaskActivity:             NewTaskActivityClient(cfg),
		TaskActivityTask:         NewTaskActivityTaskClient(cfg),
		TaskCollaborator:         NewTaskCollaboratorClient(cfg),
		TaskColumn:               NewTaskColumnClient(cfg),
		TaskFeed:                 NewTaskFeedClient(cfg),
		TaskFeedLike:             NewTaskFeedLikeClient(cfg),
		TaskFile:                 NewTaskFileClient(cfg),
		TaskLike:                 NewTaskLikeClient(cfg),
		TaskListCompletedStatus:  NewTaskListCompletedStatusClient(cfg),
		TaskListSortStatus:       NewTaskListSortStatusClient(cfg),
		TaskPriority:             NewTaskPriorityClient(cfg),
		TaskSection:              NewTaskSectionClient(cfg),
		TaskTag:                  NewTaskTagClient(cfg),
		Teammate:                 NewTeammateClient(cfg),
		TeammateTask:             NewTeammateTaskClient(cfg),
		TeammateTaskColumn:       NewTeammateTaskColumnClient(cfg),
		TeammateTaskListStatus:   NewTeammateTaskListStatusClient(cfg),
		TeammateTaskSection:      NewTeammateTaskSectionClient(cfg),
		TeammateTaskTabStatus:    NewTeammateTaskTabStatusClient(cfg),
		TestTodo:                 NewTestTodoClient(cfg),
		TestUser:                 NewTestUserClient(cfg),
		Workspace:                NewWorkspaceClient(cfg),
		WorkspaceActivity:        NewWorkspaceActivityClient(cfg),
		WorkspaceActivityTask:    NewWorkspaceActivityTaskClient(cfg),
		WorkspaceTeammate:        NewWorkspaceTeammateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		ActivityType:             NewActivityTypeClient(cfg),
		ArchivedTaskActivity:     NewArchivedTaskActivityClient(cfg),
		ArchivedTaskActivityTask: NewArchivedTaskActivityTaskClient(cfg),
		Color:                    NewColorClient(cfg),
		DeletedTask:              NewDeletedTaskClient(cfg),
		FavoriteProject:          NewFavoriteProjectClient(cfg),
		FavoriteWorkspace:        NewFavoriteWorkspaceClient(cfg),
		FileType:                 NewFileTypeClient(cfg),
		Icon:                     NewIconClient(cfg),
		Project:                  NewProjectClient(cfg),
		ProjectBaseColor:         NewProjectBaseColorClient(cfg),
		ProjectIcon:              NewProjectIconClient(cfg),
		ProjectLightColor:        NewProjectLightColorClient(cfg),
		ProjectTask:              NewProjectTaskClient(cfg),
		ProjectTaskColumn:        NewProjectTaskColumnClient(cfg),
		ProjectTaskListStatus:    NewProjectTaskListStatusClient(cfg),
		ProjectTaskSection:       NewProjectTaskSectionClient(cfg),
		ProjectTeammate:          NewProjectTeammateClient(cfg),
		Tag:                      NewTagClient(cfg),
		Task:                     NewTaskClient(cfg),
		TaskActivity:             NewTaskActivityClient(cfg),
		TaskActivityTask:         NewTaskActivityTaskClient(cfg),
		TaskCollaborator:         NewTaskCollaboratorClient(cfg),
		TaskColumn:               NewTaskColumnClient(cfg),
		TaskFeed:                 NewTaskFeedClient(cfg),
		TaskFeedLike:             NewTaskFeedLikeClient(cfg),
		TaskFile:                 NewTaskFileClient(cfg),
		TaskLike:                 NewTaskLikeClient(cfg),
		TaskListCompletedStatus:  NewTaskListCompletedStatusClient(cfg),
		TaskListSortStatus:       NewTaskListSortStatusClient(cfg),
		TaskPriority:             NewTaskPriorityClient(cfg),
		TaskSection:              NewTaskSectionClient(cfg),
		TaskTag:                  NewTaskTagClient(cfg),
		Teammate:                 NewTeammateClient(cfg),
		TeammateTask:             NewTeammateTaskClient(cfg),
		TeammateTaskColumn:       NewTeammateTaskColumnClient(cfg),
		TeammateTaskListStatus:   NewTeammateTaskListStatusClient(cfg),
		TeammateTaskSection:      NewTeammateTaskSectionClient(cfg),
		TeammateTaskTabStatus:    NewTeammateTaskTabStatusClient(cfg),
		TestTodo:                 NewTestTodoClient(cfg),
		TestUser:                 NewTestUserClient(cfg),
		Workspace:                NewWorkspaceClient(cfg),
		WorkspaceActivity:        NewWorkspaceActivityClient(cfg),
		WorkspaceActivityTask:    NewWorkspaceActivityTaskClient(cfg),
		WorkspaceTeammate:        NewWorkspaceTeammateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ActivityType.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ActivityType.Use(hooks...)
	c.ArchivedTaskActivity.Use(hooks...)
	c.ArchivedTaskActivityTask.Use(hooks...)
	c.Color.Use(hooks...)
	c.DeletedTask.Use(hooks...)
	c.FavoriteProject.Use(hooks...)
	c.FavoriteWorkspace.Use(hooks...)
	c.FileType.Use(hooks...)
	c.Icon.Use(hooks...)
	c.Project.Use(hooks...)
	c.ProjectBaseColor.Use(hooks...)
	c.ProjectIcon.Use(hooks...)
	c.ProjectLightColor.Use(hooks...)
	c.ProjectTask.Use(hooks...)
	c.ProjectTaskColumn.Use(hooks...)
	c.ProjectTaskListStatus.Use(hooks...)
	c.ProjectTaskSection.Use(hooks...)
	c.ProjectTeammate.Use(hooks...)
	c.Tag.Use(hooks...)
	c.Task.Use(hooks...)
	c.TaskActivity.Use(hooks...)
	c.TaskActivityTask.Use(hooks...)
	c.TaskCollaborator.Use(hooks...)
	c.TaskColumn.Use(hooks...)
	c.TaskFeed.Use(hooks...)
	c.TaskFeedLike.Use(hooks...)
	c.TaskFile.Use(hooks...)
	c.TaskLike.Use(hooks...)
	c.TaskListCompletedStatus.Use(hooks...)
	c.TaskListSortStatus.Use(hooks...)
	c.TaskPriority.Use(hooks...)
	c.TaskSection.Use(hooks...)
	c.TaskTag.Use(hooks...)
	c.Teammate.Use(hooks...)
	c.TeammateTask.Use(hooks...)
	c.TeammateTaskColumn.Use(hooks...)
	c.TeammateTaskListStatus.Use(hooks...)
	c.TeammateTaskSection.Use(hooks...)
	c.TeammateTaskTabStatus.Use(hooks...)
	c.TestTodo.Use(hooks...)
	c.TestUser.Use(hooks...)
	c.Workspace.Use(hooks...)
	c.WorkspaceActivity.Use(hooks...)
	c.WorkspaceActivityTask.Use(hooks...)
	c.WorkspaceTeammate.Use(hooks...)
}

// ActivityTypeClient is a client for the ActivityType schema.
type ActivityTypeClient struct {
	config
}

// NewActivityTypeClient returns a client for the ActivityType from the given config.
func NewActivityTypeClient(c config) *ActivityTypeClient {
	return &ActivityTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activitytype.Hooks(f(g(h())))`.
func (c *ActivityTypeClient) Use(hooks ...Hook) {
	c.hooks.ActivityType = append(c.hooks.ActivityType, hooks...)
}

// Create returns a create builder for ActivityType.
func (c *ActivityTypeClient) Create() *ActivityTypeCreate {
	mutation := newActivityTypeMutation(c.config, OpCreate)
	return &ActivityTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActivityType entities.
func (c *ActivityTypeClient) CreateBulk(builders ...*ActivityTypeCreate) *ActivityTypeCreateBulk {
	return &ActivityTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActivityType.
func (c *ActivityTypeClient) Update() *ActivityTypeUpdate {
	mutation := newActivityTypeMutation(c.config, OpUpdate)
	return &ActivityTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityTypeClient) UpdateOne(at *ActivityType) *ActivityTypeUpdateOne {
	mutation := newActivityTypeMutation(c.config, OpUpdateOne, withActivityType(at))
	return &ActivityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityTypeClient) UpdateOneID(id ulid.ID) *ActivityTypeUpdateOne {
	mutation := newActivityTypeMutation(c.config, OpUpdateOne, withActivityTypeID(id))
	return &ActivityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActivityType.
func (c *ActivityTypeClient) Delete() *ActivityTypeDelete {
	mutation := newActivityTypeMutation(c.config, OpDelete)
	return &ActivityTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityTypeClient) DeleteOne(at *ActivityType) *ActivityTypeDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityTypeClient) DeleteOneID(id ulid.ID) *ActivityTypeDeleteOne {
	builder := c.Delete().Where(activitytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityTypeDeleteOne{builder}
}

// Query returns a query builder for ActivityType.
func (c *ActivityTypeClient) Query() *ActivityTypeQuery {
	return &ActivityTypeQuery{
		config: c.config,
	}
}

// Get returns a ActivityType entity by its id.
func (c *ActivityTypeClient) Get(ctx context.Context, id ulid.ID) (*ActivityType, error) {
	return c.Query().Where(activitytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityTypeClient) GetX(ctx context.Context, id ulid.ID) *ActivityType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTaskActivities queries the taskActivities edge of a ActivityType.
func (c *ActivityTypeClient) QueryTaskActivities(at *ActivityType) *TaskActivityQuery {
	query := &TaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activitytype.Table, activitytype.FieldID, id),
			sqlgraph.To(taskactivity.Table, taskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activitytype.TaskActivitiesTable, activitytype.TaskActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceActivities queries the workspaceActivities edge of a ActivityType.
func (c *ActivityTypeClient) QueryWorkspaceActivities(at *ActivityType) *WorkspaceActivityQuery {
	query := &WorkspaceActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activitytype.Table, activitytype.FieldID, id),
			sqlgraph.To(workspaceactivity.Table, workspaceactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activitytype.WorkspaceActivitiesTable, activitytype.WorkspaceActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchivedTaskActivities queries the archivedTaskActivities edge of a ActivityType.
func (c *ActivityTypeClient) QueryArchivedTaskActivities(at *ActivityType) *ArchivedTaskActivityQuery {
	query := &ArchivedTaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activitytype.Table, activitytype.FieldID, id),
			sqlgraph.To(archivedtaskactivity.Table, archivedtaskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activitytype.ArchivedTaskActivitiesTable, activitytype.ArchivedTaskActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityTypeClient) Hooks() []Hook {
	return c.hooks.ActivityType
}

// ArchivedTaskActivityClient is a client for the ArchivedTaskActivity schema.
type ArchivedTaskActivityClient struct {
	config
}

// NewArchivedTaskActivityClient returns a client for the ArchivedTaskActivity from the given config.
func NewArchivedTaskActivityClient(c config) *ArchivedTaskActivityClient {
	return &ArchivedTaskActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `archivedtaskactivity.Hooks(f(g(h())))`.
func (c *ArchivedTaskActivityClient) Use(hooks ...Hook) {
	c.hooks.ArchivedTaskActivity = append(c.hooks.ArchivedTaskActivity, hooks...)
}

// Create returns a create builder for ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) Create() *ArchivedTaskActivityCreate {
	mutation := newArchivedTaskActivityMutation(c.config, OpCreate)
	return &ArchivedTaskActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArchivedTaskActivity entities.
func (c *ArchivedTaskActivityClient) CreateBulk(builders ...*ArchivedTaskActivityCreate) *ArchivedTaskActivityCreateBulk {
	return &ArchivedTaskActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) Update() *ArchivedTaskActivityUpdate {
	mutation := newArchivedTaskActivityMutation(c.config, OpUpdate)
	return &ArchivedTaskActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArchivedTaskActivityClient) UpdateOne(ata *ArchivedTaskActivity) *ArchivedTaskActivityUpdateOne {
	mutation := newArchivedTaskActivityMutation(c.config, OpUpdateOne, withArchivedTaskActivity(ata))
	return &ArchivedTaskActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArchivedTaskActivityClient) UpdateOneID(id ulid.ID) *ArchivedTaskActivityUpdateOne {
	mutation := newArchivedTaskActivityMutation(c.config, OpUpdateOne, withArchivedTaskActivityID(id))
	return &ArchivedTaskActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) Delete() *ArchivedTaskActivityDelete {
	mutation := newArchivedTaskActivityMutation(c.config, OpDelete)
	return &ArchivedTaskActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ArchivedTaskActivityClient) DeleteOne(ata *ArchivedTaskActivity) *ArchivedTaskActivityDeleteOne {
	return c.DeleteOneID(ata.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ArchivedTaskActivityClient) DeleteOneID(id ulid.ID) *ArchivedTaskActivityDeleteOne {
	builder := c.Delete().Where(archivedtaskactivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArchivedTaskActivityDeleteOne{builder}
}

// Query returns a query builder for ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) Query() *ArchivedTaskActivityQuery {
	return &ArchivedTaskActivityQuery{
		config: c.config,
	}
}

// Get returns a ArchivedTaskActivity entity by its id.
func (c *ArchivedTaskActivityClient) Get(ctx context.Context, id ulid.ID) (*ArchivedTaskActivity, error) {
	return c.Query().Where(archivedtaskactivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArchivedTaskActivityClient) GetX(ctx context.Context, id ulid.ID) *ArchivedTaskActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) QueryTeammate(ata *ArchivedTaskActivity) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ata.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedtaskactivity.Table, archivedtaskactivity.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedtaskactivity.TeammateTable, archivedtaskactivity.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(ata.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivityType queries the activityType edge of a ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) QueryActivityType(ata *ArchivedTaskActivity) *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ata.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedtaskactivity.Table, archivedtaskactivity.FieldID, id),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedtaskactivity.ActivityTypeTable, archivedtaskactivity.ActivityTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ata.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) QueryWorkspace(ata *ArchivedTaskActivity) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ata.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedtaskactivity.Table, archivedtaskactivity.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedtaskactivity.WorkspaceTable, archivedtaskactivity.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(ata.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchivedTaskActivityTasks queries the archivedTaskActivityTasks edge of a ArchivedTaskActivity.
func (c *ArchivedTaskActivityClient) QueryArchivedTaskActivityTasks(ata *ArchivedTaskActivity) *ArchivedTaskActivityTaskQuery {
	query := &ArchivedTaskActivityTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ata.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedtaskactivity.Table, archivedtaskactivity.FieldID, id),
			sqlgraph.To(archivedtaskactivitytask.Table, archivedtaskactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, archivedtaskactivity.ArchivedTaskActivityTasksTable, archivedtaskactivity.ArchivedTaskActivityTasksColumn),
		)
		fromV = sqlgraph.Neighbors(ata.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArchivedTaskActivityClient) Hooks() []Hook {
	return c.hooks.ArchivedTaskActivity
}

// ArchivedTaskActivityTaskClient is a client for the ArchivedTaskActivityTask schema.
type ArchivedTaskActivityTaskClient struct {
	config
}

// NewArchivedTaskActivityTaskClient returns a client for the ArchivedTaskActivityTask from the given config.
func NewArchivedTaskActivityTaskClient(c config) *ArchivedTaskActivityTaskClient {
	return &ArchivedTaskActivityTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `archivedtaskactivitytask.Hooks(f(g(h())))`.
func (c *ArchivedTaskActivityTaskClient) Use(hooks ...Hook) {
	c.hooks.ArchivedTaskActivityTask = append(c.hooks.ArchivedTaskActivityTask, hooks...)
}

// Create returns a create builder for ArchivedTaskActivityTask.
func (c *ArchivedTaskActivityTaskClient) Create() *ArchivedTaskActivityTaskCreate {
	mutation := newArchivedTaskActivityTaskMutation(c.config, OpCreate)
	return &ArchivedTaskActivityTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArchivedTaskActivityTask entities.
func (c *ArchivedTaskActivityTaskClient) CreateBulk(builders ...*ArchivedTaskActivityTaskCreate) *ArchivedTaskActivityTaskCreateBulk {
	return &ArchivedTaskActivityTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArchivedTaskActivityTask.
func (c *ArchivedTaskActivityTaskClient) Update() *ArchivedTaskActivityTaskUpdate {
	mutation := newArchivedTaskActivityTaskMutation(c.config, OpUpdate)
	return &ArchivedTaskActivityTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArchivedTaskActivityTaskClient) UpdateOne(atat *ArchivedTaskActivityTask) *ArchivedTaskActivityTaskUpdateOne {
	mutation := newArchivedTaskActivityTaskMutation(c.config, OpUpdateOne, withArchivedTaskActivityTask(atat))
	return &ArchivedTaskActivityTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArchivedTaskActivityTaskClient) UpdateOneID(id ulid.ID) *ArchivedTaskActivityTaskUpdateOne {
	mutation := newArchivedTaskActivityTaskMutation(c.config, OpUpdateOne, withArchivedTaskActivityTaskID(id))
	return &ArchivedTaskActivityTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArchivedTaskActivityTask.
func (c *ArchivedTaskActivityTaskClient) Delete() *ArchivedTaskActivityTaskDelete {
	mutation := newArchivedTaskActivityTaskMutation(c.config, OpDelete)
	return &ArchivedTaskActivityTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ArchivedTaskActivityTaskClient) DeleteOne(atat *ArchivedTaskActivityTask) *ArchivedTaskActivityTaskDeleteOne {
	return c.DeleteOneID(atat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ArchivedTaskActivityTaskClient) DeleteOneID(id ulid.ID) *ArchivedTaskActivityTaskDeleteOne {
	builder := c.Delete().Where(archivedtaskactivitytask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArchivedTaskActivityTaskDeleteOne{builder}
}

// Query returns a query builder for ArchivedTaskActivityTask.
func (c *ArchivedTaskActivityTaskClient) Query() *ArchivedTaskActivityTaskQuery {
	return &ArchivedTaskActivityTaskQuery{
		config: c.config,
	}
}

// Get returns a ArchivedTaskActivityTask entity by its id.
func (c *ArchivedTaskActivityTaskClient) Get(ctx context.Context, id ulid.ID) (*ArchivedTaskActivityTask, error) {
	return c.Query().Where(archivedtaskactivitytask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArchivedTaskActivityTaskClient) GetX(ctx context.Context, id ulid.ID) *ArchivedTaskActivityTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a ArchivedTaskActivityTask.
func (c *ArchivedTaskActivityTaskClient) QueryTask(atat *ArchivedTaskActivityTask) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := atat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedtaskactivitytask.Table, archivedtaskactivitytask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedtaskactivitytask.TaskTable, archivedtaskactivitytask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(atat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchivedTaskActivity queries the archivedTaskActivity edge of a ArchivedTaskActivityTask.
func (c *ArchivedTaskActivityTaskClient) QueryArchivedTaskActivity(atat *ArchivedTaskActivityTask) *ArchivedTaskActivityQuery {
	query := &ArchivedTaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := atat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedtaskactivitytask.Table, archivedtaskactivitytask.FieldID, id),
			sqlgraph.To(archivedtaskactivity.Table, archivedtaskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedtaskactivitytask.ArchivedTaskActivityTable, archivedtaskactivitytask.ArchivedTaskActivityColumn),
		)
		fromV = sqlgraph.Neighbors(atat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArchivedTaskActivityTaskClient) Hooks() []Hook {
	return c.hooks.ArchivedTaskActivityTask
}

// ColorClient is a client for the Color schema.
type ColorClient struct {
	config
}

// NewColorClient returns a client for the Color from the given config.
func NewColorClient(c config) *ColorClient {
	return &ColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `color.Hooks(f(g(h())))`.
func (c *ColorClient) Use(hooks ...Hook) {
	c.hooks.Color = append(c.hooks.Color, hooks...)
}

// Create returns a create builder for Color.
func (c *ColorClient) Create() *ColorCreate {
	mutation := newColorMutation(c.config, OpCreate)
	return &ColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Color entities.
func (c *ColorClient) CreateBulk(builders ...*ColorCreate) *ColorCreateBulk {
	return &ColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Color.
func (c *ColorClient) Update() *ColorUpdate {
	mutation := newColorMutation(c.config, OpUpdate)
	return &ColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ColorClient) UpdateOne(co *Color) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColor(co))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ColorClient) UpdateOneID(id ulid.ID) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColorID(id))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Color.
func (c *ColorClient) Delete() *ColorDelete {
	mutation := newColorMutation(c.config, OpDelete)
	return &ColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ColorClient) DeleteOne(co *Color) *ColorDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ColorClient) DeleteOneID(id ulid.ID) *ColorDeleteOne {
	builder := c.Delete().Where(color.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ColorDeleteOne{builder}
}

// Query returns a query builder for Color.
func (c *ColorClient) Query() *ColorQuery {
	return &ColorQuery{
		config: c.config,
	}
}

// Get returns a Color entity by its id.
func (c *ColorClient) Get(ctx context.Context, id ulid.ID) (*Color, error) {
	return c.Query().Where(color.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ColorClient) GetX(ctx context.Context, id ulid.ID) *Color {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectBaseColors queries the projectBaseColors edge of a Color.
func (c *ColorClient) QueryProjectBaseColors(co *Color) *ProjectBaseColorQuery {
	query := &ProjectBaseColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(projectbasecolor.Table, projectbasecolor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.ProjectBaseColorsTable, color.ProjectBaseColorsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLightColors queries the projectLightColors edge of a Color.
func (c *ColorClient) QueryProjectLightColors(co *Color) *ProjectLightColorQuery {
	query := &ProjectLightColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(projectlightcolor.Table, projectlightcolor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.ProjectLightColorsTable, color.ProjectLightColorsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskPriorities queries the taskPriorities edge of a Color.
func (c *ColorClient) QueryTaskPriorities(co *Color) *TaskPriorityQuery {
	query := &TaskPriorityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(taskpriority.Table, taskpriority.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.TaskPrioritiesTable, color.TaskPrioritiesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Color.
func (c *ColorClient) QueryTags(co *Color) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.TagsTable, color.TagsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ColorClient) Hooks() []Hook {
	return c.hooks.Color
}

// DeletedTaskClient is a client for the DeletedTask schema.
type DeletedTaskClient struct {
	config
}

// NewDeletedTaskClient returns a client for the DeletedTask from the given config.
func NewDeletedTaskClient(c config) *DeletedTaskClient {
	return &DeletedTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deletedtask.Hooks(f(g(h())))`.
func (c *DeletedTaskClient) Use(hooks ...Hook) {
	c.hooks.DeletedTask = append(c.hooks.DeletedTask, hooks...)
}

// Create returns a create builder for DeletedTask.
func (c *DeletedTaskClient) Create() *DeletedTaskCreate {
	mutation := newDeletedTaskMutation(c.config, OpCreate)
	return &DeletedTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeletedTask entities.
func (c *DeletedTaskClient) CreateBulk(builders ...*DeletedTaskCreate) *DeletedTaskCreateBulk {
	return &DeletedTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeletedTask.
func (c *DeletedTaskClient) Update() *DeletedTaskUpdate {
	mutation := newDeletedTaskMutation(c.config, OpUpdate)
	return &DeletedTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeletedTaskClient) UpdateOne(dt *DeletedTask) *DeletedTaskUpdateOne {
	mutation := newDeletedTaskMutation(c.config, OpUpdateOne, withDeletedTask(dt))
	return &DeletedTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeletedTaskClient) UpdateOneID(id ulid.ID) *DeletedTaskUpdateOne {
	mutation := newDeletedTaskMutation(c.config, OpUpdateOne, withDeletedTaskID(id))
	return &DeletedTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeletedTask.
func (c *DeletedTaskClient) Delete() *DeletedTaskDelete {
	mutation := newDeletedTaskMutation(c.config, OpDelete)
	return &DeletedTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeletedTaskClient) DeleteOne(dt *DeletedTask) *DeletedTaskDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeletedTaskClient) DeleteOneID(id ulid.ID) *DeletedTaskDeleteOne {
	builder := c.Delete().Where(deletedtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeletedTaskDeleteOne{builder}
}

// Query returns a query builder for DeletedTask.
func (c *DeletedTaskClient) Query() *DeletedTaskQuery {
	return &DeletedTaskQuery{
		config: c.config,
	}
}

// Get returns a DeletedTask entity by its id.
func (c *DeletedTaskClient) Get(ctx context.Context, id ulid.ID) (*DeletedTask, error) {
	return c.Query().Where(deletedtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeletedTaskClient) GetX(ctx context.Context, id ulid.ID) *DeletedTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a DeletedTask.
func (c *DeletedTaskClient) QueryTask(dt *DeletedTask) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deletedtask.Table, deletedtask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deletedtask.TaskTable, deletedtask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a DeletedTask.
func (c *DeletedTaskClient) QueryWorkspace(dt *DeletedTask) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deletedtask.Table, deletedtask.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deletedtask.WorkspaceTable, deletedtask.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(dt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeletedTaskClient) Hooks() []Hook {
	return c.hooks.DeletedTask
}

// FavoriteProjectClient is a client for the FavoriteProject schema.
type FavoriteProjectClient struct {
	config
}

// NewFavoriteProjectClient returns a client for the FavoriteProject from the given config.
func NewFavoriteProjectClient(c config) *FavoriteProjectClient {
	return &FavoriteProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `favoriteproject.Hooks(f(g(h())))`.
func (c *FavoriteProjectClient) Use(hooks ...Hook) {
	c.hooks.FavoriteProject = append(c.hooks.FavoriteProject, hooks...)
}

// Create returns a create builder for FavoriteProject.
func (c *FavoriteProjectClient) Create() *FavoriteProjectCreate {
	mutation := newFavoriteProjectMutation(c.config, OpCreate)
	return &FavoriteProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FavoriteProject entities.
func (c *FavoriteProjectClient) CreateBulk(builders ...*FavoriteProjectCreate) *FavoriteProjectCreateBulk {
	return &FavoriteProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FavoriteProject.
func (c *FavoriteProjectClient) Update() *FavoriteProjectUpdate {
	mutation := newFavoriteProjectMutation(c.config, OpUpdate)
	return &FavoriteProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FavoriteProjectClient) UpdateOne(fp *FavoriteProject) *FavoriteProjectUpdateOne {
	mutation := newFavoriteProjectMutation(c.config, OpUpdateOne, withFavoriteProject(fp))
	return &FavoriteProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FavoriteProjectClient) UpdateOneID(id ulid.ID) *FavoriteProjectUpdateOne {
	mutation := newFavoriteProjectMutation(c.config, OpUpdateOne, withFavoriteProjectID(id))
	return &FavoriteProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FavoriteProject.
func (c *FavoriteProjectClient) Delete() *FavoriteProjectDelete {
	mutation := newFavoriteProjectMutation(c.config, OpDelete)
	return &FavoriteProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FavoriteProjectClient) DeleteOne(fp *FavoriteProject) *FavoriteProjectDeleteOne {
	return c.DeleteOneID(fp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FavoriteProjectClient) DeleteOneID(id ulid.ID) *FavoriteProjectDeleteOne {
	builder := c.Delete().Where(favoriteproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FavoriteProjectDeleteOne{builder}
}

// Query returns a query builder for FavoriteProject.
func (c *FavoriteProjectClient) Query() *FavoriteProjectQuery {
	return &FavoriteProjectQuery{
		config: c.config,
	}
}

// Get returns a FavoriteProject entity by its id.
func (c *FavoriteProjectClient) Get(ctx context.Context, id ulid.ID) (*FavoriteProject, error) {
	return c.Query().Where(favoriteproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FavoriteProjectClient) GetX(ctx context.Context, id ulid.ID) *FavoriteProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a FavoriteProject.
func (c *FavoriteProjectClient) QueryProject(fp *FavoriteProject) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteproject.Table, favoriteproject.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteproject.ProjectTable, favoriteproject.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a FavoriteProject.
func (c *FavoriteProjectClient) QueryTeammate(fp *FavoriteProject) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteproject.Table, favoriteproject.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteproject.TeammateTable, favoriteproject.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FavoriteProjectClient) Hooks() []Hook {
	return c.hooks.FavoriteProject
}

// FavoriteWorkspaceClient is a client for the FavoriteWorkspace schema.
type FavoriteWorkspaceClient struct {
	config
}

// NewFavoriteWorkspaceClient returns a client for the FavoriteWorkspace from the given config.
func NewFavoriteWorkspaceClient(c config) *FavoriteWorkspaceClient {
	return &FavoriteWorkspaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `favoriteworkspace.Hooks(f(g(h())))`.
func (c *FavoriteWorkspaceClient) Use(hooks ...Hook) {
	c.hooks.FavoriteWorkspace = append(c.hooks.FavoriteWorkspace, hooks...)
}

// Create returns a create builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Create() *FavoriteWorkspaceCreate {
	mutation := newFavoriteWorkspaceMutation(c.config, OpCreate)
	return &FavoriteWorkspaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FavoriteWorkspace entities.
func (c *FavoriteWorkspaceClient) CreateBulk(builders ...*FavoriteWorkspaceCreate) *FavoriteWorkspaceCreateBulk {
	return &FavoriteWorkspaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Update() *FavoriteWorkspaceUpdate {
	mutation := newFavoriteWorkspaceMutation(c.config, OpUpdate)
	return &FavoriteWorkspaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FavoriteWorkspaceClient) UpdateOne(fw *FavoriteWorkspace) *FavoriteWorkspaceUpdateOne {
	mutation := newFavoriteWorkspaceMutation(c.config, OpUpdateOne, withFavoriteWorkspace(fw))
	return &FavoriteWorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FavoriteWorkspaceClient) UpdateOneID(id ulid.ID) *FavoriteWorkspaceUpdateOne {
	mutation := newFavoriteWorkspaceMutation(c.config, OpUpdateOne, withFavoriteWorkspaceID(id))
	return &FavoriteWorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Delete() *FavoriteWorkspaceDelete {
	mutation := newFavoriteWorkspaceMutation(c.config, OpDelete)
	return &FavoriteWorkspaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FavoriteWorkspaceClient) DeleteOne(fw *FavoriteWorkspace) *FavoriteWorkspaceDeleteOne {
	return c.DeleteOneID(fw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FavoriteWorkspaceClient) DeleteOneID(id ulid.ID) *FavoriteWorkspaceDeleteOne {
	builder := c.Delete().Where(favoriteworkspace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FavoriteWorkspaceDeleteOne{builder}
}

// Query returns a query builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Query() *FavoriteWorkspaceQuery {
	return &FavoriteWorkspaceQuery{
		config: c.config,
	}
}

// Get returns a FavoriteWorkspace entity by its id.
func (c *FavoriteWorkspaceClient) Get(ctx context.Context, id ulid.ID) (*FavoriteWorkspace, error) {
	return c.Query().Where(favoriteworkspace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FavoriteWorkspaceClient) GetX(ctx context.Context, id ulid.ID) *FavoriteWorkspace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) QueryWorkspace(fw *FavoriteWorkspace) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteworkspace.Table, favoriteworkspace.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteworkspace.WorkspaceTable, favoriteworkspace.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(fw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) QueryTeammate(fw *FavoriteWorkspace) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteworkspace.Table, favoriteworkspace.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteworkspace.TeammateTable, favoriteworkspace.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(fw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FavoriteWorkspaceClient) Hooks() []Hook {
	return c.hooks.FavoriteWorkspace
}

// FileTypeClient is a client for the FileType schema.
type FileTypeClient struct {
	config
}

// NewFileTypeClient returns a client for the FileType from the given config.
func NewFileTypeClient(c config) *FileTypeClient {
	return &FileTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `filetype.Hooks(f(g(h())))`.
func (c *FileTypeClient) Use(hooks ...Hook) {
	c.hooks.FileType = append(c.hooks.FileType, hooks...)
}

// Create returns a create builder for FileType.
func (c *FileTypeClient) Create() *FileTypeCreate {
	mutation := newFileTypeMutation(c.config, OpCreate)
	return &FileTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FileType entities.
func (c *FileTypeClient) CreateBulk(builders ...*FileTypeCreate) *FileTypeCreateBulk {
	return &FileTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FileType.
func (c *FileTypeClient) Update() *FileTypeUpdate {
	mutation := newFileTypeMutation(c.config, OpUpdate)
	return &FileTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileTypeClient) UpdateOne(ft *FileType) *FileTypeUpdateOne {
	mutation := newFileTypeMutation(c.config, OpUpdateOne, withFileType(ft))
	return &FileTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileTypeClient) UpdateOneID(id ulid.ID) *FileTypeUpdateOne {
	mutation := newFileTypeMutation(c.config, OpUpdateOne, withFileTypeID(id))
	return &FileTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FileType.
func (c *FileTypeClient) Delete() *FileTypeDelete {
	mutation := newFileTypeMutation(c.config, OpDelete)
	return &FileTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileTypeClient) DeleteOne(ft *FileType) *FileTypeDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileTypeClient) DeleteOneID(id ulid.ID) *FileTypeDeleteOne {
	builder := c.Delete().Where(filetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileTypeDeleteOne{builder}
}

// Query returns a query builder for FileType.
func (c *FileTypeClient) Query() *FileTypeQuery {
	return &FileTypeQuery{
		config: c.config,
	}
}

// Get returns a FileType entity by its id.
func (c *FileTypeClient) Get(ctx context.Context, id ulid.ID) (*FileType, error) {
	return c.Query().Where(filetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileTypeClient) GetX(ctx context.Context, id ulid.ID) *FileType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTaskFiles queries the taskFiles edge of a FileType.
func (c *FileTypeClient) QueryTaskFiles(ft *FileType) *TaskFileQuery {
	query := &TaskFileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filetype.Table, filetype.FieldID, id),
			sqlgraph.To(taskfile.Table, taskfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, filetype.TaskFilesTable, filetype.TaskFilesColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileTypeClient) Hooks() []Hook {
	return c.hooks.FileType
}

// IconClient is a client for the Icon schema.
type IconClient struct {
	config
}

// NewIconClient returns a client for the Icon from the given config.
func NewIconClient(c config) *IconClient {
	return &IconClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `icon.Hooks(f(g(h())))`.
func (c *IconClient) Use(hooks ...Hook) {
	c.hooks.Icon = append(c.hooks.Icon, hooks...)
}

// Create returns a create builder for Icon.
func (c *IconClient) Create() *IconCreate {
	mutation := newIconMutation(c.config, OpCreate)
	return &IconCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Icon entities.
func (c *IconClient) CreateBulk(builders ...*IconCreate) *IconCreateBulk {
	return &IconCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Icon.
func (c *IconClient) Update() *IconUpdate {
	mutation := newIconMutation(c.config, OpUpdate)
	return &IconUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IconClient) UpdateOne(i *Icon) *IconUpdateOne {
	mutation := newIconMutation(c.config, OpUpdateOne, withIcon(i))
	return &IconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IconClient) UpdateOneID(id ulid.ID) *IconUpdateOne {
	mutation := newIconMutation(c.config, OpUpdateOne, withIconID(id))
	return &IconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Icon.
func (c *IconClient) Delete() *IconDelete {
	mutation := newIconMutation(c.config, OpDelete)
	return &IconDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IconClient) DeleteOne(i *Icon) *IconDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IconClient) DeleteOneID(id ulid.ID) *IconDeleteOne {
	builder := c.Delete().Where(icon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IconDeleteOne{builder}
}

// Query returns a query builder for Icon.
func (c *IconClient) Query() *IconQuery {
	return &IconQuery{
		config: c.config,
	}
}

// Get returns a Icon entity by its id.
func (c *IconClient) Get(ctx context.Context, id ulid.ID) (*Icon, error) {
	return c.Query().Where(icon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IconClient) GetX(ctx context.Context, id ulid.ID) *Icon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectIcons queries the projectIcons edge of a Icon.
func (c *IconClient) QueryProjectIcons(i *Icon) *ProjectIconQuery {
	query := &ProjectIconQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(icon.Table, icon.FieldID, id),
			sqlgraph.To(projecticon.Table, projecticon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, icon.ProjectIconsTable, icon.ProjectIconsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IconClient) Hooks() []Hook {
	return c.hooks.Icon
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id ulid.ID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id ulid.ID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id ulid.ID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id ulid.ID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a Project.
func (c *ProjectClient) QueryWorkspace(pr *Project) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.WorkspaceTable, project.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectBaseColor queries the projectBaseColor edge of a Project.
func (c *ProjectClient) QueryProjectBaseColor(pr *Project) *ProjectBaseColorQuery {
	query := &ProjectBaseColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectbasecolor.Table, projectbasecolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.ProjectBaseColorTable, project.ProjectBaseColorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLightColor queries the projectLightColor edge of a Project.
func (c *ProjectClient) QueryProjectLightColor(pr *Project) *ProjectLightColorQuery {
	query := &ProjectLightColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectlightcolor.Table, projectlightcolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.ProjectLightColorTable, project.ProjectLightColorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectIcon queries the projectIcon edge of a Project.
func (c *ProjectClient) QueryProjectIcon(pr *Project) *ProjectIconQuery {
	query := &ProjectIconQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecticon.Table, projecticon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.ProjectIconTable, project.ProjectIconColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a Project.
func (c *ProjectClient) QueryTeammate(pr *Project) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.TeammateTable, project.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTeammates queries the projectTeammates edge of a Project.
func (c *ProjectClient) QueryProjectTeammates(pr *Project) *ProjectTeammateQuery {
	query := &ProjectTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectteammate.Table, projectteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectTeammatesTable, project.ProjectTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteProjects queries the favoriteProjects edge of a Project.
func (c *ProjectClient) QueryFavoriteProjects(pr *Project) *FavoriteProjectQuery {
	query := &FavoriteProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(favoriteproject.Table, favoriteproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.FavoriteProjectsTable, project.FavoriteProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTaskColumns queries the projectTaskColumns edge of a Project.
func (c *ProjectClient) QueryProjectTaskColumns(pr *Project) *ProjectTaskColumnQuery {
	query := &ProjectTaskColumnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttaskcolumn.Table, projecttaskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectTaskColumnsTable, project.ProjectTaskColumnsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTaskListStatuses queries the projectTaskListStatuses edge of a Project.
func (c *ProjectClient) QueryProjectTaskListStatuses(pr *Project) *ProjectTaskListStatusQuery {
	query := &ProjectTaskListStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttaskliststatus.Table, projecttaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectTaskListStatusesTable, project.ProjectTaskListStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTaskSections queries the projectTaskSections edge of a Project.
func (c *ProjectClient) QueryProjectTaskSections(pr *Project) *ProjectTaskSectionQuery {
	query := &ProjectTaskSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttasksection.Table, projecttasksection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectTaskSectionsTable, project.ProjectTaskSectionsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTasks queries the projectTasks edge of a Project.
func (c *ProjectClient) QueryProjectTasks(pr *Project) *ProjectTaskQuery {
	query := &ProjectTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectTasksTable, project.ProjectTasksColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFiles queries the taskFiles edge of a Project.
func (c *ProjectClient) QueryTaskFiles(pr *Project) *TaskFileQuery {
	query := &TaskFileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(taskfile.Table, taskfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TaskFilesTable, project.TaskFilesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceActivities queries the workspaceActivities edge of a Project.
func (c *ProjectClient) QueryWorkspaceActivities(pr *Project) *WorkspaceActivityQuery {
	query := &WorkspaceActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(workspaceactivity.Table, workspaceactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkspaceActivitiesTable, project.WorkspaceActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// ProjectBaseColorClient is a client for the ProjectBaseColor schema.
type ProjectBaseColorClient struct {
	config
}

// NewProjectBaseColorClient returns a client for the ProjectBaseColor from the given config.
func NewProjectBaseColorClient(c config) *ProjectBaseColorClient {
	return &ProjectBaseColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectbasecolor.Hooks(f(g(h())))`.
func (c *ProjectBaseColorClient) Use(hooks ...Hook) {
	c.hooks.ProjectBaseColor = append(c.hooks.ProjectBaseColor, hooks...)
}

// Create returns a create builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Create() *ProjectBaseColorCreate {
	mutation := newProjectBaseColorMutation(c.config, OpCreate)
	return &ProjectBaseColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectBaseColor entities.
func (c *ProjectBaseColorClient) CreateBulk(builders ...*ProjectBaseColorCreate) *ProjectBaseColorCreateBulk {
	return &ProjectBaseColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Update() *ProjectBaseColorUpdate {
	mutation := newProjectBaseColorMutation(c.config, OpUpdate)
	return &ProjectBaseColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectBaseColorClient) UpdateOne(pbc *ProjectBaseColor) *ProjectBaseColorUpdateOne {
	mutation := newProjectBaseColorMutation(c.config, OpUpdateOne, withProjectBaseColor(pbc))
	return &ProjectBaseColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectBaseColorClient) UpdateOneID(id ulid.ID) *ProjectBaseColorUpdateOne {
	mutation := newProjectBaseColorMutation(c.config, OpUpdateOne, withProjectBaseColorID(id))
	return &ProjectBaseColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Delete() *ProjectBaseColorDelete {
	mutation := newProjectBaseColorMutation(c.config, OpDelete)
	return &ProjectBaseColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectBaseColorClient) DeleteOne(pbc *ProjectBaseColor) *ProjectBaseColorDeleteOne {
	return c.DeleteOneID(pbc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectBaseColorClient) DeleteOneID(id ulid.ID) *ProjectBaseColorDeleteOne {
	builder := c.Delete().Where(projectbasecolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectBaseColorDeleteOne{builder}
}

// Query returns a query builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Query() *ProjectBaseColorQuery {
	return &ProjectBaseColorQuery{
		config: c.config,
	}
}

// Get returns a ProjectBaseColor entity by its id.
func (c *ProjectBaseColorClient) Get(ctx context.Context, id ulid.ID) (*ProjectBaseColor, error) {
	return c.Query().Where(projectbasecolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectBaseColorClient) GetX(ctx context.Context, id ulid.ID) *ProjectBaseColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a ProjectBaseColor.
func (c *ProjectBaseColorClient) QueryProjects(pbc *ProjectBaseColor) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pbc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectbasecolor.Table, projectbasecolor.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectbasecolor.ProjectsTable, projectbasecolor.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(pbc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColor queries the color edge of a ProjectBaseColor.
func (c *ProjectBaseColorClient) QueryColor(pbc *ProjectBaseColor) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pbc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectbasecolor.Table, projectbasecolor.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectbasecolor.ColorTable, projectbasecolor.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(pbc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectBaseColorClient) Hooks() []Hook {
	return c.hooks.ProjectBaseColor
}

// ProjectIconClient is a client for the ProjectIcon schema.
type ProjectIconClient struct {
	config
}

// NewProjectIconClient returns a client for the ProjectIcon from the given config.
func NewProjectIconClient(c config) *ProjectIconClient {
	return &ProjectIconClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecticon.Hooks(f(g(h())))`.
func (c *ProjectIconClient) Use(hooks ...Hook) {
	c.hooks.ProjectIcon = append(c.hooks.ProjectIcon, hooks...)
}

// Create returns a create builder for ProjectIcon.
func (c *ProjectIconClient) Create() *ProjectIconCreate {
	mutation := newProjectIconMutation(c.config, OpCreate)
	return &ProjectIconCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectIcon entities.
func (c *ProjectIconClient) CreateBulk(builders ...*ProjectIconCreate) *ProjectIconCreateBulk {
	return &ProjectIconCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectIcon.
func (c *ProjectIconClient) Update() *ProjectIconUpdate {
	mutation := newProjectIconMutation(c.config, OpUpdate)
	return &ProjectIconUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectIconClient) UpdateOne(pi *ProjectIcon) *ProjectIconUpdateOne {
	mutation := newProjectIconMutation(c.config, OpUpdateOne, withProjectIcon(pi))
	return &ProjectIconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectIconClient) UpdateOneID(id ulid.ID) *ProjectIconUpdateOne {
	mutation := newProjectIconMutation(c.config, OpUpdateOne, withProjectIconID(id))
	return &ProjectIconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectIcon.
func (c *ProjectIconClient) Delete() *ProjectIconDelete {
	mutation := newProjectIconMutation(c.config, OpDelete)
	return &ProjectIconDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectIconClient) DeleteOne(pi *ProjectIcon) *ProjectIconDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectIconClient) DeleteOneID(id ulid.ID) *ProjectIconDeleteOne {
	builder := c.Delete().Where(projecticon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectIconDeleteOne{builder}
}

// Query returns a query builder for ProjectIcon.
func (c *ProjectIconClient) Query() *ProjectIconQuery {
	return &ProjectIconQuery{
		config: c.config,
	}
}

// Get returns a ProjectIcon entity by its id.
func (c *ProjectIconClient) Get(ctx context.Context, id ulid.ID) (*ProjectIcon, error) {
	return c.Query().Where(projecticon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectIconClient) GetX(ctx context.Context, id ulid.ID) *ProjectIcon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a ProjectIcon.
func (c *ProjectIconClient) QueryProjects(pi *ProjectIcon) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecticon.Table, projecticon.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecticon.ProjectsTable, projecticon.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIcon queries the icon edge of a ProjectIcon.
func (c *ProjectIconClient) QueryIcon(pi *ProjectIcon) *IconQuery {
	query := &IconQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecticon.Table, projecticon.FieldID, id),
			sqlgraph.To(icon.Table, icon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecticon.IconTable, projecticon.IconColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectIconClient) Hooks() []Hook {
	return c.hooks.ProjectIcon
}

// ProjectLightColorClient is a client for the ProjectLightColor schema.
type ProjectLightColorClient struct {
	config
}

// NewProjectLightColorClient returns a client for the ProjectLightColor from the given config.
func NewProjectLightColorClient(c config) *ProjectLightColorClient {
	return &ProjectLightColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectlightcolor.Hooks(f(g(h())))`.
func (c *ProjectLightColorClient) Use(hooks ...Hook) {
	c.hooks.ProjectLightColor = append(c.hooks.ProjectLightColor, hooks...)
}

// Create returns a create builder for ProjectLightColor.
func (c *ProjectLightColorClient) Create() *ProjectLightColorCreate {
	mutation := newProjectLightColorMutation(c.config, OpCreate)
	return &ProjectLightColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectLightColor entities.
func (c *ProjectLightColorClient) CreateBulk(builders ...*ProjectLightColorCreate) *ProjectLightColorCreateBulk {
	return &ProjectLightColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectLightColor.
func (c *ProjectLightColorClient) Update() *ProjectLightColorUpdate {
	mutation := newProjectLightColorMutation(c.config, OpUpdate)
	return &ProjectLightColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectLightColorClient) UpdateOne(plc *ProjectLightColor) *ProjectLightColorUpdateOne {
	mutation := newProjectLightColorMutation(c.config, OpUpdateOne, withProjectLightColor(plc))
	return &ProjectLightColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectLightColorClient) UpdateOneID(id ulid.ID) *ProjectLightColorUpdateOne {
	mutation := newProjectLightColorMutation(c.config, OpUpdateOne, withProjectLightColorID(id))
	return &ProjectLightColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectLightColor.
func (c *ProjectLightColorClient) Delete() *ProjectLightColorDelete {
	mutation := newProjectLightColorMutation(c.config, OpDelete)
	return &ProjectLightColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectLightColorClient) DeleteOne(plc *ProjectLightColor) *ProjectLightColorDeleteOne {
	return c.DeleteOneID(plc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectLightColorClient) DeleteOneID(id ulid.ID) *ProjectLightColorDeleteOne {
	builder := c.Delete().Where(projectlightcolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectLightColorDeleteOne{builder}
}

// Query returns a query builder for ProjectLightColor.
func (c *ProjectLightColorClient) Query() *ProjectLightColorQuery {
	return &ProjectLightColorQuery{
		config: c.config,
	}
}

// Get returns a ProjectLightColor entity by its id.
func (c *ProjectLightColorClient) Get(ctx context.Context, id ulid.ID) (*ProjectLightColor, error) {
	return c.Query().Where(projectlightcolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectLightColorClient) GetX(ctx context.Context, id ulid.ID) *ProjectLightColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a ProjectLightColor.
func (c *ProjectLightColorClient) QueryProjects(plc *ProjectLightColor) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := plc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlightcolor.Table, projectlightcolor.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectlightcolor.ProjectsTable, projectlightcolor.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(plc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColor queries the color edge of a ProjectLightColor.
func (c *ProjectLightColorClient) QueryColor(plc *ProjectLightColor) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := plc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlightcolor.Table, projectlightcolor.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlightcolor.ColorTable, projectlightcolor.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(plc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectLightColorClient) Hooks() []Hook {
	return c.hooks.ProjectLightColor
}

// ProjectTaskClient is a client for the ProjectTask schema.
type ProjectTaskClient struct {
	config
}

// NewProjectTaskClient returns a client for the ProjectTask from the given config.
func NewProjectTaskClient(c config) *ProjectTaskClient {
	return &ProjectTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttask.Hooks(f(g(h())))`.
func (c *ProjectTaskClient) Use(hooks ...Hook) {
	c.hooks.ProjectTask = append(c.hooks.ProjectTask, hooks...)
}

// Create returns a create builder for ProjectTask.
func (c *ProjectTaskClient) Create() *ProjectTaskCreate {
	mutation := newProjectTaskMutation(c.config, OpCreate)
	return &ProjectTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTask entities.
func (c *ProjectTaskClient) CreateBulk(builders ...*ProjectTaskCreate) *ProjectTaskCreateBulk {
	return &ProjectTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTask.
func (c *ProjectTaskClient) Update() *ProjectTaskUpdate {
	mutation := newProjectTaskMutation(c.config, OpUpdate)
	return &ProjectTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTaskClient) UpdateOne(pt *ProjectTask) *ProjectTaskUpdateOne {
	mutation := newProjectTaskMutation(c.config, OpUpdateOne, withProjectTask(pt))
	return &ProjectTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTaskClient) UpdateOneID(id ulid.ID) *ProjectTaskUpdateOne {
	mutation := newProjectTaskMutation(c.config, OpUpdateOne, withProjectTaskID(id))
	return &ProjectTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTask.
func (c *ProjectTaskClient) Delete() *ProjectTaskDelete {
	mutation := newProjectTaskMutation(c.config, OpDelete)
	return &ProjectTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTaskClient) DeleteOne(pt *ProjectTask) *ProjectTaskDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTaskClient) DeleteOneID(id ulid.ID) *ProjectTaskDeleteOne {
	builder := c.Delete().Where(projecttask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTaskDeleteOne{builder}
}

// Query returns a query builder for ProjectTask.
func (c *ProjectTaskClient) Query() *ProjectTaskQuery {
	return &ProjectTaskQuery{
		config: c.config,
	}
}

// Get returns a ProjectTask entity by its id.
func (c *ProjectTaskClient) Get(ctx context.Context, id ulid.ID) (*ProjectTask, error) {
	return c.Query().Where(projecttask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTaskClient) GetX(ctx context.Context, id ulid.ID) *ProjectTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTask.
func (c *ProjectTaskClient) QueryProject(pt *ProjectTask) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttask.Table, projecttask.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttask.ProjectTable, projecttask.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a ProjectTask.
func (c *ProjectTaskClient) QueryTask(pt *ProjectTask) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttask.Table, projecttask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttask.TaskTable, projecttask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTaskSection queries the projectTaskSection edge of a ProjectTask.
func (c *ProjectTaskClient) QueryProjectTaskSection(pt *ProjectTask) *ProjectTaskSectionQuery {
	query := &ProjectTaskSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttask.Table, projecttask.FieldID, id),
			sqlgraph.To(projecttasksection.Table, projecttasksection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttask.ProjectTaskSectionTable, projecttask.ProjectTaskSectionColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTaskClient) Hooks() []Hook {
	return c.hooks.ProjectTask
}

// ProjectTaskColumnClient is a client for the ProjectTaskColumn schema.
type ProjectTaskColumnClient struct {
	config
}

// NewProjectTaskColumnClient returns a client for the ProjectTaskColumn from the given config.
func NewProjectTaskColumnClient(c config) *ProjectTaskColumnClient {
	return &ProjectTaskColumnClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttaskcolumn.Hooks(f(g(h())))`.
func (c *ProjectTaskColumnClient) Use(hooks ...Hook) {
	c.hooks.ProjectTaskColumn = append(c.hooks.ProjectTaskColumn, hooks...)
}

// Create returns a create builder for ProjectTaskColumn.
func (c *ProjectTaskColumnClient) Create() *ProjectTaskColumnCreate {
	mutation := newProjectTaskColumnMutation(c.config, OpCreate)
	return &ProjectTaskColumnCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTaskColumn entities.
func (c *ProjectTaskColumnClient) CreateBulk(builders ...*ProjectTaskColumnCreate) *ProjectTaskColumnCreateBulk {
	return &ProjectTaskColumnCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTaskColumn.
func (c *ProjectTaskColumnClient) Update() *ProjectTaskColumnUpdate {
	mutation := newProjectTaskColumnMutation(c.config, OpUpdate)
	return &ProjectTaskColumnUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTaskColumnClient) UpdateOne(ptc *ProjectTaskColumn) *ProjectTaskColumnUpdateOne {
	mutation := newProjectTaskColumnMutation(c.config, OpUpdateOne, withProjectTaskColumn(ptc))
	return &ProjectTaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTaskColumnClient) UpdateOneID(id ulid.ID) *ProjectTaskColumnUpdateOne {
	mutation := newProjectTaskColumnMutation(c.config, OpUpdateOne, withProjectTaskColumnID(id))
	return &ProjectTaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTaskColumn.
func (c *ProjectTaskColumnClient) Delete() *ProjectTaskColumnDelete {
	mutation := newProjectTaskColumnMutation(c.config, OpDelete)
	return &ProjectTaskColumnDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTaskColumnClient) DeleteOne(ptc *ProjectTaskColumn) *ProjectTaskColumnDeleteOne {
	return c.DeleteOneID(ptc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTaskColumnClient) DeleteOneID(id ulid.ID) *ProjectTaskColumnDeleteOne {
	builder := c.Delete().Where(projecttaskcolumn.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTaskColumnDeleteOne{builder}
}

// Query returns a query builder for ProjectTaskColumn.
func (c *ProjectTaskColumnClient) Query() *ProjectTaskColumnQuery {
	return &ProjectTaskColumnQuery{
		config: c.config,
	}
}

// Get returns a ProjectTaskColumn entity by its id.
func (c *ProjectTaskColumnClient) Get(ctx context.Context, id ulid.ID) (*ProjectTaskColumn, error) {
	return c.Query().Where(projecttaskcolumn.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTaskColumnClient) GetX(ctx context.Context, id ulid.ID) *ProjectTaskColumn {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTaskColumn.
func (c *ProjectTaskColumnClient) QueryProject(ptc *ProjectTaskColumn) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ptc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttaskcolumn.Table, projecttaskcolumn.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttaskcolumn.ProjectTable, projecttaskcolumn.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(ptc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskColumn queries the taskColumn edge of a ProjectTaskColumn.
func (c *ProjectTaskColumnClient) QueryTaskColumn(ptc *ProjectTaskColumn) *TaskColumnQuery {
	query := &TaskColumnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ptc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttaskcolumn.Table, projecttaskcolumn.FieldID, id),
			sqlgraph.To(taskcolumn.Table, taskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttaskcolumn.TaskColumnTable, projecttaskcolumn.TaskColumnColumn),
		)
		fromV = sqlgraph.Neighbors(ptc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTaskColumnClient) Hooks() []Hook {
	return c.hooks.ProjectTaskColumn
}

// ProjectTaskListStatusClient is a client for the ProjectTaskListStatus schema.
type ProjectTaskListStatusClient struct {
	config
}

// NewProjectTaskListStatusClient returns a client for the ProjectTaskListStatus from the given config.
func NewProjectTaskListStatusClient(c config) *ProjectTaskListStatusClient {
	return &ProjectTaskListStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttaskliststatus.Hooks(f(g(h())))`.
func (c *ProjectTaskListStatusClient) Use(hooks ...Hook) {
	c.hooks.ProjectTaskListStatus = append(c.hooks.ProjectTaskListStatus, hooks...)
}

// Create returns a create builder for ProjectTaskListStatus.
func (c *ProjectTaskListStatusClient) Create() *ProjectTaskListStatusCreate {
	mutation := newProjectTaskListStatusMutation(c.config, OpCreate)
	return &ProjectTaskListStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTaskListStatus entities.
func (c *ProjectTaskListStatusClient) CreateBulk(builders ...*ProjectTaskListStatusCreate) *ProjectTaskListStatusCreateBulk {
	return &ProjectTaskListStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTaskListStatus.
func (c *ProjectTaskListStatusClient) Update() *ProjectTaskListStatusUpdate {
	mutation := newProjectTaskListStatusMutation(c.config, OpUpdate)
	return &ProjectTaskListStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTaskListStatusClient) UpdateOne(ptls *ProjectTaskListStatus) *ProjectTaskListStatusUpdateOne {
	mutation := newProjectTaskListStatusMutation(c.config, OpUpdateOne, withProjectTaskListStatus(ptls))
	return &ProjectTaskListStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTaskListStatusClient) UpdateOneID(id ulid.ID) *ProjectTaskListStatusUpdateOne {
	mutation := newProjectTaskListStatusMutation(c.config, OpUpdateOne, withProjectTaskListStatusID(id))
	return &ProjectTaskListStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTaskListStatus.
func (c *ProjectTaskListStatusClient) Delete() *ProjectTaskListStatusDelete {
	mutation := newProjectTaskListStatusMutation(c.config, OpDelete)
	return &ProjectTaskListStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTaskListStatusClient) DeleteOne(ptls *ProjectTaskListStatus) *ProjectTaskListStatusDeleteOne {
	return c.DeleteOneID(ptls.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTaskListStatusClient) DeleteOneID(id ulid.ID) *ProjectTaskListStatusDeleteOne {
	builder := c.Delete().Where(projecttaskliststatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTaskListStatusDeleteOne{builder}
}

// Query returns a query builder for ProjectTaskListStatus.
func (c *ProjectTaskListStatusClient) Query() *ProjectTaskListStatusQuery {
	return &ProjectTaskListStatusQuery{
		config: c.config,
	}
}

// Get returns a ProjectTaskListStatus entity by its id.
func (c *ProjectTaskListStatusClient) Get(ctx context.Context, id ulid.ID) (*ProjectTaskListStatus, error) {
	return c.Query().Where(projecttaskliststatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTaskListStatusClient) GetX(ctx context.Context, id ulid.ID) *ProjectTaskListStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTaskListStatus.
func (c *ProjectTaskListStatusClient) QueryProject(ptls *ProjectTaskListStatus) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ptls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttaskliststatus.Table, projecttaskliststatus.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttaskliststatus.ProjectTable, projecttaskliststatus.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(ptls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskListCompletedStatus queries the taskListCompletedStatus edge of a ProjectTaskListStatus.
func (c *ProjectTaskListStatusClient) QueryTaskListCompletedStatus(ptls *ProjectTaskListStatus) *TaskListCompletedStatusQuery {
	query := &TaskListCompletedStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ptls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttaskliststatus.Table, projecttaskliststatus.FieldID, id),
			sqlgraph.To(tasklistcompletedstatus.Table, tasklistcompletedstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttaskliststatus.TaskListCompletedStatusTable, projecttaskliststatus.TaskListCompletedStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ptls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskListSortStatus queries the taskListSortStatus edge of a ProjectTaskListStatus.
func (c *ProjectTaskListStatusClient) QueryTaskListSortStatus(ptls *ProjectTaskListStatus) *TaskListSortStatusQuery {
	query := &TaskListSortStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ptls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttaskliststatus.Table, projecttaskliststatus.FieldID, id),
			sqlgraph.To(tasklistsortstatus.Table, tasklistsortstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttaskliststatus.TaskListSortStatusTable, projecttaskliststatus.TaskListSortStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ptls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTaskListStatusClient) Hooks() []Hook {
	return c.hooks.ProjectTaskListStatus
}

// ProjectTaskSectionClient is a client for the ProjectTaskSection schema.
type ProjectTaskSectionClient struct {
	config
}

// NewProjectTaskSectionClient returns a client for the ProjectTaskSection from the given config.
func NewProjectTaskSectionClient(c config) *ProjectTaskSectionClient {
	return &ProjectTaskSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttasksection.Hooks(f(g(h())))`.
func (c *ProjectTaskSectionClient) Use(hooks ...Hook) {
	c.hooks.ProjectTaskSection = append(c.hooks.ProjectTaskSection, hooks...)
}

// Create returns a create builder for ProjectTaskSection.
func (c *ProjectTaskSectionClient) Create() *ProjectTaskSectionCreate {
	mutation := newProjectTaskSectionMutation(c.config, OpCreate)
	return &ProjectTaskSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTaskSection entities.
func (c *ProjectTaskSectionClient) CreateBulk(builders ...*ProjectTaskSectionCreate) *ProjectTaskSectionCreateBulk {
	return &ProjectTaskSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTaskSection.
func (c *ProjectTaskSectionClient) Update() *ProjectTaskSectionUpdate {
	mutation := newProjectTaskSectionMutation(c.config, OpUpdate)
	return &ProjectTaskSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTaskSectionClient) UpdateOne(pts *ProjectTaskSection) *ProjectTaskSectionUpdateOne {
	mutation := newProjectTaskSectionMutation(c.config, OpUpdateOne, withProjectTaskSection(pts))
	return &ProjectTaskSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTaskSectionClient) UpdateOneID(id ulid.ID) *ProjectTaskSectionUpdateOne {
	mutation := newProjectTaskSectionMutation(c.config, OpUpdateOne, withProjectTaskSectionID(id))
	return &ProjectTaskSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTaskSection.
func (c *ProjectTaskSectionClient) Delete() *ProjectTaskSectionDelete {
	mutation := newProjectTaskSectionMutation(c.config, OpDelete)
	return &ProjectTaskSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTaskSectionClient) DeleteOne(pts *ProjectTaskSection) *ProjectTaskSectionDeleteOne {
	return c.DeleteOneID(pts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTaskSectionClient) DeleteOneID(id ulid.ID) *ProjectTaskSectionDeleteOne {
	builder := c.Delete().Where(projecttasksection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTaskSectionDeleteOne{builder}
}

// Query returns a query builder for ProjectTaskSection.
func (c *ProjectTaskSectionClient) Query() *ProjectTaskSectionQuery {
	return &ProjectTaskSectionQuery{
		config: c.config,
	}
}

// Get returns a ProjectTaskSection entity by its id.
func (c *ProjectTaskSectionClient) Get(ctx context.Context, id ulid.ID) (*ProjectTaskSection, error) {
	return c.Query().Where(projecttasksection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTaskSectionClient) GetX(ctx context.Context, id ulid.ID) *ProjectTaskSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTaskSection.
func (c *ProjectTaskSectionClient) QueryProject(pts *ProjectTaskSection) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttasksection.Table, projecttasksection.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttasksection.ProjectTable, projecttasksection.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTasks queries the projectTasks edge of a ProjectTaskSection.
func (c *ProjectTaskSectionClient) QueryProjectTasks(pts *ProjectTaskSection) *ProjectTaskQuery {
	query := &ProjectTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttasksection.Table, projecttasksection.FieldID, id),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttasksection.ProjectTasksTable, projecttasksection.ProjectTasksColumn),
		)
		fromV = sqlgraph.Neighbors(pts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTaskSectionClient) Hooks() []Hook {
	return c.hooks.ProjectTaskSection
}

// ProjectTeammateClient is a client for the ProjectTeammate schema.
type ProjectTeammateClient struct {
	config
}

// NewProjectTeammateClient returns a client for the ProjectTeammate from the given config.
func NewProjectTeammateClient(c config) *ProjectTeammateClient {
	return &ProjectTeammateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectteammate.Hooks(f(g(h())))`.
func (c *ProjectTeammateClient) Use(hooks ...Hook) {
	c.hooks.ProjectTeammate = append(c.hooks.ProjectTeammate, hooks...)
}

// Create returns a create builder for ProjectTeammate.
func (c *ProjectTeammateClient) Create() *ProjectTeammateCreate {
	mutation := newProjectTeammateMutation(c.config, OpCreate)
	return &ProjectTeammateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTeammate entities.
func (c *ProjectTeammateClient) CreateBulk(builders ...*ProjectTeammateCreate) *ProjectTeammateCreateBulk {
	return &ProjectTeammateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTeammate.
func (c *ProjectTeammateClient) Update() *ProjectTeammateUpdate {
	mutation := newProjectTeammateMutation(c.config, OpUpdate)
	return &ProjectTeammateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTeammateClient) UpdateOne(pt *ProjectTeammate) *ProjectTeammateUpdateOne {
	mutation := newProjectTeammateMutation(c.config, OpUpdateOne, withProjectTeammate(pt))
	return &ProjectTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTeammateClient) UpdateOneID(id ulid.ID) *ProjectTeammateUpdateOne {
	mutation := newProjectTeammateMutation(c.config, OpUpdateOne, withProjectTeammateID(id))
	return &ProjectTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTeammate.
func (c *ProjectTeammateClient) Delete() *ProjectTeammateDelete {
	mutation := newProjectTeammateMutation(c.config, OpDelete)
	return &ProjectTeammateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTeammateClient) DeleteOne(pt *ProjectTeammate) *ProjectTeammateDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTeammateClient) DeleteOneID(id ulid.ID) *ProjectTeammateDeleteOne {
	builder := c.Delete().Where(projectteammate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTeammateDeleteOne{builder}
}

// Query returns a query builder for ProjectTeammate.
func (c *ProjectTeammateClient) Query() *ProjectTeammateQuery {
	return &ProjectTeammateQuery{
		config: c.config,
	}
}

// Get returns a ProjectTeammate entity by its id.
func (c *ProjectTeammateClient) Get(ctx context.Context, id ulid.ID) (*ProjectTeammate, error) {
	return c.Query().Where(projectteammate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTeammateClient) GetX(ctx context.Context, id ulid.ID) *ProjectTeammate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTeammate.
func (c *ProjectTeammateClient) QueryProject(pt *ProjectTeammate) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectteammate.Table, projectteammate.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectteammate.ProjectTable, projectteammate.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a ProjectTeammate.
func (c *ProjectTeammateClient) QueryTeammate(pt *ProjectTeammate) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectteammate.Table, projectteammate.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectteammate.TeammateTable, projectteammate.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTeammateClient) Hooks() []Hook {
	return c.hooks.ProjectTeammate
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id ulid.ID) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id ulid.ID) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id ulid.ID) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id ulid.ID) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a Tag.
func (c *TagClient) QueryWorkspace(t *Tag) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tag.WorkspaceTable, tag.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColor queries the color edge of a Tag.
func (c *TagClient) QueryColor(t *Tag) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tag.ColorTable, tag.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskTags queries the taskTags edge of a Tag.
func (c *TagClient) QueryTaskTags(t *Tag) *TaskTagQuery {
	query := &TaskTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(tasktag.Table, tasktag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tag.TaskTagsTable, tag.TaskTagsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Create returns a create builder for Task.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id ulid.ID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskClient) DeleteOneID(id ulid.ID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id ulid.ID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id ulid.ID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a Task.
func (c *TaskClient) QueryTeammate(t *Task) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.TeammateTable, task.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskPriority queries the taskPriority edge of a Task.
func (c *TaskClient) QueryTaskPriority(t *Task) *TaskPriorityQuery {
	query := &TaskPriorityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(taskpriority.Table, taskpriority.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.TaskPriorityTable, task.TaskPriorityColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubTasks queries the subTasks edge of a Task.
func (c *TaskClient) QuerySubTasks(t *Task) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.SubTasksTable, task.SubTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentTask queries the parentTask edge of a Task.
func (c *TaskClient) QueryParentTask(t *Task) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.ParentTaskTable, task.ParentTaskColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTasks queries the teammateTasks edge of a Task.
func (c *TaskClient) QueryTeammateTasks(t *Task) *TeammateTaskQuery {
	query := &TeammateTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(teammatetask.Table, teammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TeammateTasksTable, task.TeammateTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTasks queries the projectTasks edge of a Task.
func (c *TaskClient) QueryProjectTasks(t *Task) *ProjectTaskQuery {
	query := &ProjectTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ProjectTasksTable, task.ProjectTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskLikes queries the taskLikes edge of a Task.
func (c *TaskClient) QueryTaskLikes(t *Task) *TaskLikeQuery {
	query := &TaskLikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(tasklike.Table, tasklike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskLikesTable, task.TaskLikesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskTags queries the taskTags edge of a Task.
func (c *TaskClient) QueryTaskTags(t *Task) *TaskTagQuery {
	query := &TaskTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(tasktag.Table, tasktag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskTagsTable, task.TaskTagsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskCollaborators queries the taskCollaborators edge of a Task.
func (c *TaskClient) QueryTaskCollaborators(t *Task) *TaskCollaboratorQuery {
	query := &TaskCollaboratorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(taskcollaborator.Table, taskcollaborator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskCollaboratorsTable, task.TaskCollaboratorsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFeeds queries the taskFeeds edge of a Task.
func (c *TaskClient) QueryTaskFeeds(t *Task) *TaskFeedQuery {
	query := &TaskFeedQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(taskfeed.Table, taskfeed.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskFeedsTable, task.TaskFeedsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFeedLikes queries the taskFeedLikes edge of a Task.
func (c *TaskClient) QueryTaskFeedLikes(t *Task) *TaskFeedLikeQuery {
	query := &TaskFeedLikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(taskfeedlike.Table, taskfeedlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskFeedLikesTable, task.TaskFeedLikesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFiles queries the taskFiles edge of a Task.
func (c *TaskClient) QueryTaskFiles(t *Task) *TaskFileQuery {
	query := &TaskFileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(taskfile.Table, taskfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskFilesTable, task.TaskFilesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeletedTasksRef queries the deletedTasksRef edge of a Task.
func (c *TaskClient) QueryDeletedTasksRef(t *Task) *DeletedTaskQuery {
	query := &DeletedTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(deletedtask.Table, deletedtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.DeletedTasksRefTable, task.DeletedTasksRefColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskActivityTasks queries the taskActivityTasks edge of a Task.
func (c *TaskClient) QueryTaskActivityTasks(t *Task) *TaskActivityTaskQuery {
	query := &TaskActivityTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(taskactivitytask.Table, taskactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskActivityTasksTable, task.TaskActivityTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceActivityTasks queries the workspaceActivityTasks edge of a Task.
func (c *TaskClient) QueryWorkspaceActivityTasks(t *Task) *WorkspaceActivityTaskQuery {
	query := &WorkspaceActivityTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(workspaceactivitytask.Table, workspaceactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.WorkspaceActivityTasksTable, task.WorkspaceActivityTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchivedTaskActivityTasks queries the archivedTaskActivityTasks edge of a Task.
func (c *TaskClient) QueryArchivedTaskActivityTasks(t *Task) *ArchivedTaskActivityTaskQuery {
	query := &ArchivedTaskActivityTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(archivedtaskactivitytask.Table, archivedtaskactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ArchivedTaskActivityTasksTable, task.ArchivedTaskActivityTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// TaskActivityClient is a client for the TaskActivity schema.
type TaskActivityClient struct {
	config
}

// NewTaskActivityClient returns a client for the TaskActivity from the given config.
func NewTaskActivityClient(c config) *TaskActivityClient {
	return &TaskActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskactivity.Hooks(f(g(h())))`.
func (c *TaskActivityClient) Use(hooks ...Hook) {
	c.hooks.TaskActivity = append(c.hooks.TaskActivity, hooks...)
}

// Create returns a create builder for TaskActivity.
func (c *TaskActivityClient) Create() *TaskActivityCreate {
	mutation := newTaskActivityMutation(c.config, OpCreate)
	return &TaskActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskActivity entities.
func (c *TaskActivityClient) CreateBulk(builders ...*TaskActivityCreate) *TaskActivityCreateBulk {
	return &TaskActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskActivity.
func (c *TaskActivityClient) Update() *TaskActivityUpdate {
	mutation := newTaskActivityMutation(c.config, OpUpdate)
	return &TaskActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskActivityClient) UpdateOne(ta *TaskActivity) *TaskActivityUpdateOne {
	mutation := newTaskActivityMutation(c.config, OpUpdateOne, withTaskActivity(ta))
	return &TaskActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskActivityClient) UpdateOneID(id ulid.ID) *TaskActivityUpdateOne {
	mutation := newTaskActivityMutation(c.config, OpUpdateOne, withTaskActivityID(id))
	return &TaskActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskActivity.
func (c *TaskActivityClient) Delete() *TaskActivityDelete {
	mutation := newTaskActivityMutation(c.config, OpDelete)
	return &TaskActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskActivityClient) DeleteOne(ta *TaskActivity) *TaskActivityDeleteOne {
	return c.DeleteOneID(ta.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskActivityClient) DeleteOneID(id ulid.ID) *TaskActivityDeleteOne {
	builder := c.Delete().Where(taskactivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskActivityDeleteOne{builder}
}

// Query returns a query builder for TaskActivity.
func (c *TaskActivityClient) Query() *TaskActivityQuery {
	return &TaskActivityQuery{
		config: c.config,
	}
}

// Get returns a TaskActivity entity by its id.
func (c *TaskActivityClient) Get(ctx context.Context, id ulid.ID) (*TaskActivity, error) {
	return c.Query().Where(taskactivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskActivityClient) GetX(ctx context.Context, id ulid.ID) *TaskActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a TaskActivity.
func (c *TaskActivityClient) QueryTeammate(ta *TaskActivity) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ta.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivity.TeammateTable, taskactivity.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(ta.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivityType queries the activityType edge of a TaskActivity.
func (c *TaskActivityClient) QueryActivityType(ta *TaskActivity) *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ta.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, id),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivity.ActivityTypeTable, taskactivity.ActivityTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ta.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a TaskActivity.
func (c *TaskActivityClient) QueryWorkspace(ta *TaskActivity) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ta.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivity.WorkspaceTable, taskactivity.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(ta.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskActivityTasks queries the taskActivityTasks edge of a TaskActivity.
func (c *TaskActivityClient) QueryTaskActivityTasks(ta *TaskActivity) *TaskActivityTaskQuery {
	query := &TaskActivityTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ta.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, id),
			sqlgraph.To(taskactivitytask.Table, taskactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskactivity.TaskActivityTasksTable, taskactivity.TaskActivityTasksColumn),
		)
		fromV = sqlgraph.Neighbors(ta.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskActivityClient) Hooks() []Hook {
	return c.hooks.TaskActivity
}

// TaskActivityTaskClient is a client for the TaskActivityTask schema.
type TaskActivityTaskClient struct {
	config
}

// NewTaskActivityTaskClient returns a client for the TaskActivityTask from the given config.
func NewTaskActivityTaskClient(c config) *TaskActivityTaskClient {
	return &TaskActivityTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskactivitytask.Hooks(f(g(h())))`.
func (c *TaskActivityTaskClient) Use(hooks ...Hook) {
	c.hooks.TaskActivityTask = append(c.hooks.TaskActivityTask, hooks...)
}

// Create returns a create builder for TaskActivityTask.
func (c *TaskActivityTaskClient) Create() *TaskActivityTaskCreate {
	mutation := newTaskActivityTaskMutation(c.config, OpCreate)
	return &TaskActivityTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskActivityTask entities.
func (c *TaskActivityTaskClient) CreateBulk(builders ...*TaskActivityTaskCreate) *TaskActivityTaskCreateBulk {
	return &TaskActivityTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskActivityTask.
func (c *TaskActivityTaskClient) Update() *TaskActivityTaskUpdate {
	mutation := newTaskActivityTaskMutation(c.config, OpUpdate)
	return &TaskActivityTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskActivityTaskClient) UpdateOne(tat *TaskActivityTask) *TaskActivityTaskUpdateOne {
	mutation := newTaskActivityTaskMutation(c.config, OpUpdateOne, withTaskActivityTask(tat))
	return &TaskActivityTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskActivityTaskClient) UpdateOneID(id ulid.ID) *TaskActivityTaskUpdateOne {
	mutation := newTaskActivityTaskMutation(c.config, OpUpdateOne, withTaskActivityTaskID(id))
	return &TaskActivityTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskActivityTask.
func (c *TaskActivityTaskClient) Delete() *TaskActivityTaskDelete {
	mutation := newTaskActivityTaskMutation(c.config, OpDelete)
	return &TaskActivityTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskActivityTaskClient) DeleteOne(tat *TaskActivityTask) *TaskActivityTaskDeleteOne {
	return c.DeleteOneID(tat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskActivityTaskClient) DeleteOneID(id ulid.ID) *TaskActivityTaskDeleteOne {
	builder := c.Delete().Where(taskactivitytask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskActivityTaskDeleteOne{builder}
}

// Query returns a query builder for TaskActivityTask.
func (c *TaskActivityTaskClient) Query() *TaskActivityTaskQuery {
	return &TaskActivityTaskQuery{
		config: c.config,
	}
}

// Get returns a TaskActivityTask entity by its id.
func (c *TaskActivityTaskClient) Get(ctx context.Context, id ulid.ID) (*TaskActivityTask, error) {
	return c.Query().Where(taskactivitytask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskActivityTaskClient) GetX(ctx context.Context, id ulid.ID) *TaskActivityTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a TaskActivityTask.
func (c *TaskActivityTaskClient) QueryTask(tat *TaskActivityTask) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivitytask.Table, taskactivitytask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivitytask.TaskTable, taskactivitytask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskActivity queries the taskActivity edge of a TaskActivityTask.
func (c *TaskActivityTaskClient) QueryTaskActivity(tat *TaskActivityTask) *TaskActivityQuery {
	query := &TaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivitytask.Table, taskactivitytask.FieldID, id),
			sqlgraph.To(taskactivity.Table, taskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivitytask.TaskActivityTable, taskactivitytask.TaskActivityColumn),
		)
		fromV = sqlgraph.Neighbors(tat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskActivityTaskClient) Hooks() []Hook {
	return c.hooks.TaskActivityTask
}

// TaskCollaboratorClient is a client for the TaskCollaborator schema.
type TaskCollaboratorClient struct {
	config
}

// NewTaskCollaboratorClient returns a client for the TaskCollaborator from the given config.
func NewTaskCollaboratorClient(c config) *TaskCollaboratorClient {
	return &TaskCollaboratorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskcollaborator.Hooks(f(g(h())))`.
func (c *TaskCollaboratorClient) Use(hooks ...Hook) {
	c.hooks.TaskCollaborator = append(c.hooks.TaskCollaborator, hooks...)
}

// Create returns a create builder for TaskCollaborator.
func (c *TaskCollaboratorClient) Create() *TaskCollaboratorCreate {
	mutation := newTaskCollaboratorMutation(c.config, OpCreate)
	return &TaskCollaboratorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskCollaborator entities.
func (c *TaskCollaboratorClient) CreateBulk(builders ...*TaskCollaboratorCreate) *TaskCollaboratorCreateBulk {
	return &TaskCollaboratorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskCollaborator.
func (c *TaskCollaboratorClient) Update() *TaskCollaboratorUpdate {
	mutation := newTaskCollaboratorMutation(c.config, OpUpdate)
	return &TaskCollaboratorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskCollaboratorClient) UpdateOne(tc *TaskCollaborator) *TaskCollaboratorUpdateOne {
	mutation := newTaskCollaboratorMutation(c.config, OpUpdateOne, withTaskCollaborator(tc))
	return &TaskCollaboratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskCollaboratorClient) UpdateOneID(id ulid.ID) *TaskCollaboratorUpdateOne {
	mutation := newTaskCollaboratorMutation(c.config, OpUpdateOne, withTaskCollaboratorID(id))
	return &TaskCollaboratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskCollaborator.
func (c *TaskCollaboratorClient) Delete() *TaskCollaboratorDelete {
	mutation := newTaskCollaboratorMutation(c.config, OpDelete)
	return &TaskCollaboratorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskCollaboratorClient) DeleteOne(tc *TaskCollaborator) *TaskCollaboratorDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskCollaboratorClient) DeleteOneID(id ulid.ID) *TaskCollaboratorDeleteOne {
	builder := c.Delete().Where(taskcollaborator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskCollaboratorDeleteOne{builder}
}

// Query returns a query builder for TaskCollaborator.
func (c *TaskCollaboratorClient) Query() *TaskCollaboratorQuery {
	return &TaskCollaboratorQuery{
		config: c.config,
	}
}

// Get returns a TaskCollaborator entity by its id.
func (c *TaskCollaboratorClient) Get(ctx context.Context, id ulid.ID) (*TaskCollaborator, error) {
	return c.Query().Where(taskcollaborator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskCollaboratorClient) GetX(ctx context.Context, id ulid.ID) *TaskCollaborator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a TaskCollaborator.
func (c *TaskCollaboratorClient) QueryTask(tc *TaskCollaborator) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskcollaborator.Table, taskcollaborator.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskcollaborator.TaskTable, taskcollaborator.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a TaskCollaborator.
func (c *TaskCollaboratorClient) QueryTeammate(tc *TaskCollaborator) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskcollaborator.Table, taskcollaborator.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskcollaborator.TeammateTable, taskcollaborator.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskCollaboratorClient) Hooks() []Hook {
	return c.hooks.TaskCollaborator
}

// TaskColumnClient is a client for the TaskColumn schema.
type TaskColumnClient struct {
	config
}

// NewTaskColumnClient returns a client for the TaskColumn from the given config.
func NewTaskColumnClient(c config) *TaskColumnClient {
	return &TaskColumnClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskcolumn.Hooks(f(g(h())))`.
func (c *TaskColumnClient) Use(hooks ...Hook) {
	c.hooks.TaskColumn = append(c.hooks.TaskColumn, hooks...)
}

// Create returns a create builder for TaskColumn.
func (c *TaskColumnClient) Create() *TaskColumnCreate {
	mutation := newTaskColumnMutation(c.config, OpCreate)
	return &TaskColumnCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskColumn entities.
func (c *TaskColumnClient) CreateBulk(builders ...*TaskColumnCreate) *TaskColumnCreateBulk {
	return &TaskColumnCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskColumn.
func (c *TaskColumnClient) Update() *TaskColumnUpdate {
	mutation := newTaskColumnMutation(c.config, OpUpdate)
	return &TaskColumnUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskColumnClient) UpdateOne(tc *TaskColumn) *TaskColumnUpdateOne {
	mutation := newTaskColumnMutation(c.config, OpUpdateOne, withTaskColumn(tc))
	return &TaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskColumnClient) UpdateOneID(id ulid.ID) *TaskColumnUpdateOne {
	mutation := newTaskColumnMutation(c.config, OpUpdateOne, withTaskColumnID(id))
	return &TaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskColumn.
func (c *TaskColumnClient) Delete() *TaskColumnDelete {
	mutation := newTaskColumnMutation(c.config, OpDelete)
	return &TaskColumnDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskColumnClient) DeleteOne(tc *TaskColumn) *TaskColumnDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskColumnClient) DeleteOneID(id ulid.ID) *TaskColumnDeleteOne {
	builder := c.Delete().Where(taskcolumn.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskColumnDeleteOne{builder}
}

// Query returns a query builder for TaskColumn.
func (c *TaskColumnClient) Query() *TaskColumnQuery {
	return &TaskColumnQuery{
		config: c.config,
	}
}

// Get returns a TaskColumn entity by its id.
func (c *TaskColumnClient) Get(ctx context.Context, id ulid.ID) (*TaskColumn, error) {
	return c.Query().Where(taskcolumn.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskColumnClient) GetX(ctx context.Context, id ulid.ID) *TaskColumn {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammateTaskColumns queries the teammateTaskColumns edge of a TaskColumn.
func (c *TaskColumnClient) QueryTeammateTaskColumns(tc *TaskColumn) *TeammateTaskColumnQuery {
	query := &TeammateTaskColumnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskcolumn.Table, taskcolumn.FieldID, id),
			sqlgraph.To(teammatetaskcolumn.Table, teammatetaskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskcolumn.TeammateTaskColumnsTable, taskcolumn.TeammateTaskColumnsColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTaskColumns queries the projectTaskColumns edge of a TaskColumn.
func (c *TaskColumnClient) QueryProjectTaskColumns(tc *TaskColumn) *ProjectTaskColumnQuery {
	query := &ProjectTaskColumnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskcolumn.Table, taskcolumn.FieldID, id),
			sqlgraph.To(projecttaskcolumn.Table, projecttaskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskcolumn.ProjectTaskColumnsTable, taskcolumn.ProjectTaskColumnsColumn),
		)
		fromV = sqlgraph.Neighbors(tc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskColumnClient) Hooks() []Hook {
	return c.hooks.TaskColumn
}

// TaskFeedClient is a client for the TaskFeed schema.
type TaskFeedClient struct {
	config
}

// NewTaskFeedClient returns a client for the TaskFeed from the given config.
func NewTaskFeedClient(c config) *TaskFeedClient {
	return &TaskFeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskfeed.Hooks(f(g(h())))`.
func (c *TaskFeedClient) Use(hooks ...Hook) {
	c.hooks.TaskFeed = append(c.hooks.TaskFeed, hooks...)
}

// Create returns a create builder for TaskFeed.
func (c *TaskFeedClient) Create() *TaskFeedCreate {
	mutation := newTaskFeedMutation(c.config, OpCreate)
	return &TaskFeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskFeed entities.
func (c *TaskFeedClient) CreateBulk(builders ...*TaskFeedCreate) *TaskFeedCreateBulk {
	return &TaskFeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskFeed.
func (c *TaskFeedClient) Update() *TaskFeedUpdate {
	mutation := newTaskFeedMutation(c.config, OpUpdate)
	return &TaskFeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskFeedClient) UpdateOne(tf *TaskFeed) *TaskFeedUpdateOne {
	mutation := newTaskFeedMutation(c.config, OpUpdateOne, withTaskFeed(tf))
	return &TaskFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskFeedClient) UpdateOneID(id ulid.ID) *TaskFeedUpdateOne {
	mutation := newTaskFeedMutation(c.config, OpUpdateOne, withTaskFeedID(id))
	return &TaskFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskFeed.
func (c *TaskFeedClient) Delete() *TaskFeedDelete {
	mutation := newTaskFeedMutation(c.config, OpDelete)
	return &TaskFeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskFeedClient) DeleteOne(tf *TaskFeed) *TaskFeedDeleteOne {
	return c.DeleteOneID(tf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskFeedClient) DeleteOneID(id ulid.ID) *TaskFeedDeleteOne {
	builder := c.Delete().Where(taskfeed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskFeedDeleteOne{builder}
}

// Query returns a query builder for TaskFeed.
func (c *TaskFeedClient) Query() *TaskFeedQuery {
	return &TaskFeedQuery{
		config: c.config,
	}
}

// Get returns a TaskFeed entity by its id.
func (c *TaskFeedClient) Get(ctx context.Context, id ulid.ID) (*TaskFeed, error) {
	return c.Query().Where(taskfeed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskFeedClient) GetX(ctx context.Context, id ulid.ID) *TaskFeed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a TaskFeed.
func (c *TaskFeedClient) QueryTask(tf *TaskFeed) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfeed.TaskTable, taskfeed.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a TaskFeed.
func (c *TaskFeedClient) QueryTeammate(tf *TaskFeed) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfeed.TeammateTable, taskfeed.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFeedLikes queries the taskFeedLikes edge of a TaskFeed.
func (c *TaskFeedClient) QueryTaskFeedLikes(tf *TaskFeed) *TaskFeedLikeQuery {
	query := &TaskFeedLikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, id),
			sqlgraph.To(taskfeedlike.Table, taskfeedlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskfeed.TaskFeedLikesTable, taskfeed.TaskFeedLikesColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFiles queries the taskFiles edge of a TaskFeed.
func (c *TaskFeedClient) QueryTaskFiles(tf *TaskFeed) *TaskFileQuery {
	query := &TaskFileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, id),
			sqlgraph.To(taskfile.Table, taskfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskfeed.TaskFilesTable, taskfeed.TaskFilesColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskFeedClient) Hooks() []Hook {
	return c.hooks.TaskFeed
}

// TaskFeedLikeClient is a client for the TaskFeedLike schema.
type TaskFeedLikeClient struct {
	config
}

// NewTaskFeedLikeClient returns a client for the TaskFeedLike from the given config.
func NewTaskFeedLikeClient(c config) *TaskFeedLikeClient {
	return &TaskFeedLikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskfeedlike.Hooks(f(g(h())))`.
func (c *TaskFeedLikeClient) Use(hooks ...Hook) {
	c.hooks.TaskFeedLike = append(c.hooks.TaskFeedLike, hooks...)
}

// Create returns a create builder for TaskFeedLike.
func (c *TaskFeedLikeClient) Create() *TaskFeedLikeCreate {
	mutation := newTaskFeedLikeMutation(c.config, OpCreate)
	return &TaskFeedLikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskFeedLike entities.
func (c *TaskFeedLikeClient) CreateBulk(builders ...*TaskFeedLikeCreate) *TaskFeedLikeCreateBulk {
	return &TaskFeedLikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskFeedLike.
func (c *TaskFeedLikeClient) Update() *TaskFeedLikeUpdate {
	mutation := newTaskFeedLikeMutation(c.config, OpUpdate)
	return &TaskFeedLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskFeedLikeClient) UpdateOne(tfl *TaskFeedLike) *TaskFeedLikeUpdateOne {
	mutation := newTaskFeedLikeMutation(c.config, OpUpdateOne, withTaskFeedLike(tfl))
	return &TaskFeedLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskFeedLikeClient) UpdateOneID(id ulid.ID) *TaskFeedLikeUpdateOne {
	mutation := newTaskFeedLikeMutation(c.config, OpUpdateOne, withTaskFeedLikeID(id))
	return &TaskFeedLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskFeedLike.
func (c *TaskFeedLikeClient) Delete() *TaskFeedLikeDelete {
	mutation := newTaskFeedLikeMutation(c.config, OpDelete)
	return &TaskFeedLikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskFeedLikeClient) DeleteOne(tfl *TaskFeedLike) *TaskFeedLikeDeleteOne {
	return c.DeleteOneID(tfl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskFeedLikeClient) DeleteOneID(id ulid.ID) *TaskFeedLikeDeleteOne {
	builder := c.Delete().Where(taskfeedlike.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskFeedLikeDeleteOne{builder}
}

// Query returns a query builder for TaskFeedLike.
func (c *TaskFeedLikeClient) Query() *TaskFeedLikeQuery {
	return &TaskFeedLikeQuery{
		config: c.config,
	}
}

// Get returns a TaskFeedLike entity by its id.
func (c *TaskFeedLikeClient) Get(ctx context.Context, id ulid.ID) (*TaskFeedLike, error) {
	return c.Query().Where(taskfeedlike.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskFeedLikeClient) GetX(ctx context.Context, id ulid.ID) *TaskFeedLike {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a TaskFeedLike.
func (c *TaskFeedLikeClient) QueryTask(tfl *TaskFeedLike) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tfl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeedlike.Table, taskfeedlike.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfeedlike.TaskTable, taskfeedlike.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tfl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a TaskFeedLike.
func (c *TaskFeedLikeClient) QueryTeammate(tfl *TaskFeedLike) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tfl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeedlike.Table, taskfeedlike.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfeedlike.TeammateTable, taskfeedlike.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(tfl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeed queries the feed edge of a TaskFeedLike.
func (c *TaskFeedLikeClient) QueryFeed(tfl *TaskFeedLike) *TaskFeedQuery {
	query := &TaskFeedQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tfl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeedlike.Table, taskfeedlike.FieldID, id),
			sqlgraph.To(taskfeed.Table, taskfeed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfeedlike.FeedTable, taskfeedlike.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(tfl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskFeedLikeClient) Hooks() []Hook {
	return c.hooks.TaskFeedLike
}

// TaskFileClient is a client for the TaskFile schema.
type TaskFileClient struct {
	config
}

// NewTaskFileClient returns a client for the TaskFile from the given config.
func NewTaskFileClient(c config) *TaskFileClient {
	return &TaskFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskfile.Hooks(f(g(h())))`.
func (c *TaskFileClient) Use(hooks ...Hook) {
	c.hooks.TaskFile = append(c.hooks.TaskFile, hooks...)
}

// Create returns a create builder for TaskFile.
func (c *TaskFileClient) Create() *TaskFileCreate {
	mutation := newTaskFileMutation(c.config, OpCreate)
	return &TaskFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskFile entities.
func (c *TaskFileClient) CreateBulk(builders ...*TaskFileCreate) *TaskFileCreateBulk {
	return &TaskFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskFile.
func (c *TaskFileClient) Update() *TaskFileUpdate {
	mutation := newTaskFileMutation(c.config, OpUpdate)
	return &TaskFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskFileClient) UpdateOne(tf *TaskFile) *TaskFileUpdateOne {
	mutation := newTaskFileMutation(c.config, OpUpdateOne, withTaskFile(tf))
	return &TaskFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskFileClient) UpdateOneID(id ulid.ID) *TaskFileUpdateOne {
	mutation := newTaskFileMutation(c.config, OpUpdateOne, withTaskFileID(id))
	return &TaskFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskFile.
func (c *TaskFileClient) Delete() *TaskFileDelete {
	mutation := newTaskFileMutation(c.config, OpDelete)
	return &TaskFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskFileClient) DeleteOne(tf *TaskFile) *TaskFileDeleteOne {
	return c.DeleteOneID(tf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskFileClient) DeleteOneID(id ulid.ID) *TaskFileDeleteOne {
	builder := c.Delete().Where(taskfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskFileDeleteOne{builder}
}

// Query returns a query builder for TaskFile.
func (c *TaskFileClient) Query() *TaskFileQuery {
	return &TaskFileQuery{
		config: c.config,
	}
}

// Get returns a TaskFile entity by its id.
func (c *TaskFileClient) Get(ctx context.Context, id ulid.ID) (*TaskFile, error) {
	return c.Query().Where(taskfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskFileClient) GetX(ctx context.Context, id ulid.ID) *TaskFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a TaskFile.
func (c *TaskFileClient) QueryProject(tf *TaskFile) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfile.Table, taskfile.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfile.ProjectTable, taskfile.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a TaskFile.
func (c *TaskFileClient) QueryTask(tf *TaskFile) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfile.Table, taskfile.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfile.TaskTable, taskfile.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFeed queries the taskFeed edge of a TaskFile.
func (c *TaskFileClient) QueryTaskFeed(tf *TaskFile) *TaskFeedQuery {
	query := &TaskFeedQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfile.Table, taskfile.FieldID, id),
			sqlgraph.To(taskfeed.Table, taskfeed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfile.TaskFeedTable, taskfile.TaskFeedColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFileType queries the fileType edge of a TaskFile.
func (c *TaskFileClient) QueryFileType(tf *TaskFile) *FileTypeQuery {
	query := &FileTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfile.Table, taskfile.FieldID, id),
			sqlgraph.To(filetype.Table, filetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfile.FileTypeTable, taskfile.FileTypeColumn),
		)
		fromV = sqlgraph.Neighbors(tf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskFileClient) Hooks() []Hook {
	return c.hooks.TaskFile
}

// TaskLikeClient is a client for the TaskLike schema.
type TaskLikeClient struct {
	config
}

// NewTaskLikeClient returns a client for the TaskLike from the given config.
func NewTaskLikeClient(c config) *TaskLikeClient {
	return &TaskLikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasklike.Hooks(f(g(h())))`.
func (c *TaskLikeClient) Use(hooks ...Hook) {
	c.hooks.TaskLike = append(c.hooks.TaskLike, hooks...)
}

// Create returns a create builder for TaskLike.
func (c *TaskLikeClient) Create() *TaskLikeCreate {
	mutation := newTaskLikeMutation(c.config, OpCreate)
	return &TaskLikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskLike entities.
func (c *TaskLikeClient) CreateBulk(builders ...*TaskLikeCreate) *TaskLikeCreateBulk {
	return &TaskLikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskLike.
func (c *TaskLikeClient) Update() *TaskLikeUpdate {
	mutation := newTaskLikeMutation(c.config, OpUpdate)
	return &TaskLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskLikeClient) UpdateOne(tl *TaskLike) *TaskLikeUpdateOne {
	mutation := newTaskLikeMutation(c.config, OpUpdateOne, withTaskLike(tl))
	return &TaskLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskLikeClient) UpdateOneID(id ulid.ID) *TaskLikeUpdateOne {
	mutation := newTaskLikeMutation(c.config, OpUpdateOne, withTaskLikeID(id))
	return &TaskLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskLike.
func (c *TaskLikeClient) Delete() *TaskLikeDelete {
	mutation := newTaskLikeMutation(c.config, OpDelete)
	return &TaskLikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskLikeClient) DeleteOne(tl *TaskLike) *TaskLikeDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskLikeClient) DeleteOneID(id ulid.ID) *TaskLikeDeleteOne {
	builder := c.Delete().Where(tasklike.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskLikeDeleteOne{builder}
}

// Query returns a query builder for TaskLike.
func (c *TaskLikeClient) Query() *TaskLikeQuery {
	return &TaskLikeQuery{
		config: c.config,
	}
}

// Get returns a TaskLike entity by its id.
func (c *TaskLikeClient) Get(ctx context.Context, id ulid.ID) (*TaskLike, error) {
	return c.Query().Where(tasklike.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskLikeClient) GetX(ctx context.Context, id ulid.ID) *TaskLike {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a TaskLike.
func (c *TaskLikeClient) QueryTask(tl *TaskLike) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklike.Table, tasklike.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasklike.TaskTable, tasklike.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a TaskLike.
func (c *TaskLikeClient) QueryTeammate(tl *TaskLike) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklike.Table, tasklike.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasklike.TeammateTable, tasklike.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a TaskLike.
func (c *TaskLikeClient) QueryWorkspace(tl *TaskLike) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklike.Table, tasklike.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasklike.WorkspaceTable, tasklike.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskLikeClient) Hooks() []Hook {
	return c.hooks.TaskLike
}

// TaskListCompletedStatusClient is a client for the TaskListCompletedStatus schema.
type TaskListCompletedStatusClient struct {
	config
}

// NewTaskListCompletedStatusClient returns a client for the TaskListCompletedStatus from the given config.
func NewTaskListCompletedStatusClient(c config) *TaskListCompletedStatusClient {
	return &TaskListCompletedStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasklistcompletedstatus.Hooks(f(g(h())))`.
func (c *TaskListCompletedStatusClient) Use(hooks ...Hook) {
	c.hooks.TaskListCompletedStatus = append(c.hooks.TaskListCompletedStatus, hooks...)
}

// Create returns a create builder for TaskListCompletedStatus.
func (c *TaskListCompletedStatusClient) Create() *TaskListCompletedStatusCreate {
	mutation := newTaskListCompletedStatusMutation(c.config, OpCreate)
	return &TaskListCompletedStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskListCompletedStatus entities.
func (c *TaskListCompletedStatusClient) CreateBulk(builders ...*TaskListCompletedStatusCreate) *TaskListCompletedStatusCreateBulk {
	return &TaskListCompletedStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskListCompletedStatus.
func (c *TaskListCompletedStatusClient) Update() *TaskListCompletedStatusUpdate {
	mutation := newTaskListCompletedStatusMutation(c.config, OpUpdate)
	return &TaskListCompletedStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskListCompletedStatusClient) UpdateOne(tlcs *TaskListCompletedStatus) *TaskListCompletedStatusUpdateOne {
	mutation := newTaskListCompletedStatusMutation(c.config, OpUpdateOne, withTaskListCompletedStatus(tlcs))
	return &TaskListCompletedStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskListCompletedStatusClient) UpdateOneID(id ulid.ID) *TaskListCompletedStatusUpdateOne {
	mutation := newTaskListCompletedStatusMutation(c.config, OpUpdateOne, withTaskListCompletedStatusID(id))
	return &TaskListCompletedStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskListCompletedStatus.
func (c *TaskListCompletedStatusClient) Delete() *TaskListCompletedStatusDelete {
	mutation := newTaskListCompletedStatusMutation(c.config, OpDelete)
	return &TaskListCompletedStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskListCompletedStatusClient) DeleteOne(tlcs *TaskListCompletedStatus) *TaskListCompletedStatusDeleteOne {
	return c.DeleteOneID(tlcs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskListCompletedStatusClient) DeleteOneID(id ulid.ID) *TaskListCompletedStatusDeleteOne {
	builder := c.Delete().Where(tasklistcompletedstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskListCompletedStatusDeleteOne{builder}
}

// Query returns a query builder for TaskListCompletedStatus.
func (c *TaskListCompletedStatusClient) Query() *TaskListCompletedStatusQuery {
	return &TaskListCompletedStatusQuery{
		config: c.config,
	}
}

// Get returns a TaskListCompletedStatus entity by its id.
func (c *TaskListCompletedStatusClient) Get(ctx context.Context, id ulid.ID) (*TaskListCompletedStatus, error) {
	return c.Query().Where(tasklistcompletedstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskListCompletedStatusClient) GetX(ctx context.Context, id ulid.ID) *TaskListCompletedStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammateTaskListStatuses queries the teammateTaskListStatuses edge of a TaskListCompletedStatus.
func (c *TaskListCompletedStatusClient) QueryTeammateTaskListStatuses(tlcs *TaskListCompletedStatus) *TeammateTaskListStatusQuery {
	query := &TeammateTaskListStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tlcs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklistcompletedstatus.Table, tasklistcompletedstatus.FieldID, id),
			sqlgraph.To(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tasklistcompletedstatus.TeammateTaskListStatusesTable, tasklistcompletedstatus.TeammateTaskListStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(tlcs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTaskListStatuses queries the projectTaskListStatuses edge of a TaskListCompletedStatus.
func (c *TaskListCompletedStatusClient) QueryProjectTaskListStatuses(tlcs *TaskListCompletedStatus) *ProjectTaskListStatusQuery {
	query := &ProjectTaskListStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tlcs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklistcompletedstatus.Table, tasklistcompletedstatus.FieldID, id),
			sqlgraph.To(projecttaskliststatus.Table, projecttaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tasklistcompletedstatus.ProjectTaskListStatusesTable, tasklistcompletedstatus.ProjectTaskListStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(tlcs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskListCompletedStatusClient) Hooks() []Hook {
	return c.hooks.TaskListCompletedStatus
}

// TaskListSortStatusClient is a client for the TaskListSortStatus schema.
type TaskListSortStatusClient struct {
	config
}

// NewTaskListSortStatusClient returns a client for the TaskListSortStatus from the given config.
func NewTaskListSortStatusClient(c config) *TaskListSortStatusClient {
	return &TaskListSortStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasklistsortstatus.Hooks(f(g(h())))`.
func (c *TaskListSortStatusClient) Use(hooks ...Hook) {
	c.hooks.TaskListSortStatus = append(c.hooks.TaskListSortStatus, hooks...)
}

// Create returns a create builder for TaskListSortStatus.
func (c *TaskListSortStatusClient) Create() *TaskListSortStatusCreate {
	mutation := newTaskListSortStatusMutation(c.config, OpCreate)
	return &TaskListSortStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskListSortStatus entities.
func (c *TaskListSortStatusClient) CreateBulk(builders ...*TaskListSortStatusCreate) *TaskListSortStatusCreateBulk {
	return &TaskListSortStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskListSortStatus.
func (c *TaskListSortStatusClient) Update() *TaskListSortStatusUpdate {
	mutation := newTaskListSortStatusMutation(c.config, OpUpdate)
	return &TaskListSortStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskListSortStatusClient) UpdateOne(tlss *TaskListSortStatus) *TaskListSortStatusUpdateOne {
	mutation := newTaskListSortStatusMutation(c.config, OpUpdateOne, withTaskListSortStatus(tlss))
	return &TaskListSortStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskListSortStatusClient) UpdateOneID(id ulid.ID) *TaskListSortStatusUpdateOne {
	mutation := newTaskListSortStatusMutation(c.config, OpUpdateOne, withTaskListSortStatusID(id))
	return &TaskListSortStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskListSortStatus.
func (c *TaskListSortStatusClient) Delete() *TaskListSortStatusDelete {
	mutation := newTaskListSortStatusMutation(c.config, OpDelete)
	return &TaskListSortStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskListSortStatusClient) DeleteOne(tlss *TaskListSortStatus) *TaskListSortStatusDeleteOne {
	return c.DeleteOneID(tlss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskListSortStatusClient) DeleteOneID(id ulid.ID) *TaskListSortStatusDeleteOne {
	builder := c.Delete().Where(tasklistsortstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskListSortStatusDeleteOne{builder}
}

// Query returns a query builder for TaskListSortStatus.
func (c *TaskListSortStatusClient) Query() *TaskListSortStatusQuery {
	return &TaskListSortStatusQuery{
		config: c.config,
	}
}

// Get returns a TaskListSortStatus entity by its id.
func (c *TaskListSortStatusClient) Get(ctx context.Context, id ulid.ID) (*TaskListSortStatus, error) {
	return c.Query().Where(tasklistsortstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskListSortStatusClient) GetX(ctx context.Context, id ulid.ID) *TaskListSortStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammateTaskListStatuses queries the teammateTaskListStatuses edge of a TaskListSortStatus.
func (c *TaskListSortStatusClient) QueryTeammateTaskListStatuses(tlss *TaskListSortStatus) *TeammateTaskListStatusQuery {
	query := &TeammateTaskListStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tlss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklistsortstatus.Table, tasklistsortstatus.FieldID, id),
			sqlgraph.To(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tasklistsortstatus.TeammateTaskListStatusesTable, tasklistsortstatus.TeammateTaskListStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(tlss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTaskListStatuses queries the projectTaskListStatuses edge of a TaskListSortStatus.
func (c *TaskListSortStatusClient) QueryProjectTaskListStatuses(tlss *TaskListSortStatus) *ProjectTaskListStatusQuery {
	query := &ProjectTaskListStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tlss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklistsortstatus.Table, tasklistsortstatus.FieldID, id),
			sqlgraph.To(projecttaskliststatus.Table, projecttaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tasklistsortstatus.ProjectTaskListStatusesTable, tasklistsortstatus.ProjectTaskListStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(tlss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskListSortStatusClient) Hooks() []Hook {
	return c.hooks.TaskListSortStatus
}

// TaskPriorityClient is a client for the TaskPriority schema.
type TaskPriorityClient struct {
	config
}

// NewTaskPriorityClient returns a client for the TaskPriority from the given config.
func NewTaskPriorityClient(c config) *TaskPriorityClient {
	return &TaskPriorityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskpriority.Hooks(f(g(h())))`.
func (c *TaskPriorityClient) Use(hooks ...Hook) {
	c.hooks.TaskPriority = append(c.hooks.TaskPriority, hooks...)
}

// Create returns a create builder for TaskPriority.
func (c *TaskPriorityClient) Create() *TaskPriorityCreate {
	mutation := newTaskPriorityMutation(c.config, OpCreate)
	return &TaskPriorityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskPriority entities.
func (c *TaskPriorityClient) CreateBulk(builders ...*TaskPriorityCreate) *TaskPriorityCreateBulk {
	return &TaskPriorityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskPriority.
func (c *TaskPriorityClient) Update() *TaskPriorityUpdate {
	mutation := newTaskPriorityMutation(c.config, OpUpdate)
	return &TaskPriorityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskPriorityClient) UpdateOne(tp *TaskPriority) *TaskPriorityUpdateOne {
	mutation := newTaskPriorityMutation(c.config, OpUpdateOne, withTaskPriority(tp))
	return &TaskPriorityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskPriorityClient) UpdateOneID(id ulid.ID) *TaskPriorityUpdateOne {
	mutation := newTaskPriorityMutation(c.config, OpUpdateOne, withTaskPriorityID(id))
	return &TaskPriorityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskPriority.
func (c *TaskPriorityClient) Delete() *TaskPriorityDelete {
	mutation := newTaskPriorityMutation(c.config, OpDelete)
	return &TaskPriorityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskPriorityClient) DeleteOne(tp *TaskPriority) *TaskPriorityDeleteOne {
	return c.DeleteOneID(tp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskPriorityClient) DeleteOneID(id ulid.ID) *TaskPriorityDeleteOne {
	builder := c.Delete().Where(taskpriority.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskPriorityDeleteOne{builder}
}

// Query returns a query builder for TaskPriority.
func (c *TaskPriorityClient) Query() *TaskPriorityQuery {
	return &TaskPriorityQuery{
		config: c.config,
	}
}

// Get returns a TaskPriority entity by its id.
func (c *TaskPriorityClient) Get(ctx context.Context, id ulid.ID) (*TaskPriority, error) {
	return c.Query().Where(taskpriority.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskPriorityClient) GetX(ctx context.Context, id ulid.ID) *TaskPriority {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryColor queries the color edge of a TaskPriority.
func (c *TaskPriorityClient) QueryColor(tp *TaskPriority) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskpriority.Table, taskpriority.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskpriority.ColorTable, taskpriority.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a TaskPriority.
func (c *TaskPriorityClient) QueryTasks(tp *TaskPriority) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskpriority.Table, taskpriority.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskpriority.TasksTable, taskpriority.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskPriorityClient) Hooks() []Hook {
	return c.hooks.TaskPriority
}

// TaskSectionClient is a client for the TaskSection schema.
type TaskSectionClient struct {
	config
}

// NewTaskSectionClient returns a client for the TaskSection from the given config.
func NewTaskSectionClient(c config) *TaskSectionClient {
	return &TaskSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasksection.Hooks(f(g(h())))`.
func (c *TaskSectionClient) Use(hooks ...Hook) {
	c.hooks.TaskSection = append(c.hooks.TaskSection, hooks...)
}

// Create returns a create builder for TaskSection.
func (c *TaskSectionClient) Create() *TaskSectionCreate {
	mutation := newTaskSectionMutation(c.config, OpCreate)
	return &TaskSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskSection entities.
func (c *TaskSectionClient) CreateBulk(builders ...*TaskSectionCreate) *TaskSectionCreateBulk {
	return &TaskSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskSection.
func (c *TaskSectionClient) Update() *TaskSectionUpdate {
	mutation := newTaskSectionMutation(c.config, OpUpdate)
	return &TaskSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskSectionClient) UpdateOne(ts *TaskSection) *TaskSectionUpdateOne {
	mutation := newTaskSectionMutation(c.config, OpUpdateOne, withTaskSection(ts))
	return &TaskSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskSectionClient) UpdateOneID(id ulid.ID) *TaskSectionUpdateOne {
	mutation := newTaskSectionMutation(c.config, OpUpdateOne, withTaskSectionID(id))
	return &TaskSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskSection.
func (c *TaskSectionClient) Delete() *TaskSectionDelete {
	mutation := newTaskSectionMutation(c.config, OpDelete)
	return &TaskSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskSectionClient) DeleteOne(ts *TaskSection) *TaskSectionDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskSectionClient) DeleteOneID(id ulid.ID) *TaskSectionDeleteOne {
	builder := c.Delete().Where(tasksection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskSectionDeleteOne{builder}
}

// Query returns a query builder for TaskSection.
func (c *TaskSectionClient) Query() *TaskSectionQuery {
	return &TaskSectionQuery{
		config: c.config,
	}
}

// Get returns a TaskSection entity by its id.
func (c *TaskSectionClient) Get(ctx context.Context, id ulid.ID) (*TaskSection, error) {
	return c.Query().Where(tasksection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskSectionClient) GetX(ctx context.Context, id ulid.ID) *TaskSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskSectionClient) Hooks() []Hook {
	return c.hooks.TaskSection
}

// TaskTagClient is a client for the TaskTag schema.
type TaskTagClient struct {
	config
}

// NewTaskTagClient returns a client for the TaskTag from the given config.
func NewTaskTagClient(c config) *TaskTagClient {
	return &TaskTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasktag.Hooks(f(g(h())))`.
func (c *TaskTagClient) Use(hooks ...Hook) {
	c.hooks.TaskTag = append(c.hooks.TaskTag, hooks...)
}

// Create returns a create builder for TaskTag.
func (c *TaskTagClient) Create() *TaskTagCreate {
	mutation := newTaskTagMutation(c.config, OpCreate)
	return &TaskTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskTag entities.
func (c *TaskTagClient) CreateBulk(builders ...*TaskTagCreate) *TaskTagCreateBulk {
	return &TaskTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskTag.
func (c *TaskTagClient) Update() *TaskTagUpdate {
	mutation := newTaskTagMutation(c.config, OpUpdate)
	return &TaskTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskTagClient) UpdateOne(tt *TaskTag) *TaskTagUpdateOne {
	mutation := newTaskTagMutation(c.config, OpUpdateOne, withTaskTag(tt))
	return &TaskTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskTagClient) UpdateOneID(id ulid.ID) *TaskTagUpdateOne {
	mutation := newTaskTagMutation(c.config, OpUpdateOne, withTaskTagID(id))
	return &TaskTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskTag.
func (c *TaskTagClient) Delete() *TaskTagDelete {
	mutation := newTaskTagMutation(c.config, OpDelete)
	return &TaskTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskTagClient) DeleteOne(tt *TaskTag) *TaskTagDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskTagClient) DeleteOneID(id ulid.ID) *TaskTagDeleteOne {
	builder := c.Delete().Where(tasktag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskTagDeleteOne{builder}
}

// Query returns a query builder for TaskTag.
func (c *TaskTagClient) Query() *TaskTagQuery {
	return &TaskTagQuery{
		config: c.config,
	}
}

// Get returns a TaskTag entity by its id.
func (c *TaskTagClient) Get(ctx context.Context, id ulid.ID) (*TaskTag, error) {
	return c.Query().Where(tasktag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskTagClient) GetX(ctx context.Context, id ulid.ID) *TaskTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a TaskTag.
func (c *TaskTagClient) QueryTask(tt *TaskTag) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktag.Table, tasktag.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasktag.TaskTable, tasktag.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a TaskTag.
func (c *TaskTagClient) QueryTag(tt *TaskTag) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktag.Table, tasktag.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasktag.TagTable, tasktag.TagColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskTagClient) Hooks() []Hook {
	return c.hooks.TaskTag
}

// TeammateClient is a client for the Teammate schema.
type TeammateClient struct {
	config
}

// NewTeammateClient returns a client for the Teammate from the given config.
func NewTeammateClient(c config) *TeammateClient {
	return &TeammateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammate.Hooks(f(g(h())))`.
func (c *TeammateClient) Use(hooks ...Hook) {
	c.hooks.Teammate = append(c.hooks.Teammate, hooks...)
}

// Create returns a create builder for Teammate.
func (c *TeammateClient) Create() *TeammateCreate {
	mutation := newTeammateMutation(c.config, OpCreate)
	return &TeammateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teammate entities.
func (c *TeammateClient) CreateBulk(builders ...*TeammateCreate) *TeammateCreateBulk {
	return &TeammateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teammate.
func (c *TeammateClient) Update() *TeammateUpdate {
	mutation := newTeammateMutation(c.config, OpUpdate)
	return &TeammateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeammateClient) UpdateOne(t *Teammate) *TeammateUpdateOne {
	mutation := newTeammateMutation(c.config, OpUpdateOne, withTeammate(t))
	return &TeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeammateClient) UpdateOneID(id ulid.ID) *TeammateUpdateOne {
	mutation := newTeammateMutation(c.config, OpUpdateOne, withTeammateID(id))
	return &TeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teammate.
func (c *TeammateClient) Delete() *TeammateDelete {
	mutation := newTeammateMutation(c.config, OpDelete)
	return &TeammateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeammateClient) DeleteOne(t *Teammate) *TeammateDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeammateClient) DeleteOneID(id ulid.ID) *TeammateDeleteOne {
	builder := c.Delete().Where(teammate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeammateDeleteOne{builder}
}

// Query returns a query builder for Teammate.
func (c *TeammateClient) Query() *TeammateQuery {
	return &TeammateQuery{
		config: c.config,
	}
}

// Get returns a Teammate entity by its id.
func (c *TeammateClient) Get(ctx context.Context, id ulid.ID) (*Teammate, error) {
	return c.Query().Where(teammate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeammateClient) GetX(ctx context.Context, id ulid.ID) *Teammate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspaces queries the workspaces edge of a Teammate.
func (c *TeammateClient) QueryWorkspaces(t *Teammate) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.WorkspacesTable, teammate.WorkspacesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a Teammate.
func (c *TeammateClient) QueryProjects(t *Teammate) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.ProjectsTable, teammate.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTeammates queries the projectTeammates edge of a Teammate.
func (c *TeammateClient) QueryProjectTeammates(t *Teammate) *ProjectTeammateQuery {
	query := &ProjectTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(projectteammate.Table, projectteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.ProjectTeammatesTable, teammate.ProjectTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceTeammates queries the workspaceTeammates edge of a Teammate.
func (c *TeammateClient) QueryWorkspaceTeammates(t *Teammate) *WorkspaceTeammateQuery {
	query := &WorkspaceTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(workspaceteammate.Table, workspaceteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.WorkspaceTeammatesTable, teammate.WorkspaceTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteProjects queries the favoriteProjects edge of a Teammate.
func (c *TeammateClient) QueryFavoriteProjects(t *Teammate) *FavoriteProjectQuery {
	query := &FavoriteProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(favoriteproject.Table, favoriteproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.FavoriteProjectsTable, teammate.FavoriteProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteWorkspaces queries the favoriteWorkspaces edge of a Teammate.
func (c *TeammateClient) QueryFavoriteWorkspaces(t *Teammate) *FavoriteWorkspaceQuery {
	query := &FavoriteWorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(favoriteworkspace.Table, favoriteworkspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.FavoriteWorkspacesTable, teammate.FavoriteWorkspacesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskTabStatuses queries the teammateTaskTabStatuses edge of a Teammate.
func (c *TeammateClient) QueryTeammateTaskTabStatuses(t *Teammate) *TeammateTaskTabStatusQuery {
	query := &TeammateTaskTabStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(teammatetasktabstatus.Table, teammatetasktabstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskTabStatusesTable, teammate.TeammateTaskTabStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskColumns queries the teammateTaskColumns edge of a Teammate.
func (c *TeammateClient) QueryTeammateTaskColumns(t *Teammate) *TeammateTaskColumnQuery {
	query := &TeammateTaskColumnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(teammatetaskcolumn.Table, teammatetaskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskColumnsTable, teammate.TeammateTaskColumnsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskListStatuses queries the teammateTaskListStatuses edge of a Teammate.
func (c *TeammateClient) QueryTeammateTaskListStatuses(t *Teammate) *TeammateTaskListStatusQuery {
	query := &TeammateTaskListStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskListStatusesTable, teammate.TeammateTaskListStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskSections queries the teammateTaskSections edge of a Teammate.
func (c *TeammateClient) QueryTeammateTaskSections(t *Teammate) *TeammateTaskSectionQuery {
	query := &TeammateTaskSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(teammatetasksection.Table, teammatetasksection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskSectionsTable, teammate.TeammateTaskSectionsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a Teammate.
func (c *TeammateClient) QueryTasks(t *Teammate) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TasksTable, teammate.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTasks queries the teammateTasks edge of a Teammate.
func (c *TeammateClient) QueryTeammateTasks(t *Teammate) *TeammateTaskQuery {
	query := &TeammateTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(teammatetask.Table, teammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTasksTable, teammate.TeammateTasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskLikes queries the taskLikes edge of a Teammate.
func (c *TeammateClient) QueryTaskLikes(t *Teammate) *TaskLikeQuery {
	query := &TaskLikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(tasklike.Table, tasklike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskLikesTable, teammate.TaskLikesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskCollaborators queries the taskCollaborators edge of a Teammate.
func (c *TeammateClient) QueryTaskCollaborators(t *Teammate) *TaskCollaboratorQuery {
	query := &TaskCollaboratorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(taskcollaborator.Table, taskcollaborator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskCollaboratorsTable, teammate.TaskCollaboratorsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFeeds queries the taskFeeds edge of a Teammate.
func (c *TeammateClient) QueryTaskFeeds(t *Teammate) *TaskFeedQuery {
	query := &TaskFeedQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(taskfeed.Table, taskfeed.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskFeedsTable, teammate.TaskFeedsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskFeedLikes queries the taskFeedLikes edge of a Teammate.
func (c *TeammateClient) QueryTaskFeedLikes(t *Teammate) *TaskFeedLikeQuery {
	query := &TaskFeedLikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(taskfeedlike.Table, taskfeedlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskFeedLikesTable, teammate.TaskFeedLikesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskActivities queries the taskActivities edge of a Teammate.
func (c *TeammateClient) QueryTaskActivities(t *Teammate) *TaskActivityQuery {
	query := &TaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(taskactivity.Table, taskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskActivitiesTable, teammate.TaskActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceActivities queries the workspaceActivities edge of a Teammate.
func (c *TeammateClient) QueryWorkspaceActivities(t *Teammate) *WorkspaceActivityQuery {
	query := &WorkspaceActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(workspaceactivity.Table, workspaceactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.WorkspaceActivitiesTable, teammate.WorkspaceActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchivedTaskActivities queries the archivedTaskActivities edge of a Teammate.
func (c *TeammateClient) QueryArchivedTaskActivities(t *Teammate) *ArchivedTaskActivityQuery {
	query := &ArchivedTaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(archivedtaskactivity.Table, archivedtaskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.ArchivedTaskActivitiesTable, teammate.ArchivedTaskActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeammateClient) Hooks() []Hook {
	return c.hooks.Teammate
}

// TeammateTaskClient is a client for the TeammateTask schema.
type TeammateTaskClient struct {
	config
}

// NewTeammateTaskClient returns a client for the TeammateTask from the given config.
func NewTeammateTaskClient(c config) *TeammateTaskClient {
	return &TeammateTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammatetask.Hooks(f(g(h())))`.
func (c *TeammateTaskClient) Use(hooks ...Hook) {
	c.hooks.TeammateTask = append(c.hooks.TeammateTask, hooks...)
}

// Create returns a create builder for TeammateTask.
func (c *TeammateTaskClient) Create() *TeammateTaskCreate {
	mutation := newTeammateTaskMutation(c.config, OpCreate)
	return &TeammateTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeammateTask entities.
func (c *TeammateTaskClient) CreateBulk(builders ...*TeammateTaskCreate) *TeammateTaskCreateBulk {
	return &TeammateTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeammateTask.
func (c *TeammateTaskClient) Update() *TeammateTaskUpdate {
	mutation := newTeammateTaskMutation(c.config, OpUpdate)
	return &TeammateTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeammateTaskClient) UpdateOne(tt *TeammateTask) *TeammateTaskUpdateOne {
	mutation := newTeammateTaskMutation(c.config, OpUpdateOne, withTeammateTask(tt))
	return &TeammateTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeammateTaskClient) UpdateOneID(id ulid.ID) *TeammateTaskUpdateOne {
	mutation := newTeammateTaskMutation(c.config, OpUpdateOne, withTeammateTaskID(id))
	return &TeammateTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeammateTask.
func (c *TeammateTaskClient) Delete() *TeammateTaskDelete {
	mutation := newTeammateTaskMutation(c.config, OpDelete)
	return &TeammateTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeammateTaskClient) DeleteOne(tt *TeammateTask) *TeammateTaskDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeammateTaskClient) DeleteOneID(id ulid.ID) *TeammateTaskDeleteOne {
	builder := c.Delete().Where(teammatetask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeammateTaskDeleteOne{builder}
}

// Query returns a query builder for TeammateTask.
func (c *TeammateTaskClient) Query() *TeammateTaskQuery {
	return &TeammateTaskQuery{
		config: c.config,
	}
}

// Get returns a TeammateTask entity by its id.
func (c *TeammateTaskClient) Get(ctx context.Context, id ulid.ID) (*TeammateTask, error) {
	return c.Query().Where(teammatetask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeammateTaskClient) GetX(ctx context.Context, id ulid.ID) *TeammateTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a TeammateTask.
func (c *TeammateTaskClient) QueryTeammate(tt *TeammateTask) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetask.Table, teammatetask.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetask.TeammateTable, teammatetask.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a TeammateTask.
func (c *TeammateTaskClient) QueryTask(tt *TeammateTask) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetask.Table, teammatetask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetask.TaskTable, teammatetask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskSection queries the teammateTaskSection edge of a TeammateTask.
func (c *TeammateTaskClient) QueryTeammateTaskSection(tt *TeammateTask) *TeammateTaskSectionQuery {
	query := &TeammateTaskSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetask.Table, teammatetask.FieldID, id),
			sqlgraph.To(teammatetasksection.Table, teammatetasksection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetask.TeammateTaskSectionTable, teammatetask.TeammateTaskSectionColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a TeammateTask.
func (c *TeammateTaskClient) QueryWorkspace(tt *TeammateTask) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetask.Table, teammatetask.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetask.WorkspaceTable, teammatetask.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeammateTaskClient) Hooks() []Hook {
	return c.hooks.TeammateTask
}

// TeammateTaskColumnClient is a client for the TeammateTaskColumn schema.
type TeammateTaskColumnClient struct {
	config
}

// NewTeammateTaskColumnClient returns a client for the TeammateTaskColumn from the given config.
func NewTeammateTaskColumnClient(c config) *TeammateTaskColumnClient {
	return &TeammateTaskColumnClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammatetaskcolumn.Hooks(f(g(h())))`.
func (c *TeammateTaskColumnClient) Use(hooks ...Hook) {
	c.hooks.TeammateTaskColumn = append(c.hooks.TeammateTaskColumn, hooks...)
}

// Create returns a create builder for TeammateTaskColumn.
func (c *TeammateTaskColumnClient) Create() *TeammateTaskColumnCreate {
	mutation := newTeammateTaskColumnMutation(c.config, OpCreate)
	return &TeammateTaskColumnCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeammateTaskColumn entities.
func (c *TeammateTaskColumnClient) CreateBulk(builders ...*TeammateTaskColumnCreate) *TeammateTaskColumnCreateBulk {
	return &TeammateTaskColumnCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeammateTaskColumn.
func (c *TeammateTaskColumnClient) Update() *TeammateTaskColumnUpdate {
	mutation := newTeammateTaskColumnMutation(c.config, OpUpdate)
	return &TeammateTaskColumnUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeammateTaskColumnClient) UpdateOne(ttc *TeammateTaskColumn) *TeammateTaskColumnUpdateOne {
	mutation := newTeammateTaskColumnMutation(c.config, OpUpdateOne, withTeammateTaskColumn(ttc))
	return &TeammateTaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeammateTaskColumnClient) UpdateOneID(id ulid.ID) *TeammateTaskColumnUpdateOne {
	mutation := newTeammateTaskColumnMutation(c.config, OpUpdateOne, withTeammateTaskColumnID(id))
	return &TeammateTaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeammateTaskColumn.
func (c *TeammateTaskColumnClient) Delete() *TeammateTaskColumnDelete {
	mutation := newTeammateTaskColumnMutation(c.config, OpDelete)
	return &TeammateTaskColumnDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeammateTaskColumnClient) DeleteOne(ttc *TeammateTaskColumn) *TeammateTaskColumnDeleteOne {
	return c.DeleteOneID(ttc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeammateTaskColumnClient) DeleteOneID(id ulid.ID) *TeammateTaskColumnDeleteOne {
	builder := c.Delete().Where(teammatetaskcolumn.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeammateTaskColumnDeleteOne{builder}
}

// Query returns a query builder for TeammateTaskColumn.
func (c *TeammateTaskColumnClient) Query() *TeammateTaskColumnQuery {
	return &TeammateTaskColumnQuery{
		config: c.config,
	}
}

// Get returns a TeammateTaskColumn entity by its id.
func (c *TeammateTaskColumnClient) Get(ctx context.Context, id ulid.ID) (*TeammateTaskColumn, error) {
	return c.Query().Where(teammatetaskcolumn.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeammateTaskColumnClient) GetX(ctx context.Context, id ulid.ID) *TeammateTaskColumn {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a TeammateTaskColumn.
func (c *TeammateTaskColumnClient) QueryTeammate(ttc *TeammateTaskColumn) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetaskcolumn.Table, teammatetaskcolumn.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetaskcolumn.TeammateTable, teammatetaskcolumn.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(ttc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a TeammateTaskColumn.
func (c *TeammateTaskColumnClient) QueryWorkspace(ttc *TeammateTaskColumn) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetaskcolumn.Table, teammatetaskcolumn.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetaskcolumn.WorkspaceTable, teammatetaskcolumn.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(ttc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskColumn queries the taskColumn edge of a TeammateTaskColumn.
func (c *TeammateTaskColumnClient) QueryTaskColumn(ttc *TeammateTaskColumn) *TaskColumnQuery {
	query := &TaskColumnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetaskcolumn.Table, teammatetaskcolumn.FieldID, id),
			sqlgraph.To(taskcolumn.Table, taskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetaskcolumn.TaskColumnTable, teammatetaskcolumn.TaskColumnColumn),
		)
		fromV = sqlgraph.Neighbors(ttc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeammateTaskColumnClient) Hooks() []Hook {
	return c.hooks.TeammateTaskColumn
}

// TeammateTaskListStatusClient is a client for the TeammateTaskListStatus schema.
type TeammateTaskListStatusClient struct {
	config
}

// NewTeammateTaskListStatusClient returns a client for the TeammateTaskListStatus from the given config.
func NewTeammateTaskListStatusClient(c config) *TeammateTaskListStatusClient {
	return &TeammateTaskListStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammatetaskliststatus.Hooks(f(g(h())))`.
func (c *TeammateTaskListStatusClient) Use(hooks ...Hook) {
	c.hooks.TeammateTaskListStatus = append(c.hooks.TeammateTaskListStatus, hooks...)
}

// Create returns a create builder for TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) Create() *TeammateTaskListStatusCreate {
	mutation := newTeammateTaskListStatusMutation(c.config, OpCreate)
	return &TeammateTaskListStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeammateTaskListStatus entities.
func (c *TeammateTaskListStatusClient) CreateBulk(builders ...*TeammateTaskListStatusCreate) *TeammateTaskListStatusCreateBulk {
	return &TeammateTaskListStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) Update() *TeammateTaskListStatusUpdate {
	mutation := newTeammateTaskListStatusMutation(c.config, OpUpdate)
	return &TeammateTaskListStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeammateTaskListStatusClient) UpdateOne(ttls *TeammateTaskListStatus) *TeammateTaskListStatusUpdateOne {
	mutation := newTeammateTaskListStatusMutation(c.config, OpUpdateOne, withTeammateTaskListStatus(ttls))
	return &TeammateTaskListStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeammateTaskListStatusClient) UpdateOneID(id ulid.ID) *TeammateTaskListStatusUpdateOne {
	mutation := newTeammateTaskListStatusMutation(c.config, OpUpdateOne, withTeammateTaskListStatusID(id))
	return &TeammateTaskListStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) Delete() *TeammateTaskListStatusDelete {
	mutation := newTeammateTaskListStatusMutation(c.config, OpDelete)
	return &TeammateTaskListStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeammateTaskListStatusClient) DeleteOne(ttls *TeammateTaskListStatus) *TeammateTaskListStatusDeleteOne {
	return c.DeleteOneID(ttls.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeammateTaskListStatusClient) DeleteOneID(id ulid.ID) *TeammateTaskListStatusDeleteOne {
	builder := c.Delete().Where(teammatetaskliststatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeammateTaskListStatusDeleteOne{builder}
}

// Query returns a query builder for TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) Query() *TeammateTaskListStatusQuery {
	return &TeammateTaskListStatusQuery{
		config: c.config,
	}
}

// Get returns a TeammateTaskListStatus entity by its id.
func (c *TeammateTaskListStatusClient) Get(ctx context.Context, id ulid.ID) (*TeammateTaskListStatus, error) {
	return c.Query().Where(teammatetaskliststatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeammateTaskListStatusClient) GetX(ctx context.Context, id ulid.ID) *TeammateTaskListStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) QueryWorkspace(ttls *TeammateTaskListStatus) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetaskliststatus.WorkspaceTable, teammatetaskliststatus.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(ttls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) QueryTeammate(ttls *TeammateTaskListStatus) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetaskliststatus.TeammateTable, teammatetaskliststatus.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(ttls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskListCompletedStatus queries the taskListCompletedStatus edge of a TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) QueryTaskListCompletedStatus(ttls *TeammateTaskListStatus) *TaskListCompletedStatusQuery {
	query := &TaskListCompletedStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID, id),
			sqlgraph.To(tasklistcompletedstatus.Table, tasklistcompletedstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetaskliststatus.TaskListCompletedStatusTable, teammatetaskliststatus.TaskListCompletedStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ttls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskListSortStatus queries the taskListSortStatus edge of a TeammateTaskListStatus.
func (c *TeammateTaskListStatusClient) QueryTaskListSortStatus(ttls *TeammateTaskListStatus) *TaskListSortStatusQuery {
	query := &TaskListSortStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID, id),
			sqlgraph.To(tasklistsortstatus.Table, tasklistsortstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetaskliststatus.TaskListSortStatusTable, teammatetaskliststatus.TaskListSortStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ttls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeammateTaskListStatusClient) Hooks() []Hook {
	return c.hooks.TeammateTaskListStatus
}

// TeammateTaskSectionClient is a client for the TeammateTaskSection schema.
type TeammateTaskSectionClient struct {
	config
}

// NewTeammateTaskSectionClient returns a client for the TeammateTaskSection from the given config.
func NewTeammateTaskSectionClient(c config) *TeammateTaskSectionClient {
	return &TeammateTaskSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammatetasksection.Hooks(f(g(h())))`.
func (c *TeammateTaskSectionClient) Use(hooks ...Hook) {
	c.hooks.TeammateTaskSection = append(c.hooks.TeammateTaskSection, hooks...)
}

// Create returns a create builder for TeammateTaskSection.
func (c *TeammateTaskSectionClient) Create() *TeammateTaskSectionCreate {
	mutation := newTeammateTaskSectionMutation(c.config, OpCreate)
	return &TeammateTaskSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeammateTaskSection entities.
func (c *TeammateTaskSectionClient) CreateBulk(builders ...*TeammateTaskSectionCreate) *TeammateTaskSectionCreateBulk {
	return &TeammateTaskSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeammateTaskSection.
func (c *TeammateTaskSectionClient) Update() *TeammateTaskSectionUpdate {
	mutation := newTeammateTaskSectionMutation(c.config, OpUpdate)
	return &TeammateTaskSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeammateTaskSectionClient) UpdateOne(tts *TeammateTaskSection) *TeammateTaskSectionUpdateOne {
	mutation := newTeammateTaskSectionMutation(c.config, OpUpdateOne, withTeammateTaskSection(tts))
	return &TeammateTaskSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeammateTaskSectionClient) UpdateOneID(id ulid.ID) *TeammateTaskSectionUpdateOne {
	mutation := newTeammateTaskSectionMutation(c.config, OpUpdateOne, withTeammateTaskSectionID(id))
	return &TeammateTaskSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeammateTaskSection.
func (c *TeammateTaskSectionClient) Delete() *TeammateTaskSectionDelete {
	mutation := newTeammateTaskSectionMutation(c.config, OpDelete)
	return &TeammateTaskSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeammateTaskSectionClient) DeleteOne(tts *TeammateTaskSection) *TeammateTaskSectionDeleteOne {
	return c.DeleteOneID(tts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeammateTaskSectionClient) DeleteOneID(id ulid.ID) *TeammateTaskSectionDeleteOne {
	builder := c.Delete().Where(teammatetasksection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeammateTaskSectionDeleteOne{builder}
}

// Query returns a query builder for TeammateTaskSection.
func (c *TeammateTaskSectionClient) Query() *TeammateTaskSectionQuery {
	return &TeammateTaskSectionQuery{
		config: c.config,
	}
}

// Get returns a TeammateTaskSection entity by its id.
func (c *TeammateTaskSectionClient) Get(ctx context.Context, id ulid.ID) (*TeammateTaskSection, error) {
	return c.Query().Where(teammatetasksection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeammateTaskSectionClient) GetX(ctx context.Context, id ulid.ID) *TeammateTaskSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a TeammateTaskSection.
func (c *TeammateTaskSectionClient) QueryTeammate(tts *TeammateTaskSection) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasksection.Table, teammatetasksection.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetasksection.TeammateTable, teammatetasksection.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(tts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a TeammateTaskSection.
func (c *TeammateTaskSectionClient) QueryWorkspace(tts *TeammateTaskSection) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasksection.Table, teammatetasksection.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetasksection.WorkspaceTable, teammatetasksection.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(tts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTasks queries the teammateTasks edge of a TeammateTaskSection.
func (c *TeammateTaskSectionClient) QueryTeammateTasks(tts *TeammateTaskSection) *TeammateTaskQuery {
	query := &TeammateTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasksection.Table, teammatetasksection.FieldID, id),
			sqlgraph.To(teammatetask.Table, teammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammatetasksection.TeammateTasksTable, teammatetasksection.TeammateTasksColumn),
		)
		fromV = sqlgraph.Neighbors(tts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeammateTaskSectionClient) Hooks() []Hook {
	return c.hooks.TeammateTaskSection
}

// TeammateTaskTabStatusClient is a client for the TeammateTaskTabStatus schema.
type TeammateTaskTabStatusClient struct {
	config
}

// NewTeammateTaskTabStatusClient returns a client for the TeammateTaskTabStatus from the given config.
func NewTeammateTaskTabStatusClient(c config) *TeammateTaskTabStatusClient {
	return &TeammateTaskTabStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammatetasktabstatus.Hooks(f(g(h())))`.
func (c *TeammateTaskTabStatusClient) Use(hooks ...Hook) {
	c.hooks.TeammateTaskTabStatus = append(c.hooks.TeammateTaskTabStatus, hooks...)
}

// Create returns a create builder for TeammateTaskTabStatus.
func (c *TeammateTaskTabStatusClient) Create() *TeammateTaskTabStatusCreate {
	mutation := newTeammateTaskTabStatusMutation(c.config, OpCreate)
	return &TeammateTaskTabStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeammateTaskTabStatus entities.
func (c *TeammateTaskTabStatusClient) CreateBulk(builders ...*TeammateTaskTabStatusCreate) *TeammateTaskTabStatusCreateBulk {
	return &TeammateTaskTabStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeammateTaskTabStatus.
func (c *TeammateTaskTabStatusClient) Update() *TeammateTaskTabStatusUpdate {
	mutation := newTeammateTaskTabStatusMutation(c.config, OpUpdate)
	return &TeammateTaskTabStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeammateTaskTabStatusClient) UpdateOne(ttts *TeammateTaskTabStatus) *TeammateTaskTabStatusUpdateOne {
	mutation := newTeammateTaskTabStatusMutation(c.config, OpUpdateOne, withTeammateTaskTabStatus(ttts))
	return &TeammateTaskTabStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeammateTaskTabStatusClient) UpdateOneID(id ulid.ID) *TeammateTaskTabStatusUpdateOne {
	mutation := newTeammateTaskTabStatusMutation(c.config, OpUpdateOne, withTeammateTaskTabStatusID(id))
	return &TeammateTaskTabStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeammateTaskTabStatus.
func (c *TeammateTaskTabStatusClient) Delete() *TeammateTaskTabStatusDelete {
	mutation := newTeammateTaskTabStatusMutation(c.config, OpDelete)
	return &TeammateTaskTabStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeammateTaskTabStatusClient) DeleteOne(ttts *TeammateTaskTabStatus) *TeammateTaskTabStatusDeleteOne {
	return c.DeleteOneID(ttts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeammateTaskTabStatusClient) DeleteOneID(id ulid.ID) *TeammateTaskTabStatusDeleteOne {
	builder := c.Delete().Where(teammatetasktabstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeammateTaskTabStatusDeleteOne{builder}
}

// Query returns a query builder for TeammateTaskTabStatus.
func (c *TeammateTaskTabStatusClient) Query() *TeammateTaskTabStatusQuery {
	return &TeammateTaskTabStatusQuery{
		config: c.config,
	}
}

// Get returns a TeammateTaskTabStatus entity by its id.
func (c *TeammateTaskTabStatusClient) Get(ctx context.Context, id ulid.ID) (*TeammateTaskTabStatus, error) {
	return c.Query().Where(teammatetasktabstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeammateTaskTabStatusClient) GetX(ctx context.Context, id ulid.ID) *TeammateTaskTabStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a TeammateTaskTabStatus.
func (c *TeammateTaskTabStatusClient) QueryWorkspace(ttts *TeammateTaskTabStatus) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasktabstatus.Table, teammatetasktabstatus.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetasktabstatus.WorkspaceTable, teammatetasktabstatus.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(ttts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a TeammateTaskTabStatus.
func (c *TeammateTaskTabStatusClient) QueryTeammate(ttts *TeammateTaskTabStatus) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ttts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasktabstatus.Table, teammatetasktabstatus.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetasktabstatus.TeammateTable, teammatetasktabstatus.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(ttts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeammateTaskTabStatusClient) Hooks() []Hook {
	return c.hooks.TeammateTaskTabStatus
}

// TestTodoClient is a client for the TestTodo schema.
type TestTodoClient struct {
	config
}

// NewTestTodoClient returns a client for the TestTodo from the given config.
func NewTestTodoClient(c config) *TestTodoClient {
	return &TestTodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testtodo.Hooks(f(g(h())))`.
func (c *TestTodoClient) Use(hooks ...Hook) {
	c.hooks.TestTodo = append(c.hooks.TestTodo, hooks...)
}

// Create returns a create builder for TestTodo.
func (c *TestTodoClient) Create() *TestTodoCreate {
	mutation := newTestTodoMutation(c.config, OpCreate)
	return &TestTodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestTodo entities.
func (c *TestTodoClient) CreateBulk(builders ...*TestTodoCreate) *TestTodoCreateBulk {
	return &TestTodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestTodo.
func (c *TestTodoClient) Update() *TestTodoUpdate {
	mutation := newTestTodoMutation(c.config, OpUpdate)
	return &TestTodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestTodoClient) UpdateOne(tt *TestTodo) *TestTodoUpdateOne {
	mutation := newTestTodoMutation(c.config, OpUpdateOne, withTestTodo(tt))
	return &TestTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestTodoClient) UpdateOneID(id ulid.ID) *TestTodoUpdateOne {
	mutation := newTestTodoMutation(c.config, OpUpdateOne, withTestTodoID(id))
	return &TestTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestTodo.
func (c *TestTodoClient) Delete() *TestTodoDelete {
	mutation := newTestTodoMutation(c.config, OpDelete)
	return &TestTodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestTodoClient) DeleteOne(tt *TestTodo) *TestTodoDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestTodoClient) DeleteOneID(id ulid.ID) *TestTodoDeleteOne {
	builder := c.Delete().Where(testtodo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestTodoDeleteOne{builder}
}

// Query returns a query builder for TestTodo.
func (c *TestTodoClient) Query() *TestTodoQuery {
	return &TestTodoQuery{
		config: c.config,
	}
}

// Get returns a TestTodo entity by its id.
func (c *TestTodoClient) Get(ctx context.Context, id ulid.ID) (*TestTodo, error) {
	return c.Query().Where(testtodo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestTodoClient) GetX(ctx context.Context, id ulid.ID) *TestTodo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestUser queries the testUser edge of a TestTodo.
func (c *TestTodoClient) QueryTestUser(tt *TestTodo) *TestUserQuery {
	query := &TestUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testtodo.Table, testtodo.FieldID, id),
			sqlgraph.To(testuser.Table, testuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testtodo.TestUserTable, testtodo.TestUserColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a TestTodo.
func (c *TestTodoClient) QueryParent(tt *TestTodo) *TestTodoQuery {
	query := &TestTodoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testtodo.Table, testtodo.FieldID, id),
			sqlgraph.To(testtodo.Table, testtodo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testtodo.ParentTable, testtodo.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a TestTodo.
func (c *TestTodoClient) QueryChildren(tt *TestTodo) *TestTodoQuery {
	query := &TestTodoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testtodo.Table, testtodo.FieldID, id),
			sqlgraph.To(testtodo.Table, testtodo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testtodo.ChildrenTable, testtodo.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestTodoClient) Hooks() []Hook {
	return c.hooks.TestTodo
}

// TestUserClient is a client for the TestUser schema.
type TestUserClient struct {
	config
}

// NewTestUserClient returns a client for the TestUser from the given config.
func NewTestUserClient(c config) *TestUserClient {
	return &TestUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testuser.Hooks(f(g(h())))`.
func (c *TestUserClient) Use(hooks ...Hook) {
	c.hooks.TestUser = append(c.hooks.TestUser, hooks...)
}

// Create returns a create builder for TestUser.
func (c *TestUserClient) Create() *TestUserCreate {
	mutation := newTestUserMutation(c.config, OpCreate)
	return &TestUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestUser entities.
func (c *TestUserClient) CreateBulk(builders ...*TestUserCreate) *TestUserCreateBulk {
	return &TestUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestUser.
func (c *TestUserClient) Update() *TestUserUpdate {
	mutation := newTestUserMutation(c.config, OpUpdate)
	return &TestUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestUserClient) UpdateOne(tu *TestUser) *TestUserUpdateOne {
	mutation := newTestUserMutation(c.config, OpUpdateOne, withTestUser(tu))
	return &TestUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestUserClient) UpdateOneID(id ulid.ID) *TestUserUpdateOne {
	mutation := newTestUserMutation(c.config, OpUpdateOne, withTestUserID(id))
	return &TestUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestUser.
func (c *TestUserClient) Delete() *TestUserDelete {
	mutation := newTestUserMutation(c.config, OpDelete)
	return &TestUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestUserClient) DeleteOne(tu *TestUser) *TestUserDeleteOne {
	return c.DeleteOneID(tu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestUserClient) DeleteOneID(id ulid.ID) *TestUserDeleteOne {
	builder := c.Delete().Where(testuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestUserDeleteOne{builder}
}

// Query returns a query builder for TestUser.
func (c *TestUserClient) Query() *TestUserQuery {
	return &TestUserQuery{
		config: c.config,
	}
}

// Get returns a TestUser entity by its id.
func (c *TestUserClient) Get(ctx context.Context, id ulid.ID) (*TestUser, error) {
	return c.Query().Where(testuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestUserClient) GetX(ctx context.Context, id ulid.ID) *TestUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestTodos queries the testTodos edge of a TestUser.
func (c *TestUserClient) QueryTestTodos(tu *TestUser) *TestTodoQuery {
	query := &TestTodoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testuser.Table, testuser.FieldID, id),
			sqlgraph.To(testtodo.Table, testtodo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testuser.TestTodosTable, testuser.TestTodosColumn),
		)
		fromV = sqlgraph.Neighbors(tu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestUserClient) Hooks() []Hook {
	return c.hooks.TestUser
}

// WorkspaceClient is a client for the Workspace schema.
type WorkspaceClient struct {
	config
}

// NewWorkspaceClient returns a client for the Workspace from the given config.
func NewWorkspaceClient(c config) *WorkspaceClient {
	return &WorkspaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspace.Hooks(f(g(h())))`.
func (c *WorkspaceClient) Use(hooks ...Hook) {
	c.hooks.Workspace = append(c.hooks.Workspace, hooks...)
}

// Create returns a create builder for Workspace.
func (c *WorkspaceClient) Create() *WorkspaceCreate {
	mutation := newWorkspaceMutation(c.config, OpCreate)
	return &WorkspaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workspace entities.
func (c *WorkspaceClient) CreateBulk(builders ...*WorkspaceCreate) *WorkspaceCreateBulk {
	return &WorkspaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workspace.
func (c *WorkspaceClient) Update() *WorkspaceUpdate {
	mutation := newWorkspaceMutation(c.config, OpUpdate)
	return &WorkspaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceClient) UpdateOne(w *Workspace) *WorkspaceUpdateOne {
	mutation := newWorkspaceMutation(c.config, OpUpdateOne, withWorkspace(w))
	return &WorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceClient) UpdateOneID(id ulid.ID) *WorkspaceUpdateOne {
	mutation := newWorkspaceMutation(c.config, OpUpdateOne, withWorkspaceID(id))
	return &WorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workspace.
func (c *WorkspaceClient) Delete() *WorkspaceDelete {
	mutation := newWorkspaceMutation(c.config, OpDelete)
	return &WorkspaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkspaceClient) DeleteOne(w *Workspace) *WorkspaceDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkspaceClient) DeleteOneID(id ulid.ID) *WorkspaceDeleteOne {
	builder := c.Delete().Where(workspace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceDeleteOne{builder}
}

// Query returns a query builder for Workspace.
func (c *WorkspaceClient) Query() *WorkspaceQuery {
	return &WorkspaceQuery{
		config: c.config,
	}
}

// Get returns a Workspace entity by its id.
func (c *WorkspaceClient) Get(ctx context.Context, id ulid.ID) (*Workspace, error) {
	return c.Query().Where(workspace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceClient) GetX(ctx context.Context, id ulid.ID) *Workspace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a Workspace.
func (c *WorkspaceClient) QueryTeammate(w *Workspace) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspace.TeammateTable, workspace.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a Workspace.
func (c *WorkspaceClient) QueryProjects(w *Workspace) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.ProjectsTable, workspace.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceTeammates queries the workspaceTeammates edge of a Workspace.
func (c *WorkspaceClient) QueryWorkspaceTeammates(w *Workspace) *WorkspaceTeammateQuery {
	query := &WorkspaceTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(workspaceteammate.Table, workspaceteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.WorkspaceTeammatesTable, workspace.WorkspaceTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteWorkspaces queries the favoriteWorkspaces edge of a Workspace.
func (c *WorkspaceClient) QueryFavoriteWorkspaces(w *Workspace) *FavoriteWorkspaceQuery {
	query := &FavoriteWorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(favoriteworkspace.Table, favoriteworkspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.FavoriteWorkspacesTable, workspace.FavoriteWorkspacesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskTabStatuses queries the teammateTaskTabStatuses edge of a Workspace.
func (c *WorkspaceClient) QueryTeammateTaskTabStatuses(w *Workspace) *TeammateTaskTabStatusQuery {
	query := &TeammateTaskTabStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(teammatetasktabstatus.Table, teammatetasktabstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TeammateTaskTabStatusesTable, workspace.TeammateTaskTabStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskListStatuses queries the teammateTaskListStatuses edge of a Workspace.
func (c *WorkspaceClient) QueryTeammateTaskListStatuses(w *Workspace) *TeammateTaskListStatusQuery {
	query := &TeammateTaskListStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TeammateTaskListStatusesTable, workspace.TeammateTaskListStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskSections queries the teammateTaskSections edge of a Workspace.
func (c *WorkspaceClient) QueryTeammateTaskSections(w *Workspace) *TeammateTaskSectionQuery {
	query := &TeammateTaskSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(teammatetasksection.Table, teammatetasksection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TeammateTaskSectionsTable, workspace.TeammateTaskSectionsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskLikes queries the taskLikes edge of a Workspace.
func (c *WorkspaceClient) QueryTaskLikes(w *Workspace) *TaskLikeQuery {
	query := &TaskLikeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(tasklike.Table, tasklike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TaskLikesTable, workspace.TaskLikesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Workspace.
func (c *WorkspaceClient) QueryTags(w *Workspace) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TagsTable, workspace.TagsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTaskColumns queries the teammateTaskColumns edge of a Workspace.
func (c *WorkspaceClient) QueryTeammateTaskColumns(w *Workspace) *TeammateTaskColumnQuery {
	query := &TeammateTaskColumnQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(teammatetaskcolumn.Table, teammatetaskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TeammateTaskColumnsTable, workspace.TeammateTaskColumnsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammateTasks queries the teammateTasks edge of a Workspace.
func (c *WorkspaceClient) QueryTeammateTasks(w *Workspace) *TeammateTaskQuery {
	query := &TeammateTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(teammatetask.Table, teammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TeammateTasksTable, workspace.TeammateTasksColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeletedTasksRef queries the deletedTasksRef edge of a Workspace.
func (c *WorkspaceClient) QueryDeletedTasksRef(w *Workspace) *DeletedTaskQuery {
	query := &DeletedTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(deletedtask.Table, deletedtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.DeletedTasksRefTable, workspace.DeletedTasksRefColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceActivities queries the workspaceActivities edge of a Workspace.
func (c *WorkspaceClient) QueryWorkspaceActivities(w *Workspace) *WorkspaceActivityQuery {
	query := &WorkspaceActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(workspaceactivity.Table, workspaceactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.WorkspaceActivitiesTable, workspace.WorkspaceActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskActivities queries the taskActivities edge of a Workspace.
func (c *WorkspaceClient) QueryTaskActivities(w *Workspace) *TaskActivityQuery {
	query := &TaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(taskactivity.Table, taskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.TaskActivitiesTable, workspace.TaskActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchivedTaskActivities queries the archivedTaskActivities edge of a Workspace.
func (c *WorkspaceClient) QueryArchivedTaskActivities(w *Workspace) *ArchivedTaskActivityQuery {
	query := &ArchivedTaskActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(archivedtaskactivity.Table, archivedtaskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.ArchivedTaskActivitiesTable, workspace.ArchivedTaskActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkspaceClient) Hooks() []Hook {
	return c.hooks.Workspace
}

// WorkspaceActivityClient is a client for the WorkspaceActivity schema.
type WorkspaceActivityClient struct {
	config
}

// NewWorkspaceActivityClient returns a client for the WorkspaceActivity from the given config.
func NewWorkspaceActivityClient(c config) *WorkspaceActivityClient {
	return &WorkspaceActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspaceactivity.Hooks(f(g(h())))`.
func (c *WorkspaceActivityClient) Use(hooks ...Hook) {
	c.hooks.WorkspaceActivity = append(c.hooks.WorkspaceActivity, hooks...)
}

// Create returns a create builder for WorkspaceActivity.
func (c *WorkspaceActivityClient) Create() *WorkspaceActivityCreate {
	mutation := newWorkspaceActivityMutation(c.config, OpCreate)
	return &WorkspaceActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkspaceActivity entities.
func (c *WorkspaceActivityClient) CreateBulk(builders ...*WorkspaceActivityCreate) *WorkspaceActivityCreateBulk {
	return &WorkspaceActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkspaceActivity.
func (c *WorkspaceActivityClient) Update() *WorkspaceActivityUpdate {
	mutation := newWorkspaceActivityMutation(c.config, OpUpdate)
	return &WorkspaceActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceActivityClient) UpdateOne(wa *WorkspaceActivity) *WorkspaceActivityUpdateOne {
	mutation := newWorkspaceActivityMutation(c.config, OpUpdateOne, withWorkspaceActivity(wa))
	return &WorkspaceActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceActivityClient) UpdateOneID(id ulid.ID) *WorkspaceActivityUpdateOne {
	mutation := newWorkspaceActivityMutation(c.config, OpUpdateOne, withWorkspaceActivityID(id))
	return &WorkspaceActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkspaceActivity.
func (c *WorkspaceActivityClient) Delete() *WorkspaceActivityDelete {
	mutation := newWorkspaceActivityMutation(c.config, OpDelete)
	return &WorkspaceActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkspaceActivityClient) DeleteOne(wa *WorkspaceActivity) *WorkspaceActivityDeleteOne {
	return c.DeleteOneID(wa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkspaceActivityClient) DeleteOneID(id ulid.ID) *WorkspaceActivityDeleteOne {
	builder := c.Delete().Where(workspaceactivity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceActivityDeleteOne{builder}
}

// Query returns a query builder for WorkspaceActivity.
func (c *WorkspaceActivityClient) Query() *WorkspaceActivityQuery {
	return &WorkspaceActivityQuery{
		config: c.config,
	}
}

// Get returns a WorkspaceActivity entity by its id.
func (c *WorkspaceActivityClient) Get(ctx context.Context, id ulid.ID) (*WorkspaceActivity, error) {
	return c.Query().Where(workspaceactivity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceActivityClient) GetX(ctx context.Context, id ulid.ID) *WorkspaceActivity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivityType queries the activityType edge of a WorkspaceActivity.
func (c *WorkspaceActivityClient) QueryActivityType(wa *WorkspaceActivity) *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, id),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.ActivityTypeTable, workspaceactivity.ActivityTypeColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspace queries the workspace edge of a WorkspaceActivity.
func (c *WorkspaceActivityClient) QueryWorkspace(wa *WorkspaceActivity) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.WorkspaceTable, workspaceactivity.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a WorkspaceActivity.
func (c *WorkspaceActivityClient) QueryProject(wa *WorkspaceActivity) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.ProjectTable, workspaceactivity.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a WorkspaceActivity.
func (c *WorkspaceActivityClient) QueryTeammate(wa *WorkspaceActivity) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.TeammateTable, workspaceactivity.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceActivityTasks queries the workspaceActivityTasks edge of a WorkspaceActivity.
func (c *WorkspaceActivityClient) QueryWorkspaceActivityTasks(wa *WorkspaceActivity) *WorkspaceActivityTaskQuery {
	query := &WorkspaceActivityTaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, id),
			sqlgraph.To(workspaceactivitytask.Table, workspaceactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspaceactivity.WorkspaceActivityTasksTable, workspaceactivity.WorkspaceActivityTasksColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkspaceActivityClient) Hooks() []Hook {
	return c.hooks.WorkspaceActivity
}

// WorkspaceActivityTaskClient is a client for the WorkspaceActivityTask schema.
type WorkspaceActivityTaskClient struct {
	config
}

// NewWorkspaceActivityTaskClient returns a client for the WorkspaceActivityTask from the given config.
func NewWorkspaceActivityTaskClient(c config) *WorkspaceActivityTaskClient {
	return &WorkspaceActivityTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspaceactivitytask.Hooks(f(g(h())))`.
func (c *WorkspaceActivityTaskClient) Use(hooks ...Hook) {
	c.hooks.WorkspaceActivityTask = append(c.hooks.WorkspaceActivityTask, hooks...)
}

// Create returns a create builder for WorkspaceActivityTask.
func (c *WorkspaceActivityTaskClient) Create() *WorkspaceActivityTaskCreate {
	mutation := newWorkspaceActivityTaskMutation(c.config, OpCreate)
	return &WorkspaceActivityTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkspaceActivityTask entities.
func (c *WorkspaceActivityTaskClient) CreateBulk(builders ...*WorkspaceActivityTaskCreate) *WorkspaceActivityTaskCreateBulk {
	return &WorkspaceActivityTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkspaceActivityTask.
func (c *WorkspaceActivityTaskClient) Update() *WorkspaceActivityTaskUpdate {
	mutation := newWorkspaceActivityTaskMutation(c.config, OpUpdate)
	return &WorkspaceActivityTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceActivityTaskClient) UpdateOne(wat *WorkspaceActivityTask) *WorkspaceActivityTaskUpdateOne {
	mutation := newWorkspaceActivityTaskMutation(c.config, OpUpdateOne, withWorkspaceActivityTask(wat))
	return &WorkspaceActivityTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceActivityTaskClient) UpdateOneID(id ulid.ID) *WorkspaceActivityTaskUpdateOne {
	mutation := newWorkspaceActivityTaskMutation(c.config, OpUpdateOne, withWorkspaceActivityTaskID(id))
	return &WorkspaceActivityTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkspaceActivityTask.
func (c *WorkspaceActivityTaskClient) Delete() *WorkspaceActivityTaskDelete {
	mutation := newWorkspaceActivityTaskMutation(c.config, OpDelete)
	return &WorkspaceActivityTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkspaceActivityTaskClient) DeleteOne(wat *WorkspaceActivityTask) *WorkspaceActivityTaskDeleteOne {
	return c.DeleteOneID(wat.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkspaceActivityTaskClient) DeleteOneID(id ulid.ID) *WorkspaceActivityTaskDeleteOne {
	builder := c.Delete().Where(workspaceactivitytask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceActivityTaskDeleteOne{builder}
}

// Query returns a query builder for WorkspaceActivityTask.
func (c *WorkspaceActivityTaskClient) Query() *WorkspaceActivityTaskQuery {
	return &WorkspaceActivityTaskQuery{
		config: c.config,
	}
}

// Get returns a WorkspaceActivityTask entity by its id.
func (c *WorkspaceActivityTaskClient) Get(ctx context.Context, id ulid.ID) (*WorkspaceActivityTask, error) {
	return c.Query().Where(workspaceactivitytask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceActivityTaskClient) GetX(ctx context.Context, id ulid.ID) *WorkspaceActivityTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a WorkspaceActivityTask.
func (c *WorkspaceActivityTaskClient) QueryTask(wat *WorkspaceActivityTask) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivitytask.Table, workspaceactivitytask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivitytask.TaskTable, workspaceactivitytask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(wat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceActivity queries the workspaceActivity edge of a WorkspaceActivityTask.
func (c *WorkspaceActivityTaskClient) QueryWorkspaceActivity(wat *WorkspaceActivityTask) *WorkspaceActivityQuery {
	query := &WorkspaceActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivitytask.Table, workspaceactivitytask.FieldID, id),
			sqlgraph.To(workspaceactivity.Table, workspaceactivity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivitytask.WorkspaceActivityTable, workspaceactivitytask.WorkspaceActivityColumn),
		)
		fromV = sqlgraph.Neighbors(wat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkspaceActivityTaskClient) Hooks() []Hook {
	return c.hooks.WorkspaceActivityTask
}

// WorkspaceTeammateClient is a client for the WorkspaceTeammate schema.
type WorkspaceTeammateClient struct {
	config
}

// NewWorkspaceTeammateClient returns a client for the WorkspaceTeammate from the given config.
func NewWorkspaceTeammateClient(c config) *WorkspaceTeammateClient {
	return &WorkspaceTeammateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspaceteammate.Hooks(f(g(h())))`.
func (c *WorkspaceTeammateClient) Use(hooks ...Hook) {
	c.hooks.WorkspaceTeammate = append(c.hooks.WorkspaceTeammate, hooks...)
}

// Create returns a create builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Create() *WorkspaceTeammateCreate {
	mutation := newWorkspaceTeammateMutation(c.config, OpCreate)
	return &WorkspaceTeammateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkspaceTeammate entities.
func (c *WorkspaceTeammateClient) CreateBulk(builders ...*WorkspaceTeammateCreate) *WorkspaceTeammateCreateBulk {
	return &WorkspaceTeammateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Update() *WorkspaceTeammateUpdate {
	mutation := newWorkspaceTeammateMutation(c.config, OpUpdate)
	return &WorkspaceTeammateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceTeammateClient) UpdateOne(wt *WorkspaceTeammate) *WorkspaceTeammateUpdateOne {
	mutation := newWorkspaceTeammateMutation(c.config, OpUpdateOne, withWorkspaceTeammate(wt))
	return &WorkspaceTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceTeammateClient) UpdateOneID(id ulid.ID) *WorkspaceTeammateUpdateOne {
	mutation := newWorkspaceTeammateMutation(c.config, OpUpdateOne, withWorkspaceTeammateID(id))
	return &WorkspaceTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Delete() *WorkspaceTeammateDelete {
	mutation := newWorkspaceTeammateMutation(c.config, OpDelete)
	return &WorkspaceTeammateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkspaceTeammateClient) DeleteOne(wt *WorkspaceTeammate) *WorkspaceTeammateDeleteOne {
	return c.DeleteOneID(wt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkspaceTeammateClient) DeleteOneID(id ulid.ID) *WorkspaceTeammateDeleteOne {
	builder := c.Delete().Where(workspaceteammate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceTeammateDeleteOne{builder}
}

// Query returns a query builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Query() *WorkspaceTeammateQuery {
	return &WorkspaceTeammateQuery{
		config: c.config,
	}
}

// Get returns a WorkspaceTeammate entity by its id.
func (c *WorkspaceTeammateClient) Get(ctx context.Context, id ulid.ID) (*WorkspaceTeammate, error) {
	return c.Query().Where(workspaceteammate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceTeammateClient) GetX(ctx context.Context, id ulid.ID) *WorkspaceTeammate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a WorkspaceTeammate.
func (c *WorkspaceTeammateClient) QueryWorkspace(wt *WorkspaceTeammate) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceteammate.Table, workspaceteammate.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceteammate.WorkspaceTable, workspaceteammate.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a WorkspaceTeammate.
func (c *WorkspaceTeammateClient) QueryTeammate(wt *WorkspaceTeammate) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceteammate.Table, workspaceteammate.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceteammate.TeammateTable, workspaceteammate.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkspaceTeammateClient) Hooks() []Hook {
	return c.hooks.WorkspaceTeammate
}
