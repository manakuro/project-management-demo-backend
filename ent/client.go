// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"project-management-demo-backend/ent/migrate"
	"project-management-demo-backend/ent/schema/ulid"

	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// TestTodo is the client for interacting with the TestTodo builders.
	TestTodo *TestTodoClient
	// TestUser is the client for interacting with the TestUser builders.
	TestUser *TestUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.TestTodo = NewTestTodoClient(c.config)
	c.TestUser = NewTestUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		TestTodo: NewTestTodoClient(cfg),
		TestUser: NewTestUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:   cfg,
		TestTodo: NewTestTodoClient(cfg),
		TestUser: NewTestUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		TestTodo.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.TestTodo.Use(hooks...)
	c.TestUser.Use(hooks...)
}

// TestTodoClient is a client for the TestTodo schema.
type TestTodoClient struct {
	config
}

// NewTestTodoClient returns a client for the TestTodo from the given config.
func NewTestTodoClient(c config) *TestTodoClient {
	return &TestTodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testtodo.Hooks(f(g(h())))`.
func (c *TestTodoClient) Use(hooks ...Hook) {
	c.hooks.TestTodo = append(c.hooks.TestTodo, hooks...)
}

// Create returns a create builder for TestTodo.
func (c *TestTodoClient) Create() *TestTodoCreate {
	mutation := newTestTodoMutation(c.config, OpCreate)
	return &TestTodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestTodo entities.
func (c *TestTodoClient) CreateBulk(builders ...*TestTodoCreate) *TestTodoCreateBulk {
	return &TestTodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestTodo.
func (c *TestTodoClient) Update() *TestTodoUpdate {
	mutation := newTestTodoMutation(c.config, OpUpdate)
	return &TestTodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestTodoClient) UpdateOne(tt *TestTodo) *TestTodoUpdateOne {
	mutation := newTestTodoMutation(c.config, OpUpdateOne, withTestTodo(tt))
	return &TestTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestTodoClient) UpdateOneID(id ulid.ID) *TestTodoUpdateOne {
	mutation := newTestTodoMutation(c.config, OpUpdateOne, withTestTodoID(id))
	return &TestTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestTodo.
func (c *TestTodoClient) Delete() *TestTodoDelete {
	mutation := newTestTodoMutation(c.config, OpDelete)
	return &TestTodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestTodoClient) DeleteOne(tt *TestTodo) *TestTodoDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestTodoClient) DeleteOneID(id ulid.ID) *TestTodoDeleteOne {
	builder := c.Delete().Where(testtodo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestTodoDeleteOne{builder}
}

// Query returns a query builder for TestTodo.
func (c *TestTodoClient) Query() *TestTodoQuery {
	return &TestTodoQuery{
		config: c.config,
	}
}

// Get returns a TestTodo entity by its id.
func (c *TestTodoClient) Get(ctx context.Context, id ulid.ID) (*TestTodo, error) {
	return c.Query().Where(testtodo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestTodoClient) GetX(ctx context.Context, id ulid.ID) *TestTodo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestUser queries the test_user edge of a TestTodo.
func (c *TestTodoClient) QueryTestUser(tt *TestTodo) *TestUserQuery {
	query := &TestUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testtodo.Table, testtodo.FieldID, id),
			sqlgraph.To(testuser.Table, testuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testtodo.TestUserTable, testtodo.TestUserColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestTodoClient) Hooks() []Hook {
	return c.hooks.TestTodo
}

// TestUserClient is a client for the TestUser schema.
type TestUserClient struct {
	config
}

// NewTestUserClient returns a client for the TestUser from the given config.
func NewTestUserClient(c config) *TestUserClient {
	return &TestUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testuser.Hooks(f(g(h())))`.
func (c *TestUserClient) Use(hooks ...Hook) {
	c.hooks.TestUser = append(c.hooks.TestUser, hooks...)
}

// Create returns a create builder for TestUser.
func (c *TestUserClient) Create() *TestUserCreate {
	mutation := newTestUserMutation(c.config, OpCreate)
	return &TestUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestUser entities.
func (c *TestUserClient) CreateBulk(builders ...*TestUserCreate) *TestUserCreateBulk {
	return &TestUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestUser.
func (c *TestUserClient) Update() *TestUserUpdate {
	mutation := newTestUserMutation(c.config, OpUpdate)
	return &TestUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestUserClient) UpdateOne(tu *TestUser) *TestUserUpdateOne {
	mutation := newTestUserMutation(c.config, OpUpdateOne, withTestUser(tu))
	return &TestUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestUserClient) UpdateOneID(id ulid.ID) *TestUserUpdateOne {
	mutation := newTestUserMutation(c.config, OpUpdateOne, withTestUserID(id))
	return &TestUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestUser.
func (c *TestUserClient) Delete() *TestUserDelete {
	mutation := newTestUserMutation(c.config, OpDelete)
	return &TestUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestUserClient) DeleteOne(tu *TestUser) *TestUserDeleteOne {
	return c.DeleteOneID(tu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestUserClient) DeleteOneID(id ulid.ID) *TestUserDeleteOne {
	builder := c.Delete().Where(testuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestUserDeleteOne{builder}
}

// Query returns a query builder for TestUser.
func (c *TestUserClient) Query() *TestUserQuery {
	return &TestUserQuery{
		config: c.config,
	}
}

// Get returns a TestUser entity by its id.
func (c *TestUserClient) Get(ctx context.Context, id ulid.ID) (*TestUser, error) {
	return c.Query().Where(testuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestUserClient) GetX(ctx context.Context, id ulid.ID) *TestUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestTodos queries the test_todos edge of a TestUser.
func (c *TestUserClient) QueryTestTodos(tu *TestUser) *TestTodoQuery {
	query := &TestTodoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testuser.Table, testuser.FieldID, id),
			sqlgraph.To(testtodo.Table, testtodo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testuser.TestTodosTable, testuser.TestTodosColumn),
		)
		fromV = sqlgraph.Neighbors(tu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestUserClient) Hooks() []Hook {
	return c.hooks.TestUser
}
