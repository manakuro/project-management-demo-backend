// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"project-management-demo-backend/ent/migrate"
	"project-management-demo-backend/ent/schema/ulid"

	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/mytaskstabstatus"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceteammate"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Color is the client for interacting with the Color builders.
	Color *ColorClient
	// FavoriteProject is the client for interacting with the FavoriteProject builders.
	FavoriteProject *FavoriteProjectClient
	// FavoriteWorkspace is the client for interacting with the FavoriteWorkspace builders.
	FavoriteWorkspace *FavoriteWorkspaceClient
	// Icon is the client for interacting with the Icon builders.
	Icon *IconClient
	// MyTasksTabStatus is the client for interacting with the MyTasksTabStatus builders.
	MyTasksTabStatus *MyTasksTabStatusClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectBaseColor is the client for interacting with the ProjectBaseColor builders.
	ProjectBaseColor *ProjectBaseColorClient
	// ProjectIcon is the client for interacting with the ProjectIcon builders.
	ProjectIcon *ProjectIconClient
	// ProjectLightColor is the client for interacting with the ProjectLightColor builders.
	ProjectLightColor *ProjectLightColorClient
	// ProjectTeammate is the client for interacting with the ProjectTeammate builders.
	ProjectTeammate *ProjectTeammateClient
	// TaskColumn is the client for interacting with the TaskColumn builders.
	TaskColumn *TaskColumnClient
	// Teammate is the client for interacting with the Teammate builders.
	Teammate *TeammateClient
	// TestTodo is the client for interacting with the TestTodo builders.
	TestTodo *TestTodoClient
	// TestUser is the client for interacting with the TestUser builders.
	TestUser *TestUserClient
	// Workspace is the client for interacting with the Workspace builders.
	Workspace *WorkspaceClient
	// WorkspaceTeammate is the client for interacting with the WorkspaceTeammate builders.
	WorkspaceTeammate *WorkspaceTeammateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Color = NewColorClient(c.config)
	c.FavoriteProject = NewFavoriteProjectClient(c.config)
	c.FavoriteWorkspace = NewFavoriteWorkspaceClient(c.config)
	c.Icon = NewIconClient(c.config)
	c.MyTasksTabStatus = NewMyTasksTabStatusClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectBaseColor = NewProjectBaseColorClient(c.config)
	c.ProjectIcon = NewProjectIconClient(c.config)
	c.ProjectLightColor = NewProjectLightColorClient(c.config)
	c.ProjectTeammate = NewProjectTeammateClient(c.config)
	c.TaskColumn = NewTaskColumnClient(c.config)
	c.Teammate = NewTeammateClient(c.config)
	c.TestTodo = NewTestTodoClient(c.config)
	c.TestUser = NewTestUserClient(c.config)
	c.Workspace = NewWorkspaceClient(c.config)
	c.WorkspaceTeammate = NewWorkspaceTeammateClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Color:             NewColorClient(cfg),
		FavoriteProject:   NewFavoriteProjectClient(cfg),
		FavoriteWorkspace: NewFavoriteWorkspaceClient(cfg),
		Icon:              NewIconClient(cfg),
		MyTasksTabStatus:  NewMyTasksTabStatusClient(cfg),
		Project:           NewProjectClient(cfg),
		ProjectBaseColor:  NewProjectBaseColorClient(cfg),
		ProjectIcon:       NewProjectIconClient(cfg),
		ProjectLightColor: NewProjectLightColorClient(cfg),
		ProjectTeammate:   NewProjectTeammateClient(cfg),
		TaskColumn:        NewTaskColumnClient(cfg),
		Teammate:          NewTeammateClient(cfg),
		TestTodo:          NewTestTodoClient(cfg),
		TestUser:          NewTestUserClient(cfg),
		Workspace:         NewWorkspaceClient(cfg),
		WorkspaceTeammate: NewWorkspaceTeammateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:            cfg,
		Color:             NewColorClient(cfg),
		FavoriteProject:   NewFavoriteProjectClient(cfg),
		FavoriteWorkspace: NewFavoriteWorkspaceClient(cfg),
		Icon:              NewIconClient(cfg),
		MyTasksTabStatus:  NewMyTasksTabStatusClient(cfg),
		Project:           NewProjectClient(cfg),
		ProjectBaseColor:  NewProjectBaseColorClient(cfg),
		ProjectIcon:       NewProjectIconClient(cfg),
		ProjectLightColor: NewProjectLightColorClient(cfg),
		ProjectTeammate:   NewProjectTeammateClient(cfg),
		TaskColumn:        NewTaskColumnClient(cfg),
		Teammate:          NewTeammateClient(cfg),
		TestTodo:          NewTestTodoClient(cfg),
		TestUser:          NewTestUserClient(cfg),
		Workspace:         NewWorkspaceClient(cfg),
		WorkspaceTeammate: NewWorkspaceTeammateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Color.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Color.Use(hooks...)
	c.FavoriteProject.Use(hooks...)
	c.FavoriteWorkspace.Use(hooks...)
	c.Icon.Use(hooks...)
	c.MyTasksTabStatus.Use(hooks...)
	c.Project.Use(hooks...)
	c.ProjectBaseColor.Use(hooks...)
	c.ProjectIcon.Use(hooks...)
	c.ProjectLightColor.Use(hooks...)
	c.ProjectTeammate.Use(hooks...)
	c.TaskColumn.Use(hooks...)
	c.Teammate.Use(hooks...)
	c.TestTodo.Use(hooks...)
	c.TestUser.Use(hooks...)
	c.Workspace.Use(hooks...)
	c.WorkspaceTeammate.Use(hooks...)
}

// ColorClient is a client for the Color schema.
type ColorClient struct {
	config
}

// NewColorClient returns a client for the Color from the given config.
func NewColorClient(c config) *ColorClient {
	return &ColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `color.Hooks(f(g(h())))`.
func (c *ColorClient) Use(hooks ...Hook) {
	c.hooks.Color = append(c.hooks.Color, hooks...)
}

// Create returns a create builder for Color.
func (c *ColorClient) Create() *ColorCreate {
	mutation := newColorMutation(c.config, OpCreate)
	return &ColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Color entities.
func (c *ColorClient) CreateBulk(builders ...*ColorCreate) *ColorCreateBulk {
	return &ColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Color.
func (c *ColorClient) Update() *ColorUpdate {
	mutation := newColorMutation(c.config, OpUpdate)
	return &ColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ColorClient) UpdateOne(co *Color) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColor(co))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ColorClient) UpdateOneID(id ulid.ID) *ColorUpdateOne {
	mutation := newColorMutation(c.config, OpUpdateOne, withColorID(id))
	return &ColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Color.
func (c *ColorClient) Delete() *ColorDelete {
	mutation := newColorMutation(c.config, OpDelete)
	return &ColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ColorClient) DeleteOne(co *Color) *ColorDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ColorClient) DeleteOneID(id ulid.ID) *ColorDeleteOne {
	builder := c.Delete().Where(color.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ColorDeleteOne{builder}
}

// Query returns a query builder for Color.
func (c *ColorClient) Query() *ColorQuery {
	return &ColorQuery{
		config: c.config,
	}
}

// Get returns a Color entity by its id.
func (c *ColorClient) Get(ctx context.Context, id ulid.ID) (*Color, error) {
	return c.Query().Where(color.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ColorClient) GetX(ctx context.Context, id ulid.ID) *Color {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectBaseColors queries the project_base_colors edge of a Color.
func (c *ColorClient) QueryProjectBaseColors(co *Color) *ProjectBaseColorQuery {
	query := &ProjectBaseColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(projectbasecolor.Table, projectbasecolor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.ProjectBaseColorsTable, color.ProjectBaseColorsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLightColors queries the project_light_colors edge of a Color.
func (c *ColorClient) QueryProjectLightColors(co *Color) *ProjectLightColorQuery {
	query := &ProjectLightColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(color.Table, color.FieldID, id),
			sqlgraph.To(projectlightcolor.Table, projectlightcolor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, color.ProjectLightColorsTable, color.ProjectLightColorsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ColorClient) Hooks() []Hook {
	return c.hooks.Color
}

// FavoriteProjectClient is a client for the FavoriteProject schema.
type FavoriteProjectClient struct {
	config
}

// NewFavoriteProjectClient returns a client for the FavoriteProject from the given config.
func NewFavoriteProjectClient(c config) *FavoriteProjectClient {
	return &FavoriteProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `favoriteproject.Hooks(f(g(h())))`.
func (c *FavoriteProjectClient) Use(hooks ...Hook) {
	c.hooks.FavoriteProject = append(c.hooks.FavoriteProject, hooks...)
}

// Create returns a create builder for FavoriteProject.
func (c *FavoriteProjectClient) Create() *FavoriteProjectCreate {
	mutation := newFavoriteProjectMutation(c.config, OpCreate)
	return &FavoriteProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FavoriteProject entities.
func (c *FavoriteProjectClient) CreateBulk(builders ...*FavoriteProjectCreate) *FavoriteProjectCreateBulk {
	return &FavoriteProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FavoriteProject.
func (c *FavoriteProjectClient) Update() *FavoriteProjectUpdate {
	mutation := newFavoriteProjectMutation(c.config, OpUpdate)
	return &FavoriteProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FavoriteProjectClient) UpdateOne(fp *FavoriteProject) *FavoriteProjectUpdateOne {
	mutation := newFavoriteProjectMutation(c.config, OpUpdateOne, withFavoriteProject(fp))
	return &FavoriteProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FavoriteProjectClient) UpdateOneID(id ulid.ID) *FavoriteProjectUpdateOne {
	mutation := newFavoriteProjectMutation(c.config, OpUpdateOne, withFavoriteProjectID(id))
	return &FavoriteProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FavoriteProject.
func (c *FavoriteProjectClient) Delete() *FavoriteProjectDelete {
	mutation := newFavoriteProjectMutation(c.config, OpDelete)
	return &FavoriteProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FavoriteProjectClient) DeleteOne(fp *FavoriteProject) *FavoriteProjectDeleteOne {
	return c.DeleteOneID(fp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FavoriteProjectClient) DeleteOneID(id ulid.ID) *FavoriteProjectDeleteOne {
	builder := c.Delete().Where(favoriteproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FavoriteProjectDeleteOne{builder}
}

// Query returns a query builder for FavoriteProject.
func (c *FavoriteProjectClient) Query() *FavoriteProjectQuery {
	return &FavoriteProjectQuery{
		config: c.config,
	}
}

// Get returns a FavoriteProject entity by its id.
func (c *FavoriteProjectClient) Get(ctx context.Context, id ulid.ID) (*FavoriteProject, error) {
	return c.Query().Where(favoriteproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FavoriteProjectClient) GetX(ctx context.Context, id ulid.ID) *FavoriteProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a FavoriteProject.
func (c *FavoriteProjectClient) QueryProject(fp *FavoriteProject) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteproject.Table, favoriteproject.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteproject.ProjectTable, favoriteproject.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a FavoriteProject.
func (c *FavoriteProjectClient) QueryTeammate(fp *FavoriteProject) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteproject.Table, favoriteproject.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteproject.TeammateTable, favoriteproject.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FavoriteProjectClient) Hooks() []Hook {
	return c.hooks.FavoriteProject
}

// FavoriteWorkspaceClient is a client for the FavoriteWorkspace schema.
type FavoriteWorkspaceClient struct {
	config
}

// NewFavoriteWorkspaceClient returns a client for the FavoriteWorkspace from the given config.
func NewFavoriteWorkspaceClient(c config) *FavoriteWorkspaceClient {
	return &FavoriteWorkspaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `favoriteworkspace.Hooks(f(g(h())))`.
func (c *FavoriteWorkspaceClient) Use(hooks ...Hook) {
	c.hooks.FavoriteWorkspace = append(c.hooks.FavoriteWorkspace, hooks...)
}

// Create returns a create builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Create() *FavoriteWorkspaceCreate {
	mutation := newFavoriteWorkspaceMutation(c.config, OpCreate)
	return &FavoriteWorkspaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FavoriteWorkspace entities.
func (c *FavoriteWorkspaceClient) CreateBulk(builders ...*FavoriteWorkspaceCreate) *FavoriteWorkspaceCreateBulk {
	return &FavoriteWorkspaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Update() *FavoriteWorkspaceUpdate {
	mutation := newFavoriteWorkspaceMutation(c.config, OpUpdate)
	return &FavoriteWorkspaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FavoriteWorkspaceClient) UpdateOne(fw *FavoriteWorkspace) *FavoriteWorkspaceUpdateOne {
	mutation := newFavoriteWorkspaceMutation(c.config, OpUpdateOne, withFavoriteWorkspace(fw))
	return &FavoriteWorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FavoriteWorkspaceClient) UpdateOneID(id ulid.ID) *FavoriteWorkspaceUpdateOne {
	mutation := newFavoriteWorkspaceMutation(c.config, OpUpdateOne, withFavoriteWorkspaceID(id))
	return &FavoriteWorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Delete() *FavoriteWorkspaceDelete {
	mutation := newFavoriteWorkspaceMutation(c.config, OpDelete)
	return &FavoriteWorkspaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FavoriteWorkspaceClient) DeleteOne(fw *FavoriteWorkspace) *FavoriteWorkspaceDeleteOne {
	return c.DeleteOneID(fw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FavoriteWorkspaceClient) DeleteOneID(id ulid.ID) *FavoriteWorkspaceDeleteOne {
	builder := c.Delete().Where(favoriteworkspace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FavoriteWorkspaceDeleteOne{builder}
}

// Query returns a query builder for FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) Query() *FavoriteWorkspaceQuery {
	return &FavoriteWorkspaceQuery{
		config: c.config,
	}
}

// Get returns a FavoriteWorkspace entity by its id.
func (c *FavoriteWorkspaceClient) Get(ctx context.Context, id ulid.ID) (*FavoriteWorkspace, error) {
	return c.Query().Where(favoriteworkspace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FavoriteWorkspaceClient) GetX(ctx context.Context, id ulid.ID) *FavoriteWorkspace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) QueryWorkspace(fw *FavoriteWorkspace) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteworkspace.Table, favoriteworkspace.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteworkspace.WorkspaceTable, favoriteworkspace.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(fw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a FavoriteWorkspace.
func (c *FavoriteWorkspaceClient) QueryTeammate(fw *FavoriteWorkspace) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(favoriteworkspace.Table, favoriteworkspace.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, favoriteworkspace.TeammateTable, favoriteworkspace.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(fw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FavoriteWorkspaceClient) Hooks() []Hook {
	return c.hooks.FavoriteWorkspace
}

// IconClient is a client for the Icon schema.
type IconClient struct {
	config
}

// NewIconClient returns a client for the Icon from the given config.
func NewIconClient(c config) *IconClient {
	return &IconClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `icon.Hooks(f(g(h())))`.
func (c *IconClient) Use(hooks ...Hook) {
	c.hooks.Icon = append(c.hooks.Icon, hooks...)
}

// Create returns a create builder for Icon.
func (c *IconClient) Create() *IconCreate {
	mutation := newIconMutation(c.config, OpCreate)
	return &IconCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Icon entities.
func (c *IconClient) CreateBulk(builders ...*IconCreate) *IconCreateBulk {
	return &IconCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Icon.
func (c *IconClient) Update() *IconUpdate {
	mutation := newIconMutation(c.config, OpUpdate)
	return &IconUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IconClient) UpdateOne(i *Icon) *IconUpdateOne {
	mutation := newIconMutation(c.config, OpUpdateOne, withIcon(i))
	return &IconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IconClient) UpdateOneID(id ulid.ID) *IconUpdateOne {
	mutation := newIconMutation(c.config, OpUpdateOne, withIconID(id))
	return &IconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Icon.
func (c *IconClient) Delete() *IconDelete {
	mutation := newIconMutation(c.config, OpDelete)
	return &IconDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IconClient) DeleteOne(i *Icon) *IconDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IconClient) DeleteOneID(id ulid.ID) *IconDeleteOne {
	builder := c.Delete().Where(icon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IconDeleteOne{builder}
}

// Query returns a query builder for Icon.
func (c *IconClient) Query() *IconQuery {
	return &IconQuery{
		config: c.config,
	}
}

// Get returns a Icon entity by its id.
func (c *IconClient) Get(ctx context.Context, id ulid.ID) (*Icon, error) {
	return c.Query().Where(icon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IconClient) GetX(ctx context.Context, id ulid.ID) *Icon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectIcons queries the project_icons edge of a Icon.
func (c *IconClient) QueryProjectIcons(i *Icon) *ProjectIconQuery {
	query := &ProjectIconQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(icon.Table, icon.FieldID, id),
			sqlgraph.To(projecticon.Table, projecticon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, icon.ProjectIconsTable, icon.ProjectIconsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IconClient) Hooks() []Hook {
	return c.hooks.Icon
}

// MyTasksTabStatusClient is a client for the MyTasksTabStatus schema.
type MyTasksTabStatusClient struct {
	config
}

// NewMyTasksTabStatusClient returns a client for the MyTasksTabStatus from the given config.
func NewMyTasksTabStatusClient(c config) *MyTasksTabStatusClient {
	return &MyTasksTabStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mytaskstabstatus.Hooks(f(g(h())))`.
func (c *MyTasksTabStatusClient) Use(hooks ...Hook) {
	c.hooks.MyTasksTabStatus = append(c.hooks.MyTasksTabStatus, hooks...)
}

// Create returns a create builder for MyTasksTabStatus.
func (c *MyTasksTabStatusClient) Create() *MyTasksTabStatusCreate {
	mutation := newMyTasksTabStatusMutation(c.config, OpCreate)
	return &MyTasksTabStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MyTasksTabStatus entities.
func (c *MyTasksTabStatusClient) CreateBulk(builders ...*MyTasksTabStatusCreate) *MyTasksTabStatusCreateBulk {
	return &MyTasksTabStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MyTasksTabStatus.
func (c *MyTasksTabStatusClient) Update() *MyTasksTabStatusUpdate {
	mutation := newMyTasksTabStatusMutation(c.config, OpUpdate)
	return &MyTasksTabStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MyTasksTabStatusClient) UpdateOne(mtts *MyTasksTabStatus) *MyTasksTabStatusUpdateOne {
	mutation := newMyTasksTabStatusMutation(c.config, OpUpdateOne, withMyTasksTabStatus(mtts))
	return &MyTasksTabStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MyTasksTabStatusClient) UpdateOneID(id ulid.ID) *MyTasksTabStatusUpdateOne {
	mutation := newMyTasksTabStatusMutation(c.config, OpUpdateOne, withMyTasksTabStatusID(id))
	return &MyTasksTabStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MyTasksTabStatus.
func (c *MyTasksTabStatusClient) Delete() *MyTasksTabStatusDelete {
	mutation := newMyTasksTabStatusMutation(c.config, OpDelete)
	return &MyTasksTabStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MyTasksTabStatusClient) DeleteOne(mtts *MyTasksTabStatus) *MyTasksTabStatusDeleteOne {
	return c.DeleteOneID(mtts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MyTasksTabStatusClient) DeleteOneID(id ulid.ID) *MyTasksTabStatusDeleteOne {
	builder := c.Delete().Where(mytaskstabstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MyTasksTabStatusDeleteOne{builder}
}

// Query returns a query builder for MyTasksTabStatus.
func (c *MyTasksTabStatusClient) Query() *MyTasksTabStatusQuery {
	return &MyTasksTabStatusQuery{
		config: c.config,
	}
}

// Get returns a MyTasksTabStatus entity by its id.
func (c *MyTasksTabStatusClient) Get(ctx context.Context, id ulid.ID) (*MyTasksTabStatus, error) {
	return c.Query().Where(mytaskstabstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MyTasksTabStatusClient) GetX(ctx context.Context, id ulid.ID) *MyTasksTabStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a MyTasksTabStatus.
func (c *MyTasksTabStatusClient) QueryWorkspace(mtts *MyTasksTabStatus) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mtts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mytaskstabstatus.Table, mytaskstabstatus.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mytaskstabstatus.WorkspaceTable, mytaskstabstatus.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(mtts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a MyTasksTabStatus.
func (c *MyTasksTabStatusClient) QueryTeammate(mtts *MyTasksTabStatus) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mtts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mytaskstabstatus.Table, mytaskstabstatus.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mytaskstabstatus.TeammateTable, mytaskstabstatus.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(mtts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MyTasksTabStatusClient) Hooks() []Hook {
	return c.hooks.MyTasksTabStatus
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id ulid.ID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id ulid.ID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id ulid.ID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id ulid.ID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a Project.
func (c *ProjectClient) QueryWorkspace(pr *Project) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.WorkspaceTable, project.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectBaseColor queries the project_base_color edge of a Project.
func (c *ProjectClient) QueryProjectBaseColor(pr *Project) *ProjectBaseColorQuery {
	query := &ProjectBaseColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectbasecolor.Table, projectbasecolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.ProjectBaseColorTable, project.ProjectBaseColorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLightColor queries the project_light_color edge of a Project.
func (c *ProjectClient) QueryProjectLightColor(pr *Project) *ProjectLightColorQuery {
	query := &ProjectLightColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectlightcolor.Table, projectlightcolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.ProjectLightColorTable, project.ProjectLightColorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectIcon queries the project_icon edge of a Project.
func (c *ProjectClient) QueryProjectIcon(pr *Project) *ProjectIconQuery {
	query := &ProjectIconQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecticon.Table, projecticon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.ProjectIconTable, project.ProjectIconColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a Project.
func (c *ProjectClient) QueryTeammate(pr *Project) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.TeammateTable, project.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTeammates queries the project_teammates edge of a Project.
func (c *ProjectClient) QueryProjectTeammates(pr *Project) *ProjectTeammateQuery {
	query := &ProjectTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectteammate.Table, projectteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectTeammatesTable, project.ProjectTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteProjects queries the favorite_projects edge of a Project.
func (c *ProjectClient) QueryFavoriteProjects(pr *Project) *FavoriteProjectQuery {
	query := &FavoriteProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(favoriteproject.Table, favoriteproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.FavoriteProjectsTable, project.FavoriteProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// ProjectBaseColorClient is a client for the ProjectBaseColor schema.
type ProjectBaseColorClient struct {
	config
}

// NewProjectBaseColorClient returns a client for the ProjectBaseColor from the given config.
func NewProjectBaseColorClient(c config) *ProjectBaseColorClient {
	return &ProjectBaseColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectbasecolor.Hooks(f(g(h())))`.
func (c *ProjectBaseColorClient) Use(hooks ...Hook) {
	c.hooks.ProjectBaseColor = append(c.hooks.ProjectBaseColor, hooks...)
}

// Create returns a create builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Create() *ProjectBaseColorCreate {
	mutation := newProjectBaseColorMutation(c.config, OpCreate)
	return &ProjectBaseColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectBaseColor entities.
func (c *ProjectBaseColorClient) CreateBulk(builders ...*ProjectBaseColorCreate) *ProjectBaseColorCreateBulk {
	return &ProjectBaseColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Update() *ProjectBaseColorUpdate {
	mutation := newProjectBaseColorMutation(c.config, OpUpdate)
	return &ProjectBaseColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectBaseColorClient) UpdateOne(pbc *ProjectBaseColor) *ProjectBaseColorUpdateOne {
	mutation := newProjectBaseColorMutation(c.config, OpUpdateOne, withProjectBaseColor(pbc))
	return &ProjectBaseColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectBaseColorClient) UpdateOneID(id ulid.ID) *ProjectBaseColorUpdateOne {
	mutation := newProjectBaseColorMutation(c.config, OpUpdateOne, withProjectBaseColorID(id))
	return &ProjectBaseColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Delete() *ProjectBaseColorDelete {
	mutation := newProjectBaseColorMutation(c.config, OpDelete)
	return &ProjectBaseColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectBaseColorClient) DeleteOne(pbc *ProjectBaseColor) *ProjectBaseColorDeleteOne {
	return c.DeleteOneID(pbc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectBaseColorClient) DeleteOneID(id ulid.ID) *ProjectBaseColorDeleteOne {
	builder := c.Delete().Where(projectbasecolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectBaseColorDeleteOne{builder}
}

// Query returns a query builder for ProjectBaseColor.
func (c *ProjectBaseColorClient) Query() *ProjectBaseColorQuery {
	return &ProjectBaseColorQuery{
		config: c.config,
	}
}

// Get returns a ProjectBaseColor entity by its id.
func (c *ProjectBaseColorClient) Get(ctx context.Context, id ulid.ID) (*ProjectBaseColor, error) {
	return c.Query().Where(projectbasecolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectBaseColorClient) GetX(ctx context.Context, id ulid.ID) *ProjectBaseColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a ProjectBaseColor.
func (c *ProjectBaseColorClient) QueryProjects(pbc *ProjectBaseColor) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pbc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectbasecolor.Table, projectbasecolor.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectbasecolor.ProjectsTable, projectbasecolor.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(pbc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColor queries the color edge of a ProjectBaseColor.
func (c *ProjectBaseColorClient) QueryColor(pbc *ProjectBaseColor) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pbc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectbasecolor.Table, projectbasecolor.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectbasecolor.ColorTable, projectbasecolor.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(pbc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectBaseColorClient) Hooks() []Hook {
	return c.hooks.ProjectBaseColor
}

// ProjectIconClient is a client for the ProjectIcon schema.
type ProjectIconClient struct {
	config
}

// NewProjectIconClient returns a client for the ProjectIcon from the given config.
func NewProjectIconClient(c config) *ProjectIconClient {
	return &ProjectIconClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecticon.Hooks(f(g(h())))`.
func (c *ProjectIconClient) Use(hooks ...Hook) {
	c.hooks.ProjectIcon = append(c.hooks.ProjectIcon, hooks...)
}

// Create returns a create builder for ProjectIcon.
func (c *ProjectIconClient) Create() *ProjectIconCreate {
	mutation := newProjectIconMutation(c.config, OpCreate)
	return &ProjectIconCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectIcon entities.
func (c *ProjectIconClient) CreateBulk(builders ...*ProjectIconCreate) *ProjectIconCreateBulk {
	return &ProjectIconCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectIcon.
func (c *ProjectIconClient) Update() *ProjectIconUpdate {
	mutation := newProjectIconMutation(c.config, OpUpdate)
	return &ProjectIconUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectIconClient) UpdateOne(pi *ProjectIcon) *ProjectIconUpdateOne {
	mutation := newProjectIconMutation(c.config, OpUpdateOne, withProjectIcon(pi))
	return &ProjectIconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectIconClient) UpdateOneID(id ulid.ID) *ProjectIconUpdateOne {
	mutation := newProjectIconMutation(c.config, OpUpdateOne, withProjectIconID(id))
	return &ProjectIconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectIcon.
func (c *ProjectIconClient) Delete() *ProjectIconDelete {
	mutation := newProjectIconMutation(c.config, OpDelete)
	return &ProjectIconDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectIconClient) DeleteOne(pi *ProjectIcon) *ProjectIconDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectIconClient) DeleteOneID(id ulid.ID) *ProjectIconDeleteOne {
	builder := c.Delete().Where(projecticon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectIconDeleteOne{builder}
}

// Query returns a query builder for ProjectIcon.
func (c *ProjectIconClient) Query() *ProjectIconQuery {
	return &ProjectIconQuery{
		config: c.config,
	}
}

// Get returns a ProjectIcon entity by its id.
func (c *ProjectIconClient) Get(ctx context.Context, id ulid.ID) (*ProjectIcon, error) {
	return c.Query().Where(projecticon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectIconClient) GetX(ctx context.Context, id ulid.ID) *ProjectIcon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a ProjectIcon.
func (c *ProjectIconClient) QueryProjects(pi *ProjectIcon) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecticon.Table, projecticon.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecticon.ProjectsTable, projecticon.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIcon queries the icon edge of a ProjectIcon.
func (c *ProjectIconClient) QueryIcon(pi *ProjectIcon) *IconQuery {
	query := &IconQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecticon.Table, projecticon.FieldID, id),
			sqlgraph.To(icon.Table, icon.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecticon.IconTable, projecticon.IconColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectIconClient) Hooks() []Hook {
	return c.hooks.ProjectIcon
}

// ProjectLightColorClient is a client for the ProjectLightColor schema.
type ProjectLightColorClient struct {
	config
}

// NewProjectLightColorClient returns a client for the ProjectLightColor from the given config.
func NewProjectLightColorClient(c config) *ProjectLightColorClient {
	return &ProjectLightColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectlightcolor.Hooks(f(g(h())))`.
func (c *ProjectLightColorClient) Use(hooks ...Hook) {
	c.hooks.ProjectLightColor = append(c.hooks.ProjectLightColor, hooks...)
}

// Create returns a create builder for ProjectLightColor.
func (c *ProjectLightColorClient) Create() *ProjectLightColorCreate {
	mutation := newProjectLightColorMutation(c.config, OpCreate)
	return &ProjectLightColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectLightColor entities.
func (c *ProjectLightColorClient) CreateBulk(builders ...*ProjectLightColorCreate) *ProjectLightColorCreateBulk {
	return &ProjectLightColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectLightColor.
func (c *ProjectLightColorClient) Update() *ProjectLightColorUpdate {
	mutation := newProjectLightColorMutation(c.config, OpUpdate)
	return &ProjectLightColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectLightColorClient) UpdateOne(plc *ProjectLightColor) *ProjectLightColorUpdateOne {
	mutation := newProjectLightColorMutation(c.config, OpUpdateOne, withProjectLightColor(plc))
	return &ProjectLightColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectLightColorClient) UpdateOneID(id ulid.ID) *ProjectLightColorUpdateOne {
	mutation := newProjectLightColorMutation(c.config, OpUpdateOne, withProjectLightColorID(id))
	return &ProjectLightColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectLightColor.
func (c *ProjectLightColorClient) Delete() *ProjectLightColorDelete {
	mutation := newProjectLightColorMutation(c.config, OpDelete)
	return &ProjectLightColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectLightColorClient) DeleteOne(plc *ProjectLightColor) *ProjectLightColorDeleteOne {
	return c.DeleteOneID(plc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectLightColorClient) DeleteOneID(id ulid.ID) *ProjectLightColorDeleteOne {
	builder := c.Delete().Where(projectlightcolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectLightColorDeleteOne{builder}
}

// Query returns a query builder for ProjectLightColor.
func (c *ProjectLightColorClient) Query() *ProjectLightColorQuery {
	return &ProjectLightColorQuery{
		config: c.config,
	}
}

// Get returns a ProjectLightColor entity by its id.
func (c *ProjectLightColorClient) Get(ctx context.Context, id ulid.ID) (*ProjectLightColor, error) {
	return c.Query().Where(projectlightcolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectLightColorClient) GetX(ctx context.Context, id ulid.ID) *ProjectLightColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a ProjectLightColor.
func (c *ProjectLightColorClient) QueryProjects(plc *ProjectLightColor) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := plc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlightcolor.Table, projectlightcolor.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectlightcolor.ProjectsTable, projectlightcolor.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(plc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColor queries the color edge of a ProjectLightColor.
func (c *ProjectLightColorClient) QueryColor(plc *ProjectLightColor) *ColorQuery {
	query := &ColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := plc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlightcolor.Table, projectlightcolor.FieldID, id),
			sqlgraph.To(color.Table, color.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlightcolor.ColorTable, projectlightcolor.ColorColumn),
		)
		fromV = sqlgraph.Neighbors(plc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectLightColorClient) Hooks() []Hook {
	return c.hooks.ProjectLightColor
}

// ProjectTeammateClient is a client for the ProjectTeammate schema.
type ProjectTeammateClient struct {
	config
}

// NewProjectTeammateClient returns a client for the ProjectTeammate from the given config.
func NewProjectTeammateClient(c config) *ProjectTeammateClient {
	return &ProjectTeammateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectteammate.Hooks(f(g(h())))`.
func (c *ProjectTeammateClient) Use(hooks ...Hook) {
	c.hooks.ProjectTeammate = append(c.hooks.ProjectTeammate, hooks...)
}

// Create returns a create builder for ProjectTeammate.
func (c *ProjectTeammateClient) Create() *ProjectTeammateCreate {
	mutation := newProjectTeammateMutation(c.config, OpCreate)
	return &ProjectTeammateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTeammate entities.
func (c *ProjectTeammateClient) CreateBulk(builders ...*ProjectTeammateCreate) *ProjectTeammateCreateBulk {
	return &ProjectTeammateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTeammate.
func (c *ProjectTeammateClient) Update() *ProjectTeammateUpdate {
	mutation := newProjectTeammateMutation(c.config, OpUpdate)
	return &ProjectTeammateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTeammateClient) UpdateOne(pt *ProjectTeammate) *ProjectTeammateUpdateOne {
	mutation := newProjectTeammateMutation(c.config, OpUpdateOne, withProjectTeammate(pt))
	return &ProjectTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTeammateClient) UpdateOneID(id ulid.ID) *ProjectTeammateUpdateOne {
	mutation := newProjectTeammateMutation(c.config, OpUpdateOne, withProjectTeammateID(id))
	return &ProjectTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTeammate.
func (c *ProjectTeammateClient) Delete() *ProjectTeammateDelete {
	mutation := newProjectTeammateMutation(c.config, OpDelete)
	return &ProjectTeammateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTeammateClient) DeleteOne(pt *ProjectTeammate) *ProjectTeammateDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTeammateClient) DeleteOneID(id ulid.ID) *ProjectTeammateDeleteOne {
	builder := c.Delete().Where(projectteammate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTeammateDeleteOne{builder}
}

// Query returns a query builder for ProjectTeammate.
func (c *ProjectTeammateClient) Query() *ProjectTeammateQuery {
	return &ProjectTeammateQuery{
		config: c.config,
	}
}

// Get returns a ProjectTeammate entity by its id.
func (c *ProjectTeammateClient) Get(ctx context.Context, id ulid.ID) (*ProjectTeammate, error) {
	return c.Query().Where(projectteammate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTeammateClient) GetX(ctx context.Context, id ulid.ID) *ProjectTeammate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTeammate.
func (c *ProjectTeammateClient) QueryProject(pt *ProjectTeammate) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectteammate.Table, projectteammate.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectteammate.ProjectTable, projectteammate.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a ProjectTeammate.
func (c *ProjectTeammateClient) QueryTeammate(pt *ProjectTeammate) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectteammate.Table, projectteammate.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectteammate.TeammateTable, projectteammate.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTeammateClient) Hooks() []Hook {
	return c.hooks.ProjectTeammate
}

// TaskColumnClient is a client for the TaskColumn schema.
type TaskColumnClient struct {
	config
}

// NewTaskColumnClient returns a client for the TaskColumn from the given config.
func NewTaskColumnClient(c config) *TaskColumnClient {
	return &TaskColumnClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskcolumn.Hooks(f(g(h())))`.
func (c *TaskColumnClient) Use(hooks ...Hook) {
	c.hooks.TaskColumn = append(c.hooks.TaskColumn, hooks...)
}

// Create returns a create builder for TaskColumn.
func (c *TaskColumnClient) Create() *TaskColumnCreate {
	mutation := newTaskColumnMutation(c.config, OpCreate)
	return &TaskColumnCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskColumn entities.
func (c *TaskColumnClient) CreateBulk(builders ...*TaskColumnCreate) *TaskColumnCreateBulk {
	return &TaskColumnCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskColumn.
func (c *TaskColumnClient) Update() *TaskColumnUpdate {
	mutation := newTaskColumnMutation(c.config, OpUpdate)
	return &TaskColumnUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskColumnClient) UpdateOne(tc *TaskColumn) *TaskColumnUpdateOne {
	mutation := newTaskColumnMutation(c.config, OpUpdateOne, withTaskColumn(tc))
	return &TaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskColumnClient) UpdateOneID(id ulid.ID) *TaskColumnUpdateOne {
	mutation := newTaskColumnMutation(c.config, OpUpdateOne, withTaskColumnID(id))
	return &TaskColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskColumn.
func (c *TaskColumnClient) Delete() *TaskColumnDelete {
	mutation := newTaskColumnMutation(c.config, OpDelete)
	return &TaskColumnDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskColumnClient) DeleteOne(tc *TaskColumn) *TaskColumnDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskColumnClient) DeleteOneID(id ulid.ID) *TaskColumnDeleteOne {
	builder := c.Delete().Where(taskcolumn.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskColumnDeleteOne{builder}
}

// Query returns a query builder for TaskColumn.
func (c *TaskColumnClient) Query() *TaskColumnQuery {
	return &TaskColumnQuery{
		config: c.config,
	}
}

// Get returns a TaskColumn entity by its id.
func (c *TaskColumnClient) Get(ctx context.Context, id ulid.ID) (*TaskColumn, error) {
	return c.Query().Where(taskcolumn.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskColumnClient) GetX(ctx context.Context, id ulid.ID) *TaskColumn {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskColumnClient) Hooks() []Hook {
	return c.hooks.TaskColumn
}

// TeammateClient is a client for the Teammate schema.
type TeammateClient struct {
	config
}

// NewTeammateClient returns a client for the Teammate from the given config.
func NewTeammateClient(c config) *TeammateClient {
	return &TeammateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teammate.Hooks(f(g(h())))`.
func (c *TeammateClient) Use(hooks ...Hook) {
	c.hooks.Teammate = append(c.hooks.Teammate, hooks...)
}

// Create returns a create builder for Teammate.
func (c *TeammateClient) Create() *TeammateCreate {
	mutation := newTeammateMutation(c.config, OpCreate)
	return &TeammateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teammate entities.
func (c *TeammateClient) CreateBulk(builders ...*TeammateCreate) *TeammateCreateBulk {
	return &TeammateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teammate.
func (c *TeammateClient) Update() *TeammateUpdate {
	mutation := newTeammateMutation(c.config, OpUpdate)
	return &TeammateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeammateClient) UpdateOne(t *Teammate) *TeammateUpdateOne {
	mutation := newTeammateMutation(c.config, OpUpdateOne, withTeammate(t))
	return &TeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeammateClient) UpdateOneID(id ulid.ID) *TeammateUpdateOne {
	mutation := newTeammateMutation(c.config, OpUpdateOne, withTeammateID(id))
	return &TeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teammate.
func (c *TeammateClient) Delete() *TeammateDelete {
	mutation := newTeammateMutation(c.config, OpDelete)
	return &TeammateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeammateClient) DeleteOne(t *Teammate) *TeammateDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeammateClient) DeleteOneID(id ulid.ID) *TeammateDeleteOne {
	builder := c.Delete().Where(teammate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeammateDeleteOne{builder}
}

// Query returns a query builder for Teammate.
func (c *TeammateClient) Query() *TeammateQuery {
	return &TeammateQuery{
		config: c.config,
	}
}

// Get returns a Teammate entity by its id.
func (c *TeammateClient) Get(ctx context.Context, id ulid.ID) (*Teammate, error) {
	return c.Query().Where(teammate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeammateClient) GetX(ctx context.Context, id ulid.ID) *Teammate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspaces queries the workspaces edge of a Teammate.
func (c *TeammateClient) QueryWorkspaces(t *Teammate) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.WorkspacesTable, teammate.WorkspacesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a Teammate.
func (c *TeammateClient) QueryProjects(t *Teammate) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.ProjectsTable, teammate.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTeammates queries the project_teammates edge of a Teammate.
func (c *TeammateClient) QueryProjectTeammates(t *Teammate) *ProjectTeammateQuery {
	query := &ProjectTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(projectteammate.Table, projectteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.ProjectTeammatesTable, teammate.ProjectTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceTeammates queries the workspace_teammates edge of a Teammate.
func (c *TeammateClient) QueryWorkspaceTeammates(t *Teammate) *WorkspaceTeammateQuery {
	query := &WorkspaceTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(workspaceteammate.Table, workspaceteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.WorkspaceTeammatesTable, teammate.WorkspaceTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteProjects queries the favorite_projects edge of a Teammate.
func (c *TeammateClient) QueryFavoriteProjects(t *Teammate) *FavoriteProjectQuery {
	query := &FavoriteProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(favoriteproject.Table, favoriteproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.FavoriteProjectsTable, teammate.FavoriteProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteWorkspaces queries the favorite_workspaces edge of a Teammate.
func (c *TeammateClient) QueryFavoriteWorkspaces(t *Teammate) *FavoriteWorkspaceQuery {
	query := &FavoriteWorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(favoriteworkspace.Table, favoriteworkspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.FavoriteWorkspacesTable, teammate.FavoriteWorkspacesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMyTasksTabStatuses queries the my_tasks_tab_statuses edge of a Teammate.
func (c *TeammateClient) QueryMyTasksTabStatuses(t *Teammate) *MyTasksTabStatusQuery {
	query := &MyTasksTabStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, id),
			sqlgraph.To(mytaskstabstatus.Table, mytaskstabstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.MyTasksTabStatusesTable, teammate.MyTasksTabStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeammateClient) Hooks() []Hook {
	return c.hooks.Teammate
}

// TestTodoClient is a client for the TestTodo schema.
type TestTodoClient struct {
	config
}

// NewTestTodoClient returns a client for the TestTodo from the given config.
func NewTestTodoClient(c config) *TestTodoClient {
	return &TestTodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testtodo.Hooks(f(g(h())))`.
func (c *TestTodoClient) Use(hooks ...Hook) {
	c.hooks.TestTodo = append(c.hooks.TestTodo, hooks...)
}

// Create returns a create builder for TestTodo.
func (c *TestTodoClient) Create() *TestTodoCreate {
	mutation := newTestTodoMutation(c.config, OpCreate)
	return &TestTodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestTodo entities.
func (c *TestTodoClient) CreateBulk(builders ...*TestTodoCreate) *TestTodoCreateBulk {
	return &TestTodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestTodo.
func (c *TestTodoClient) Update() *TestTodoUpdate {
	mutation := newTestTodoMutation(c.config, OpUpdate)
	return &TestTodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestTodoClient) UpdateOne(tt *TestTodo) *TestTodoUpdateOne {
	mutation := newTestTodoMutation(c.config, OpUpdateOne, withTestTodo(tt))
	return &TestTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestTodoClient) UpdateOneID(id ulid.ID) *TestTodoUpdateOne {
	mutation := newTestTodoMutation(c.config, OpUpdateOne, withTestTodoID(id))
	return &TestTodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestTodo.
func (c *TestTodoClient) Delete() *TestTodoDelete {
	mutation := newTestTodoMutation(c.config, OpDelete)
	return &TestTodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestTodoClient) DeleteOne(tt *TestTodo) *TestTodoDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestTodoClient) DeleteOneID(id ulid.ID) *TestTodoDeleteOne {
	builder := c.Delete().Where(testtodo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestTodoDeleteOne{builder}
}

// Query returns a query builder for TestTodo.
func (c *TestTodoClient) Query() *TestTodoQuery {
	return &TestTodoQuery{
		config: c.config,
	}
}

// Get returns a TestTodo entity by its id.
func (c *TestTodoClient) Get(ctx context.Context, id ulid.ID) (*TestTodo, error) {
	return c.Query().Where(testtodo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestTodoClient) GetX(ctx context.Context, id ulid.ID) *TestTodo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestUser queries the test_user edge of a TestTodo.
func (c *TestTodoClient) QueryTestUser(tt *TestTodo) *TestUserQuery {
	query := &TestUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testtodo.Table, testtodo.FieldID, id),
			sqlgraph.To(testuser.Table, testuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testtodo.TestUserTable, testtodo.TestUserColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestTodoClient) Hooks() []Hook {
	return c.hooks.TestTodo
}

// TestUserClient is a client for the TestUser schema.
type TestUserClient struct {
	config
}

// NewTestUserClient returns a client for the TestUser from the given config.
func NewTestUserClient(c config) *TestUserClient {
	return &TestUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testuser.Hooks(f(g(h())))`.
func (c *TestUserClient) Use(hooks ...Hook) {
	c.hooks.TestUser = append(c.hooks.TestUser, hooks...)
}

// Create returns a create builder for TestUser.
func (c *TestUserClient) Create() *TestUserCreate {
	mutation := newTestUserMutation(c.config, OpCreate)
	return &TestUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestUser entities.
func (c *TestUserClient) CreateBulk(builders ...*TestUserCreate) *TestUserCreateBulk {
	return &TestUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestUser.
func (c *TestUserClient) Update() *TestUserUpdate {
	mutation := newTestUserMutation(c.config, OpUpdate)
	return &TestUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestUserClient) UpdateOne(tu *TestUser) *TestUserUpdateOne {
	mutation := newTestUserMutation(c.config, OpUpdateOne, withTestUser(tu))
	return &TestUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestUserClient) UpdateOneID(id ulid.ID) *TestUserUpdateOne {
	mutation := newTestUserMutation(c.config, OpUpdateOne, withTestUserID(id))
	return &TestUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestUser.
func (c *TestUserClient) Delete() *TestUserDelete {
	mutation := newTestUserMutation(c.config, OpDelete)
	return &TestUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestUserClient) DeleteOne(tu *TestUser) *TestUserDeleteOne {
	return c.DeleteOneID(tu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestUserClient) DeleteOneID(id ulid.ID) *TestUserDeleteOne {
	builder := c.Delete().Where(testuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestUserDeleteOne{builder}
}

// Query returns a query builder for TestUser.
func (c *TestUserClient) Query() *TestUserQuery {
	return &TestUserQuery{
		config: c.config,
	}
}

// Get returns a TestUser entity by its id.
func (c *TestUserClient) Get(ctx context.Context, id ulid.ID) (*TestUser, error) {
	return c.Query().Where(testuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestUserClient) GetX(ctx context.Context, id ulid.ID) *TestUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestTodos queries the test_todos edge of a TestUser.
func (c *TestUserClient) QueryTestTodos(tu *TestUser) *TestTodoQuery {
	query := &TestTodoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testuser.Table, testuser.FieldID, id),
			sqlgraph.To(testtodo.Table, testtodo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testuser.TestTodosTable, testuser.TestTodosColumn),
		)
		fromV = sqlgraph.Neighbors(tu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestUserClient) Hooks() []Hook {
	return c.hooks.TestUser
}

// WorkspaceClient is a client for the Workspace schema.
type WorkspaceClient struct {
	config
}

// NewWorkspaceClient returns a client for the Workspace from the given config.
func NewWorkspaceClient(c config) *WorkspaceClient {
	return &WorkspaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspace.Hooks(f(g(h())))`.
func (c *WorkspaceClient) Use(hooks ...Hook) {
	c.hooks.Workspace = append(c.hooks.Workspace, hooks...)
}

// Create returns a create builder for Workspace.
func (c *WorkspaceClient) Create() *WorkspaceCreate {
	mutation := newWorkspaceMutation(c.config, OpCreate)
	return &WorkspaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workspace entities.
func (c *WorkspaceClient) CreateBulk(builders ...*WorkspaceCreate) *WorkspaceCreateBulk {
	return &WorkspaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workspace.
func (c *WorkspaceClient) Update() *WorkspaceUpdate {
	mutation := newWorkspaceMutation(c.config, OpUpdate)
	return &WorkspaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceClient) UpdateOne(w *Workspace) *WorkspaceUpdateOne {
	mutation := newWorkspaceMutation(c.config, OpUpdateOne, withWorkspace(w))
	return &WorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceClient) UpdateOneID(id ulid.ID) *WorkspaceUpdateOne {
	mutation := newWorkspaceMutation(c.config, OpUpdateOne, withWorkspaceID(id))
	return &WorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workspace.
func (c *WorkspaceClient) Delete() *WorkspaceDelete {
	mutation := newWorkspaceMutation(c.config, OpDelete)
	return &WorkspaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkspaceClient) DeleteOne(w *Workspace) *WorkspaceDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkspaceClient) DeleteOneID(id ulid.ID) *WorkspaceDeleteOne {
	builder := c.Delete().Where(workspace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceDeleteOne{builder}
}

// Query returns a query builder for Workspace.
func (c *WorkspaceClient) Query() *WorkspaceQuery {
	return &WorkspaceQuery{
		config: c.config,
	}
}

// Get returns a Workspace entity by its id.
func (c *WorkspaceClient) Get(ctx context.Context, id ulid.ID) (*Workspace, error) {
	return c.Query().Where(workspace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceClient) GetX(ctx context.Context, id ulid.ID) *Workspace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeammate queries the teammate edge of a Workspace.
func (c *WorkspaceClient) QueryTeammate(w *Workspace) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspace.TeammateTable, workspace.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a Workspace.
func (c *WorkspaceClient) QueryProjects(w *Workspace) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.ProjectsTable, workspace.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceTeammates queries the workspace_teammates edge of a Workspace.
func (c *WorkspaceClient) QueryWorkspaceTeammates(w *Workspace) *WorkspaceTeammateQuery {
	query := &WorkspaceTeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(workspaceteammate.Table, workspaceteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.WorkspaceTeammatesTable, workspace.WorkspaceTeammatesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteWorkspaces queries the favorite_workspaces edge of a Workspace.
func (c *WorkspaceClient) QueryFavoriteWorkspaces(w *Workspace) *FavoriteWorkspaceQuery {
	query := &FavoriteWorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(favoriteworkspace.Table, favoriteworkspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.FavoriteWorkspacesTable, workspace.FavoriteWorkspacesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMyTasksTabStatuses queries the my_tasks_tab_statuses edge of a Workspace.
func (c *WorkspaceClient) QueryMyTasksTabStatuses(w *Workspace) *MyTasksTabStatusQuery {
	query := &MyTasksTabStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspace.Table, workspace.FieldID, id),
			sqlgraph.To(mytaskstabstatus.Table, mytaskstabstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspace.MyTasksTabStatusesTable, workspace.MyTasksTabStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkspaceClient) Hooks() []Hook {
	return c.hooks.Workspace
}

// WorkspaceTeammateClient is a client for the WorkspaceTeammate schema.
type WorkspaceTeammateClient struct {
	config
}

// NewWorkspaceTeammateClient returns a client for the WorkspaceTeammate from the given config.
func NewWorkspaceTeammateClient(c config) *WorkspaceTeammateClient {
	return &WorkspaceTeammateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspaceteammate.Hooks(f(g(h())))`.
func (c *WorkspaceTeammateClient) Use(hooks ...Hook) {
	c.hooks.WorkspaceTeammate = append(c.hooks.WorkspaceTeammate, hooks...)
}

// Create returns a create builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Create() *WorkspaceTeammateCreate {
	mutation := newWorkspaceTeammateMutation(c.config, OpCreate)
	return &WorkspaceTeammateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkspaceTeammate entities.
func (c *WorkspaceTeammateClient) CreateBulk(builders ...*WorkspaceTeammateCreate) *WorkspaceTeammateCreateBulk {
	return &WorkspaceTeammateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Update() *WorkspaceTeammateUpdate {
	mutation := newWorkspaceTeammateMutation(c.config, OpUpdate)
	return &WorkspaceTeammateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceTeammateClient) UpdateOne(wt *WorkspaceTeammate) *WorkspaceTeammateUpdateOne {
	mutation := newWorkspaceTeammateMutation(c.config, OpUpdateOne, withWorkspaceTeammate(wt))
	return &WorkspaceTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceTeammateClient) UpdateOneID(id ulid.ID) *WorkspaceTeammateUpdateOne {
	mutation := newWorkspaceTeammateMutation(c.config, OpUpdateOne, withWorkspaceTeammateID(id))
	return &WorkspaceTeammateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Delete() *WorkspaceTeammateDelete {
	mutation := newWorkspaceTeammateMutation(c.config, OpDelete)
	return &WorkspaceTeammateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkspaceTeammateClient) DeleteOne(wt *WorkspaceTeammate) *WorkspaceTeammateDeleteOne {
	return c.DeleteOneID(wt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkspaceTeammateClient) DeleteOneID(id ulid.ID) *WorkspaceTeammateDeleteOne {
	builder := c.Delete().Where(workspaceteammate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceTeammateDeleteOne{builder}
}

// Query returns a query builder for WorkspaceTeammate.
func (c *WorkspaceTeammateClient) Query() *WorkspaceTeammateQuery {
	return &WorkspaceTeammateQuery{
		config: c.config,
	}
}

// Get returns a WorkspaceTeammate entity by its id.
func (c *WorkspaceTeammateClient) Get(ctx context.Context, id ulid.ID) (*WorkspaceTeammate, error) {
	return c.Query().Where(workspaceteammate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceTeammateClient) GetX(ctx context.Context, id ulid.ID) *WorkspaceTeammate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkspace queries the workspace edge of a WorkspaceTeammate.
func (c *WorkspaceTeammateClient) QueryWorkspace(wt *WorkspaceTeammate) *WorkspaceQuery {
	query := &WorkspaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceteammate.Table, workspaceteammate.FieldID, id),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceteammate.WorkspaceTable, workspaceteammate.WorkspaceColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeammate queries the teammate edge of a WorkspaceTeammate.
func (c *WorkspaceTeammateClient) QueryTeammate(wt *WorkspaceTeammate) *TeammateQuery {
	query := &TeammateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceteammate.Table, workspaceteammate.FieldID, id),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceteammate.TeammateTable, workspaceteammate.TeammateColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkspaceTeammateClient) Hooks() []Hook {
	return c.hooks.WorkspaceTeammate
}
