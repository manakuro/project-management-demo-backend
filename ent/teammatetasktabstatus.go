// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/workspace"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TeammateTaskTabStatus is the model entity for the TeammateTaskTabStatus schema.
type TeammateTaskTabStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// WorkspaceID holds the value of the "workspace_id" field.
	WorkspaceID ulid.ID `json:"workspace_id,omitempty"`
	// TeammateID holds the value of the "teammate_id" field.
	TeammateID ulid.ID `json:"teammate_id,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode teammatetasktabstatus.StatusCode `json:"status_code,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeammateTaskTabStatusQuery when eager-loading is set.
	Edges TeammateTaskTabStatusEdges `json:"edges"`
}

// TeammateTaskTabStatusEdges holds the relations/edges for other nodes in the graph.
type TeammateTaskTabStatusEdges struct {
	// Workspace holds the value of the workspace edge.
	Workspace *Workspace `json:"workspace,omitempty"`
	// Teammate holds the value of the teammate edge.
	Teammate *Teammate `json:"teammate,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkspaceOrErr returns the Workspace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskTabStatusEdges) WorkspaceOrErr() (*Workspace, error) {
	if e.loadedTypes[0] {
		if e.Workspace == nil {
			// The edge workspace was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workspace.Label}
		}
		return e.Workspace, nil
	}
	return nil, &NotLoadedError{edge: "workspace"}
}

// TeammateOrErr returns the Teammate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskTabStatusEdges) TeammateOrErr() (*Teammate, error) {
	if e.loadedTypes[1] {
		if e.Teammate == nil {
			// The edge teammate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammate.Label}
		}
		return e.Teammate, nil
	}
	return nil, &NotLoadedError{edge: "teammate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeammateTaskTabStatus) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case teammatetasktabstatus.FieldStatusCode:
			values[i] = new(sql.NullString)
		case teammatetasktabstatus.FieldCreatedAt, teammatetasktabstatus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case teammatetasktabstatus.FieldID, teammatetasktabstatus.FieldWorkspaceID, teammatetasktabstatus.FieldTeammateID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TeammateTaskTabStatus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeammateTaskTabStatus fields.
func (ttts *TeammateTaskTabStatus) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teammatetasktabstatus.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ttts.ID = *value
			}
		case teammatetasktabstatus.FieldWorkspaceID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value != nil {
				ttts.WorkspaceID = *value
			}
		case teammatetasktabstatus.FieldTeammateID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field teammate_id", values[i])
			} else if value != nil {
				ttts.TeammateID = *value
			}
		case teammatetasktabstatus.FieldStatusCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				ttts.StatusCode = teammatetasktabstatus.StatusCode(value.String)
			}
		case teammatetasktabstatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ttts.CreatedAt = value.Time
			}
		case teammatetasktabstatus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ttts.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryWorkspace queries the "workspace" edge of the TeammateTaskTabStatus entity.
func (ttts *TeammateTaskTabStatus) QueryWorkspace() *WorkspaceQuery {
	return (&TeammateTaskTabStatusClient{config: ttts.config}).QueryWorkspace(ttts)
}

// QueryTeammate queries the "teammate" edge of the TeammateTaskTabStatus entity.
func (ttts *TeammateTaskTabStatus) QueryTeammate() *TeammateQuery {
	return (&TeammateTaskTabStatusClient{config: ttts.config}).QueryTeammate(ttts)
}

// Update returns a builder for updating this TeammateTaskTabStatus.
// Note that you need to call TeammateTaskTabStatus.Unwrap() before calling this method if this TeammateTaskTabStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ttts *TeammateTaskTabStatus) Update() *TeammateTaskTabStatusUpdateOne {
	return (&TeammateTaskTabStatusClient{config: ttts.config}).UpdateOne(ttts)
}

// Unwrap unwraps the TeammateTaskTabStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ttts *TeammateTaskTabStatus) Unwrap() *TeammateTaskTabStatus {
	tx, ok := ttts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeammateTaskTabStatus is not a transactional entity")
	}
	ttts.config.driver = tx.drv
	return ttts
}

// String implements the fmt.Stringer.
func (ttts *TeammateTaskTabStatus) String() string {
	var builder strings.Builder
	builder.WriteString("TeammateTaskTabStatus(")
	builder.WriteString(fmt.Sprintf("id=%v", ttts.ID))
	builder.WriteString(", workspace_id=")
	builder.WriteString(fmt.Sprintf("%v", ttts.WorkspaceID))
	builder.WriteString(", teammate_id=")
	builder.WriteString(fmt.Sprintf("%v", ttts.TeammateID))
	builder.WriteString(", status_code=")
	builder.WriteString(fmt.Sprintf("%v", ttts.StatusCode))
	builder.WriteString(", created_at=")
	builder.WriteString(ttts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ttts.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TeammateTaskTabStatusSlice is a parsable slice of TeammateTaskTabStatus.
type TeammateTaskTabStatusSlice []*TeammateTaskTabStatus

func (ttts TeammateTaskTabStatusSlice) config(cfg config) {
	for _i := range ttts {
		ttts[_i].config = cfg
	}
}
