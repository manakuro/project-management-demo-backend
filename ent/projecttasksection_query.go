// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/deletedprojecttask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projecttask"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/schema/ulid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectTaskSectionQuery is the builder for querying ProjectTaskSection entities.
type ProjectTaskSectionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProjectTaskSection
	// eager-loading edges.
	withProject             *ProjectQuery
	withProjectTasks        *ProjectTaskQuery
	withDeletedProjectTasks *DeletedProjectTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectTaskSectionQuery builder.
func (ptsq *ProjectTaskSectionQuery) Where(ps ...predicate.ProjectTaskSection) *ProjectTaskSectionQuery {
	ptsq.predicates = append(ptsq.predicates, ps...)
	return ptsq
}

// Limit adds a limit step to the query.
func (ptsq *ProjectTaskSectionQuery) Limit(limit int) *ProjectTaskSectionQuery {
	ptsq.limit = &limit
	return ptsq
}

// Offset adds an offset step to the query.
func (ptsq *ProjectTaskSectionQuery) Offset(offset int) *ProjectTaskSectionQuery {
	ptsq.offset = &offset
	return ptsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ptsq *ProjectTaskSectionQuery) Unique(unique bool) *ProjectTaskSectionQuery {
	ptsq.unique = &unique
	return ptsq
}

// Order adds an order step to the query.
func (ptsq *ProjectTaskSectionQuery) Order(o ...OrderFunc) *ProjectTaskSectionQuery {
	ptsq.order = append(ptsq.order, o...)
	return ptsq
}

// QueryProject chains the current query on the "project" edge.
func (ptsq *ProjectTaskSectionQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: ptsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ptsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ptsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttasksection.Table, projecttasksection.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttasksection.ProjectTable, projecttasksection.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(ptsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjectTasks chains the current query on the "projectTasks" edge.
func (ptsq *ProjectTaskSectionQuery) QueryProjectTasks() *ProjectTaskQuery {
	query := &ProjectTaskQuery{config: ptsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ptsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ptsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttasksection.Table, projecttasksection.FieldID, selector),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttasksection.ProjectTasksTable, projecttasksection.ProjectTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(ptsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeletedProjectTasks chains the current query on the "deletedProjectTasks" edge.
func (ptsq *ProjectTaskSectionQuery) QueryDeletedProjectTasks() *DeletedProjectTaskQuery {
	query := &DeletedProjectTaskQuery{config: ptsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ptsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ptsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttasksection.Table, projecttasksection.FieldID, selector),
			sqlgraph.To(deletedprojecttask.Table, deletedprojecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttasksection.DeletedProjectTasksTable, projecttasksection.DeletedProjectTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(ptsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProjectTaskSection entity from the query.
// Returns a *NotFoundError when no ProjectTaskSection was found.
func (ptsq *ProjectTaskSectionQuery) First(ctx context.Context) (*ProjectTaskSection, error) {
	nodes, err := ptsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{projecttasksection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) FirstX(ctx context.Context) *ProjectTaskSection {
	node, err := ptsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProjectTaskSection ID from the query.
// Returns a *NotFoundError when no ProjectTaskSection ID was found.
func (ptsq *ProjectTaskSectionQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = ptsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{projecttasksection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := ptsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProjectTaskSection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProjectTaskSection entity is found.
// Returns a *NotFoundError when no ProjectTaskSection entities are found.
func (ptsq *ProjectTaskSectionQuery) Only(ctx context.Context) (*ProjectTaskSection, error) {
	nodes, err := ptsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{projecttasksection.Label}
	default:
		return nil, &NotSingularError{projecttasksection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) OnlyX(ctx context.Context) *ProjectTaskSection {
	node, err := ptsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProjectTaskSection ID in the query.
// Returns a *NotSingularError when more than one ProjectTaskSection ID is found.
// Returns a *NotFoundError when no entities are found.
func (ptsq *ProjectTaskSectionQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = ptsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = &NotSingularError{projecttasksection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := ptsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProjectTaskSections.
func (ptsq *ProjectTaskSectionQuery) All(ctx context.Context) ([]*ProjectTaskSection, error) {
	if err := ptsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ptsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) AllX(ctx context.Context) []*ProjectTaskSection {
	nodes, err := ptsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProjectTaskSection IDs.
func (ptsq *ProjectTaskSectionQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := ptsq.Select(projecttasksection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := ptsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ptsq *ProjectTaskSectionQuery) Count(ctx context.Context) (int, error) {
	if err := ptsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ptsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) CountX(ctx context.Context) int {
	count, err := ptsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ptsq *ProjectTaskSectionQuery) Exist(ctx context.Context) (bool, error) {
	if err := ptsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ptsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ptsq *ProjectTaskSectionQuery) ExistX(ctx context.Context) bool {
	exist, err := ptsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectTaskSectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ptsq *ProjectTaskSectionQuery) Clone() *ProjectTaskSectionQuery {
	if ptsq == nil {
		return nil
	}
	return &ProjectTaskSectionQuery{
		config:                  ptsq.config,
		limit:                   ptsq.limit,
		offset:                  ptsq.offset,
		order:                   append([]OrderFunc{}, ptsq.order...),
		predicates:              append([]predicate.ProjectTaskSection{}, ptsq.predicates...),
		withProject:             ptsq.withProject.Clone(),
		withProjectTasks:        ptsq.withProjectTasks.Clone(),
		withDeletedProjectTasks: ptsq.withDeletedProjectTasks.Clone(),
		// clone intermediate query.
		sql:    ptsq.sql.Clone(),
		path:   ptsq.path,
		unique: ptsq.unique,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (ptsq *ProjectTaskSectionQuery) WithProject(opts ...func(*ProjectQuery)) *ProjectTaskSectionQuery {
	query := &ProjectQuery{config: ptsq.config}
	for _, opt := range opts {
		opt(query)
	}
	ptsq.withProject = query
	return ptsq
}

// WithProjectTasks tells the query-builder to eager-load the nodes that are connected to
// the "projectTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (ptsq *ProjectTaskSectionQuery) WithProjectTasks(opts ...func(*ProjectTaskQuery)) *ProjectTaskSectionQuery {
	query := &ProjectTaskQuery{config: ptsq.config}
	for _, opt := range opts {
		opt(query)
	}
	ptsq.withProjectTasks = query
	return ptsq
}

// WithDeletedProjectTasks tells the query-builder to eager-load the nodes that are connected to
// the "deletedProjectTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (ptsq *ProjectTaskSectionQuery) WithDeletedProjectTasks(opts ...func(*DeletedProjectTaskQuery)) *ProjectTaskSectionQuery {
	query := &DeletedProjectTaskQuery{config: ptsq.config}
	for _, opt := range opts {
		opt(query)
	}
	ptsq.withDeletedProjectTasks = query
	return ptsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID ulid.ID `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProjectTaskSection.Query().
//		GroupBy(projecttasksection.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ptsq *ProjectTaskSectionQuery) GroupBy(field string, fields ...string) *ProjectTaskSectionGroupBy {
	group := &ProjectTaskSectionGroupBy{config: ptsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ptsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ptsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID ulid.ID `json:"project_id,omitempty"`
//	}
//
//	client.ProjectTaskSection.Query().
//		Select(projecttasksection.FieldProjectID).
//		Scan(ctx, &v)
//
func (ptsq *ProjectTaskSectionQuery) Select(fields ...string) *ProjectTaskSectionSelect {
	ptsq.fields = append(ptsq.fields, fields...)
	return &ProjectTaskSectionSelect{ProjectTaskSectionQuery: ptsq}
}

func (ptsq *ProjectTaskSectionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ptsq.fields {
		if !projecttasksection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ptsq.path != nil {
		prev, err := ptsq.path(ctx)
		if err != nil {
			return err
		}
		ptsq.sql = prev
	}
	return nil
}

func (ptsq *ProjectTaskSectionQuery) sqlAll(ctx context.Context) ([]*ProjectTaskSection, error) {
	var (
		nodes       = []*ProjectTaskSection{}
		_spec       = ptsq.querySpec()
		loadedTypes = [3]bool{
			ptsq.withProject != nil,
			ptsq.withProjectTasks != nil,
			ptsq.withDeletedProjectTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProjectTaskSection{config: ptsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ptsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ptsq.withProject; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*ProjectTaskSection)
		for i := range nodes {
			fk := nodes[i].ProjectID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(project.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Project = n
			}
		}
	}

	if query := ptsq.withProjectTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*ProjectTaskSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProjectTasks = []*ProjectTask{}
		}
		query.Where(predicate.ProjectTask(func(s *sql.Selector) {
			s.Where(sql.InValues(projecttasksection.ProjectTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ProjectTaskSectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_task_section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ProjectTasks = append(node.Edges.ProjectTasks, n)
		}
	}

	if query := ptsq.withDeletedProjectTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*ProjectTaskSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.DeletedProjectTasks = []*DeletedProjectTask{}
		}
		query.Where(predicate.DeletedProjectTask(func(s *sql.Selector) {
			s.Where(sql.InValues(projecttasksection.DeletedProjectTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ProjectTaskSectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_task_section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.DeletedProjectTasks = append(node.Edges.DeletedProjectTasks, n)
		}
	}

	return nodes, nil
}

func (ptsq *ProjectTaskSectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ptsq.querySpec()
	_spec.Node.Columns = ptsq.fields
	if len(ptsq.fields) > 0 {
		_spec.Unique = ptsq.unique != nil && *ptsq.unique
	}
	return sqlgraph.CountNodes(ctx, ptsq.driver, _spec)
}

func (ptsq *ProjectTaskSectionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ptsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ptsq *ProjectTaskSectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projecttasksection.Table,
			Columns: projecttasksection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: projecttasksection.FieldID,
			},
		},
		From:   ptsq.sql,
		Unique: true,
	}
	if unique := ptsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ptsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projecttasksection.FieldID)
		for i := range fields {
			if fields[i] != projecttasksection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ptsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ptsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ptsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ptsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ptsq *ProjectTaskSectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ptsq.driver.Dialect())
	t1 := builder.Table(projecttasksection.Table)
	columns := ptsq.fields
	if len(columns) == 0 {
		columns = projecttasksection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ptsq.sql != nil {
		selector = ptsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ptsq.unique != nil && *ptsq.unique {
		selector.Distinct()
	}
	for _, p := range ptsq.predicates {
		p(selector)
	}
	for _, p := range ptsq.order {
		p(selector)
	}
	if offset := ptsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ptsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectTaskSectionGroupBy is the group-by builder for ProjectTaskSection entities.
type ProjectTaskSectionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ptsgb *ProjectTaskSectionGroupBy) Aggregate(fns ...AggregateFunc) *ProjectTaskSectionGroupBy {
	ptsgb.fns = append(ptsgb.fns, fns...)
	return ptsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ptsgb *ProjectTaskSectionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ptsgb.path(ctx)
	if err != nil {
		return err
	}
	ptsgb.sql = query
	return ptsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ptsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ptsgb.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ptsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) StringsX(ctx context.Context) []string {
	v, err := ptsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ptsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) StringX(ctx context.Context) string {
	v, err := ptsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ptsgb.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ptsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) IntsX(ctx context.Context) []int {
	v, err := ptsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ptsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) IntX(ctx context.Context) int {
	v, err := ptsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ptsgb.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ptsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ptsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ptsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ptsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ptsgb.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ptsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ptsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ptsgb *ProjectTaskSectionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ptsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ptsgb *ProjectTaskSectionGroupBy) BoolX(ctx context.Context) bool {
	v, err := ptsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ptsgb *ProjectTaskSectionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ptsgb.fields {
		if !projecttasksection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ptsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ptsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ptsgb *ProjectTaskSectionGroupBy) sqlQuery() *sql.Selector {
	selector := ptsgb.sql.Select()
	aggregation := make([]string, 0, len(ptsgb.fns))
	for _, fn := range ptsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ptsgb.fields)+len(ptsgb.fns))
		for _, f := range ptsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ptsgb.fields...)...)
}

// ProjectTaskSectionSelect is the builder for selecting fields of ProjectTaskSection entities.
type ProjectTaskSectionSelect struct {
	*ProjectTaskSectionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ptss *ProjectTaskSectionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ptss.prepareQuery(ctx); err != nil {
		return err
	}
	ptss.sql = ptss.ProjectTaskSectionQuery.sqlQuery(ctx)
	return ptss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ptss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ptss.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ptss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) StringsX(ctx context.Context) []string {
	v, err := ptss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ptss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) StringX(ctx context.Context) string {
	v, err := ptss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ptss.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ptss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) IntsX(ctx context.Context) []int {
	v, err := ptss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ptss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) IntX(ctx context.Context) int {
	v, err := ptss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ptss.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ptss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ptss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ptss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) Float64X(ctx context.Context) float64 {
	v, err := ptss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ptss.fields) > 1 {
		return nil, errors.New("ent: ProjectTaskSectionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ptss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) BoolsX(ctx context.Context) []bool {
	v, err := ptss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ptss *ProjectTaskSectionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ptss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projecttasksection.Label}
	default:
		err = fmt.Errorf("ent: ProjectTaskSectionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ptss *ProjectTaskSectionSelect) BoolX(ctx context.Context) bool {
	v, err := ptss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ptss *ProjectTaskSectionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ptss.sql.Query()
	if err := ptss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
