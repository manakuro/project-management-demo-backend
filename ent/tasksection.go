// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tasksection"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TaskSection is the model entity for the TaskSection schema.
type TaskSection struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tasksection.FieldName:
			values[i] = new(sql.NullString)
		case tasksection.FieldCreatedAt, tasksection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tasksection.FieldID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskSection fields.
func (ts *TaskSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tasksection.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ts.ID = *value
			}
		case tasksection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ts.Name = value.String
			}
		case tasksection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ts.CreatedAt = value.Time
			}
		case tasksection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ts.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TaskSection.
// Note that you need to call TaskSection.Unwrap() before calling this method if this TaskSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TaskSection) Update() *TaskSectionUpdateOne {
	return (&TaskSectionClient{config: ts.config}).UpdateOne(ts)
}

// Unwrap unwraps the TaskSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TaskSection) Unwrap() *TaskSection {
	tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskSection is not a transactional entity")
	}
	ts.config.driver = tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TaskSection) String() string {
	var builder strings.Builder
	builder.WriteString("TaskSection(")
	builder.WriteString(fmt.Sprintf("id=%v", ts.ID))
	builder.WriteString(", name=")
	builder.WriteString(ts.Name)
	builder.WriteString(", created_at=")
	builder.WriteString(ts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ts.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskSections is a parsable slice of TaskSection.
type TaskSections []*TaskSection

func (ts TaskSections) config(cfg config) {
	for _i := range ts {
		ts[_i].config = cfg
	}
}
