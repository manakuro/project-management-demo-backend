// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/editor"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/teammate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskFeedUpdate is the builder for updating TaskFeed entities.
type TaskFeedUpdate struct {
	config
	hooks    []Hook
	mutation *TaskFeedMutation
}

// Where appends a list predicates to the TaskFeedUpdate builder.
func (tfu *TaskFeedUpdate) Where(ps ...predicate.TaskFeed) *TaskFeedUpdate {
	tfu.mutation.Where(ps...)
	return tfu
}

// SetTaskID sets the "task_id" field.
func (tfu *TaskFeedUpdate) SetTaskID(u ulid.ID) *TaskFeedUpdate {
	tfu.mutation.SetTaskID(u)
	return tfu
}

// SetTeammateID sets the "teammate_id" field.
func (tfu *TaskFeedUpdate) SetTeammateID(u ulid.ID) *TaskFeedUpdate {
	tfu.mutation.SetTeammateID(u)
	return tfu
}

// SetDescription sets the "description" field.
func (tfu *TaskFeedUpdate) SetDescription(e editor.Description) *TaskFeedUpdate {
	tfu.mutation.SetDescription(e)
	return tfu
}

// SetIsFirst sets the "is_first" field.
func (tfu *TaskFeedUpdate) SetIsFirst(b bool) *TaskFeedUpdate {
	tfu.mutation.SetIsFirst(b)
	return tfu
}

// SetNillableIsFirst sets the "is_first" field if the given value is not nil.
func (tfu *TaskFeedUpdate) SetNillableIsFirst(b *bool) *TaskFeedUpdate {
	if b != nil {
		tfu.SetIsFirst(*b)
	}
	return tfu
}

// SetIsPinned sets the "is_pinned" field.
func (tfu *TaskFeedUpdate) SetIsPinned(b bool) *TaskFeedUpdate {
	tfu.mutation.SetIsPinned(b)
	return tfu
}

// SetNillableIsPinned sets the "is_pinned" field if the given value is not nil.
func (tfu *TaskFeedUpdate) SetNillableIsPinned(b *bool) *TaskFeedUpdate {
	if b != nil {
		tfu.SetIsPinned(*b)
	}
	return tfu
}

// SetTask sets the "task" edge to the Task entity.
func (tfu *TaskFeedUpdate) SetTask(t *Task) *TaskFeedUpdate {
	return tfu.SetTaskID(t.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tfu *TaskFeedUpdate) SetTeammate(t *Teammate) *TaskFeedUpdate {
	return tfu.SetTeammateID(t.ID)
}

// AddTaskFeedLikeIDs adds the "task_feed_likes" edge to the TaskFeedLike entity by IDs.
func (tfu *TaskFeedUpdate) AddTaskFeedLikeIDs(ids ...ulid.ID) *TaskFeedUpdate {
	tfu.mutation.AddTaskFeedLikeIDs(ids...)
	return tfu
}

// AddTaskFeedLikes adds the "task_feed_likes" edges to the TaskFeedLike entity.
func (tfu *TaskFeedUpdate) AddTaskFeedLikes(t ...*TaskFeedLike) *TaskFeedUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfu.AddTaskFeedLikeIDs(ids...)
}

// AddTaskFileIDs adds the "task_files" edge to the TaskFile entity by IDs.
func (tfu *TaskFeedUpdate) AddTaskFileIDs(ids ...ulid.ID) *TaskFeedUpdate {
	tfu.mutation.AddTaskFileIDs(ids...)
	return tfu
}

// AddTaskFiles adds the "task_files" edges to the TaskFile entity.
func (tfu *TaskFeedUpdate) AddTaskFiles(t ...*TaskFile) *TaskFeedUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfu.AddTaskFileIDs(ids...)
}

// Mutation returns the TaskFeedMutation object of the builder.
func (tfu *TaskFeedUpdate) Mutation() *TaskFeedMutation {
	return tfu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tfu *TaskFeedUpdate) ClearTask() *TaskFeedUpdate {
	tfu.mutation.ClearTask()
	return tfu
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tfu *TaskFeedUpdate) ClearTeammate() *TaskFeedUpdate {
	tfu.mutation.ClearTeammate()
	return tfu
}

// ClearTaskFeedLikes clears all "task_feed_likes" edges to the TaskFeedLike entity.
func (tfu *TaskFeedUpdate) ClearTaskFeedLikes() *TaskFeedUpdate {
	tfu.mutation.ClearTaskFeedLikes()
	return tfu
}

// RemoveTaskFeedLikeIDs removes the "task_feed_likes" edge to TaskFeedLike entities by IDs.
func (tfu *TaskFeedUpdate) RemoveTaskFeedLikeIDs(ids ...ulid.ID) *TaskFeedUpdate {
	tfu.mutation.RemoveTaskFeedLikeIDs(ids...)
	return tfu
}

// RemoveTaskFeedLikes removes "task_feed_likes" edges to TaskFeedLike entities.
func (tfu *TaskFeedUpdate) RemoveTaskFeedLikes(t ...*TaskFeedLike) *TaskFeedUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfu.RemoveTaskFeedLikeIDs(ids...)
}

// ClearTaskFiles clears all "task_files" edges to the TaskFile entity.
func (tfu *TaskFeedUpdate) ClearTaskFiles() *TaskFeedUpdate {
	tfu.mutation.ClearTaskFiles()
	return tfu
}

// RemoveTaskFileIDs removes the "task_files" edge to TaskFile entities by IDs.
func (tfu *TaskFeedUpdate) RemoveTaskFileIDs(ids ...ulid.ID) *TaskFeedUpdate {
	tfu.mutation.RemoveTaskFileIDs(ids...)
	return tfu
}

// RemoveTaskFiles removes "task_files" edges to TaskFile entities.
func (tfu *TaskFeedUpdate) RemoveTaskFiles(t ...*TaskFile) *TaskFeedUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfu.RemoveTaskFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TaskFeedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tfu.hooks) == 0 {
		if err = tfu.check(); err != nil {
			return 0, err
		}
		affected, err = tfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskFeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tfu.check(); err != nil {
				return 0, err
			}
			tfu.mutation = mutation
			affected, err = tfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tfu.hooks) - 1; i >= 0; i-- {
			if tfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TaskFeedUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TaskFeedUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TaskFeedUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfu *TaskFeedUpdate) check() error {
	if _, ok := tfu.mutation.TaskID(); tfu.mutation.TaskCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task\"")
	}
	if _, ok := tfu.mutation.TeammateID(); tfu.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	return nil
}

func (tfu *TaskFeedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskfeed.Table,
			Columns: taskfeed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskfeed.FieldID,
			},
		},
	}
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskfeed.FieldDescription,
		})
	}
	if value, ok := tfu.mutation.IsFirst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskfeed.FieldIsFirst,
		})
	}
	if value, ok := tfu.mutation.IsPinned(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskfeed.FieldIsPinned,
		})
	}
	if tfu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TaskTable,
			Columns: []string{taskfeed.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TaskTable,
			Columns: []string{taskfeed.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TeammateTable,
			Columns: []string{taskfeed.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TeammateTable,
			Columns: []string{taskfeed.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfu.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFeedLikesTable,
			Columns: []string{taskfeed.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.RemovedTaskFeedLikesIDs(); len(nodes) > 0 && !tfu.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFeedLikesTable,
			Columns: []string{taskfeed.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.TaskFeedLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFeedLikesTable,
			Columns: []string{taskfeed.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfu.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFilesTable,
			Columns: []string{taskfeed.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.RemovedTaskFilesIDs(); len(nodes) > 0 && !tfu.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFilesTable,
			Columns: []string{taskfeed.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfu.mutation.TaskFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFilesTable,
			Columns: []string{taskfeed.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskfeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskFeedUpdateOne is the builder for updating a single TaskFeed entity.
type TaskFeedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskFeedMutation
}

// SetTaskID sets the "task_id" field.
func (tfuo *TaskFeedUpdateOne) SetTaskID(u ulid.ID) *TaskFeedUpdateOne {
	tfuo.mutation.SetTaskID(u)
	return tfuo
}

// SetTeammateID sets the "teammate_id" field.
func (tfuo *TaskFeedUpdateOne) SetTeammateID(u ulid.ID) *TaskFeedUpdateOne {
	tfuo.mutation.SetTeammateID(u)
	return tfuo
}

// SetDescription sets the "description" field.
func (tfuo *TaskFeedUpdateOne) SetDescription(e editor.Description) *TaskFeedUpdateOne {
	tfuo.mutation.SetDescription(e)
	return tfuo
}

// SetIsFirst sets the "is_first" field.
func (tfuo *TaskFeedUpdateOne) SetIsFirst(b bool) *TaskFeedUpdateOne {
	tfuo.mutation.SetIsFirst(b)
	return tfuo
}

// SetNillableIsFirst sets the "is_first" field if the given value is not nil.
func (tfuo *TaskFeedUpdateOne) SetNillableIsFirst(b *bool) *TaskFeedUpdateOne {
	if b != nil {
		tfuo.SetIsFirst(*b)
	}
	return tfuo
}

// SetIsPinned sets the "is_pinned" field.
func (tfuo *TaskFeedUpdateOne) SetIsPinned(b bool) *TaskFeedUpdateOne {
	tfuo.mutation.SetIsPinned(b)
	return tfuo
}

// SetNillableIsPinned sets the "is_pinned" field if the given value is not nil.
func (tfuo *TaskFeedUpdateOne) SetNillableIsPinned(b *bool) *TaskFeedUpdateOne {
	if b != nil {
		tfuo.SetIsPinned(*b)
	}
	return tfuo
}

// SetTask sets the "task" edge to the Task entity.
func (tfuo *TaskFeedUpdateOne) SetTask(t *Task) *TaskFeedUpdateOne {
	return tfuo.SetTaskID(t.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tfuo *TaskFeedUpdateOne) SetTeammate(t *Teammate) *TaskFeedUpdateOne {
	return tfuo.SetTeammateID(t.ID)
}

// AddTaskFeedLikeIDs adds the "task_feed_likes" edge to the TaskFeedLike entity by IDs.
func (tfuo *TaskFeedUpdateOne) AddTaskFeedLikeIDs(ids ...ulid.ID) *TaskFeedUpdateOne {
	tfuo.mutation.AddTaskFeedLikeIDs(ids...)
	return tfuo
}

// AddTaskFeedLikes adds the "task_feed_likes" edges to the TaskFeedLike entity.
func (tfuo *TaskFeedUpdateOne) AddTaskFeedLikes(t ...*TaskFeedLike) *TaskFeedUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfuo.AddTaskFeedLikeIDs(ids...)
}

// AddTaskFileIDs adds the "task_files" edge to the TaskFile entity by IDs.
func (tfuo *TaskFeedUpdateOne) AddTaskFileIDs(ids ...ulid.ID) *TaskFeedUpdateOne {
	tfuo.mutation.AddTaskFileIDs(ids...)
	return tfuo
}

// AddTaskFiles adds the "task_files" edges to the TaskFile entity.
func (tfuo *TaskFeedUpdateOne) AddTaskFiles(t ...*TaskFile) *TaskFeedUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfuo.AddTaskFileIDs(ids...)
}

// Mutation returns the TaskFeedMutation object of the builder.
func (tfuo *TaskFeedUpdateOne) Mutation() *TaskFeedMutation {
	return tfuo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tfuo *TaskFeedUpdateOne) ClearTask() *TaskFeedUpdateOne {
	tfuo.mutation.ClearTask()
	return tfuo
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tfuo *TaskFeedUpdateOne) ClearTeammate() *TaskFeedUpdateOne {
	tfuo.mutation.ClearTeammate()
	return tfuo
}

// ClearTaskFeedLikes clears all "task_feed_likes" edges to the TaskFeedLike entity.
func (tfuo *TaskFeedUpdateOne) ClearTaskFeedLikes() *TaskFeedUpdateOne {
	tfuo.mutation.ClearTaskFeedLikes()
	return tfuo
}

// RemoveTaskFeedLikeIDs removes the "task_feed_likes" edge to TaskFeedLike entities by IDs.
func (tfuo *TaskFeedUpdateOne) RemoveTaskFeedLikeIDs(ids ...ulid.ID) *TaskFeedUpdateOne {
	tfuo.mutation.RemoveTaskFeedLikeIDs(ids...)
	return tfuo
}

// RemoveTaskFeedLikes removes "task_feed_likes" edges to TaskFeedLike entities.
func (tfuo *TaskFeedUpdateOne) RemoveTaskFeedLikes(t ...*TaskFeedLike) *TaskFeedUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfuo.RemoveTaskFeedLikeIDs(ids...)
}

// ClearTaskFiles clears all "task_files" edges to the TaskFile entity.
func (tfuo *TaskFeedUpdateOne) ClearTaskFiles() *TaskFeedUpdateOne {
	tfuo.mutation.ClearTaskFiles()
	return tfuo
}

// RemoveTaskFileIDs removes the "task_files" edge to TaskFile entities by IDs.
func (tfuo *TaskFeedUpdateOne) RemoveTaskFileIDs(ids ...ulid.ID) *TaskFeedUpdateOne {
	tfuo.mutation.RemoveTaskFileIDs(ids...)
	return tfuo
}

// RemoveTaskFiles removes "task_files" edges to TaskFile entities.
func (tfuo *TaskFeedUpdateOne) RemoveTaskFiles(t ...*TaskFile) *TaskFeedUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfuo.RemoveTaskFileIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfuo *TaskFeedUpdateOne) Select(field string, fields ...string) *TaskFeedUpdateOne {
	tfuo.fields = append([]string{field}, fields...)
	return tfuo
}

// Save executes the query and returns the updated TaskFeed entity.
func (tfuo *TaskFeedUpdateOne) Save(ctx context.Context) (*TaskFeed, error) {
	var (
		err  error
		node *TaskFeed
	)
	if len(tfuo.hooks) == 0 {
		if err = tfuo.check(); err != nil {
			return nil, err
		}
		node, err = tfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskFeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tfuo.check(); err != nil {
				return nil, err
			}
			tfuo.mutation = mutation
			node, err = tfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tfuo.hooks) - 1; i >= 0; i-- {
			if tfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TaskFeedUpdateOne) SaveX(ctx context.Context) *TaskFeed {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TaskFeedUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TaskFeedUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfuo *TaskFeedUpdateOne) check() error {
	if _, ok := tfuo.mutation.TaskID(); tfuo.mutation.TaskCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task\"")
	}
	if _, ok := tfuo.mutation.TeammateID(); tfuo.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	return nil
}

func (tfuo *TaskFeedUpdateOne) sqlSave(ctx context.Context) (_node *TaskFeed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskfeed.Table,
			Columns: taskfeed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskfeed.FieldID,
			},
		},
	}
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TaskFeed.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskfeed.FieldID)
		for _, f := range fields {
			if !taskfeed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskfeed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskfeed.FieldDescription,
		})
	}
	if value, ok := tfuo.mutation.IsFirst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskfeed.FieldIsFirst,
		})
	}
	if value, ok := tfuo.mutation.IsPinned(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskfeed.FieldIsPinned,
		})
	}
	if tfuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TaskTable,
			Columns: []string{taskfeed.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TaskTable,
			Columns: []string{taskfeed.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfuo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TeammateTable,
			Columns: []string{taskfeed.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TeammateTable,
			Columns: []string{taskfeed.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfuo.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFeedLikesTable,
			Columns: []string{taskfeed.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.RemovedTaskFeedLikesIDs(); len(nodes) > 0 && !tfuo.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFeedLikesTable,
			Columns: []string{taskfeed.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.TaskFeedLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFeedLikesTable,
			Columns: []string{taskfeed.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfuo.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFilesTable,
			Columns: []string{taskfeed.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.RemovedTaskFilesIDs(); len(nodes) > 0 && !tfuo.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFilesTable,
			Columns: []string{taskfeed.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfuo.mutation.TaskFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFilesTable,
			Columns: []string{taskfeed.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskFeed{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskfeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
