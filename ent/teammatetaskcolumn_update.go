// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateTaskColumnUpdate is the builder for updating TeammateTaskColumn entities.
type TeammateTaskColumnUpdate struct {
	config
	hooks    []Hook
	mutation *TeammateTaskColumnMutation
}

// Where appends a list predicates to the TeammateTaskColumnUpdate builder.
func (ttcu *TeammateTaskColumnUpdate) Where(ps ...predicate.TeammateTaskColumn) *TeammateTaskColumnUpdate {
	ttcu.mutation.Where(ps...)
	return ttcu
}

// SetTeammateID sets the "teammate_id" field.
func (ttcu *TeammateTaskColumnUpdate) SetTeammateID(u ulid.ID) *TeammateTaskColumnUpdate {
	ttcu.mutation.SetTeammateID(u)
	return ttcu
}

// SetTaskColumnID sets the "task_column_id" field.
func (ttcu *TeammateTaskColumnUpdate) SetTaskColumnID(u ulid.ID) *TeammateTaskColumnUpdate {
	ttcu.mutation.SetTaskColumnID(u)
	return ttcu
}

// SetWorkspaceID sets the "workspace_id" field.
func (ttcu *TeammateTaskColumnUpdate) SetWorkspaceID(u ulid.ID) *TeammateTaskColumnUpdate {
	ttcu.mutation.SetWorkspaceID(u)
	return ttcu
}

// SetWidth sets the "width" field.
func (ttcu *TeammateTaskColumnUpdate) SetWidth(s string) *TeammateTaskColumnUpdate {
	ttcu.mutation.SetWidth(s)
	return ttcu
}

// SetDisabled sets the "disabled" field.
func (ttcu *TeammateTaskColumnUpdate) SetDisabled(b bool) *TeammateTaskColumnUpdate {
	ttcu.mutation.SetDisabled(b)
	return ttcu
}

// SetCustomizable sets the "customizable" field.
func (ttcu *TeammateTaskColumnUpdate) SetCustomizable(b bool) *TeammateTaskColumnUpdate {
	ttcu.mutation.SetCustomizable(b)
	return ttcu
}

// SetOrder sets the "order" field.
func (ttcu *TeammateTaskColumnUpdate) SetOrder(i int) *TeammateTaskColumnUpdate {
	ttcu.mutation.ResetOrder()
	ttcu.mutation.SetOrder(i)
	return ttcu
}

// AddOrder adds i to the "order" field.
func (ttcu *TeammateTaskColumnUpdate) AddOrder(i int) *TeammateTaskColumnUpdate {
	ttcu.mutation.AddOrder(i)
	return ttcu
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (ttcu *TeammateTaskColumnUpdate) SetTeammate(t *Teammate) *TeammateTaskColumnUpdate {
	return ttcu.SetTeammateID(t.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (ttcu *TeammateTaskColumnUpdate) SetWorkspace(w *Workspace) *TeammateTaskColumnUpdate {
	return ttcu.SetWorkspaceID(w.ID)
}

// SetTaskColumn sets the "task_column" edge to the TaskColumn entity.
func (ttcu *TeammateTaskColumnUpdate) SetTaskColumn(t *TaskColumn) *TeammateTaskColumnUpdate {
	return ttcu.SetTaskColumnID(t.ID)
}

// Mutation returns the TeammateTaskColumnMutation object of the builder.
func (ttcu *TeammateTaskColumnUpdate) Mutation() *TeammateTaskColumnMutation {
	return ttcu.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (ttcu *TeammateTaskColumnUpdate) ClearTeammate() *TeammateTaskColumnUpdate {
	ttcu.mutation.ClearTeammate()
	return ttcu
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (ttcu *TeammateTaskColumnUpdate) ClearWorkspace() *TeammateTaskColumnUpdate {
	ttcu.mutation.ClearWorkspace()
	return ttcu
}

// ClearTaskColumn clears the "task_column" edge to the TaskColumn entity.
func (ttcu *TeammateTaskColumnUpdate) ClearTaskColumn() *TeammateTaskColumnUpdate {
	ttcu.mutation.ClearTaskColumn()
	return ttcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttcu *TeammateTaskColumnUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttcu.hooks) == 0 {
		if err = ttcu.check(); err != nil {
			return 0, err
		}
		affected, err = ttcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskColumnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttcu.check(); err != nil {
				return 0, err
			}
			ttcu.mutation = mutation
			affected, err = ttcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttcu.hooks) - 1; i >= 0; i-- {
			if ttcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttcu *TeammateTaskColumnUpdate) SaveX(ctx context.Context) int {
	affected, err := ttcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttcu *TeammateTaskColumnUpdate) Exec(ctx context.Context) error {
	_, err := ttcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcu *TeammateTaskColumnUpdate) ExecX(ctx context.Context) {
	if err := ttcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttcu *TeammateTaskColumnUpdate) check() error {
	if v, ok := ttcu.mutation.Width(); ok {
		if err := teammatetaskcolumn.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf("ent: validator failed for field \"width\": %w", err)}
		}
	}
	if _, ok := ttcu.mutation.TeammateID(); ttcu.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	if _, ok := ttcu.mutation.WorkspaceID(); ttcu.mutation.WorkspaceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workspace\"")
	}
	if _, ok := ttcu.mutation.TaskColumnID(); ttcu.mutation.TaskColumnCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task_column\"")
	}
	return nil
}

func (ttcu *TeammateTaskColumnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammatetaskcolumn.Table,
			Columns: teammatetaskcolumn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetaskcolumn.FieldID,
			},
		},
	}
	if ps := ttcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttcu.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammatetaskcolumn.FieldWidth,
		})
	}
	if value, ok := ttcu.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: teammatetaskcolumn.FieldDisabled,
		})
	}
	if value, ok := ttcu.mutation.Customizable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: teammatetaskcolumn.FieldCustomizable,
		})
	}
	if value, ok := ttcu.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teammatetaskcolumn.FieldOrder,
		})
	}
	if value, ok := ttcu.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teammatetaskcolumn.FieldOrder,
		})
	}
	if ttcu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TeammateTable,
			Columns: []string{teammatetaskcolumn.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttcu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TeammateTable,
			Columns: []string{teammatetaskcolumn.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttcu.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.WorkspaceTable,
			Columns: []string{teammatetaskcolumn.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttcu.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.WorkspaceTable,
			Columns: []string{teammatetaskcolumn.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttcu.mutation.TaskColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TaskColumnTable,
			Columns: []string{teammatetaskcolumn.TaskColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcolumn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttcu.mutation.TaskColumnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TaskColumnTable,
			Columns: []string{teammatetaskcolumn.TaskColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcolumn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammatetaskcolumn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TeammateTaskColumnUpdateOne is the builder for updating a single TeammateTaskColumn entity.
type TeammateTaskColumnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeammateTaskColumnMutation
}

// SetTeammateID sets the "teammate_id" field.
func (ttcuo *TeammateTaskColumnUpdateOne) SetTeammateID(u ulid.ID) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.SetTeammateID(u)
	return ttcuo
}

// SetTaskColumnID sets the "task_column_id" field.
func (ttcuo *TeammateTaskColumnUpdateOne) SetTaskColumnID(u ulid.ID) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.SetTaskColumnID(u)
	return ttcuo
}

// SetWorkspaceID sets the "workspace_id" field.
func (ttcuo *TeammateTaskColumnUpdateOne) SetWorkspaceID(u ulid.ID) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.SetWorkspaceID(u)
	return ttcuo
}

// SetWidth sets the "width" field.
func (ttcuo *TeammateTaskColumnUpdateOne) SetWidth(s string) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.SetWidth(s)
	return ttcuo
}

// SetDisabled sets the "disabled" field.
func (ttcuo *TeammateTaskColumnUpdateOne) SetDisabled(b bool) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.SetDisabled(b)
	return ttcuo
}

// SetCustomizable sets the "customizable" field.
func (ttcuo *TeammateTaskColumnUpdateOne) SetCustomizable(b bool) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.SetCustomizable(b)
	return ttcuo
}

// SetOrder sets the "order" field.
func (ttcuo *TeammateTaskColumnUpdateOne) SetOrder(i int) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.ResetOrder()
	ttcuo.mutation.SetOrder(i)
	return ttcuo
}

// AddOrder adds i to the "order" field.
func (ttcuo *TeammateTaskColumnUpdateOne) AddOrder(i int) *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.AddOrder(i)
	return ttcuo
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (ttcuo *TeammateTaskColumnUpdateOne) SetTeammate(t *Teammate) *TeammateTaskColumnUpdateOne {
	return ttcuo.SetTeammateID(t.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (ttcuo *TeammateTaskColumnUpdateOne) SetWorkspace(w *Workspace) *TeammateTaskColumnUpdateOne {
	return ttcuo.SetWorkspaceID(w.ID)
}

// SetTaskColumn sets the "task_column" edge to the TaskColumn entity.
func (ttcuo *TeammateTaskColumnUpdateOne) SetTaskColumn(t *TaskColumn) *TeammateTaskColumnUpdateOne {
	return ttcuo.SetTaskColumnID(t.ID)
}

// Mutation returns the TeammateTaskColumnMutation object of the builder.
func (ttcuo *TeammateTaskColumnUpdateOne) Mutation() *TeammateTaskColumnMutation {
	return ttcuo.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (ttcuo *TeammateTaskColumnUpdateOne) ClearTeammate() *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.ClearTeammate()
	return ttcuo
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (ttcuo *TeammateTaskColumnUpdateOne) ClearWorkspace() *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.ClearWorkspace()
	return ttcuo
}

// ClearTaskColumn clears the "task_column" edge to the TaskColumn entity.
func (ttcuo *TeammateTaskColumnUpdateOne) ClearTaskColumn() *TeammateTaskColumnUpdateOne {
	ttcuo.mutation.ClearTaskColumn()
	return ttcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttcuo *TeammateTaskColumnUpdateOne) Select(field string, fields ...string) *TeammateTaskColumnUpdateOne {
	ttcuo.fields = append([]string{field}, fields...)
	return ttcuo
}

// Save executes the query and returns the updated TeammateTaskColumn entity.
func (ttcuo *TeammateTaskColumnUpdateOne) Save(ctx context.Context) (*TeammateTaskColumn, error) {
	var (
		err  error
		node *TeammateTaskColumn
	)
	if len(ttcuo.hooks) == 0 {
		if err = ttcuo.check(); err != nil {
			return nil, err
		}
		node, err = ttcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskColumnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttcuo.check(); err != nil {
				return nil, err
			}
			ttcuo.mutation = mutation
			node, err = ttcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttcuo.hooks) - 1; i >= 0; i-- {
			if ttcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttcuo *TeammateTaskColumnUpdateOne) SaveX(ctx context.Context) *TeammateTaskColumn {
	node, err := ttcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttcuo *TeammateTaskColumnUpdateOne) Exec(ctx context.Context) error {
	_, err := ttcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcuo *TeammateTaskColumnUpdateOne) ExecX(ctx context.Context) {
	if err := ttcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttcuo *TeammateTaskColumnUpdateOne) check() error {
	if v, ok := ttcuo.mutation.Width(); ok {
		if err := teammatetaskcolumn.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf("ent: validator failed for field \"width\": %w", err)}
		}
	}
	if _, ok := ttcuo.mutation.TeammateID(); ttcuo.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	if _, ok := ttcuo.mutation.WorkspaceID(); ttcuo.mutation.WorkspaceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workspace\"")
	}
	if _, ok := ttcuo.mutation.TaskColumnID(); ttcuo.mutation.TaskColumnCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task_column\"")
	}
	return nil
}

func (ttcuo *TeammateTaskColumnUpdateOne) sqlSave(ctx context.Context) (_node *TeammateTaskColumn, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammatetaskcolumn.Table,
			Columns: teammatetaskcolumn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetaskcolumn.FieldID,
			},
		},
	}
	id, ok := ttcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TeammateTaskColumn.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ttcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammatetaskcolumn.FieldID)
		for _, f := range fields {
			if !teammatetaskcolumn.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teammatetaskcolumn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttcuo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammatetaskcolumn.FieldWidth,
		})
	}
	if value, ok := ttcuo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: teammatetaskcolumn.FieldDisabled,
		})
	}
	if value, ok := ttcuo.mutation.Customizable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: teammatetaskcolumn.FieldCustomizable,
		})
	}
	if value, ok := ttcuo.mutation.Order(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teammatetaskcolumn.FieldOrder,
		})
	}
	if value, ok := ttcuo.mutation.AddedOrder(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: teammatetaskcolumn.FieldOrder,
		})
	}
	if ttcuo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TeammateTable,
			Columns: []string{teammatetaskcolumn.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttcuo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TeammateTable,
			Columns: []string{teammatetaskcolumn.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttcuo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.WorkspaceTable,
			Columns: []string{teammatetaskcolumn.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttcuo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.WorkspaceTable,
			Columns: []string{teammatetaskcolumn.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttcuo.mutation.TaskColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TaskColumnTable,
			Columns: []string{teammatetaskcolumn.TaskColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcolumn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttcuo.mutation.TaskColumnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskcolumn.TaskColumnTable,
			Columns: []string{teammatetaskcolumn.TaskColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcolumn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeammateTaskColumn{config: ttcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammatetaskcolumn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
