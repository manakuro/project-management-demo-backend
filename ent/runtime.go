// Code generated by entc, DO NOT EDIT.

package ent

import (
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	colorMixin := schema.Color{}.Mixin()
	colorMixinFields0 := colorMixin[0].Fields()
	_ = colorMixinFields0
	colorMixinFields1 := colorMixin[1].Fields()
	_ = colorMixinFields1
	colorMixinFields2 := colorMixin[2].Fields()
	_ = colorMixinFields2
	colorFields := schema.Color{}.Fields()
	_ = colorFields
	// colorDescName is the schema descriptor for name field.
	colorDescName := colorMixinFields1[0].Descriptor()
	// color.NameValidator is a validator for the "name" field. It is called by the builders before save.
	color.NameValidator = func() func(string) error {
		validators := colorDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// colorDescColor is the schema descriptor for color field.
	colorDescColor := colorMixinFields1[1].Descriptor()
	// color.ColorValidator is a validator for the "color" field. It is called by the builders before save.
	color.ColorValidator = func() func(string) error {
		validators := colorDescColor.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(color string) error {
			for _, fn := range fns {
				if err := fn(color); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// colorDescHex is the schema descriptor for hex field.
	colorDescHex := colorMixinFields1[2].Descriptor()
	// color.HexValidator is a validator for the "hex" field. It is called by the builders before save.
	color.HexValidator = func() func(string) error {
		validators := colorDescHex.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(hex string) error {
			for _, fn := range fns {
				if err := fn(hex); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// colorDescCreatedAt is the schema descriptor for created_at field.
	colorDescCreatedAt := colorMixinFields2[0].Descriptor()
	// color.DefaultCreatedAt holds the default value on creation for the created_at field.
	color.DefaultCreatedAt = colorDescCreatedAt.Default.(func() time.Time)
	// colorDescUpdatedAt is the schema descriptor for updated_at field.
	colorDescUpdatedAt := colorMixinFields2[1].Descriptor()
	// color.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	color.DefaultUpdatedAt = colorDescUpdatedAt.Default.(func() time.Time)
	// colorDescID is the schema descriptor for id field.
	colorDescID := colorMixinFields0[0].Descriptor()
	// color.DefaultID holds the default value on creation for the id field.
	color.DefaultID = colorDescID.Default.(func() ulid.ID)
	iconMixin := schema.Icon{}.Mixin()
	iconMixinFields0 := iconMixin[0].Fields()
	_ = iconMixinFields0
	iconMixinFields1 := iconMixin[1].Fields()
	_ = iconMixinFields1
	iconMixinFields2 := iconMixin[2].Fields()
	_ = iconMixinFields2
	iconFields := schema.Icon{}.Fields()
	_ = iconFields
	// iconDescName is the schema descriptor for name field.
	iconDescName := iconMixinFields1[0].Descriptor()
	// icon.NameValidator is a validator for the "name" field. It is called by the builders before save.
	icon.NameValidator = func() func(string) error {
		validators := iconDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// iconDescIcon is the schema descriptor for icon field.
	iconDescIcon := iconMixinFields1[1].Descriptor()
	// icon.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	icon.IconValidator = func() func(string) error {
		validators := iconDescIcon.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(icon string) error {
			for _, fn := range fns {
				if err := fn(icon); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// iconDescCreatedAt is the schema descriptor for created_at field.
	iconDescCreatedAt := iconMixinFields2[0].Descriptor()
	// icon.DefaultCreatedAt holds the default value on creation for the created_at field.
	icon.DefaultCreatedAt = iconDescCreatedAt.Default.(func() time.Time)
	// iconDescUpdatedAt is the schema descriptor for updated_at field.
	iconDescUpdatedAt := iconMixinFields2[1].Descriptor()
	// icon.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	icon.DefaultUpdatedAt = iconDescUpdatedAt.Default.(func() time.Time)
	// iconDescID is the schema descriptor for id field.
	iconDescID := iconMixinFields0[0].Descriptor()
	// icon.DefaultID holds the default value on creation for the id field.
	icon.DefaultID = iconDescID.Default.(func() ulid.ID)
	projectMixin := schema.Project{}.Mixin()
	projectMixinFields0 := projectMixin[0].Fields()
	_ = projectMixinFields0
	projectMixinFields1 := projectMixin[1].Fields()
	_ = projectMixinFields1
	projectMixinFields2 := projectMixin[2].Fields()
	_ = projectMixinFields2
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescName is the schema descriptor for name field.
	projectDescName := projectMixinFields1[4].Descriptor()
	// project.NameValidator is a validator for the "name" field. It is called by the builders before save.
	project.NameValidator = func() func(string) error {
		validators := projectDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// projectDescDescriptionTitle is the schema descriptor for description_title field.
	projectDescDescriptionTitle := projectMixinFields1[6].Descriptor()
	// project.DescriptionTitleValidator is a validator for the "description_title" field. It is called by the builders before save.
	project.DescriptionTitleValidator = projectDescDescriptionTitle.Validators[0].(func(string) error)
	// projectDescDueDate is the schema descriptor for due_date field.
	projectDescDueDate := projectMixinFields1[7].Descriptor()
	// project.DefaultDueDate holds the default value on creation for the due_date field.
	project.DefaultDueDate = projectDescDueDate.Default.(func() time.Time)
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectMixinFields2[0].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() time.Time)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectMixinFields2[1].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() time.Time)
	// projectDescID is the schema descriptor for id field.
	projectDescID := projectMixinFields0[0].Descriptor()
	// project.DefaultID holds the default value on creation for the id field.
	project.DefaultID = projectDescID.Default.(func() ulid.ID)
	projectbasecolorMixin := schema.ProjectBaseColor{}.Mixin()
	projectbasecolorMixinFields0 := projectbasecolorMixin[0].Fields()
	_ = projectbasecolorMixinFields0
	projectbasecolorMixinFields2 := projectbasecolorMixin[2].Fields()
	_ = projectbasecolorMixinFields2
	projectbasecolorFields := schema.ProjectBaseColor{}.Fields()
	_ = projectbasecolorFields
	// projectbasecolorDescCreatedAt is the schema descriptor for created_at field.
	projectbasecolorDescCreatedAt := projectbasecolorMixinFields2[0].Descriptor()
	// projectbasecolor.DefaultCreatedAt holds the default value on creation for the created_at field.
	projectbasecolor.DefaultCreatedAt = projectbasecolorDescCreatedAt.Default.(func() time.Time)
	// projectbasecolorDescUpdatedAt is the schema descriptor for updated_at field.
	projectbasecolorDescUpdatedAt := projectbasecolorMixinFields2[1].Descriptor()
	// projectbasecolor.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	projectbasecolor.DefaultUpdatedAt = projectbasecolorDescUpdatedAt.Default.(func() time.Time)
	// projectbasecolorDescID is the schema descriptor for id field.
	projectbasecolorDescID := projectbasecolorMixinFields0[0].Descriptor()
	// projectbasecolor.DefaultID holds the default value on creation for the id field.
	projectbasecolor.DefaultID = projectbasecolorDescID.Default.(func() ulid.ID)
	projectteammateMixin := schema.ProjectTeammate{}.Mixin()
	projectteammateMixinFields0 := projectteammateMixin[0].Fields()
	_ = projectteammateMixinFields0
	projectteammateMixinFields1 := projectteammateMixin[1].Fields()
	_ = projectteammateMixinFields1
	projectteammateMixinFields2 := projectteammateMixin[2].Fields()
	_ = projectteammateMixinFields2
	projectteammateFields := schema.ProjectTeammate{}.Fields()
	_ = projectteammateFields
	// projectteammateDescRole is the schema descriptor for role field.
	projectteammateDescRole := projectteammateMixinFields1[2].Descriptor()
	// projectteammate.RoleValidator is a validator for the "role" field. It is called by the builders before save.
	projectteammate.RoleValidator = projectteammateDescRole.Validators[0].(func(string) error)
	// projectteammateDescCreatedAt is the schema descriptor for created_at field.
	projectteammateDescCreatedAt := projectteammateMixinFields2[0].Descriptor()
	// projectteammate.DefaultCreatedAt holds the default value on creation for the created_at field.
	projectteammate.DefaultCreatedAt = projectteammateDescCreatedAt.Default.(func() time.Time)
	// projectteammateDescUpdatedAt is the schema descriptor for updated_at field.
	projectteammateDescUpdatedAt := projectteammateMixinFields2[1].Descriptor()
	// projectteammate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	projectteammate.DefaultUpdatedAt = projectteammateDescUpdatedAt.Default.(func() time.Time)
	// projectteammateDescID is the schema descriptor for id field.
	projectteammateDescID := projectteammateMixinFields0[0].Descriptor()
	// projectteammate.DefaultID holds the default value on creation for the id field.
	projectteammate.DefaultID = projectteammateDescID.Default.(func() ulid.ID)
	teammateMixin := schema.Teammate{}.Mixin()
	teammateMixinFields0 := teammateMixin[0].Fields()
	_ = teammateMixinFields0
	teammateMixinFields1 := teammateMixin[1].Fields()
	_ = teammateMixinFields1
	teammateMixinFields2 := teammateMixin[2].Fields()
	_ = teammateMixinFields2
	teammateFields := schema.Teammate{}.Fields()
	_ = teammateFields
	// teammateDescName is the schema descriptor for name field.
	teammateDescName := teammateMixinFields1[0].Descriptor()
	// teammate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	teammate.NameValidator = func() func(string) error {
		validators := teammateDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// teammateDescImage is the schema descriptor for image field.
	teammateDescImage := teammateMixinFields1[1].Descriptor()
	// teammate.ImageValidator is a validator for the "image" field. It is called by the builders before save.
	teammate.ImageValidator = teammateDescImage.Validators[0].(func(string) error)
	// teammateDescEmail is the schema descriptor for email field.
	teammateDescEmail := teammateMixinFields1[2].Descriptor()
	// teammate.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	teammate.EmailValidator = teammateDescEmail.Validators[0].(func(string) error)
	// teammateDescCreatedAt is the schema descriptor for created_at field.
	teammateDescCreatedAt := teammateMixinFields2[0].Descriptor()
	// teammate.DefaultCreatedAt holds the default value on creation for the created_at field.
	teammate.DefaultCreatedAt = teammateDescCreatedAt.Default.(func() time.Time)
	// teammateDescUpdatedAt is the schema descriptor for updated_at field.
	teammateDescUpdatedAt := teammateMixinFields2[1].Descriptor()
	// teammate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	teammate.DefaultUpdatedAt = teammateDescUpdatedAt.Default.(func() time.Time)
	// teammateDescID is the schema descriptor for id field.
	teammateDescID := teammateMixinFields0[0].Descriptor()
	// teammate.DefaultID holds the default value on creation for the id field.
	teammate.DefaultID = teammateDescID.Default.(func() ulid.ID)
	testtodoMixin := schema.TestTodo{}.Mixin()
	testtodoMixinFields0 := testtodoMixin[0].Fields()
	_ = testtodoMixinFields0
	testtodoMixinFields1 := testtodoMixin[1].Fields()
	_ = testtodoMixinFields1
	testtodoMixinFields2 := testtodoMixin[2].Fields()
	_ = testtodoMixinFields2
	testtodoFields := schema.TestTodo{}.Fields()
	_ = testtodoFields
	// testtodoDescName is the schema descriptor for name field.
	testtodoDescName := testtodoMixinFields1[1].Descriptor()
	// testtodo.DefaultName holds the default value on creation for the name field.
	testtodo.DefaultName = testtodoDescName.Default.(string)
	// testtodoDescPriority is the schema descriptor for priority field.
	testtodoDescPriority := testtodoMixinFields1[3].Descriptor()
	// testtodo.DefaultPriority holds the default value on creation for the priority field.
	testtodo.DefaultPriority = testtodoDescPriority.Default.(int)
	// testtodoDescCreatedAt is the schema descriptor for created_at field.
	testtodoDescCreatedAt := testtodoMixinFields2[0].Descriptor()
	// testtodo.DefaultCreatedAt holds the default value on creation for the created_at field.
	testtodo.DefaultCreatedAt = testtodoDescCreatedAt.Default.(func() time.Time)
	// testtodoDescUpdatedAt is the schema descriptor for updated_at field.
	testtodoDescUpdatedAt := testtodoMixinFields2[1].Descriptor()
	// testtodo.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	testtodo.DefaultUpdatedAt = testtodoDescUpdatedAt.Default.(func() time.Time)
	// testtodoDescID is the schema descriptor for id field.
	testtodoDescID := testtodoMixinFields0[0].Descriptor()
	// testtodo.DefaultID holds the default value on creation for the id field.
	testtodo.DefaultID = testtodoDescID.Default.(func() ulid.ID)
	testuserMixin := schema.TestUser{}.Mixin()
	testuserMixinFields0 := testuserMixin[0].Fields()
	_ = testuserMixinFields0
	testuserMixinFields1 := testuserMixin[1].Fields()
	_ = testuserMixinFields1
	testuserMixinFields2 := testuserMixin[2].Fields()
	_ = testuserMixinFields2
	testuserFields := schema.TestUser{}.Fields()
	_ = testuserFields
	// testuserDescName is the schema descriptor for name field.
	testuserDescName := testuserMixinFields1[0].Descriptor()
	// testuser.NameValidator is a validator for the "name" field. It is called by the builders before save.
	testuser.NameValidator = func() func(string) error {
		validators := testuserDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// testuserDescCreatedAt is the schema descriptor for created_at field.
	testuserDescCreatedAt := testuserMixinFields2[0].Descriptor()
	// testuser.DefaultCreatedAt holds the default value on creation for the created_at field.
	testuser.DefaultCreatedAt = testuserDescCreatedAt.Default.(func() time.Time)
	// testuserDescUpdatedAt is the schema descriptor for updated_at field.
	testuserDescUpdatedAt := testuserMixinFields2[1].Descriptor()
	// testuser.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	testuser.DefaultUpdatedAt = testuserDescUpdatedAt.Default.(func() time.Time)
	// testuserDescID is the schema descriptor for id field.
	testuserDescID := testuserMixinFields0[0].Descriptor()
	// testuser.DefaultID holds the default value on creation for the id field.
	testuser.DefaultID = testuserDescID.Default.(func() ulid.ID)
	workspaceMixin := schema.Workspace{}.Mixin()
	workspaceMixinFields0 := workspaceMixin[0].Fields()
	_ = workspaceMixinFields0
	workspaceMixinFields1 := workspaceMixin[1].Fields()
	_ = workspaceMixinFields1
	workspaceMixinFields2 := workspaceMixin[2].Fields()
	_ = workspaceMixinFields2
	workspaceFields := schema.Workspace{}.Fields()
	_ = workspaceFields
	// workspaceDescName is the schema descriptor for name field.
	workspaceDescName := workspaceMixinFields1[1].Descriptor()
	// workspace.NameValidator is a validator for the "name" field. It is called by the builders before save.
	workspace.NameValidator = func() func(string) error {
		validators := workspaceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// workspaceDescCreatedAt is the schema descriptor for created_at field.
	workspaceDescCreatedAt := workspaceMixinFields2[0].Descriptor()
	// workspace.DefaultCreatedAt holds the default value on creation for the created_at field.
	workspace.DefaultCreatedAt = workspaceDescCreatedAt.Default.(func() time.Time)
	// workspaceDescUpdatedAt is the schema descriptor for updated_at field.
	workspaceDescUpdatedAt := workspaceMixinFields2[1].Descriptor()
	// workspace.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workspace.DefaultUpdatedAt = workspaceDescUpdatedAt.Default.(func() time.Time)
	// workspaceDescID is the schema descriptor for id field.
	workspaceDescID := workspaceMixinFields0[0].Descriptor()
	// workspace.DefaultID holds the default value on creation for the id field.
	workspace.DefaultID = workspaceDescID.Default.(func() ulid.ID)
}
