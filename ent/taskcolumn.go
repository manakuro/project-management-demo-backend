// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TaskColumn is the model entity for the TaskColumn schema.
type TaskColumn struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type taskcolumn.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskColumnQuery when eager-loading is set.
	Edges TaskColumnEdges `json:"edges"`
}

// TaskColumnEdges holds the relations/edges for other nodes in the graph.
type TaskColumnEdges struct {
	// TeammateTaskColumns holds the value of the teammate_task_columns edge.
	TeammateTaskColumns []*TeammateTaskColumn `json:"teammate_task_columns,omitempty"`
	// ProjectTaskColumns holds the value of the project_task_columns edge.
	ProjectTaskColumns []*ProjectTaskColumn `json:"project_task_columns,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeammateTaskColumnsOrErr returns the TeammateTaskColumns value or an error if the edge
// was not loaded in eager-loading.
func (e TaskColumnEdges) TeammateTaskColumnsOrErr() ([]*TeammateTaskColumn, error) {
	if e.loadedTypes[0] {
		return e.TeammateTaskColumns, nil
	}
	return nil, &NotLoadedError{edge: "teammate_task_columns"}
}

// ProjectTaskColumnsOrErr returns the ProjectTaskColumns value or an error if the edge
// was not loaded in eager-loading.
func (e TaskColumnEdges) ProjectTaskColumnsOrErr() ([]*ProjectTaskColumn, error) {
	if e.loadedTypes[1] {
		return e.ProjectTaskColumns, nil
	}
	return nil, &NotLoadedError{edge: "project_task_columns"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskColumn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskcolumn.FieldName, taskcolumn.FieldType:
			values[i] = new(sql.NullString)
		case taskcolumn.FieldCreatedAt, taskcolumn.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case taskcolumn.FieldID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskColumn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskColumn fields.
func (tc *TaskColumn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskcolumn.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tc.ID = *value
			}
		case taskcolumn.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tc.Name = value.String
			}
		case taskcolumn.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tc.Type = taskcolumn.Type(value.String)
			}
		case taskcolumn.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = value.Time
			}
		case taskcolumn.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTeammateTaskColumns queries the "teammate_task_columns" edge of the TaskColumn entity.
func (tc *TaskColumn) QueryTeammateTaskColumns() *TeammateTaskColumnQuery {
	return (&TaskColumnClient{config: tc.config}).QueryTeammateTaskColumns(tc)
}

// QueryProjectTaskColumns queries the "project_task_columns" edge of the TaskColumn entity.
func (tc *TaskColumn) QueryProjectTaskColumns() *ProjectTaskColumnQuery {
	return (&TaskColumnClient{config: tc.config}).QueryProjectTaskColumns(tc)
}

// Update returns a builder for updating this TaskColumn.
// Note that you need to call TaskColumn.Unwrap() before calling this method if this TaskColumn
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TaskColumn) Update() *TaskColumnUpdateOne {
	return (&TaskColumnClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TaskColumn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TaskColumn) Unwrap() *TaskColumn {
	tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskColumn is not a transactional entity")
	}
	tc.config.driver = tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TaskColumn) String() string {
	var builder strings.Builder
	builder.WriteString("TaskColumn(")
	builder.WriteString(fmt.Sprintf("id=%v", tc.ID))
	builder.WriteString(", name=")
	builder.WriteString(tc.Name)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", tc.Type))
	builder.WriteString(", created_at=")
	builder.WriteString(tc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskColumns is a parsable slice of TaskColumn.
type TaskColumns []*TaskColumn

func (tc TaskColumns) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
