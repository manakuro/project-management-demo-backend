// Code generated by entc, DO NOT EDIT.

package taskactivity

import (
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ActivityID applies equality check predicate on the "activity_id" field. It's identical to ActivityIDEQ.
func ActivityID(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityID), v))
	})
}

// TeammateID applies equality check predicate on the "teammate_id" field. It's identical to TeammateIDEQ.
func TeammateID(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeammateID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ActivityIDEQ applies the EQ predicate on the "activity_id" field.
func ActivityIDEQ(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityID), v))
	})
}

// ActivityIDNEQ applies the NEQ predicate on the "activity_id" field.
func ActivityIDNEQ(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityID), v))
	})
}

// ActivityIDIn applies the In predicate on the "activity_id" field.
func ActivityIDIn(vs ...ulid.ID) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityID), v...))
	})
}

// ActivityIDNotIn applies the NotIn predicate on the "activity_id" field.
func ActivityIDNotIn(vs ...ulid.ID) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityID), v...))
	})
}

// ActivityIDGT applies the GT predicate on the "activity_id" field.
func ActivityIDGT(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivityID), v))
	})
}

// ActivityIDGTE applies the GTE predicate on the "activity_id" field.
func ActivityIDGTE(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivityID), v))
	})
}

// ActivityIDLT applies the LT predicate on the "activity_id" field.
func ActivityIDLT(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivityID), v))
	})
}

// ActivityIDLTE applies the LTE predicate on the "activity_id" field.
func ActivityIDLTE(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivityID), v))
	})
}

// ActivityIDContains applies the Contains predicate on the "activity_id" field.
func ActivityIDContains(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActivityID), vc))
	})
}

// ActivityIDHasPrefix applies the HasPrefix predicate on the "activity_id" field.
func ActivityIDHasPrefix(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActivityID), vc))
	})
}

// ActivityIDHasSuffix applies the HasSuffix predicate on the "activity_id" field.
func ActivityIDHasSuffix(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActivityID), vc))
	})
}

// ActivityIDEqualFold applies the EqualFold predicate on the "activity_id" field.
func ActivityIDEqualFold(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActivityID), vc))
	})
}

// ActivityIDContainsFold applies the ContainsFold predicate on the "activity_id" field.
func ActivityIDContainsFold(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActivityID), vc))
	})
}

// TeammateIDEQ applies the EQ predicate on the "teammate_id" field.
func TeammateIDEQ(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeammateID), v))
	})
}

// TeammateIDNEQ applies the NEQ predicate on the "teammate_id" field.
func TeammateIDNEQ(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeammateID), v))
	})
}

// TeammateIDIn applies the In predicate on the "teammate_id" field.
func TeammateIDIn(vs ...ulid.ID) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeammateID), v...))
	})
}

// TeammateIDNotIn applies the NotIn predicate on the "teammate_id" field.
func TeammateIDNotIn(vs ...ulid.ID) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeammateID), v...))
	})
}

// TeammateIDGT applies the GT predicate on the "teammate_id" field.
func TeammateIDGT(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeammateID), v))
	})
}

// TeammateIDGTE applies the GTE predicate on the "teammate_id" field.
func TeammateIDGTE(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeammateID), v))
	})
}

// TeammateIDLT applies the LT predicate on the "teammate_id" field.
func TeammateIDLT(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeammateID), v))
	})
}

// TeammateIDLTE applies the LTE predicate on the "teammate_id" field.
func TeammateIDLTE(v ulid.ID) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeammateID), v))
	})
}

// TeammateIDContains applies the Contains predicate on the "teammate_id" field.
func TeammateIDContains(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeammateID), vc))
	})
}

// TeammateIDHasPrefix applies the HasPrefix predicate on the "teammate_id" field.
func TeammateIDHasPrefix(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeammateID), vc))
	})
}

// TeammateIDHasSuffix applies the HasSuffix predicate on the "teammate_id" field.
func TeammateIDHasSuffix(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeammateID), vc))
	})
}

// TeammateIDEqualFold applies the EqualFold predicate on the "teammate_id" field.
func TeammateIDEqualFold(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeammateID), vc))
	})
}

// TeammateIDContainsFold applies the ContainsFold predicate on the "teammate_id" field.
func TeammateIDContainsFold(v ulid.ID) predicate.TaskActivity {
	vc := string(v)
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeammateID), vc))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TaskActivity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskActivity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasTeammate applies the HasEdge predicate on the "teammate" edge.
func HasTeammate() predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeammateTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeammateTable, TeammateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeammateWith applies the HasEdge predicate on the "teammate" edge with a given conditions (other predicates).
func HasTeammateWith(preds ...predicate.Teammate) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeammateInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeammateTable, TeammateColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActivityType applies the HasEdge predicate on the "activityType" edge.
func HasActivityType() predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivityTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActivityTypeTable, ActivityTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivityTypeWith applies the HasEdge predicate on the "activityType" edge with a given conditions (other predicates).
func HasActivityTypeWith(preds ...predicate.ActivityType) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivityTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActivityTypeTable, ActivityTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskActivity) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskActivity) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskActivity) predicate.TaskActivity {
	return predicate.TaskActivity(func(s *sql.Selector) {
		p(s.Not())
	})
}
