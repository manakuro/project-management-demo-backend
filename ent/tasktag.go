// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tag"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/tasktag"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TaskTag is the model entity for the TaskTag schema.
type TaskTag struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID ulid.ID `json:"task_id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID ulid.ID `json:"tag_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskTagQuery when eager-loading is set.
	Edges TaskTagEdges `json:"edges"`
}

// TaskTagEdges holds the relations/edges for other nodes in the graph.
type TaskTagEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskTagEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// The edge task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskTagEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[1] {
		if e.Tag == nil {
			// The edge tag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskTag) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tasktag.FieldCreatedAt, tasktag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tasktag.FieldID, tasktag.FieldTaskID, tasktag.FieldTagID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskTag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskTag fields.
func (tt *TaskTag) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tasktag.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tt.ID = *value
			}
		case tasktag.FieldTaskID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				tt.TaskID = *value
			}
		case tasktag.FieldTagID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value != nil {
				tt.TagID = *value
			}
		case tasktag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tt.CreatedAt = value.Time
			}
		case tasktag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tt.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTask queries the "task" edge of the TaskTag entity.
func (tt *TaskTag) QueryTask() *TaskQuery {
	return (&TaskTagClient{config: tt.config}).QueryTask(tt)
}

// QueryTag queries the "tag" edge of the TaskTag entity.
func (tt *TaskTag) QueryTag() *TagQuery {
	return (&TaskTagClient{config: tt.config}).QueryTag(tt)
}

// Update returns a builder for updating this TaskTag.
// Note that you need to call TaskTag.Unwrap() before calling this method if this TaskTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TaskTag) Update() *TaskTagUpdateOne {
	return (&TaskTagClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TaskTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TaskTag) Unwrap() *TaskTag {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskTag is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TaskTag) String() string {
	var builder strings.Builder
	builder.WriteString("TaskTag(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", task_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TaskID))
	builder.WriteString(", tag_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TagID))
	builder.WriteString(", created_at=")
	builder.WriteString(tt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskTags is a parsable slice of TaskTag.
type TaskTags []*TaskTag

func (tt TaskTags) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
