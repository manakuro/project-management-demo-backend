// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tag"
	"project-management-demo-backend/ent/taskpriority"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ColorUpdate is the builder for updating Color entities.
type ColorUpdate struct {
	config
	hooks    []Hook
	mutation *ColorMutation
}

// Where appends a list predicates to the ColorUpdate builder.
func (cu *ColorUpdate) Where(ps ...predicate.Color) *ColorUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ColorUpdate) SetName(s string) *ColorUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetColor sets the "color" field.
func (cu *ColorUpdate) SetColor(s string) *ColorUpdate {
	cu.mutation.SetColor(s)
	return cu
}

// SetHex sets the "hex" field.
func (cu *ColorUpdate) SetHex(s string) *ColorUpdate {
	cu.mutation.SetHex(s)
	return cu
}

// AddProjectBaseColorIDs adds the "project_base_colors" edge to the ProjectBaseColor entity by IDs.
func (cu *ColorUpdate) AddProjectBaseColorIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.AddProjectBaseColorIDs(ids...)
	return cu
}

// AddProjectBaseColors adds the "project_base_colors" edges to the ProjectBaseColor entity.
func (cu *ColorUpdate) AddProjectBaseColors(p ...*ProjectBaseColor) *ColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProjectBaseColorIDs(ids...)
}

// AddProjectLightColorIDs adds the "project_light_colors" edge to the ProjectLightColor entity by IDs.
func (cu *ColorUpdate) AddProjectLightColorIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.AddProjectLightColorIDs(ids...)
	return cu
}

// AddProjectLightColors adds the "project_light_colors" edges to the ProjectLightColor entity.
func (cu *ColorUpdate) AddProjectLightColors(p ...*ProjectLightColor) *ColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProjectLightColorIDs(ids...)
}

// AddTaskPriorityIDs adds the "task_priorities" edge to the TaskPriority entity by IDs.
func (cu *ColorUpdate) AddTaskPriorityIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.AddTaskPriorityIDs(ids...)
	return cu
}

// AddTaskPriorities adds the "task_priorities" edges to the TaskPriority entity.
func (cu *ColorUpdate) AddTaskPriorities(t ...*TaskPriority) *ColorUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskPriorityIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cu *ColorUpdate) AddTagIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.AddTagIDs(ids...)
	return cu
}

// AddTags adds the "tags" edges to the Tag entity.
func (cu *ColorUpdate) AddTags(t ...*Tag) *ColorUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTagIDs(ids...)
}

// Mutation returns the ColorMutation object of the builder.
func (cu *ColorUpdate) Mutation() *ColorMutation {
	return cu.mutation
}

// ClearProjectBaseColors clears all "project_base_colors" edges to the ProjectBaseColor entity.
func (cu *ColorUpdate) ClearProjectBaseColors() *ColorUpdate {
	cu.mutation.ClearProjectBaseColors()
	return cu
}

// RemoveProjectBaseColorIDs removes the "project_base_colors" edge to ProjectBaseColor entities by IDs.
func (cu *ColorUpdate) RemoveProjectBaseColorIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.RemoveProjectBaseColorIDs(ids...)
	return cu
}

// RemoveProjectBaseColors removes "project_base_colors" edges to ProjectBaseColor entities.
func (cu *ColorUpdate) RemoveProjectBaseColors(p ...*ProjectBaseColor) *ColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProjectBaseColorIDs(ids...)
}

// ClearProjectLightColors clears all "project_light_colors" edges to the ProjectLightColor entity.
func (cu *ColorUpdate) ClearProjectLightColors() *ColorUpdate {
	cu.mutation.ClearProjectLightColors()
	return cu
}

// RemoveProjectLightColorIDs removes the "project_light_colors" edge to ProjectLightColor entities by IDs.
func (cu *ColorUpdate) RemoveProjectLightColorIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.RemoveProjectLightColorIDs(ids...)
	return cu
}

// RemoveProjectLightColors removes "project_light_colors" edges to ProjectLightColor entities.
func (cu *ColorUpdate) RemoveProjectLightColors(p ...*ProjectLightColor) *ColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProjectLightColorIDs(ids...)
}

// ClearTaskPriorities clears all "task_priorities" edges to the TaskPriority entity.
func (cu *ColorUpdate) ClearTaskPriorities() *ColorUpdate {
	cu.mutation.ClearTaskPriorities()
	return cu
}

// RemoveTaskPriorityIDs removes the "task_priorities" edge to TaskPriority entities by IDs.
func (cu *ColorUpdate) RemoveTaskPriorityIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.RemoveTaskPriorityIDs(ids...)
	return cu
}

// RemoveTaskPriorities removes "task_priorities" edges to TaskPriority entities.
func (cu *ColorUpdate) RemoveTaskPriorities(t ...*TaskPriority) *ColorUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskPriorityIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (cu *ColorUpdate) ClearTags() *ColorUpdate {
	cu.mutation.ClearTags()
	return cu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (cu *ColorUpdate) RemoveTagIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.RemoveTagIDs(ids...)
	return cu
}

// RemoveTags removes "tags" edges to Tag entities.
func (cu *ColorUpdate) RemoveTags(t ...*Tag) *ColorUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ColorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ColorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ColorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ColorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ColorUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := color.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Color(); ok {
		if err := color.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf("ent: validator failed for field \"color\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Hex(); ok {
		if err := color.HexValidator(v); err != nil {
			return &ValidationError{Name: "hex", err: fmt.Errorf("ent: validator failed for field \"hex\": %w", err)}
		}
	}
	return nil
}

func (cu *ColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   color.Table,
			Columns: color.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: color.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldName,
		})
	}
	if value, ok := cu.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldColor,
		})
	}
	if value, ok := cu.mutation.Hex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldHex,
		})
	}
	if cu.mutation.ProjectBaseColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectBaseColorsTable,
			Columns: []string{color.ProjectBaseColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectbasecolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProjectBaseColorsIDs(); len(nodes) > 0 && !cu.mutation.ProjectBaseColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectBaseColorsTable,
			Columns: []string{color.ProjectBaseColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectbasecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProjectBaseColorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectBaseColorsTable,
			Columns: []string{color.ProjectBaseColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectbasecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProjectLightColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectLightColorsTable,
			Columns: []string{color.ProjectLightColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectlightcolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProjectLightColorsIDs(); len(nodes) > 0 && !cu.mutation.ProjectLightColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectLightColorsTable,
			Columns: []string{color.ProjectLightColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectlightcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProjectLightColorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectLightColorsTable,
			Columns: []string{color.ProjectLightColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectlightcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TaskPrioritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TaskPrioritiesTable,
			Columns: []string{color.TaskPrioritiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTaskPrioritiesIDs(); len(nodes) > 0 && !cu.mutation.TaskPrioritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TaskPrioritiesTable,
			Columns: []string{color.TaskPrioritiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TaskPrioritiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TaskPrioritiesTable,
			Columns: []string{color.TaskPrioritiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TagsTable,
			Columns: []string{color.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !cu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TagsTable,
			Columns: []string{color.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TagsTable,
			Columns: []string{color.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{color.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ColorUpdateOne is the builder for updating a single Color entity.
type ColorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ColorMutation
}

// SetName sets the "name" field.
func (cuo *ColorUpdateOne) SetName(s string) *ColorUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetColor sets the "color" field.
func (cuo *ColorUpdateOne) SetColor(s string) *ColorUpdateOne {
	cuo.mutation.SetColor(s)
	return cuo
}

// SetHex sets the "hex" field.
func (cuo *ColorUpdateOne) SetHex(s string) *ColorUpdateOne {
	cuo.mutation.SetHex(s)
	return cuo
}

// AddProjectBaseColorIDs adds the "project_base_colors" edge to the ProjectBaseColor entity by IDs.
func (cuo *ColorUpdateOne) AddProjectBaseColorIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.AddProjectBaseColorIDs(ids...)
	return cuo
}

// AddProjectBaseColors adds the "project_base_colors" edges to the ProjectBaseColor entity.
func (cuo *ColorUpdateOne) AddProjectBaseColors(p ...*ProjectBaseColor) *ColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProjectBaseColorIDs(ids...)
}

// AddProjectLightColorIDs adds the "project_light_colors" edge to the ProjectLightColor entity by IDs.
func (cuo *ColorUpdateOne) AddProjectLightColorIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.AddProjectLightColorIDs(ids...)
	return cuo
}

// AddProjectLightColors adds the "project_light_colors" edges to the ProjectLightColor entity.
func (cuo *ColorUpdateOne) AddProjectLightColors(p ...*ProjectLightColor) *ColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProjectLightColorIDs(ids...)
}

// AddTaskPriorityIDs adds the "task_priorities" edge to the TaskPriority entity by IDs.
func (cuo *ColorUpdateOne) AddTaskPriorityIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.AddTaskPriorityIDs(ids...)
	return cuo
}

// AddTaskPriorities adds the "task_priorities" edges to the TaskPriority entity.
func (cuo *ColorUpdateOne) AddTaskPriorities(t ...*TaskPriority) *ColorUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskPriorityIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cuo *ColorUpdateOne) AddTagIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.AddTagIDs(ids...)
	return cuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (cuo *ColorUpdateOne) AddTags(t ...*Tag) *ColorUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTagIDs(ids...)
}

// Mutation returns the ColorMutation object of the builder.
func (cuo *ColorUpdateOne) Mutation() *ColorMutation {
	return cuo.mutation
}

// ClearProjectBaseColors clears all "project_base_colors" edges to the ProjectBaseColor entity.
func (cuo *ColorUpdateOne) ClearProjectBaseColors() *ColorUpdateOne {
	cuo.mutation.ClearProjectBaseColors()
	return cuo
}

// RemoveProjectBaseColorIDs removes the "project_base_colors" edge to ProjectBaseColor entities by IDs.
func (cuo *ColorUpdateOne) RemoveProjectBaseColorIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.RemoveProjectBaseColorIDs(ids...)
	return cuo
}

// RemoveProjectBaseColors removes "project_base_colors" edges to ProjectBaseColor entities.
func (cuo *ColorUpdateOne) RemoveProjectBaseColors(p ...*ProjectBaseColor) *ColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProjectBaseColorIDs(ids...)
}

// ClearProjectLightColors clears all "project_light_colors" edges to the ProjectLightColor entity.
func (cuo *ColorUpdateOne) ClearProjectLightColors() *ColorUpdateOne {
	cuo.mutation.ClearProjectLightColors()
	return cuo
}

// RemoveProjectLightColorIDs removes the "project_light_colors" edge to ProjectLightColor entities by IDs.
func (cuo *ColorUpdateOne) RemoveProjectLightColorIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.RemoveProjectLightColorIDs(ids...)
	return cuo
}

// RemoveProjectLightColors removes "project_light_colors" edges to ProjectLightColor entities.
func (cuo *ColorUpdateOne) RemoveProjectLightColors(p ...*ProjectLightColor) *ColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProjectLightColorIDs(ids...)
}

// ClearTaskPriorities clears all "task_priorities" edges to the TaskPriority entity.
func (cuo *ColorUpdateOne) ClearTaskPriorities() *ColorUpdateOne {
	cuo.mutation.ClearTaskPriorities()
	return cuo
}

// RemoveTaskPriorityIDs removes the "task_priorities" edge to TaskPriority entities by IDs.
func (cuo *ColorUpdateOne) RemoveTaskPriorityIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.RemoveTaskPriorityIDs(ids...)
	return cuo
}

// RemoveTaskPriorities removes "task_priorities" edges to TaskPriority entities.
func (cuo *ColorUpdateOne) RemoveTaskPriorities(t ...*TaskPriority) *ColorUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskPriorityIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (cuo *ColorUpdateOne) ClearTags() *ColorUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (cuo *ColorUpdateOne) RemoveTagIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.RemoveTagIDs(ids...)
	return cuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (cuo *ColorUpdateOne) RemoveTags(t ...*Tag) *ColorUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTagIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ColorUpdateOne) Select(field string, fields ...string) *ColorUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Color entity.
func (cuo *ColorUpdateOne) Save(ctx context.Context) (*Color, error) {
	var (
		err  error
		node *Color
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ColorUpdateOne) SaveX(ctx context.Context) *Color {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ColorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ColorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ColorUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := color.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Color(); ok {
		if err := color.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf("ent: validator failed for field \"color\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Hex(); ok {
		if err := color.HexValidator(v); err != nil {
			return &ValidationError{Name: "hex", err: fmt.Errorf("ent: validator failed for field \"hex\": %w", err)}
		}
	}
	return nil
}

func (cuo *ColorUpdateOne) sqlSave(ctx context.Context) (_node *Color, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   color.Table,
			Columns: color.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: color.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Color.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, color.FieldID)
		for _, f := range fields {
			if !color.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != color.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldName,
		})
	}
	if value, ok := cuo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldColor,
		})
	}
	if value, ok := cuo.mutation.Hex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldHex,
		})
	}
	if cuo.mutation.ProjectBaseColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectBaseColorsTable,
			Columns: []string{color.ProjectBaseColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectbasecolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProjectBaseColorsIDs(); len(nodes) > 0 && !cuo.mutation.ProjectBaseColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectBaseColorsTable,
			Columns: []string{color.ProjectBaseColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectbasecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProjectBaseColorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectBaseColorsTable,
			Columns: []string{color.ProjectBaseColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectbasecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProjectLightColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectLightColorsTable,
			Columns: []string{color.ProjectLightColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectlightcolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProjectLightColorsIDs(); len(nodes) > 0 && !cuo.mutation.ProjectLightColorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectLightColorsTable,
			Columns: []string{color.ProjectLightColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectlightcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProjectLightColorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectLightColorsTable,
			Columns: []string{color.ProjectLightColorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectlightcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TaskPrioritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TaskPrioritiesTable,
			Columns: []string{color.TaskPrioritiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTaskPrioritiesIDs(); len(nodes) > 0 && !cuo.mutation.TaskPrioritiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TaskPrioritiesTable,
			Columns: []string{color.TaskPrioritiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TaskPrioritiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TaskPrioritiesTable,
			Columns: []string{color.TaskPrioritiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TagsTable,
			Columns: []string{color.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !cuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TagsTable,
			Columns: []string{color.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.TagsTable,
			Columns: []string{color.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Color{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{color.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
