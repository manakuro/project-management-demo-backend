// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ColorUpdate is the builder for updating Color entities.
type ColorUpdate struct {
	config
	hooks    []Hook
	mutation *ColorMutation
}

// Where appends a list predicates to the ColorUpdate builder.
func (cu *ColorUpdate) Where(ps ...predicate.Color) *ColorUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ColorUpdate) SetName(s string) *ColorUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetColor sets the "color" field.
func (cu *ColorUpdate) SetColor(s string) *ColorUpdate {
	cu.mutation.SetColor(s)
	return cu
}

// SetHex sets the "hex" field.
func (cu *ColorUpdate) SetHex(s string) *ColorUpdate {
	cu.mutation.SetHex(s)
	return cu
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (cu *ColorUpdate) AddProjectIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.AddProjectIDs(ids...)
	return cu
}

// AddProjects adds the "projects" edges to the Project entity.
func (cu *ColorUpdate) AddProjects(p ...*Project) *ColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProjectIDs(ids...)
}

// Mutation returns the ColorMutation object of the builder.
func (cu *ColorUpdate) Mutation() *ColorMutation {
	return cu.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (cu *ColorUpdate) ClearProjects() *ColorUpdate {
	cu.mutation.ClearProjects()
	return cu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (cu *ColorUpdate) RemoveProjectIDs(ids ...ulid.ID) *ColorUpdate {
	cu.mutation.RemoveProjectIDs(ids...)
	return cu
}

// RemoveProjects removes "projects" edges to Project entities.
func (cu *ColorUpdate) RemoveProjects(p ...*Project) *ColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ColorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ColorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ColorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ColorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ColorUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := color.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Color(); ok {
		if err := color.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf("ent: validator failed for field \"color\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Hex(); ok {
		if err := color.HexValidator(v); err != nil {
			return &ValidationError{Name: "hex", err: fmt.Errorf("ent: validator failed for field \"hex\": %w", err)}
		}
	}
	return nil
}

func (cu *ColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   color.Table,
			Columns: color.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: color.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldName,
		})
	}
	if value, ok := cu.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldColor,
		})
	}
	if value, ok := cu.mutation.Hex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldHex,
		})
	}
	if cu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectsTable,
			Columns: []string{color.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !cu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectsTable,
			Columns: []string{color.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectsTable,
			Columns: []string{color.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{color.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ColorUpdateOne is the builder for updating a single Color entity.
type ColorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ColorMutation
}

// SetName sets the "name" field.
func (cuo *ColorUpdateOne) SetName(s string) *ColorUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetColor sets the "color" field.
func (cuo *ColorUpdateOne) SetColor(s string) *ColorUpdateOne {
	cuo.mutation.SetColor(s)
	return cuo
}

// SetHex sets the "hex" field.
func (cuo *ColorUpdateOne) SetHex(s string) *ColorUpdateOne {
	cuo.mutation.SetHex(s)
	return cuo
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (cuo *ColorUpdateOne) AddProjectIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.AddProjectIDs(ids...)
	return cuo
}

// AddProjects adds the "projects" edges to the Project entity.
func (cuo *ColorUpdateOne) AddProjects(p ...*Project) *ColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProjectIDs(ids...)
}

// Mutation returns the ColorMutation object of the builder.
func (cuo *ColorUpdateOne) Mutation() *ColorMutation {
	return cuo.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (cuo *ColorUpdateOne) ClearProjects() *ColorUpdateOne {
	cuo.mutation.ClearProjects()
	return cuo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (cuo *ColorUpdateOne) RemoveProjectIDs(ids ...ulid.ID) *ColorUpdateOne {
	cuo.mutation.RemoveProjectIDs(ids...)
	return cuo
}

// RemoveProjects removes "projects" edges to Project entities.
func (cuo *ColorUpdateOne) RemoveProjects(p ...*Project) *ColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProjectIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ColorUpdateOne) Select(field string, fields ...string) *ColorUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Color entity.
func (cuo *ColorUpdateOne) Save(ctx context.Context) (*Color, error) {
	var (
		err  error
		node *Color
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ColorUpdateOne) SaveX(ctx context.Context) *Color {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ColorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ColorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ColorUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := color.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Color(); ok {
		if err := color.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf("ent: validator failed for field \"color\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Hex(); ok {
		if err := color.HexValidator(v); err != nil {
			return &ValidationError{Name: "hex", err: fmt.Errorf("ent: validator failed for field \"hex\": %w", err)}
		}
	}
	return nil
}

func (cuo *ColorUpdateOne) sqlSave(ctx context.Context) (_node *Color, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   color.Table,
			Columns: color.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: color.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Color.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, color.FieldID)
		for _, f := range fields {
			if !color.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != color.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldName,
		})
	}
	if value, ok := cuo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldColor,
		})
	}
	if value, ok := cuo.mutation.Hex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: color.FieldHex,
		})
	}
	if cuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectsTable,
			Columns: []string{color.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !cuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectsTable,
			Columns: []string{color.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   color.ProjectsTable,
			Columns: []string{color.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Color{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{color.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
