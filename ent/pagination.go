// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/filetype"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/projecttask"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tag"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskcollaborator"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/tasksection"
	"project-management-demo-backend/ent/tasktag"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceteammate"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    ulid.ID `msgpack:"i"`
	Value Value   `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// ColorEdge is the edge representation of Color.
type ColorEdge struct {
	Node   *Color `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ColorConnection is the connection containing edges to Color.
type ColorConnection struct {
	Edges      []*ColorEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// ColorPaginateOption enables pagination customization.
type ColorPaginateOption func(*colorPager) error

// WithColorOrder configures pagination ordering.
func WithColorOrder(order *ColorOrder) ColorPaginateOption {
	if order == nil {
		order = DefaultColorOrder
	}
	o := *order
	return func(pager *colorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultColorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithColorFilter configures pagination filter.
func WithColorFilter(filter func(*ColorQuery) (*ColorQuery, error)) ColorPaginateOption {
	return func(pager *colorPager) error {
		if filter == nil {
			return errors.New("ColorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type colorPager struct {
	order  *ColorOrder
	filter func(*ColorQuery) (*ColorQuery, error)
}

func newColorPager(opts []ColorPaginateOption) (*colorPager, error) {
	pager := &colorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultColorOrder
	}
	return pager, nil
}

func (p *colorPager) applyFilter(query *ColorQuery) (*ColorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *colorPager) toCursor(c *Color) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *colorPager) applyCursors(query *ColorQuery, after, before *Cursor) *ColorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultColorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *colorPager) applyOrder(query *ColorQuery, reverse bool) *ColorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultColorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultColorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Color.
func (c *ColorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ColorPaginateOption,
) (*ColorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newColorPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}

	conn := &ColorConnection{Edges: []*ColorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := c.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		c = c.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Color
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Color {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Color {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ColorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ColorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ColorOrderField defines the ordering field of Color.
type ColorOrderField struct {
	field    string
	toCursor func(*Color) Cursor
}

// ColorOrder defines the ordering of Color.
type ColorOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ColorOrderField `json:"field"`
}

// DefaultColorOrder is the default ordering of Color.
var DefaultColorOrder = &ColorOrder{
	Direction: OrderDirectionAsc,
	Field: &ColorOrderField{
		field: color.FieldID,
		toCursor: func(c *Color) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Color into ColorEdge.
func (c *Color) ToEdge(order *ColorOrder) *ColorEdge {
	if order == nil {
		order = DefaultColorOrder
	}
	return &ColorEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// FavoriteProjectEdge is the edge representation of FavoriteProject.
type FavoriteProjectEdge struct {
	Node   *FavoriteProject `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// FavoriteProjectConnection is the connection containing edges to FavoriteProject.
type FavoriteProjectConnection struct {
	Edges      []*FavoriteProjectEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

// FavoriteProjectPaginateOption enables pagination customization.
type FavoriteProjectPaginateOption func(*favoriteProjectPager) error

// WithFavoriteProjectOrder configures pagination ordering.
func WithFavoriteProjectOrder(order *FavoriteProjectOrder) FavoriteProjectPaginateOption {
	if order == nil {
		order = DefaultFavoriteProjectOrder
	}
	o := *order
	return func(pager *favoriteProjectPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFavoriteProjectOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFavoriteProjectFilter configures pagination filter.
func WithFavoriteProjectFilter(filter func(*FavoriteProjectQuery) (*FavoriteProjectQuery, error)) FavoriteProjectPaginateOption {
	return func(pager *favoriteProjectPager) error {
		if filter == nil {
			return errors.New("FavoriteProjectQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type favoriteProjectPager struct {
	order  *FavoriteProjectOrder
	filter func(*FavoriteProjectQuery) (*FavoriteProjectQuery, error)
}

func newFavoriteProjectPager(opts []FavoriteProjectPaginateOption) (*favoriteProjectPager, error) {
	pager := &favoriteProjectPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFavoriteProjectOrder
	}
	return pager, nil
}

func (p *favoriteProjectPager) applyFilter(query *FavoriteProjectQuery) (*FavoriteProjectQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *favoriteProjectPager) toCursor(fp *FavoriteProject) Cursor {
	return p.order.Field.toCursor(fp)
}

func (p *favoriteProjectPager) applyCursors(query *FavoriteProjectQuery, after, before *Cursor) *FavoriteProjectQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFavoriteProjectOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *favoriteProjectPager) applyOrder(query *FavoriteProjectQuery, reverse bool) *FavoriteProjectQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFavoriteProjectOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFavoriteProjectOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to FavoriteProject.
func (fp *FavoriteProjectQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FavoriteProjectPaginateOption,
) (*FavoriteProjectConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFavoriteProjectPager(opts)
	if err != nil {
		return nil, err
	}

	if fp, err = pager.applyFilter(fp); err != nil {
		return nil, err
	}

	conn := &FavoriteProjectConnection{Edges: []*FavoriteProjectEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := fp.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := fp.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	fp = pager.applyCursors(fp, after, before)
	fp = pager.applyOrder(fp, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		fp = fp.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		fp = fp.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := fp.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *FavoriteProject
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FavoriteProject {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FavoriteProject {
			return nodes[i]
		}
	}

	conn.Edges = make([]*FavoriteProjectEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &FavoriteProjectEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// FavoriteProjectOrderField defines the ordering field of FavoriteProject.
type FavoriteProjectOrderField struct {
	field    string
	toCursor func(*FavoriteProject) Cursor
}

// FavoriteProjectOrder defines the ordering of FavoriteProject.
type FavoriteProjectOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *FavoriteProjectOrderField `json:"field"`
}

// DefaultFavoriteProjectOrder is the default ordering of FavoriteProject.
var DefaultFavoriteProjectOrder = &FavoriteProjectOrder{
	Direction: OrderDirectionAsc,
	Field: &FavoriteProjectOrderField{
		field: favoriteproject.FieldID,
		toCursor: func(fp *FavoriteProject) Cursor {
			return Cursor{ID: fp.ID}
		},
	},
}

// ToEdge converts FavoriteProject into FavoriteProjectEdge.
func (fp *FavoriteProject) ToEdge(order *FavoriteProjectOrder) *FavoriteProjectEdge {
	if order == nil {
		order = DefaultFavoriteProjectOrder
	}
	return &FavoriteProjectEdge{
		Node:   fp,
		Cursor: order.Field.toCursor(fp),
	}
}

// FavoriteWorkspaceEdge is the edge representation of FavoriteWorkspace.
type FavoriteWorkspaceEdge struct {
	Node   *FavoriteWorkspace `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// FavoriteWorkspaceConnection is the connection containing edges to FavoriteWorkspace.
type FavoriteWorkspaceConnection struct {
	Edges      []*FavoriteWorkspaceEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

// FavoriteWorkspacePaginateOption enables pagination customization.
type FavoriteWorkspacePaginateOption func(*favoriteWorkspacePager) error

// WithFavoriteWorkspaceOrder configures pagination ordering.
func WithFavoriteWorkspaceOrder(order *FavoriteWorkspaceOrder) FavoriteWorkspacePaginateOption {
	if order == nil {
		order = DefaultFavoriteWorkspaceOrder
	}
	o := *order
	return func(pager *favoriteWorkspacePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFavoriteWorkspaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFavoriteWorkspaceFilter configures pagination filter.
func WithFavoriteWorkspaceFilter(filter func(*FavoriteWorkspaceQuery) (*FavoriteWorkspaceQuery, error)) FavoriteWorkspacePaginateOption {
	return func(pager *favoriteWorkspacePager) error {
		if filter == nil {
			return errors.New("FavoriteWorkspaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type favoriteWorkspacePager struct {
	order  *FavoriteWorkspaceOrder
	filter func(*FavoriteWorkspaceQuery) (*FavoriteWorkspaceQuery, error)
}

func newFavoriteWorkspacePager(opts []FavoriteWorkspacePaginateOption) (*favoriteWorkspacePager, error) {
	pager := &favoriteWorkspacePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFavoriteWorkspaceOrder
	}
	return pager, nil
}

func (p *favoriteWorkspacePager) applyFilter(query *FavoriteWorkspaceQuery) (*FavoriteWorkspaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *favoriteWorkspacePager) toCursor(fw *FavoriteWorkspace) Cursor {
	return p.order.Field.toCursor(fw)
}

func (p *favoriteWorkspacePager) applyCursors(query *FavoriteWorkspaceQuery, after, before *Cursor) *FavoriteWorkspaceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFavoriteWorkspaceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *favoriteWorkspacePager) applyOrder(query *FavoriteWorkspaceQuery, reverse bool) *FavoriteWorkspaceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFavoriteWorkspaceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFavoriteWorkspaceOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to FavoriteWorkspace.
func (fw *FavoriteWorkspaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FavoriteWorkspacePaginateOption,
) (*FavoriteWorkspaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFavoriteWorkspacePager(opts)
	if err != nil {
		return nil, err
	}

	if fw, err = pager.applyFilter(fw); err != nil {
		return nil, err
	}

	conn := &FavoriteWorkspaceConnection{Edges: []*FavoriteWorkspaceEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := fw.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := fw.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	fw = pager.applyCursors(fw, after, before)
	fw = pager.applyOrder(fw, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		fw = fw.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		fw = fw.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := fw.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *FavoriteWorkspace
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FavoriteWorkspace {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FavoriteWorkspace {
			return nodes[i]
		}
	}

	conn.Edges = make([]*FavoriteWorkspaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &FavoriteWorkspaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// FavoriteWorkspaceOrderField defines the ordering field of FavoriteWorkspace.
type FavoriteWorkspaceOrderField struct {
	field    string
	toCursor func(*FavoriteWorkspace) Cursor
}

// FavoriteWorkspaceOrder defines the ordering of FavoriteWorkspace.
type FavoriteWorkspaceOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *FavoriteWorkspaceOrderField `json:"field"`
}

// DefaultFavoriteWorkspaceOrder is the default ordering of FavoriteWorkspace.
var DefaultFavoriteWorkspaceOrder = &FavoriteWorkspaceOrder{
	Direction: OrderDirectionAsc,
	Field: &FavoriteWorkspaceOrderField{
		field: favoriteworkspace.FieldID,
		toCursor: func(fw *FavoriteWorkspace) Cursor {
			return Cursor{ID: fw.ID}
		},
	},
}

// ToEdge converts FavoriteWorkspace into FavoriteWorkspaceEdge.
func (fw *FavoriteWorkspace) ToEdge(order *FavoriteWorkspaceOrder) *FavoriteWorkspaceEdge {
	if order == nil {
		order = DefaultFavoriteWorkspaceOrder
	}
	return &FavoriteWorkspaceEdge{
		Node:   fw,
		Cursor: order.Field.toCursor(fw),
	}
}

// FileTypeEdge is the edge representation of FileType.
type FileTypeEdge struct {
	Node   *FileType `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// FileTypeConnection is the connection containing edges to FileType.
type FileTypeConnection struct {
	Edges      []*FileTypeEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// FileTypePaginateOption enables pagination customization.
type FileTypePaginateOption func(*fileTypePager) error

// WithFileTypeOrder configures pagination ordering.
func WithFileTypeOrder(order *FileTypeOrder) FileTypePaginateOption {
	if order == nil {
		order = DefaultFileTypeOrder
	}
	o := *order
	return func(pager *fileTypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFileTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFileTypeFilter configures pagination filter.
func WithFileTypeFilter(filter func(*FileTypeQuery) (*FileTypeQuery, error)) FileTypePaginateOption {
	return func(pager *fileTypePager) error {
		if filter == nil {
			return errors.New("FileTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type fileTypePager struct {
	order  *FileTypeOrder
	filter func(*FileTypeQuery) (*FileTypeQuery, error)
}

func newFileTypePager(opts []FileTypePaginateOption) (*fileTypePager, error) {
	pager := &fileTypePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFileTypeOrder
	}
	return pager, nil
}

func (p *fileTypePager) applyFilter(query *FileTypeQuery) (*FileTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *fileTypePager) toCursor(ft *FileType) Cursor {
	return p.order.Field.toCursor(ft)
}

func (p *fileTypePager) applyCursors(query *FileTypeQuery, after, before *Cursor) *FileTypeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFileTypeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *fileTypePager) applyOrder(query *FileTypeQuery, reverse bool) *FileTypeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFileTypeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFileTypeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to FileType.
func (ft *FileTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FileTypePaginateOption,
) (*FileTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFileTypePager(opts)
	if err != nil {
		return nil, err
	}

	if ft, err = pager.applyFilter(ft); err != nil {
		return nil, err
	}

	conn := &FileTypeConnection{Edges: []*FileTypeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ft.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ft.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ft = pager.applyCursors(ft, after, before)
	ft = pager.applyOrder(ft, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ft = ft.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ft = ft.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ft.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *FileType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FileType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FileType {
			return nodes[i]
		}
	}

	conn.Edges = make([]*FileTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &FileTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// FileTypeOrderField defines the ordering field of FileType.
type FileTypeOrderField struct {
	field    string
	toCursor func(*FileType) Cursor
}

// FileTypeOrder defines the ordering of FileType.
type FileTypeOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *FileTypeOrderField `json:"field"`
}

// DefaultFileTypeOrder is the default ordering of FileType.
var DefaultFileTypeOrder = &FileTypeOrder{
	Direction: OrderDirectionAsc,
	Field: &FileTypeOrderField{
		field: filetype.FieldID,
		toCursor: func(ft *FileType) Cursor {
			return Cursor{ID: ft.ID}
		},
	},
}

// ToEdge converts FileType into FileTypeEdge.
func (ft *FileType) ToEdge(order *FileTypeOrder) *FileTypeEdge {
	if order == nil {
		order = DefaultFileTypeOrder
	}
	return &FileTypeEdge{
		Node:   ft,
		Cursor: order.Field.toCursor(ft),
	}
}

// IconEdge is the edge representation of Icon.
type IconEdge struct {
	Node   *Icon  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// IconConnection is the connection containing edges to Icon.
type IconConnection struct {
	Edges      []*IconEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// IconPaginateOption enables pagination customization.
type IconPaginateOption func(*iconPager) error

// WithIconOrder configures pagination ordering.
func WithIconOrder(order *IconOrder) IconPaginateOption {
	if order == nil {
		order = DefaultIconOrder
	}
	o := *order
	return func(pager *iconPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultIconOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithIconFilter configures pagination filter.
func WithIconFilter(filter func(*IconQuery) (*IconQuery, error)) IconPaginateOption {
	return func(pager *iconPager) error {
		if filter == nil {
			return errors.New("IconQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type iconPager struct {
	order  *IconOrder
	filter func(*IconQuery) (*IconQuery, error)
}

func newIconPager(opts []IconPaginateOption) (*iconPager, error) {
	pager := &iconPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultIconOrder
	}
	return pager, nil
}

func (p *iconPager) applyFilter(query *IconQuery) (*IconQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *iconPager) toCursor(i *Icon) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *iconPager) applyCursors(query *IconQuery, after, before *Cursor) *IconQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultIconOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *iconPager) applyOrder(query *IconQuery, reverse bool) *IconQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultIconOrder.Field {
		query = query.Order(direction.orderFunc(DefaultIconOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Icon.
func (i *IconQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...IconPaginateOption,
) (*IconConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newIconPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &IconConnection{Edges: []*IconEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Icon
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Icon {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Icon {
			return nodes[i]
		}
	}

	conn.Edges = make([]*IconEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &IconEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// IconOrderField defines the ordering field of Icon.
type IconOrderField struct {
	field    string
	toCursor func(*Icon) Cursor
}

// IconOrder defines the ordering of Icon.
type IconOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *IconOrderField `json:"field"`
}

// DefaultIconOrder is the default ordering of Icon.
var DefaultIconOrder = &IconOrder{
	Direction: OrderDirectionAsc,
	Field: &IconOrderField{
		field: icon.FieldID,
		toCursor: func(i *Icon) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Icon into IconEdge.
func (i *Icon) ToEdge(order *IconOrder) *IconEdge {
	if order == nil {
		order = DefaultIconOrder
	}
	return &IconEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// ProjectEdge is the edge representation of Project.
type ProjectEdge struct {
	Node   *Project `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProjectConnection is the connection containing edges to Project.
type ProjectConnection struct {
	Edges      []*ProjectEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// ProjectPaginateOption enables pagination customization.
type ProjectPaginateOption func(*projectPager) error

// WithProjectOrder configures pagination ordering.
func WithProjectOrder(order *ProjectOrder) ProjectPaginateOption {
	if order == nil {
		order = DefaultProjectOrder
	}
	o := *order
	return func(pager *projectPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectFilter configures pagination filter.
func WithProjectFilter(filter func(*ProjectQuery) (*ProjectQuery, error)) ProjectPaginateOption {
	return func(pager *projectPager) error {
		if filter == nil {
			return errors.New("ProjectQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectPager struct {
	order  *ProjectOrder
	filter func(*ProjectQuery) (*ProjectQuery, error)
}

func newProjectPager(opts []ProjectPaginateOption) (*projectPager, error) {
	pager := &projectPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectOrder
	}
	return pager, nil
}

func (p *projectPager) applyFilter(query *ProjectQuery) (*ProjectQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectPager) toCursor(pr *Project) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *projectPager) applyCursors(query *ProjectQuery, after, before *Cursor) *ProjectQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectPager) applyOrder(query *ProjectQuery, reverse bool) *ProjectQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Project.
func (pr *ProjectQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectPaginateOption,
) (*ProjectConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectPager(opts)
	if err != nil {
		return nil, err
	}

	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}

	conn := &ProjectConnection{Edges: []*ProjectEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pr.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pr.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pr = pager.applyCursors(pr, after, before)
	pr = pager.applyOrder(pr, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pr = pr.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pr.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Project
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Project {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Project {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectOrderField defines the ordering field of Project.
type ProjectOrderField struct {
	field    string
	toCursor func(*Project) Cursor
}

// ProjectOrder defines the ordering of Project.
type ProjectOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProjectOrderField `json:"field"`
}

// DefaultProjectOrder is the default ordering of Project.
var DefaultProjectOrder = &ProjectOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectOrderField{
		field: project.FieldID,
		toCursor: func(pr *Project) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Project into ProjectEdge.
func (pr *Project) ToEdge(order *ProjectOrder) *ProjectEdge {
	if order == nil {
		order = DefaultProjectOrder
	}
	return &ProjectEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// ProjectBaseColorEdge is the edge representation of ProjectBaseColor.
type ProjectBaseColorEdge struct {
	Node   *ProjectBaseColor `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// ProjectBaseColorConnection is the connection containing edges to ProjectBaseColor.
type ProjectBaseColorConnection struct {
	Edges      []*ProjectBaseColorEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

// ProjectBaseColorPaginateOption enables pagination customization.
type ProjectBaseColorPaginateOption func(*projectBaseColorPager) error

// WithProjectBaseColorOrder configures pagination ordering.
func WithProjectBaseColorOrder(order *ProjectBaseColorOrder) ProjectBaseColorPaginateOption {
	if order == nil {
		order = DefaultProjectBaseColorOrder
	}
	o := *order
	return func(pager *projectBaseColorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectBaseColorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectBaseColorFilter configures pagination filter.
func WithProjectBaseColorFilter(filter func(*ProjectBaseColorQuery) (*ProjectBaseColorQuery, error)) ProjectBaseColorPaginateOption {
	return func(pager *projectBaseColorPager) error {
		if filter == nil {
			return errors.New("ProjectBaseColorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectBaseColorPager struct {
	order  *ProjectBaseColorOrder
	filter func(*ProjectBaseColorQuery) (*ProjectBaseColorQuery, error)
}

func newProjectBaseColorPager(opts []ProjectBaseColorPaginateOption) (*projectBaseColorPager, error) {
	pager := &projectBaseColorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectBaseColorOrder
	}
	return pager, nil
}

func (p *projectBaseColorPager) applyFilter(query *ProjectBaseColorQuery) (*ProjectBaseColorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectBaseColorPager) toCursor(pbc *ProjectBaseColor) Cursor {
	return p.order.Field.toCursor(pbc)
}

func (p *projectBaseColorPager) applyCursors(query *ProjectBaseColorQuery, after, before *Cursor) *ProjectBaseColorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectBaseColorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectBaseColorPager) applyOrder(query *ProjectBaseColorQuery, reverse bool) *ProjectBaseColorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectBaseColorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectBaseColorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectBaseColor.
func (pbc *ProjectBaseColorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectBaseColorPaginateOption,
) (*ProjectBaseColorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectBaseColorPager(opts)
	if err != nil {
		return nil, err
	}

	if pbc, err = pager.applyFilter(pbc); err != nil {
		return nil, err
	}

	conn := &ProjectBaseColorConnection{Edges: []*ProjectBaseColorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pbc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pbc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pbc = pager.applyCursors(pbc, after, before)
	pbc = pager.applyOrder(pbc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pbc = pbc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pbc = pbc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pbc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectBaseColor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectBaseColor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectBaseColor {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectBaseColorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectBaseColorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectBaseColorOrderField defines the ordering field of ProjectBaseColor.
type ProjectBaseColorOrderField struct {
	field    string
	toCursor func(*ProjectBaseColor) Cursor
}

// ProjectBaseColorOrder defines the ordering of ProjectBaseColor.
type ProjectBaseColorOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *ProjectBaseColorOrderField `json:"field"`
}

// DefaultProjectBaseColorOrder is the default ordering of ProjectBaseColor.
var DefaultProjectBaseColorOrder = &ProjectBaseColorOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectBaseColorOrderField{
		field: projectbasecolor.FieldID,
		toCursor: func(pbc *ProjectBaseColor) Cursor {
			return Cursor{ID: pbc.ID}
		},
	},
}

// ToEdge converts ProjectBaseColor into ProjectBaseColorEdge.
func (pbc *ProjectBaseColor) ToEdge(order *ProjectBaseColorOrder) *ProjectBaseColorEdge {
	if order == nil {
		order = DefaultProjectBaseColorOrder
	}
	return &ProjectBaseColorEdge{
		Node:   pbc,
		Cursor: order.Field.toCursor(pbc),
	}
}

// ProjectIconEdge is the edge representation of ProjectIcon.
type ProjectIconEdge struct {
	Node   *ProjectIcon `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// ProjectIconConnection is the connection containing edges to ProjectIcon.
type ProjectIconConnection struct {
	Edges      []*ProjectIconEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

// ProjectIconPaginateOption enables pagination customization.
type ProjectIconPaginateOption func(*projectIconPager) error

// WithProjectIconOrder configures pagination ordering.
func WithProjectIconOrder(order *ProjectIconOrder) ProjectIconPaginateOption {
	if order == nil {
		order = DefaultProjectIconOrder
	}
	o := *order
	return func(pager *projectIconPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectIconOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectIconFilter configures pagination filter.
func WithProjectIconFilter(filter func(*ProjectIconQuery) (*ProjectIconQuery, error)) ProjectIconPaginateOption {
	return func(pager *projectIconPager) error {
		if filter == nil {
			return errors.New("ProjectIconQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectIconPager struct {
	order  *ProjectIconOrder
	filter func(*ProjectIconQuery) (*ProjectIconQuery, error)
}

func newProjectIconPager(opts []ProjectIconPaginateOption) (*projectIconPager, error) {
	pager := &projectIconPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectIconOrder
	}
	return pager, nil
}

func (p *projectIconPager) applyFilter(query *ProjectIconQuery) (*ProjectIconQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectIconPager) toCursor(pi *ProjectIcon) Cursor {
	return p.order.Field.toCursor(pi)
}

func (p *projectIconPager) applyCursors(query *ProjectIconQuery, after, before *Cursor) *ProjectIconQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectIconOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectIconPager) applyOrder(query *ProjectIconQuery, reverse bool) *ProjectIconQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectIconOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectIconOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectIcon.
func (pi *ProjectIconQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectIconPaginateOption,
) (*ProjectIconConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectIconPager(opts)
	if err != nil {
		return nil, err
	}

	if pi, err = pager.applyFilter(pi); err != nil {
		return nil, err
	}

	conn := &ProjectIconConnection{Edges: []*ProjectIconEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pi.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pi.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pi = pager.applyCursors(pi, after, before)
	pi = pager.applyOrder(pi, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pi = pi.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pi = pi.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pi.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectIcon
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectIcon {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectIcon {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectIconEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectIconEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectIconOrderField defines the ordering field of ProjectIcon.
type ProjectIconOrderField struct {
	field    string
	toCursor func(*ProjectIcon) Cursor
}

// ProjectIconOrder defines the ordering of ProjectIcon.
type ProjectIconOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *ProjectIconOrderField `json:"field"`
}

// DefaultProjectIconOrder is the default ordering of ProjectIcon.
var DefaultProjectIconOrder = &ProjectIconOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectIconOrderField{
		field: projecticon.FieldID,
		toCursor: func(pi *ProjectIcon) Cursor {
			return Cursor{ID: pi.ID}
		},
	},
}

// ToEdge converts ProjectIcon into ProjectIconEdge.
func (pi *ProjectIcon) ToEdge(order *ProjectIconOrder) *ProjectIconEdge {
	if order == nil {
		order = DefaultProjectIconOrder
	}
	return &ProjectIconEdge{
		Node:   pi,
		Cursor: order.Field.toCursor(pi),
	}
}

// ProjectLightColorEdge is the edge representation of ProjectLightColor.
type ProjectLightColorEdge struct {
	Node   *ProjectLightColor `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// ProjectLightColorConnection is the connection containing edges to ProjectLightColor.
type ProjectLightColorConnection struct {
	Edges      []*ProjectLightColorEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

// ProjectLightColorPaginateOption enables pagination customization.
type ProjectLightColorPaginateOption func(*projectLightColorPager) error

// WithProjectLightColorOrder configures pagination ordering.
func WithProjectLightColorOrder(order *ProjectLightColorOrder) ProjectLightColorPaginateOption {
	if order == nil {
		order = DefaultProjectLightColorOrder
	}
	o := *order
	return func(pager *projectLightColorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectLightColorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectLightColorFilter configures pagination filter.
func WithProjectLightColorFilter(filter func(*ProjectLightColorQuery) (*ProjectLightColorQuery, error)) ProjectLightColorPaginateOption {
	return func(pager *projectLightColorPager) error {
		if filter == nil {
			return errors.New("ProjectLightColorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectLightColorPager struct {
	order  *ProjectLightColorOrder
	filter func(*ProjectLightColorQuery) (*ProjectLightColorQuery, error)
}

func newProjectLightColorPager(opts []ProjectLightColorPaginateOption) (*projectLightColorPager, error) {
	pager := &projectLightColorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectLightColorOrder
	}
	return pager, nil
}

func (p *projectLightColorPager) applyFilter(query *ProjectLightColorQuery) (*ProjectLightColorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectLightColorPager) toCursor(plc *ProjectLightColor) Cursor {
	return p.order.Field.toCursor(plc)
}

func (p *projectLightColorPager) applyCursors(query *ProjectLightColorQuery, after, before *Cursor) *ProjectLightColorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectLightColorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectLightColorPager) applyOrder(query *ProjectLightColorQuery, reverse bool) *ProjectLightColorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectLightColorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectLightColorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectLightColor.
func (plc *ProjectLightColorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectLightColorPaginateOption,
) (*ProjectLightColorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectLightColorPager(opts)
	if err != nil {
		return nil, err
	}

	if plc, err = pager.applyFilter(plc); err != nil {
		return nil, err
	}

	conn := &ProjectLightColorConnection{Edges: []*ProjectLightColorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := plc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := plc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	plc = pager.applyCursors(plc, after, before)
	plc = pager.applyOrder(plc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		plc = plc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		plc = plc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := plc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectLightColor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectLightColor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectLightColor {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectLightColorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectLightColorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectLightColorOrderField defines the ordering field of ProjectLightColor.
type ProjectLightColorOrderField struct {
	field    string
	toCursor func(*ProjectLightColor) Cursor
}

// ProjectLightColorOrder defines the ordering of ProjectLightColor.
type ProjectLightColorOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *ProjectLightColorOrderField `json:"field"`
}

// DefaultProjectLightColorOrder is the default ordering of ProjectLightColor.
var DefaultProjectLightColorOrder = &ProjectLightColorOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectLightColorOrderField{
		field: projectlightcolor.FieldID,
		toCursor: func(plc *ProjectLightColor) Cursor {
			return Cursor{ID: plc.ID}
		},
	},
}

// ToEdge converts ProjectLightColor into ProjectLightColorEdge.
func (plc *ProjectLightColor) ToEdge(order *ProjectLightColorOrder) *ProjectLightColorEdge {
	if order == nil {
		order = DefaultProjectLightColorOrder
	}
	return &ProjectLightColorEdge{
		Node:   plc,
		Cursor: order.Field.toCursor(plc),
	}
}

// ProjectTaskEdge is the edge representation of ProjectTask.
type ProjectTaskEdge struct {
	Node   *ProjectTask `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// ProjectTaskConnection is the connection containing edges to ProjectTask.
type ProjectTaskConnection struct {
	Edges      []*ProjectTaskEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

// ProjectTaskPaginateOption enables pagination customization.
type ProjectTaskPaginateOption func(*projectTaskPager) error

// WithProjectTaskOrder configures pagination ordering.
func WithProjectTaskOrder(order *ProjectTaskOrder) ProjectTaskPaginateOption {
	if order == nil {
		order = DefaultProjectTaskOrder
	}
	o := *order
	return func(pager *projectTaskPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectTaskOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectTaskFilter configures pagination filter.
func WithProjectTaskFilter(filter func(*ProjectTaskQuery) (*ProjectTaskQuery, error)) ProjectTaskPaginateOption {
	return func(pager *projectTaskPager) error {
		if filter == nil {
			return errors.New("ProjectTaskQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectTaskPager struct {
	order  *ProjectTaskOrder
	filter func(*ProjectTaskQuery) (*ProjectTaskQuery, error)
}

func newProjectTaskPager(opts []ProjectTaskPaginateOption) (*projectTaskPager, error) {
	pager := &projectTaskPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectTaskOrder
	}
	return pager, nil
}

func (p *projectTaskPager) applyFilter(query *ProjectTaskQuery) (*ProjectTaskQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectTaskPager) toCursor(pt *ProjectTask) Cursor {
	return p.order.Field.toCursor(pt)
}

func (p *projectTaskPager) applyCursors(query *ProjectTaskQuery, after, before *Cursor) *ProjectTaskQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectTaskOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectTaskPager) applyOrder(query *ProjectTaskQuery, reverse bool) *ProjectTaskQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectTaskOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectTaskOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectTask.
func (pt *ProjectTaskQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectTaskPaginateOption,
) (*ProjectTaskConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectTaskPager(opts)
	if err != nil {
		return nil, err
	}

	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}

	conn := &ProjectTaskConnection{Edges: []*ProjectTaskEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pt = pager.applyCursors(pt, after, before)
	pt = pager.applyOrder(pt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pt = pt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pt = pt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectTask
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectTask {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectTask {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectTaskEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectTaskEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectTaskOrderField defines the ordering field of ProjectTask.
type ProjectTaskOrderField struct {
	field    string
	toCursor func(*ProjectTask) Cursor
}

// ProjectTaskOrder defines the ordering of ProjectTask.
type ProjectTaskOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *ProjectTaskOrderField `json:"field"`
}

// DefaultProjectTaskOrder is the default ordering of ProjectTask.
var DefaultProjectTaskOrder = &ProjectTaskOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectTaskOrderField{
		field: projecttask.FieldID,
		toCursor: func(pt *ProjectTask) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts ProjectTask into ProjectTaskEdge.
func (pt *ProjectTask) ToEdge(order *ProjectTaskOrder) *ProjectTaskEdge {
	if order == nil {
		order = DefaultProjectTaskOrder
	}
	return &ProjectTaskEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// ProjectTaskColumnEdge is the edge representation of ProjectTaskColumn.
type ProjectTaskColumnEdge struct {
	Node   *ProjectTaskColumn `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// ProjectTaskColumnConnection is the connection containing edges to ProjectTaskColumn.
type ProjectTaskColumnConnection struct {
	Edges      []*ProjectTaskColumnEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

// ProjectTaskColumnPaginateOption enables pagination customization.
type ProjectTaskColumnPaginateOption func(*projectTaskColumnPager) error

// WithProjectTaskColumnOrder configures pagination ordering.
func WithProjectTaskColumnOrder(order *ProjectTaskColumnOrder) ProjectTaskColumnPaginateOption {
	if order == nil {
		order = DefaultProjectTaskColumnOrder
	}
	o := *order
	return func(pager *projectTaskColumnPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectTaskColumnOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectTaskColumnFilter configures pagination filter.
func WithProjectTaskColumnFilter(filter func(*ProjectTaskColumnQuery) (*ProjectTaskColumnQuery, error)) ProjectTaskColumnPaginateOption {
	return func(pager *projectTaskColumnPager) error {
		if filter == nil {
			return errors.New("ProjectTaskColumnQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectTaskColumnPager struct {
	order  *ProjectTaskColumnOrder
	filter func(*ProjectTaskColumnQuery) (*ProjectTaskColumnQuery, error)
}

func newProjectTaskColumnPager(opts []ProjectTaskColumnPaginateOption) (*projectTaskColumnPager, error) {
	pager := &projectTaskColumnPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectTaskColumnOrder
	}
	return pager, nil
}

func (p *projectTaskColumnPager) applyFilter(query *ProjectTaskColumnQuery) (*ProjectTaskColumnQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectTaskColumnPager) toCursor(ptc *ProjectTaskColumn) Cursor {
	return p.order.Field.toCursor(ptc)
}

func (p *projectTaskColumnPager) applyCursors(query *ProjectTaskColumnQuery, after, before *Cursor) *ProjectTaskColumnQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectTaskColumnOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectTaskColumnPager) applyOrder(query *ProjectTaskColumnQuery, reverse bool) *ProjectTaskColumnQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectTaskColumnOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectTaskColumnOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectTaskColumn.
func (ptc *ProjectTaskColumnQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectTaskColumnPaginateOption,
) (*ProjectTaskColumnConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectTaskColumnPager(opts)
	if err != nil {
		return nil, err
	}

	if ptc, err = pager.applyFilter(ptc); err != nil {
		return nil, err
	}

	conn := &ProjectTaskColumnConnection{Edges: []*ProjectTaskColumnEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ptc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ptc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ptc = pager.applyCursors(ptc, after, before)
	ptc = pager.applyOrder(ptc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ptc = ptc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ptc = ptc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ptc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectTaskColumn
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectTaskColumn {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectTaskColumn {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectTaskColumnEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectTaskColumnEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectTaskColumnOrderField defines the ordering field of ProjectTaskColumn.
type ProjectTaskColumnOrderField struct {
	field    string
	toCursor func(*ProjectTaskColumn) Cursor
}

// ProjectTaskColumnOrder defines the ordering of ProjectTaskColumn.
type ProjectTaskColumnOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *ProjectTaskColumnOrderField `json:"field"`
}

// DefaultProjectTaskColumnOrder is the default ordering of ProjectTaskColumn.
var DefaultProjectTaskColumnOrder = &ProjectTaskColumnOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectTaskColumnOrderField{
		field: projecttaskcolumn.FieldID,
		toCursor: func(ptc *ProjectTaskColumn) Cursor {
			return Cursor{ID: ptc.ID}
		},
	},
}

// ToEdge converts ProjectTaskColumn into ProjectTaskColumnEdge.
func (ptc *ProjectTaskColumn) ToEdge(order *ProjectTaskColumnOrder) *ProjectTaskColumnEdge {
	if order == nil {
		order = DefaultProjectTaskColumnOrder
	}
	return &ProjectTaskColumnEdge{
		Node:   ptc,
		Cursor: order.Field.toCursor(ptc),
	}
}

// ProjectTaskListStatusEdge is the edge representation of ProjectTaskListStatus.
type ProjectTaskListStatusEdge struct {
	Node   *ProjectTaskListStatus `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// ProjectTaskListStatusConnection is the connection containing edges to ProjectTaskListStatus.
type ProjectTaskListStatusConnection struct {
	Edges      []*ProjectTaskListStatusEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

// ProjectTaskListStatusPaginateOption enables pagination customization.
type ProjectTaskListStatusPaginateOption func(*projectTaskListStatusPager) error

// WithProjectTaskListStatusOrder configures pagination ordering.
func WithProjectTaskListStatusOrder(order *ProjectTaskListStatusOrder) ProjectTaskListStatusPaginateOption {
	if order == nil {
		order = DefaultProjectTaskListStatusOrder
	}
	o := *order
	return func(pager *projectTaskListStatusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectTaskListStatusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectTaskListStatusFilter configures pagination filter.
func WithProjectTaskListStatusFilter(filter func(*ProjectTaskListStatusQuery) (*ProjectTaskListStatusQuery, error)) ProjectTaskListStatusPaginateOption {
	return func(pager *projectTaskListStatusPager) error {
		if filter == nil {
			return errors.New("ProjectTaskListStatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectTaskListStatusPager struct {
	order  *ProjectTaskListStatusOrder
	filter func(*ProjectTaskListStatusQuery) (*ProjectTaskListStatusQuery, error)
}

func newProjectTaskListStatusPager(opts []ProjectTaskListStatusPaginateOption) (*projectTaskListStatusPager, error) {
	pager := &projectTaskListStatusPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectTaskListStatusOrder
	}
	return pager, nil
}

func (p *projectTaskListStatusPager) applyFilter(query *ProjectTaskListStatusQuery) (*ProjectTaskListStatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectTaskListStatusPager) toCursor(ptls *ProjectTaskListStatus) Cursor {
	return p.order.Field.toCursor(ptls)
}

func (p *projectTaskListStatusPager) applyCursors(query *ProjectTaskListStatusQuery, after, before *Cursor) *ProjectTaskListStatusQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectTaskListStatusOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectTaskListStatusPager) applyOrder(query *ProjectTaskListStatusQuery, reverse bool) *ProjectTaskListStatusQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectTaskListStatusOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectTaskListStatusOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectTaskListStatus.
func (ptls *ProjectTaskListStatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectTaskListStatusPaginateOption,
) (*ProjectTaskListStatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectTaskListStatusPager(opts)
	if err != nil {
		return nil, err
	}

	if ptls, err = pager.applyFilter(ptls); err != nil {
		return nil, err
	}

	conn := &ProjectTaskListStatusConnection{Edges: []*ProjectTaskListStatusEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ptls.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ptls.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ptls = pager.applyCursors(ptls, after, before)
	ptls = pager.applyOrder(ptls, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ptls = ptls.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ptls = ptls.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ptls.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectTaskListStatus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectTaskListStatus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectTaskListStatus {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectTaskListStatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectTaskListStatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectTaskListStatusOrderField defines the ordering field of ProjectTaskListStatus.
type ProjectTaskListStatusOrderField struct {
	field    string
	toCursor func(*ProjectTaskListStatus) Cursor
}

// ProjectTaskListStatusOrder defines the ordering of ProjectTaskListStatus.
type ProjectTaskListStatusOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *ProjectTaskListStatusOrderField `json:"field"`
}

// DefaultProjectTaskListStatusOrder is the default ordering of ProjectTaskListStatus.
var DefaultProjectTaskListStatusOrder = &ProjectTaskListStatusOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectTaskListStatusOrderField{
		field: projecttaskliststatus.FieldID,
		toCursor: func(ptls *ProjectTaskListStatus) Cursor {
			return Cursor{ID: ptls.ID}
		},
	},
}

// ToEdge converts ProjectTaskListStatus into ProjectTaskListStatusEdge.
func (ptls *ProjectTaskListStatus) ToEdge(order *ProjectTaskListStatusOrder) *ProjectTaskListStatusEdge {
	if order == nil {
		order = DefaultProjectTaskListStatusOrder
	}
	return &ProjectTaskListStatusEdge{
		Node:   ptls,
		Cursor: order.Field.toCursor(ptls),
	}
}

// ProjectTaskSectionEdge is the edge representation of ProjectTaskSection.
type ProjectTaskSectionEdge struct {
	Node   *ProjectTaskSection `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// ProjectTaskSectionConnection is the connection containing edges to ProjectTaskSection.
type ProjectTaskSectionConnection struct {
	Edges      []*ProjectTaskSectionEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

// ProjectTaskSectionPaginateOption enables pagination customization.
type ProjectTaskSectionPaginateOption func(*projectTaskSectionPager) error

// WithProjectTaskSectionOrder configures pagination ordering.
func WithProjectTaskSectionOrder(order *ProjectTaskSectionOrder) ProjectTaskSectionPaginateOption {
	if order == nil {
		order = DefaultProjectTaskSectionOrder
	}
	o := *order
	return func(pager *projectTaskSectionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectTaskSectionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectTaskSectionFilter configures pagination filter.
func WithProjectTaskSectionFilter(filter func(*ProjectTaskSectionQuery) (*ProjectTaskSectionQuery, error)) ProjectTaskSectionPaginateOption {
	return func(pager *projectTaskSectionPager) error {
		if filter == nil {
			return errors.New("ProjectTaskSectionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectTaskSectionPager struct {
	order  *ProjectTaskSectionOrder
	filter func(*ProjectTaskSectionQuery) (*ProjectTaskSectionQuery, error)
}

func newProjectTaskSectionPager(opts []ProjectTaskSectionPaginateOption) (*projectTaskSectionPager, error) {
	pager := &projectTaskSectionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectTaskSectionOrder
	}
	return pager, nil
}

func (p *projectTaskSectionPager) applyFilter(query *ProjectTaskSectionQuery) (*ProjectTaskSectionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectTaskSectionPager) toCursor(pts *ProjectTaskSection) Cursor {
	return p.order.Field.toCursor(pts)
}

func (p *projectTaskSectionPager) applyCursors(query *ProjectTaskSectionQuery, after, before *Cursor) *ProjectTaskSectionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectTaskSectionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectTaskSectionPager) applyOrder(query *ProjectTaskSectionQuery, reverse bool) *ProjectTaskSectionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectTaskSectionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectTaskSectionOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectTaskSection.
func (pts *ProjectTaskSectionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectTaskSectionPaginateOption,
) (*ProjectTaskSectionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectTaskSectionPager(opts)
	if err != nil {
		return nil, err
	}

	if pts, err = pager.applyFilter(pts); err != nil {
		return nil, err
	}

	conn := &ProjectTaskSectionConnection{Edges: []*ProjectTaskSectionEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pts.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pts.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pts = pager.applyCursors(pts, after, before)
	pts = pager.applyOrder(pts, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pts = pts.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pts = pts.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pts.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectTaskSection
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectTaskSection {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectTaskSection {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectTaskSectionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectTaskSectionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectTaskSectionOrderField defines the ordering field of ProjectTaskSection.
type ProjectTaskSectionOrderField struct {
	field    string
	toCursor func(*ProjectTaskSection) Cursor
}

// ProjectTaskSectionOrder defines the ordering of ProjectTaskSection.
type ProjectTaskSectionOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *ProjectTaskSectionOrderField `json:"field"`
}

// DefaultProjectTaskSectionOrder is the default ordering of ProjectTaskSection.
var DefaultProjectTaskSectionOrder = &ProjectTaskSectionOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectTaskSectionOrderField{
		field: projecttasksection.FieldID,
		toCursor: func(pts *ProjectTaskSection) Cursor {
			return Cursor{ID: pts.ID}
		},
	},
}

// ToEdge converts ProjectTaskSection into ProjectTaskSectionEdge.
func (pts *ProjectTaskSection) ToEdge(order *ProjectTaskSectionOrder) *ProjectTaskSectionEdge {
	if order == nil {
		order = DefaultProjectTaskSectionOrder
	}
	return &ProjectTaskSectionEdge{
		Node:   pts,
		Cursor: order.Field.toCursor(pts),
	}
}

// ProjectTeammateEdge is the edge representation of ProjectTeammate.
type ProjectTeammateEdge struct {
	Node   *ProjectTeammate `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// ProjectTeammateConnection is the connection containing edges to ProjectTeammate.
type ProjectTeammateConnection struct {
	Edges      []*ProjectTeammateEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

// ProjectTeammatePaginateOption enables pagination customization.
type ProjectTeammatePaginateOption func(*projectTeammatePager) error

// WithProjectTeammateOrder configures pagination ordering.
func WithProjectTeammateOrder(order *ProjectTeammateOrder) ProjectTeammatePaginateOption {
	if order == nil {
		order = DefaultProjectTeammateOrder
	}
	o := *order
	return func(pager *projectTeammatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectTeammateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectTeammateFilter configures pagination filter.
func WithProjectTeammateFilter(filter func(*ProjectTeammateQuery) (*ProjectTeammateQuery, error)) ProjectTeammatePaginateOption {
	return func(pager *projectTeammatePager) error {
		if filter == nil {
			return errors.New("ProjectTeammateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectTeammatePager struct {
	order  *ProjectTeammateOrder
	filter func(*ProjectTeammateQuery) (*ProjectTeammateQuery, error)
}

func newProjectTeammatePager(opts []ProjectTeammatePaginateOption) (*projectTeammatePager, error) {
	pager := &projectTeammatePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectTeammateOrder
	}
	return pager, nil
}

func (p *projectTeammatePager) applyFilter(query *ProjectTeammateQuery) (*ProjectTeammateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectTeammatePager) toCursor(pt *ProjectTeammate) Cursor {
	return p.order.Field.toCursor(pt)
}

func (p *projectTeammatePager) applyCursors(query *ProjectTeammateQuery, after, before *Cursor) *ProjectTeammateQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectTeammateOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectTeammatePager) applyOrder(query *ProjectTeammateQuery, reverse bool) *ProjectTeammateQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectTeammateOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectTeammateOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectTeammate.
func (pt *ProjectTeammateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectTeammatePaginateOption,
) (*ProjectTeammateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectTeammatePager(opts)
	if err != nil {
		return nil, err
	}

	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}

	conn := &ProjectTeammateConnection{Edges: []*ProjectTeammateEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pt = pager.applyCursors(pt, after, before)
	pt = pager.applyOrder(pt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pt = pt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pt = pt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectTeammate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectTeammate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectTeammate {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectTeammateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectTeammateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectTeammateOrderField defines the ordering field of ProjectTeammate.
type ProjectTeammateOrderField struct {
	field    string
	toCursor func(*ProjectTeammate) Cursor
}

// ProjectTeammateOrder defines the ordering of ProjectTeammate.
type ProjectTeammateOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *ProjectTeammateOrderField `json:"field"`
}

// DefaultProjectTeammateOrder is the default ordering of ProjectTeammate.
var DefaultProjectTeammateOrder = &ProjectTeammateOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectTeammateOrderField{
		field: projectteammate.FieldID,
		toCursor: func(pt *ProjectTeammate) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts ProjectTeammate into ProjectTeammateEdge.
func (pt *ProjectTeammate) ToEdge(order *ProjectTeammateOrder) *ProjectTeammateEdge {
	if order == nil {
		order = DefaultProjectTeammateOrder
	}
	return &ProjectTeammateEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// TagEdge is the edge representation of Tag.
type TagEdge struct {
	Node   *Tag   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TagConnection is the connection containing edges to Tag.
type TagConnection struct {
	Edges      []*TagEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

// TagPaginateOption enables pagination customization.
type TagPaginateOption func(*tagPager) error

// WithTagOrder configures pagination ordering.
func WithTagOrder(order *TagOrder) TagPaginateOption {
	if order == nil {
		order = DefaultTagOrder
	}
	o := *order
	return func(pager *tagPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTagOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTagFilter configures pagination filter.
func WithTagFilter(filter func(*TagQuery) (*TagQuery, error)) TagPaginateOption {
	return func(pager *tagPager) error {
		if filter == nil {
			return errors.New("TagQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tagPager struct {
	order  *TagOrder
	filter func(*TagQuery) (*TagQuery, error)
}

func newTagPager(opts []TagPaginateOption) (*tagPager, error) {
	pager := &tagPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTagOrder
	}
	return pager, nil
}

func (p *tagPager) applyFilter(query *TagQuery) (*TagQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tagPager) toCursor(t *Tag) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tagPager) applyCursors(query *TagQuery, after, before *Cursor) *TagQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTagOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tagPager) applyOrder(query *TagQuery, reverse bool) *TagQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTagOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTagOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Tag.
func (t *TagQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TagPaginateOption,
) (*TagConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTagPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TagConnection{Edges: []*TagEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Tag
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tag {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tag {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TagEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TagEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TagOrderField defines the ordering field of Tag.
type TagOrderField struct {
	field    string
	toCursor func(*Tag) Cursor
}

// TagOrder defines the ordering of Tag.
type TagOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *TagOrderField `json:"field"`
}

// DefaultTagOrder is the default ordering of Tag.
var DefaultTagOrder = &TagOrder{
	Direction: OrderDirectionAsc,
	Field: &TagOrderField{
		field: tag.FieldID,
		toCursor: func(t *Tag) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tag into TagEdge.
func (t *Tag) ToEdge(order *TagOrder) *TagEdge {
	if order == nil {
		order = DefaultTagOrder
	}
	return &TagEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TaskEdge is the edge representation of Task.
type TaskEdge struct {
	Node   *Task  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TaskConnection is the connection containing edges to Task.
type TaskConnection struct {
	Edges      []*TaskEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// TaskPaginateOption enables pagination customization.
type TaskPaginateOption func(*taskPager) error

// WithTaskOrder configures pagination ordering.
func WithTaskOrder(order *TaskOrder) TaskPaginateOption {
	if order == nil {
		order = DefaultTaskOrder
	}
	o := *order
	return func(pager *taskPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskFilter configures pagination filter.
func WithTaskFilter(filter func(*TaskQuery) (*TaskQuery, error)) TaskPaginateOption {
	return func(pager *taskPager) error {
		if filter == nil {
			return errors.New("TaskQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskPager struct {
	order  *TaskOrder
	filter func(*TaskQuery) (*TaskQuery, error)
}

func newTaskPager(opts []TaskPaginateOption) (*taskPager, error) {
	pager := &taskPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskOrder
	}
	return pager, nil
}

func (p *taskPager) applyFilter(query *TaskQuery) (*TaskQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskPager) toCursor(t *Task) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *taskPager) applyCursors(query *TaskQuery, after, before *Cursor) *TaskQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskPager) applyOrder(query *TaskQuery, reverse bool) *TaskQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Task.
func (t *TaskQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskPaginateOption,
) (*TaskConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TaskConnection{Edges: []*TaskEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Task
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Task {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Task {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskOrderField defines the ordering field of Task.
type TaskOrderField struct {
	field    string
	toCursor func(*Task) Cursor
}

// TaskOrder defines the ordering of Task.
type TaskOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TaskOrderField `json:"field"`
}

// DefaultTaskOrder is the default ordering of Task.
var DefaultTaskOrder = &TaskOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskOrderField{
		field: task.FieldID,
		toCursor: func(t *Task) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Task into TaskEdge.
func (t *Task) ToEdge(order *TaskOrder) *TaskEdge {
	if order == nil {
		order = DefaultTaskOrder
	}
	return &TaskEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TaskCollaboratorEdge is the edge representation of TaskCollaborator.
type TaskCollaboratorEdge struct {
	Node   *TaskCollaborator `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// TaskCollaboratorConnection is the connection containing edges to TaskCollaborator.
type TaskCollaboratorConnection struct {
	Edges      []*TaskCollaboratorEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

// TaskCollaboratorPaginateOption enables pagination customization.
type TaskCollaboratorPaginateOption func(*taskCollaboratorPager) error

// WithTaskCollaboratorOrder configures pagination ordering.
func WithTaskCollaboratorOrder(order *TaskCollaboratorOrder) TaskCollaboratorPaginateOption {
	if order == nil {
		order = DefaultTaskCollaboratorOrder
	}
	o := *order
	return func(pager *taskCollaboratorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskCollaboratorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskCollaboratorFilter configures pagination filter.
func WithTaskCollaboratorFilter(filter func(*TaskCollaboratorQuery) (*TaskCollaboratorQuery, error)) TaskCollaboratorPaginateOption {
	return func(pager *taskCollaboratorPager) error {
		if filter == nil {
			return errors.New("TaskCollaboratorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskCollaboratorPager struct {
	order  *TaskCollaboratorOrder
	filter func(*TaskCollaboratorQuery) (*TaskCollaboratorQuery, error)
}

func newTaskCollaboratorPager(opts []TaskCollaboratorPaginateOption) (*taskCollaboratorPager, error) {
	pager := &taskCollaboratorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskCollaboratorOrder
	}
	return pager, nil
}

func (p *taskCollaboratorPager) applyFilter(query *TaskCollaboratorQuery) (*TaskCollaboratorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskCollaboratorPager) toCursor(tc *TaskCollaborator) Cursor {
	return p.order.Field.toCursor(tc)
}

func (p *taskCollaboratorPager) applyCursors(query *TaskCollaboratorQuery, after, before *Cursor) *TaskCollaboratorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskCollaboratorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskCollaboratorPager) applyOrder(query *TaskCollaboratorQuery, reverse bool) *TaskCollaboratorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskCollaboratorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskCollaboratorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskCollaborator.
func (tc *TaskCollaboratorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskCollaboratorPaginateOption,
) (*TaskCollaboratorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskCollaboratorPager(opts)
	if err != nil {
		return nil, err
	}

	if tc, err = pager.applyFilter(tc); err != nil {
		return nil, err
	}

	conn := &TaskCollaboratorConnection{Edges: []*TaskCollaboratorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tc = pager.applyCursors(tc, after, before)
	tc = pager.applyOrder(tc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tc = tc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tc = tc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskCollaborator
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskCollaborator {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskCollaborator {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskCollaboratorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskCollaboratorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskCollaboratorOrderField defines the ordering field of TaskCollaborator.
type TaskCollaboratorOrderField struct {
	field    string
	toCursor func(*TaskCollaborator) Cursor
}

// TaskCollaboratorOrder defines the ordering of TaskCollaborator.
type TaskCollaboratorOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *TaskCollaboratorOrderField `json:"field"`
}

// DefaultTaskCollaboratorOrder is the default ordering of TaskCollaborator.
var DefaultTaskCollaboratorOrder = &TaskCollaboratorOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskCollaboratorOrderField{
		field: taskcollaborator.FieldID,
		toCursor: func(tc *TaskCollaborator) Cursor {
			return Cursor{ID: tc.ID}
		},
	},
}

// ToEdge converts TaskCollaborator into TaskCollaboratorEdge.
func (tc *TaskCollaborator) ToEdge(order *TaskCollaboratorOrder) *TaskCollaboratorEdge {
	if order == nil {
		order = DefaultTaskCollaboratorOrder
	}
	return &TaskCollaboratorEdge{
		Node:   tc,
		Cursor: order.Field.toCursor(tc),
	}
}

// TaskColumnEdge is the edge representation of TaskColumn.
type TaskColumnEdge struct {
	Node   *TaskColumn `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// TaskColumnConnection is the connection containing edges to TaskColumn.
type TaskColumnConnection struct {
	Edges      []*TaskColumnEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// TaskColumnPaginateOption enables pagination customization.
type TaskColumnPaginateOption func(*taskColumnPager) error

// WithTaskColumnOrder configures pagination ordering.
func WithTaskColumnOrder(order *TaskColumnOrder) TaskColumnPaginateOption {
	if order == nil {
		order = DefaultTaskColumnOrder
	}
	o := *order
	return func(pager *taskColumnPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskColumnOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskColumnFilter configures pagination filter.
func WithTaskColumnFilter(filter func(*TaskColumnQuery) (*TaskColumnQuery, error)) TaskColumnPaginateOption {
	return func(pager *taskColumnPager) error {
		if filter == nil {
			return errors.New("TaskColumnQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskColumnPager struct {
	order  *TaskColumnOrder
	filter func(*TaskColumnQuery) (*TaskColumnQuery, error)
}

func newTaskColumnPager(opts []TaskColumnPaginateOption) (*taskColumnPager, error) {
	pager := &taskColumnPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskColumnOrder
	}
	return pager, nil
}

func (p *taskColumnPager) applyFilter(query *TaskColumnQuery) (*TaskColumnQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskColumnPager) toCursor(tc *TaskColumn) Cursor {
	return p.order.Field.toCursor(tc)
}

func (p *taskColumnPager) applyCursors(query *TaskColumnQuery, after, before *Cursor) *TaskColumnQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskColumnOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskColumnPager) applyOrder(query *TaskColumnQuery, reverse bool) *TaskColumnQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskColumnOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskColumnOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskColumn.
func (tc *TaskColumnQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskColumnPaginateOption,
) (*TaskColumnConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskColumnPager(opts)
	if err != nil {
		return nil, err
	}

	if tc, err = pager.applyFilter(tc); err != nil {
		return nil, err
	}

	conn := &TaskColumnConnection{Edges: []*TaskColumnEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tc = pager.applyCursors(tc, after, before)
	tc = pager.applyOrder(tc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tc = tc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tc = tc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskColumn
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskColumn {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskColumn {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskColumnEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskColumnEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskColumnOrderField defines the ordering field of TaskColumn.
type TaskColumnOrderField struct {
	field    string
	toCursor func(*TaskColumn) Cursor
}

// TaskColumnOrder defines the ordering of TaskColumn.
type TaskColumnOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *TaskColumnOrderField `json:"field"`
}

// DefaultTaskColumnOrder is the default ordering of TaskColumn.
var DefaultTaskColumnOrder = &TaskColumnOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskColumnOrderField{
		field: taskcolumn.FieldID,
		toCursor: func(tc *TaskColumn) Cursor {
			return Cursor{ID: tc.ID}
		},
	},
}

// ToEdge converts TaskColumn into TaskColumnEdge.
func (tc *TaskColumn) ToEdge(order *TaskColumnOrder) *TaskColumnEdge {
	if order == nil {
		order = DefaultTaskColumnOrder
	}
	return &TaskColumnEdge{
		Node:   tc,
		Cursor: order.Field.toCursor(tc),
	}
}

// TaskFeedEdge is the edge representation of TaskFeed.
type TaskFeedEdge struct {
	Node   *TaskFeed `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TaskFeedConnection is the connection containing edges to TaskFeed.
type TaskFeedConnection struct {
	Edges      []*TaskFeedEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TaskFeedPaginateOption enables pagination customization.
type TaskFeedPaginateOption func(*taskFeedPager) error

// WithTaskFeedOrder configures pagination ordering.
func WithTaskFeedOrder(order *TaskFeedOrder) TaskFeedPaginateOption {
	if order == nil {
		order = DefaultTaskFeedOrder
	}
	o := *order
	return func(pager *taskFeedPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskFeedOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskFeedFilter configures pagination filter.
func WithTaskFeedFilter(filter func(*TaskFeedQuery) (*TaskFeedQuery, error)) TaskFeedPaginateOption {
	return func(pager *taskFeedPager) error {
		if filter == nil {
			return errors.New("TaskFeedQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskFeedPager struct {
	order  *TaskFeedOrder
	filter func(*TaskFeedQuery) (*TaskFeedQuery, error)
}

func newTaskFeedPager(opts []TaskFeedPaginateOption) (*taskFeedPager, error) {
	pager := &taskFeedPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskFeedOrder
	}
	return pager, nil
}

func (p *taskFeedPager) applyFilter(query *TaskFeedQuery) (*TaskFeedQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskFeedPager) toCursor(tf *TaskFeed) Cursor {
	return p.order.Field.toCursor(tf)
}

func (p *taskFeedPager) applyCursors(query *TaskFeedQuery, after, before *Cursor) *TaskFeedQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskFeedOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskFeedPager) applyOrder(query *TaskFeedQuery, reverse bool) *TaskFeedQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskFeedOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskFeedOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskFeed.
func (tf *TaskFeedQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskFeedPaginateOption,
) (*TaskFeedConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskFeedPager(opts)
	if err != nil {
		return nil, err
	}

	if tf, err = pager.applyFilter(tf); err != nil {
		return nil, err
	}

	conn := &TaskFeedConnection{Edges: []*TaskFeedEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tf.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tf.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tf = pager.applyCursors(tf, after, before)
	tf = pager.applyOrder(tf, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tf = tf.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tf = tf.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tf.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskFeed
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskFeed {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskFeed {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskFeedEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskFeedEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskFeedOrderField defines the ordering field of TaskFeed.
type TaskFeedOrderField struct {
	field    string
	toCursor func(*TaskFeed) Cursor
}

// TaskFeedOrder defines the ordering of TaskFeed.
type TaskFeedOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TaskFeedOrderField `json:"field"`
}

// DefaultTaskFeedOrder is the default ordering of TaskFeed.
var DefaultTaskFeedOrder = &TaskFeedOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskFeedOrderField{
		field: taskfeed.FieldID,
		toCursor: func(tf *TaskFeed) Cursor {
			return Cursor{ID: tf.ID}
		},
	},
}

// ToEdge converts TaskFeed into TaskFeedEdge.
func (tf *TaskFeed) ToEdge(order *TaskFeedOrder) *TaskFeedEdge {
	if order == nil {
		order = DefaultTaskFeedOrder
	}
	return &TaskFeedEdge{
		Node:   tf,
		Cursor: order.Field.toCursor(tf),
	}
}

// TaskFeedLikeEdge is the edge representation of TaskFeedLike.
type TaskFeedLikeEdge struct {
	Node   *TaskFeedLike `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// TaskFeedLikeConnection is the connection containing edges to TaskFeedLike.
type TaskFeedLikeConnection struct {
	Edges      []*TaskFeedLikeEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

// TaskFeedLikePaginateOption enables pagination customization.
type TaskFeedLikePaginateOption func(*taskFeedLikePager) error

// WithTaskFeedLikeOrder configures pagination ordering.
func WithTaskFeedLikeOrder(order *TaskFeedLikeOrder) TaskFeedLikePaginateOption {
	if order == nil {
		order = DefaultTaskFeedLikeOrder
	}
	o := *order
	return func(pager *taskFeedLikePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskFeedLikeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskFeedLikeFilter configures pagination filter.
func WithTaskFeedLikeFilter(filter func(*TaskFeedLikeQuery) (*TaskFeedLikeQuery, error)) TaskFeedLikePaginateOption {
	return func(pager *taskFeedLikePager) error {
		if filter == nil {
			return errors.New("TaskFeedLikeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskFeedLikePager struct {
	order  *TaskFeedLikeOrder
	filter func(*TaskFeedLikeQuery) (*TaskFeedLikeQuery, error)
}

func newTaskFeedLikePager(opts []TaskFeedLikePaginateOption) (*taskFeedLikePager, error) {
	pager := &taskFeedLikePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskFeedLikeOrder
	}
	return pager, nil
}

func (p *taskFeedLikePager) applyFilter(query *TaskFeedLikeQuery) (*TaskFeedLikeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskFeedLikePager) toCursor(tfl *TaskFeedLike) Cursor {
	return p.order.Field.toCursor(tfl)
}

func (p *taskFeedLikePager) applyCursors(query *TaskFeedLikeQuery, after, before *Cursor) *TaskFeedLikeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskFeedLikeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskFeedLikePager) applyOrder(query *TaskFeedLikeQuery, reverse bool) *TaskFeedLikeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskFeedLikeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskFeedLikeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskFeedLike.
func (tfl *TaskFeedLikeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskFeedLikePaginateOption,
) (*TaskFeedLikeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskFeedLikePager(opts)
	if err != nil {
		return nil, err
	}

	if tfl, err = pager.applyFilter(tfl); err != nil {
		return nil, err
	}

	conn := &TaskFeedLikeConnection{Edges: []*TaskFeedLikeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tfl.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tfl.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tfl = pager.applyCursors(tfl, after, before)
	tfl = pager.applyOrder(tfl, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tfl = tfl.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tfl = tfl.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tfl.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskFeedLike
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskFeedLike {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskFeedLike {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskFeedLikeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskFeedLikeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskFeedLikeOrderField defines the ordering field of TaskFeedLike.
type TaskFeedLikeOrderField struct {
	field    string
	toCursor func(*TaskFeedLike) Cursor
}

// TaskFeedLikeOrder defines the ordering of TaskFeedLike.
type TaskFeedLikeOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *TaskFeedLikeOrderField `json:"field"`
}

// DefaultTaskFeedLikeOrder is the default ordering of TaskFeedLike.
var DefaultTaskFeedLikeOrder = &TaskFeedLikeOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskFeedLikeOrderField{
		field: taskfeedlike.FieldID,
		toCursor: func(tfl *TaskFeedLike) Cursor {
			return Cursor{ID: tfl.ID}
		},
	},
}

// ToEdge converts TaskFeedLike into TaskFeedLikeEdge.
func (tfl *TaskFeedLike) ToEdge(order *TaskFeedLikeOrder) *TaskFeedLikeEdge {
	if order == nil {
		order = DefaultTaskFeedLikeOrder
	}
	return &TaskFeedLikeEdge{
		Node:   tfl,
		Cursor: order.Field.toCursor(tfl),
	}
}

// TaskFileEdge is the edge representation of TaskFile.
type TaskFileEdge struct {
	Node   *TaskFile `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TaskFileConnection is the connection containing edges to TaskFile.
type TaskFileConnection struct {
	Edges      []*TaskFileEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TaskFilePaginateOption enables pagination customization.
type TaskFilePaginateOption func(*taskFilePager) error

// WithTaskFileOrder configures pagination ordering.
func WithTaskFileOrder(order *TaskFileOrder) TaskFilePaginateOption {
	if order == nil {
		order = DefaultTaskFileOrder
	}
	o := *order
	return func(pager *taskFilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskFileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskFileFilter configures pagination filter.
func WithTaskFileFilter(filter func(*TaskFileQuery) (*TaskFileQuery, error)) TaskFilePaginateOption {
	return func(pager *taskFilePager) error {
		if filter == nil {
			return errors.New("TaskFileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskFilePager struct {
	order  *TaskFileOrder
	filter func(*TaskFileQuery) (*TaskFileQuery, error)
}

func newTaskFilePager(opts []TaskFilePaginateOption) (*taskFilePager, error) {
	pager := &taskFilePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskFileOrder
	}
	return pager, nil
}

func (p *taskFilePager) applyFilter(query *TaskFileQuery) (*TaskFileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskFilePager) toCursor(tf *TaskFile) Cursor {
	return p.order.Field.toCursor(tf)
}

func (p *taskFilePager) applyCursors(query *TaskFileQuery, after, before *Cursor) *TaskFileQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskFileOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskFilePager) applyOrder(query *TaskFileQuery, reverse bool) *TaskFileQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskFileOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskFileOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskFile.
func (tf *TaskFileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskFilePaginateOption,
) (*TaskFileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskFilePager(opts)
	if err != nil {
		return nil, err
	}

	if tf, err = pager.applyFilter(tf); err != nil {
		return nil, err
	}

	conn := &TaskFileConnection{Edges: []*TaskFileEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tf.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tf.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tf = pager.applyCursors(tf, after, before)
	tf = pager.applyOrder(tf, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tf = tf.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tf = tf.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tf.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskFile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskFile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskFile {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskFileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskFileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskFileOrderField defines the ordering field of TaskFile.
type TaskFileOrderField struct {
	field    string
	toCursor func(*TaskFile) Cursor
}

// TaskFileOrder defines the ordering of TaskFile.
type TaskFileOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TaskFileOrderField `json:"field"`
}

// DefaultTaskFileOrder is the default ordering of TaskFile.
var DefaultTaskFileOrder = &TaskFileOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskFileOrderField{
		field: taskfile.FieldID,
		toCursor: func(tf *TaskFile) Cursor {
			return Cursor{ID: tf.ID}
		},
	},
}

// ToEdge converts TaskFile into TaskFileEdge.
func (tf *TaskFile) ToEdge(order *TaskFileOrder) *TaskFileEdge {
	if order == nil {
		order = DefaultTaskFileOrder
	}
	return &TaskFileEdge{
		Node:   tf,
		Cursor: order.Field.toCursor(tf),
	}
}

// TaskLikeEdge is the edge representation of TaskLike.
type TaskLikeEdge struct {
	Node   *TaskLike `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TaskLikeConnection is the connection containing edges to TaskLike.
type TaskLikeConnection struct {
	Edges      []*TaskLikeEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TaskLikePaginateOption enables pagination customization.
type TaskLikePaginateOption func(*taskLikePager) error

// WithTaskLikeOrder configures pagination ordering.
func WithTaskLikeOrder(order *TaskLikeOrder) TaskLikePaginateOption {
	if order == nil {
		order = DefaultTaskLikeOrder
	}
	o := *order
	return func(pager *taskLikePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskLikeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskLikeFilter configures pagination filter.
func WithTaskLikeFilter(filter func(*TaskLikeQuery) (*TaskLikeQuery, error)) TaskLikePaginateOption {
	return func(pager *taskLikePager) error {
		if filter == nil {
			return errors.New("TaskLikeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskLikePager struct {
	order  *TaskLikeOrder
	filter func(*TaskLikeQuery) (*TaskLikeQuery, error)
}

func newTaskLikePager(opts []TaskLikePaginateOption) (*taskLikePager, error) {
	pager := &taskLikePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskLikeOrder
	}
	return pager, nil
}

func (p *taskLikePager) applyFilter(query *TaskLikeQuery) (*TaskLikeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskLikePager) toCursor(tl *TaskLike) Cursor {
	return p.order.Field.toCursor(tl)
}

func (p *taskLikePager) applyCursors(query *TaskLikeQuery, after, before *Cursor) *TaskLikeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskLikeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskLikePager) applyOrder(query *TaskLikeQuery, reverse bool) *TaskLikeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskLikeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskLikeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskLike.
func (tl *TaskLikeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskLikePaginateOption,
) (*TaskLikeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskLikePager(opts)
	if err != nil {
		return nil, err
	}

	if tl, err = pager.applyFilter(tl); err != nil {
		return nil, err
	}

	conn := &TaskLikeConnection{Edges: []*TaskLikeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tl.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tl.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tl = pager.applyCursors(tl, after, before)
	tl = pager.applyOrder(tl, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tl = tl.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tl = tl.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tl.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskLike
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskLike {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskLike {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskLikeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskLikeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskLikeOrderField defines the ordering field of TaskLike.
type TaskLikeOrderField struct {
	field    string
	toCursor func(*TaskLike) Cursor
}

// TaskLikeOrder defines the ordering of TaskLike.
type TaskLikeOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TaskLikeOrderField `json:"field"`
}

// DefaultTaskLikeOrder is the default ordering of TaskLike.
var DefaultTaskLikeOrder = &TaskLikeOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskLikeOrderField{
		field: tasklike.FieldID,
		toCursor: func(tl *TaskLike) Cursor {
			return Cursor{ID: tl.ID}
		},
	},
}

// ToEdge converts TaskLike into TaskLikeEdge.
func (tl *TaskLike) ToEdge(order *TaskLikeOrder) *TaskLikeEdge {
	if order == nil {
		order = DefaultTaskLikeOrder
	}
	return &TaskLikeEdge{
		Node:   tl,
		Cursor: order.Field.toCursor(tl),
	}
}

// TaskListCompletedStatusEdge is the edge representation of TaskListCompletedStatus.
type TaskListCompletedStatusEdge struct {
	Node   *TaskListCompletedStatus `json:"node"`
	Cursor Cursor                   `json:"cursor"`
}

// TaskListCompletedStatusConnection is the connection containing edges to TaskListCompletedStatus.
type TaskListCompletedStatusConnection struct {
	Edges      []*TaskListCompletedStatusEdge `json:"edges"`
	PageInfo   PageInfo                       `json:"pageInfo"`
	TotalCount int                            `json:"totalCount"`
}

// TaskListCompletedStatusPaginateOption enables pagination customization.
type TaskListCompletedStatusPaginateOption func(*taskListCompletedStatusPager) error

// WithTaskListCompletedStatusOrder configures pagination ordering.
func WithTaskListCompletedStatusOrder(order *TaskListCompletedStatusOrder) TaskListCompletedStatusPaginateOption {
	if order == nil {
		order = DefaultTaskListCompletedStatusOrder
	}
	o := *order
	return func(pager *taskListCompletedStatusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskListCompletedStatusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskListCompletedStatusFilter configures pagination filter.
func WithTaskListCompletedStatusFilter(filter func(*TaskListCompletedStatusQuery) (*TaskListCompletedStatusQuery, error)) TaskListCompletedStatusPaginateOption {
	return func(pager *taskListCompletedStatusPager) error {
		if filter == nil {
			return errors.New("TaskListCompletedStatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskListCompletedStatusPager struct {
	order  *TaskListCompletedStatusOrder
	filter func(*TaskListCompletedStatusQuery) (*TaskListCompletedStatusQuery, error)
}

func newTaskListCompletedStatusPager(opts []TaskListCompletedStatusPaginateOption) (*taskListCompletedStatusPager, error) {
	pager := &taskListCompletedStatusPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskListCompletedStatusOrder
	}
	return pager, nil
}

func (p *taskListCompletedStatusPager) applyFilter(query *TaskListCompletedStatusQuery) (*TaskListCompletedStatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskListCompletedStatusPager) toCursor(tlcs *TaskListCompletedStatus) Cursor {
	return p.order.Field.toCursor(tlcs)
}

func (p *taskListCompletedStatusPager) applyCursors(query *TaskListCompletedStatusQuery, after, before *Cursor) *TaskListCompletedStatusQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskListCompletedStatusOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskListCompletedStatusPager) applyOrder(query *TaskListCompletedStatusQuery, reverse bool) *TaskListCompletedStatusQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskListCompletedStatusOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskListCompletedStatusOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskListCompletedStatus.
func (tlcs *TaskListCompletedStatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskListCompletedStatusPaginateOption,
) (*TaskListCompletedStatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskListCompletedStatusPager(opts)
	if err != nil {
		return nil, err
	}

	if tlcs, err = pager.applyFilter(tlcs); err != nil {
		return nil, err
	}

	conn := &TaskListCompletedStatusConnection{Edges: []*TaskListCompletedStatusEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tlcs.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tlcs.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tlcs = pager.applyCursors(tlcs, after, before)
	tlcs = pager.applyOrder(tlcs, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tlcs = tlcs.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tlcs = tlcs.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tlcs.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskListCompletedStatus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskListCompletedStatus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskListCompletedStatus {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskListCompletedStatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskListCompletedStatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskListCompletedStatusOrderField defines the ordering field of TaskListCompletedStatus.
type TaskListCompletedStatusOrderField struct {
	field    string
	toCursor func(*TaskListCompletedStatus) Cursor
}

// TaskListCompletedStatusOrder defines the ordering of TaskListCompletedStatus.
type TaskListCompletedStatusOrder struct {
	Direction OrderDirection                     `json:"direction"`
	Field     *TaskListCompletedStatusOrderField `json:"field"`
}

// DefaultTaskListCompletedStatusOrder is the default ordering of TaskListCompletedStatus.
var DefaultTaskListCompletedStatusOrder = &TaskListCompletedStatusOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskListCompletedStatusOrderField{
		field: tasklistcompletedstatus.FieldID,
		toCursor: func(tlcs *TaskListCompletedStatus) Cursor {
			return Cursor{ID: tlcs.ID}
		},
	},
}

// ToEdge converts TaskListCompletedStatus into TaskListCompletedStatusEdge.
func (tlcs *TaskListCompletedStatus) ToEdge(order *TaskListCompletedStatusOrder) *TaskListCompletedStatusEdge {
	if order == nil {
		order = DefaultTaskListCompletedStatusOrder
	}
	return &TaskListCompletedStatusEdge{
		Node:   tlcs,
		Cursor: order.Field.toCursor(tlcs),
	}
}

// TaskListSortStatusEdge is the edge representation of TaskListSortStatus.
type TaskListSortStatusEdge struct {
	Node   *TaskListSortStatus `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// TaskListSortStatusConnection is the connection containing edges to TaskListSortStatus.
type TaskListSortStatusConnection struct {
	Edges      []*TaskListSortStatusEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

// TaskListSortStatusPaginateOption enables pagination customization.
type TaskListSortStatusPaginateOption func(*taskListSortStatusPager) error

// WithTaskListSortStatusOrder configures pagination ordering.
func WithTaskListSortStatusOrder(order *TaskListSortStatusOrder) TaskListSortStatusPaginateOption {
	if order == nil {
		order = DefaultTaskListSortStatusOrder
	}
	o := *order
	return func(pager *taskListSortStatusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskListSortStatusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskListSortStatusFilter configures pagination filter.
func WithTaskListSortStatusFilter(filter func(*TaskListSortStatusQuery) (*TaskListSortStatusQuery, error)) TaskListSortStatusPaginateOption {
	return func(pager *taskListSortStatusPager) error {
		if filter == nil {
			return errors.New("TaskListSortStatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskListSortStatusPager struct {
	order  *TaskListSortStatusOrder
	filter func(*TaskListSortStatusQuery) (*TaskListSortStatusQuery, error)
}

func newTaskListSortStatusPager(opts []TaskListSortStatusPaginateOption) (*taskListSortStatusPager, error) {
	pager := &taskListSortStatusPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskListSortStatusOrder
	}
	return pager, nil
}

func (p *taskListSortStatusPager) applyFilter(query *TaskListSortStatusQuery) (*TaskListSortStatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskListSortStatusPager) toCursor(tlss *TaskListSortStatus) Cursor {
	return p.order.Field.toCursor(tlss)
}

func (p *taskListSortStatusPager) applyCursors(query *TaskListSortStatusQuery, after, before *Cursor) *TaskListSortStatusQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskListSortStatusOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskListSortStatusPager) applyOrder(query *TaskListSortStatusQuery, reverse bool) *TaskListSortStatusQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskListSortStatusOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskListSortStatusOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskListSortStatus.
func (tlss *TaskListSortStatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskListSortStatusPaginateOption,
) (*TaskListSortStatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskListSortStatusPager(opts)
	if err != nil {
		return nil, err
	}

	if tlss, err = pager.applyFilter(tlss); err != nil {
		return nil, err
	}

	conn := &TaskListSortStatusConnection{Edges: []*TaskListSortStatusEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tlss.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tlss.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tlss = pager.applyCursors(tlss, after, before)
	tlss = pager.applyOrder(tlss, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tlss = tlss.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tlss = tlss.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tlss.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskListSortStatus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskListSortStatus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskListSortStatus {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskListSortStatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskListSortStatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskListSortStatusOrderField defines the ordering field of TaskListSortStatus.
type TaskListSortStatusOrderField struct {
	field    string
	toCursor func(*TaskListSortStatus) Cursor
}

// TaskListSortStatusOrder defines the ordering of TaskListSortStatus.
type TaskListSortStatusOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *TaskListSortStatusOrderField `json:"field"`
}

// DefaultTaskListSortStatusOrder is the default ordering of TaskListSortStatus.
var DefaultTaskListSortStatusOrder = &TaskListSortStatusOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskListSortStatusOrderField{
		field: tasklistsortstatus.FieldID,
		toCursor: func(tlss *TaskListSortStatus) Cursor {
			return Cursor{ID: tlss.ID}
		},
	},
}

// ToEdge converts TaskListSortStatus into TaskListSortStatusEdge.
func (tlss *TaskListSortStatus) ToEdge(order *TaskListSortStatusOrder) *TaskListSortStatusEdge {
	if order == nil {
		order = DefaultTaskListSortStatusOrder
	}
	return &TaskListSortStatusEdge{
		Node:   tlss,
		Cursor: order.Field.toCursor(tlss),
	}
}

// TaskPriorityEdge is the edge representation of TaskPriority.
type TaskPriorityEdge struct {
	Node   *TaskPriority `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// TaskPriorityConnection is the connection containing edges to TaskPriority.
type TaskPriorityConnection struct {
	Edges      []*TaskPriorityEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

// TaskPriorityPaginateOption enables pagination customization.
type TaskPriorityPaginateOption func(*taskPriorityPager) error

// WithTaskPriorityOrder configures pagination ordering.
func WithTaskPriorityOrder(order *TaskPriorityOrder) TaskPriorityPaginateOption {
	if order == nil {
		order = DefaultTaskPriorityOrder
	}
	o := *order
	return func(pager *taskPriorityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskPriorityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskPriorityFilter configures pagination filter.
func WithTaskPriorityFilter(filter func(*TaskPriorityQuery) (*TaskPriorityQuery, error)) TaskPriorityPaginateOption {
	return func(pager *taskPriorityPager) error {
		if filter == nil {
			return errors.New("TaskPriorityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskPriorityPager struct {
	order  *TaskPriorityOrder
	filter func(*TaskPriorityQuery) (*TaskPriorityQuery, error)
}

func newTaskPriorityPager(opts []TaskPriorityPaginateOption) (*taskPriorityPager, error) {
	pager := &taskPriorityPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskPriorityOrder
	}
	return pager, nil
}

func (p *taskPriorityPager) applyFilter(query *TaskPriorityQuery) (*TaskPriorityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskPriorityPager) toCursor(tp *TaskPriority) Cursor {
	return p.order.Field.toCursor(tp)
}

func (p *taskPriorityPager) applyCursors(query *TaskPriorityQuery, after, before *Cursor) *TaskPriorityQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskPriorityOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskPriorityPager) applyOrder(query *TaskPriorityQuery, reverse bool) *TaskPriorityQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskPriorityOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskPriorityOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskPriority.
func (tp *TaskPriorityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskPriorityPaginateOption,
) (*TaskPriorityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskPriorityPager(opts)
	if err != nil {
		return nil, err
	}

	if tp, err = pager.applyFilter(tp); err != nil {
		return nil, err
	}

	conn := &TaskPriorityConnection{Edges: []*TaskPriorityEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tp.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tp.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tp = pager.applyCursors(tp, after, before)
	tp = pager.applyOrder(tp, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tp = tp.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tp = tp.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tp.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskPriority
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskPriority {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskPriority {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskPriorityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskPriorityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskPriorityOrderField defines the ordering field of TaskPriority.
type TaskPriorityOrderField struct {
	field    string
	toCursor func(*TaskPriority) Cursor
}

// TaskPriorityOrder defines the ordering of TaskPriority.
type TaskPriorityOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *TaskPriorityOrderField `json:"field"`
}

// DefaultTaskPriorityOrder is the default ordering of TaskPriority.
var DefaultTaskPriorityOrder = &TaskPriorityOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskPriorityOrderField{
		field: taskpriority.FieldID,
		toCursor: func(tp *TaskPriority) Cursor {
			return Cursor{ID: tp.ID}
		},
	},
}

// ToEdge converts TaskPriority into TaskPriorityEdge.
func (tp *TaskPriority) ToEdge(order *TaskPriorityOrder) *TaskPriorityEdge {
	if order == nil {
		order = DefaultTaskPriorityOrder
	}
	return &TaskPriorityEdge{
		Node:   tp,
		Cursor: order.Field.toCursor(tp),
	}
}

// TaskSectionEdge is the edge representation of TaskSection.
type TaskSectionEdge struct {
	Node   *TaskSection `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// TaskSectionConnection is the connection containing edges to TaskSection.
type TaskSectionConnection struct {
	Edges      []*TaskSectionEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

// TaskSectionPaginateOption enables pagination customization.
type TaskSectionPaginateOption func(*taskSectionPager) error

// WithTaskSectionOrder configures pagination ordering.
func WithTaskSectionOrder(order *TaskSectionOrder) TaskSectionPaginateOption {
	if order == nil {
		order = DefaultTaskSectionOrder
	}
	o := *order
	return func(pager *taskSectionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskSectionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskSectionFilter configures pagination filter.
func WithTaskSectionFilter(filter func(*TaskSectionQuery) (*TaskSectionQuery, error)) TaskSectionPaginateOption {
	return func(pager *taskSectionPager) error {
		if filter == nil {
			return errors.New("TaskSectionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskSectionPager struct {
	order  *TaskSectionOrder
	filter func(*TaskSectionQuery) (*TaskSectionQuery, error)
}

func newTaskSectionPager(opts []TaskSectionPaginateOption) (*taskSectionPager, error) {
	pager := &taskSectionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskSectionOrder
	}
	return pager, nil
}

func (p *taskSectionPager) applyFilter(query *TaskSectionQuery) (*TaskSectionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskSectionPager) toCursor(ts *TaskSection) Cursor {
	return p.order.Field.toCursor(ts)
}

func (p *taskSectionPager) applyCursors(query *TaskSectionQuery, after, before *Cursor) *TaskSectionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskSectionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskSectionPager) applyOrder(query *TaskSectionQuery, reverse bool) *TaskSectionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskSectionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskSectionOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskSection.
func (ts *TaskSectionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskSectionPaginateOption,
) (*TaskSectionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskSectionPager(opts)
	if err != nil {
		return nil, err
	}

	if ts, err = pager.applyFilter(ts); err != nil {
		return nil, err
	}

	conn := &TaskSectionConnection{Edges: []*TaskSectionEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ts.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ts.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ts = pager.applyCursors(ts, after, before)
	ts = pager.applyOrder(ts, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ts = ts.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ts = ts.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ts.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskSection
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskSection {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskSection {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskSectionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskSectionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskSectionOrderField defines the ordering field of TaskSection.
type TaskSectionOrderField struct {
	field    string
	toCursor func(*TaskSection) Cursor
}

// TaskSectionOrder defines the ordering of TaskSection.
type TaskSectionOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *TaskSectionOrderField `json:"field"`
}

// DefaultTaskSectionOrder is the default ordering of TaskSection.
var DefaultTaskSectionOrder = &TaskSectionOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskSectionOrderField{
		field: tasksection.FieldID,
		toCursor: func(ts *TaskSection) Cursor {
			return Cursor{ID: ts.ID}
		},
	},
}

// ToEdge converts TaskSection into TaskSectionEdge.
func (ts *TaskSection) ToEdge(order *TaskSectionOrder) *TaskSectionEdge {
	if order == nil {
		order = DefaultTaskSectionOrder
	}
	return &TaskSectionEdge{
		Node:   ts,
		Cursor: order.Field.toCursor(ts),
	}
}

// TaskTagEdge is the edge representation of TaskTag.
type TaskTagEdge struct {
	Node   *TaskTag `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// TaskTagConnection is the connection containing edges to TaskTag.
type TaskTagConnection struct {
	Edges      []*TaskTagEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// TaskTagPaginateOption enables pagination customization.
type TaskTagPaginateOption func(*taskTagPager) error

// WithTaskTagOrder configures pagination ordering.
func WithTaskTagOrder(order *TaskTagOrder) TaskTagPaginateOption {
	if order == nil {
		order = DefaultTaskTagOrder
	}
	o := *order
	return func(pager *taskTagPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskTagOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskTagFilter configures pagination filter.
func WithTaskTagFilter(filter func(*TaskTagQuery) (*TaskTagQuery, error)) TaskTagPaginateOption {
	return func(pager *taskTagPager) error {
		if filter == nil {
			return errors.New("TaskTagQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskTagPager struct {
	order  *TaskTagOrder
	filter func(*TaskTagQuery) (*TaskTagQuery, error)
}

func newTaskTagPager(opts []TaskTagPaginateOption) (*taskTagPager, error) {
	pager := &taskTagPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskTagOrder
	}
	return pager, nil
}

func (p *taskTagPager) applyFilter(query *TaskTagQuery) (*TaskTagQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskTagPager) toCursor(tt *TaskTag) Cursor {
	return p.order.Field.toCursor(tt)
}

func (p *taskTagPager) applyCursors(query *TaskTagQuery, after, before *Cursor) *TaskTagQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskTagOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskTagPager) applyOrder(query *TaskTagQuery, reverse bool) *TaskTagQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskTagOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskTagOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TaskTag.
func (tt *TaskTagQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskTagPaginateOption,
) (*TaskTagConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskTagPager(opts)
	if err != nil {
		return nil, err
	}

	if tt, err = pager.applyFilter(tt); err != nil {
		return nil, err
	}

	conn := &TaskTagConnection{Edges: []*TaskTagEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tt = pager.applyCursors(tt, after, before)
	tt = pager.applyOrder(tt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tt = tt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TaskTag
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TaskTag {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TaskTag {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskTagEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskTagEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskTagOrderField defines the ordering field of TaskTag.
type TaskTagOrderField struct {
	field    string
	toCursor func(*TaskTag) Cursor
}

// TaskTagOrder defines the ordering of TaskTag.
type TaskTagOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *TaskTagOrderField `json:"field"`
}

// DefaultTaskTagOrder is the default ordering of TaskTag.
var DefaultTaskTagOrder = &TaskTagOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskTagOrderField{
		field: tasktag.FieldID,
		toCursor: func(tt *TaskTag) Cursor {
			return Cursor{ID: tt.ID}
		},
	},
}

// ToEdge converts TaskTag into TaskTagEdge.
func (tt *TaskTag) ToEdge(order *TaskTagOrder) *TaskTagEdge {
	if order == nil {
		order = DefaultTaskTagOrder
	}
	return &TaskTagEdge{
		Node:   tt,
		Cursor: order.Field.toCursor(tt),
	}
}

// TeammateEdge is the edge representation of Teammate.
type TeammateEdge struct {
	Node   *Teammate `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TeammateConnection is the connection containing edges to Teammate.
type TeammateConnection struct {
	Edges      []*TeammateEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TeammatePaginateOption enables pagination customization.
type TeammatePaginateOption func(*teammatePager) error

// WithTeammateOrder configures pagination ordering.
func WithTeammateOrder(order *TeammateOrder) TeammatePaginateOption {
	if order == nil {
		order = DefaultTeammateOrder
	}
	o := *order
	return func(pager *teammatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeammateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeammateFilter configures pagination filter.
func WithTeammateFilter(filter func(*TeammateQuery) (*TeammateQuery, error)) TeammatePaginateOption {
	return func(pager *teammatePager) error {
		if filter == nil {
			return errors.New("TeammateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammatePager struct {
	order  *TeammateOrder
	filter func(*TeammateQuery) (*TeammateQuery, error)
}

func newTeammatePager(opts []TeammatePaginateOption) (*teammatePager, error) {
	pager := &teammatePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeammateOrder
	}
	return pager, nil
}

func (p *teammatePager) applyFilter(query *TeammateQuery) (*TeammateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammatePager) toCursor(t *Teammate) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *teammatePager) applyCursors(query *TeammateQuery, after, before *Cursor) *TeammateQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeammateOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammatePager) applyOrder(query *TeammateQuery, reverse bool) *TeammateQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeammateOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeammateOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Teammate.
func (t *TeammateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeammatePaginateOption,
) (*TeammateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeammatePager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TeammateConnection{Edges: []*TeammateEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Teammate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Teammate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Teammate {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TeammateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TeammateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TeammateOrderField defines the ordering field of Teammate.
type TeammateOrderField struct {
	field    string
	toCursor func(*Teammate) Cursor
}

// TeammateOrder defines the ordering of Teammate.
type TeammateOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TeammateOrderField `json:"field"`
}

// DefaultTeammateOrder is the default ordering of Teammate.
var DefaultTeammateOrder = &TeammateOrder{
	Direction: OrderDirectionAsc,
	Field: &TeammateOrderField{
		field: teammate.FieldID,
		toCursor: func(t *Teammate) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Teammate into TeammateEdge.
func (t *Teammate) ToEdge(order *TeammateOrder) *TeammateEdge {
	if order == nil {
		order = DefaultTeammateOrder
	}
	return &TeammateEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TeammateTaskEdge is the edge representation of TeammateTask.
type TeammateTaskEdge struct {
	Node   *TeammateTask `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// TeammateTaskConnection is the connection containing edges to TeammateTask.
type TeammateTaskConnection struct {
	Edges      []*TeammateTaskEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

// TeammateTaskPaginateOption enables pagination customization.
type TeammateTaskPaginateOption func(*teammateTaskPager) error

// WithTeammateTaskOrder configures pagination ordering.
func WithTeammateTaskOrder(order *TeammateTaskOrder) TeammateTaskPaginateOption {
	if order == nil {
		order = DefaultTeammateTaskOrder
	}
	o := *order
	return func(pager *teammateTaskPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeammateTaskOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeammateTaskFilter configures pagination filter.
func WithTeammateTaskFilter(filter func(*TeammateTaskQuery) (*TeammateTaskQuery, error)) TeammateTaskPaginateOption {
	return func(pager *teammateTaskPager) error {
		if filter == nil {
			return errors.New("TeammateTaskQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammateTaskPager struct {
	order  *TeammateTaskOrder
	filter func(*TeammateTaskQuery) (*TeammateTaskQuery, error)
}

func newTeammateTaskPager(opts []TeammateTaskPaginateOption) (*teammateTaskPager, error) {
	pager := &teammateTaskPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeammateTaskOrder
	}
	return pager, nil
}

func (p *teammateTaskPager) applyFilter(query *TeammateTaskQuery) (*TeammateTaskQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammateTaskPager) toCursor(tt *TeammateTask) Cursor {
	return p.order.Field.toCursor(tt)
}

func (p *teammateTaskPager) applyCursors(query *TeammateTaskQuery, after, before *Cursor) *TeammateTaskQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeammateTaskOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammateTaskPager) applyOrder(query *TeammateTaskQuery, reverse bool) *TeammateTaskQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeammateTaskOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeammateTaskOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TeammateTask.
func (tt *TeammateTaskQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeammateTaskPaginateOption,
) (*TeammateTaskConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeammateTaskPager(opts)
	if err != nil {
		return nil, err
	}

	if tt, err = pager.applyFilter(tt); err != nil {
		return nil, err
	}

	conn := &TeammateTaskConnection{Edges: []*TeammateTaskEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tt = pager.applyCursors(tt, after, before)
	tt = pager.applyOrder(tt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tt = tt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TeammateTask
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TeammateTask {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TeammateTask {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TeammateTaskEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TeammateTaskEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TeammateTaskOrderField defines the ordering field of TeammateTask.
type TeammateTaskOrderField struct {
	field    string
	toCursor func(*TeammateTask) Cursor
}

// TeammateTaskOrder defines the ordering of TeammateTask.
type TeammateTaskOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *TeammateTaskOrderField `json:"field"`
}

// DefaultTeammateTaskOrder is the default ordering of TeammateTask.
var DefaultTeammateTaskOrder = &TeammateTaskOrder{
	Direction: OrderDirectionAsc,
	Field: &TeammateTaskOrderField{
		field: teammatetask.FieldID,
		toCursor: func(tt *TeammateTask) Cursor {
			return Cursor{ID: tt.ID}
		},
	},
}

// ToEdge converts TeammateTask into TeammateTaskEdge.
func (tt *TeammateTask) ToEdge(order *TeammateTaskOrder) *TeammateTaskEdge {
	if order == nil {
		order = DefaultTeammateTaskOrder
	}
	return &TeammateTaskEdge{
		Node:   tt,
		Cursor: order.Field.toCursor(tt),
	}
}

// TeammateTaskColumnEdge is the edge representation of TeammateTaskColumn.
type TeammateTaskColumnEdge struct {
	Node   *TeammateTaskColumn `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// TeammateTaskColumnConnection is the connection containing edges to TeammateTaskColumn.
type TeammateTaskColumnConnection struct {
	Edges      []*TeammateTaskColumnEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

// TeammateTaskColumnPaginateOption enables pagination customization.
type TeammateTaskColumnPaginateOption func(*teammateTaskColumnPager) error

// WithTeammateTaskColumnOrder configures pagination ordering.
func WithTeammateTaskColumnOrder(order *TeammateTaskColumnOrder) TeammateTaskColumnPaginateOption {
	if order == nil {
		order = DefaultTeammateTaskColumnOrder
	}
	o := *order
	return func(pager *teammateTaskColumnPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeammateTaskColumnOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeammateTaskColumnFilter configures pagination filter.
func WithTeammateTaskColumnFilter(filter func(*TeammateTaskColumnQuery) (*TeammateTaskColumnQuery, error)) TeammateTaskColumnPaginateOption {
	return func(pager *teammateTaskColumnPager) error {
		if filter == nil {
			return errors.New("TeammateTaskColumnQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammateTaskColumnPager struct {
	order  *TeammateTaskColumnOrder
	filter func(*TeammateTaskColumnQuery) (*TeammateTaskColumnQuery, error)
}

func newTeammateTaskColumnPager(opts []TeammateTaskColumnPaginateOption) (*teammateTaskColumnPager, error) {
	pager := &teammateTaskColumnPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeammateTaskColumnOrder
	}
	return pager, nil
}

func (p *teammateTaskColumnPager) applyFilter(query *TeammateTaskColumnQuery) (*TeammateTaskColumnQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammateTaskColumnPager) toCursor(ttc *TeammateTaskColumn) Cursor {
	return p.order.Field.toCursor(ttc)
}

func (p *teammateTaskColumnPager) applyCursors(query *TeammateTaskColumnQuery, after, before *Cursor) *TeammateTaskColumnQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeammateTaskColumnOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammateTaskColumnPager) applyOrder(query *TeammateTaskColumnQuery, reverse bool) *TeammateTaskColumnQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeammateTaskColumnOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeammateTaskColumnOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TeammateTaskColumn.
func (ttc *TeammateTaskColumnQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeammateTaskColumnPaginateOption,
) (*TeammateTaskColumnConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeammateTaskColumnPager(opts)
	if err != nil {
		return nil, err
	}

	if ttc, err = pager.applyFilter(ttc); err != nil {
		return nil, err
	}

	conn := &TeammateTaskColumnConnection{Edges: []*TeammateTaskColumnEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ttc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ttc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ttc = pager.applyCursors(ttc, after, before)
	ttc = pager.applyOrder(ttc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ttc = ttc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ttc = ttc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ttc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TeammateTaskColumn
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TeammateTaskColumn {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TeammateTaskColumn {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TeammateTaskColumnEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TeammateTaskColumnEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TeammateTaskColumnOrderField defines the ordering field of TeammateTaskColumn.
type TeammateTaskColumnOrderField struct {
	field    string
	toCursor func(*TeammateTaskColumn) Cursor
}

// TeammateTaskColumnOrder defines the ordering of TeammateTaskColumn.
type TeammateTaskColumnOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *TeammateTaskColumnOrderField `json:"field"`
}

// DefaultTeammateTaskColumnOrder is the default ordering of TeammateTaskColumn.
var DefaultTeammateTaskColumnOrder = &TeammateTaskColumnOrder{
	Direction: OrderDirectionAsc,
	Field: &TeammateTaskColumnOrderField{
		field: teammatetaskcolumn.FieldID,
		toCursor: func(ttc *TeammateTaskColumn) Cursor {
			return Cursor{ID: ttc.ID}
		},
	},
}

// ToEdge converts TeammateTaskColumn into TeammateTaskColumnEdge.
func (ttc *TeammateTaskColumn) ToEdge(order *TeammateTaskColumnOrder) *TeammateTaskColumnEdge {
	if order == nil {
		order = DefaultTeammateTaskColumnOrder
	}
	return &TeammateTaskColumnEdge{
		Node:   ttc,
		Cursor: order.Field.toCursor(ttc),
	}
}

// TeammateTaskListStatusEdge is the edge representation of TeammateTaskListStatus.
type TeammateTaskListStatusEdge struct {
	Node   *TeammateTaskListStatus `json:"node"`
	Cursor Cursor                  `json:"cursor"`
}

// TeammateTaskListStatusConnection is the connection containing edges to TeammateTaskListStatus.
type TeammateTaskListStatusConnection struct {
	Edges      []*TeammateTaskListStatusEdge `json:"edges"`
	PageInfo   PageInfo                      `json:"pageInfo"`
	TotalCount int                           `json:"totalCount"`
}

// TeammateTaskListStatusPaginateOption enables pagination customization.
type TeammateTaskListStatusPaginateOption func(*teammateTaskListStatusPager) error

// WithTeammateTaskListStatusOrder configures pagination ordering.
func WithTeammateTaskListStatusOrder(order *TeammateTaskListStatusOrder) TeammateTaskListStatusPaginateOption {
	if order == nil {
		order = DefaultTeammateTaskListStatusOrder
	}
	o := *order
	return func(pager *teammateTaskListStatusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeammateTaskListStatusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeammateTaskListStatusFilter configures pagination filter.
func WithTeammateTaskListStatusFilter(filter func(*TeammateTaskListStatusQuery) (*TeammateTaskListStatusQuery, error)) TeammateTaskListStatusPaginateOption {
	return func(pager *teammateTaskListStatusPager) error {
		if filter == nil {
			return errors.New("TeammateTaskListStatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammateTaskListStatusPager struct {
	order  *TeammateTaskListStatusOrder
	filter func(*TeammateTaskListStatusQuery) (*TeammateTaskListStatusQuery, error)
}

func newTeammateTaskListStatusPager(opts []TeammateTaskListStatusPaginateOption) (*teammateTaskListStatusPager, error) {
	pager := &teammateTaskListStatusPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeammateTaskListStatusOrder
	}
	return pager, nil
}

func (p *teammateTaskListStatusPager) applyFilter(query *TeammateTaskListStatusQuery) (*TeammateTaskListStatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammateTaskListStatusPager) toCursor(ttls *TeammateTaskListStatus) Cursor {
	return p.order.Field.toCursor(ttls)
}

func (p *teammateTaskListStatusPager) applyCursors(query *TeammateTaskListStatusQuery, after, before *Cursor) *TeammateTaskListStatusQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeammateTaskListStatusOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammateTaskListStatusPager) applyOrder(query *TeammateTaskListStatusQuery, reverse bool) *TeammateTaskListStatusQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeammateTaskListStatusOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeammateTaskListStatusOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TeammateTaskListStatus.
func (ttls *TeammateTaskListStatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeammateTaskListStatusPaginateOption,
) (*TeammateTaskListStatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeammateTaskListStatusPager(opts)
	if err != nil {
		return nil, err
	}

	if ttls, err = pager.applyFilter(ttls); err != nil {
		return nil, err
	}

	conn := &TeammateTaskListStatusConnection{Edges: []*TeammateTaskListStatusEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ttls.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ttls.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ttls = pager.applyCursors(ttls, after, before)
	ttls = pager.applyOrder(ttls, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ttls = ttls.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ttls = ttls.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ttls.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TeammateTaskListStatus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TeammateTaskListStatus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TeammateTaskListStatus {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TeammateTaskListStatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TeammateTaskListStatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TeammateTaskListStatusOrderField defines the ordering field of TeammateTaskListStatus.
type TeammateTaskListStatusOrderField struct {
	field    string
	toCursor func(*TeammateTaskListStatus) Cursor
}

// TeammateTaskListStatusOrder defines the ordering of TeammateTaskListStatus.
type TeammateTaskListStatusOrder struct {
	Direction OrderDirection                    `json:"direction"`
	Field     *TeammateTaskListStatusOrderField `json:"field"`
}

// DefaultTeammateTaskListStatusOrder is the default ordering of TeammateTaskListStatus.
var DefaultTeammateTaskListStatusOrder = &TeammateTaskListStatusOrder{
	Direction: OrderDirectionAsc,
	Field: &TeammateTaskListStatusOrderField{
		field: teammatetaskliststatus.FieldID,
		toCursor: func(ttls *TeammateTaskListStatus) Cursor {
			return Cursor{ID: ttls.ID}
		},
	},
}

// ToEdge converts TeammateTaskListStatus into TeammateTaskListStatusEdge.
func (ttls *TeammateTaskListStatus) ToEdge(order *TeammateTaskListStatusOrder) *TeammateTaskListStatusEdge {
	if order == nil {
		order = DefaultTeammateTaskListStatusOrder
	}
	return &TeammateTaskListStatusEdge{
		Node:   ttls,
		Cursor: order.Field.toCursor(ttls),
	}
}

// TeammateTaskSectionEdge is the edge representation of TeammateTaskSection.
type TeammateTaskSectionEdge struct {
	Node   *TeammateTaskSection `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// TeammateTaskSectionConnection is the connection containing edges to TeammateTaskSection.
type TeammateTaskSectionConnection struct {
	Edges      []*TeammateTaskSectionEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

// TeammateTaskSectionPaginateOption enables pagination customization.
type TeammateTaskSectionPaginateOption func(*teammateTaskSectionPager) error

// WithTeammateTaskSectionOrder configures pagination ordering.
func WithTeammateTaskSectionOrder(order *TeammateTaskSectionOrder) TeammateTaskSectionPaginateOption {
	if order == nil {
		order = DefaultTeammateTaskSectionOrder
	}
	o := *order
	return func(pager *teammateTaskSectionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeammateTaskSectionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeammateTaskSectionFilter configures pagination filter.
func WithTeammateTaskSectionFilter(filter func(*TeammateTaskSectionQuery) (*TeammateTaskSectionQuery, error)) TeammateTaskSectionPaginateOption {
	return func(pager *teammateTaskSectionPager) error {
		if filter == nil {
			return errors.New("TeammateTaskSectionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammateTaskSectionPager struct {
	order  *TeammateTaskSectionOrder
	filter func(*TeammateTaskSectionQuery) (*TeammateTaskSectionQuery, error)
}

func newTeammateTaskSectionPager(opts []TeammateTaskSectionPaginateOption) (*teammateTaskSectionPager, error) {
	pager := &teammateTaskSectionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeammateTaskSectionOrder
	}
	return pager, nil
}

func (p *teammateTaskSectionPager) applyFilter(query *TeammateTaskSectionQuery) (*TeammateTaskSectionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammateTaskSectionPager) toCursor(tts *TeammateTaskSection) Cursor {
	return p.order.Field.toCursor(tts)
}

func (p *teammateTaskSectionPager) applyCursors(query *TeammateTaskSectionQuery, after, before *Cursor) *TeammateTaskSectionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeammateTaskSectionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammateTaskSectionPager) applyOrder(query *TeammateTaskSectionQuery, reverse bool) *TeammateTaskSectionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeammateTaskSectionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeammateTaskSectionOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TeammateTaskSection.
func (tts *TeammateTaskSectionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeammateTaskSectionPaginateOption,
) (*TeammateTaskSectionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeammateTaskSectionPager(opts)
	if err != nil {
		return nil, err
	}

	if tts, err = pager.applyFilter(tts); err != nil {
		return nil, err
	}

	conn := &TeammateTaskSectionConnection{Edges: []*TeammateTaskSectionEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tts.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tts.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tts = pager.applyCursors(tts, after, before)
	tts = pager.applyOrder(tts, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tts = tts.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tts = tts.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tts.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TeammateTaskSection
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TeammateTaskSection {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TeammateTaskSection {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TeammateTaskSectionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TeammateTaskSectionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TeammateTaskSectionOrderField defines the ordering field of TeammateTaskSection.
type TeammateTaskSectionOrderField struct {
	field    string
	toCursor func(*TeammateTaskSection) Cursor
}

// TeammateTaskSectionOrder defines the ordering of TeammateTaskSection.
type TeammateTaskSectionOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *TeammateTaskSectionOrderField `json:"field"`
}

// DefaultTeammateTaskSectionOrder is the default ordering of TeammateTaskSection.
var DefaultTeammateTaskSectionOrder = &TeammateTaskSectionOrder{
	Direction: OrderDirectionAsc,
	Field: &TeammateTaskSectionOrderField{
		field: teammatetasksection.FieldID,
		toCursor: func(tts *TeammateTaskSection) Cursor {
			return Cursor{ID: tts.ID}
		},
	},
}

// ToEdge converts TeammateTaskSection into TeammateTaskSectionEdge.
func (tts *TeammateTaskSection) ToEdge(order *TeammateTaskSectionOrder) *TeammateTaskSectionEdge {
	if order == nil {
		order = DefaultTeammateTaskSectionOrder
	}
	return &TeammateTaskSectionEdge{
		Node:   tts,
		Cursor: order.Field.toCursor(tts),
	}
}

// TeammateTaskTabStatusEdge is the edge representation of TeammateTaskTabStatus.
type TeammateTaskTabStatusEdge struct {
	Node   *TeammateTaskTabStatus `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// TeammateTaskTabStatusConnection is the connection containing edges to TeammateTaskTabStatus.
type TeammateTaskTabStatusConnection struct {
	Edges      []*TeammateTaskTabStatusEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

// TeammateTaskTabStatusPaginateOption enables pagination customization.
type TeammateTaskTabStatusPaginateOption func(*teammateTaskTabStatusPager) error

// WithTeammateTaskTabStatusOrder configures pagination ordering.
func WithTeammateTaskTabStatusOrder(order *TeammateTaskTabStatusOrder) TeammateTaskTabStatusPaginateOption {
	if order == nil {
		order = DefaultTeammateTaskTabStatusOrder
	}
	o := *order
	return func(pager *teammateTaskTabStatusPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeammateTaskTabStatusOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeammateTaskTabStatusFilter configures pagination filter.
func WithTeammateTaskTabStatusFilter(filter func(*TeammateTaskTabStatusQuery) (*TeammateTaskTabStatusQuery, error)) TeammateTaskTabStatusPaginateOption {
	return func(pager *teammateTaskTabStatusPager) error {
		if filter == nil {
			return errors.New("TeammateTaskTabStatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammateTaskTabStatusPager struct {
	order  *TeammateTaskTabStatusOrder
	filter func(*TeammateTaskTabStatusQuery) (*TeammateTaskTabStatusQuery, error)
}

func newTeammateTaskTabStatusPager(opts []TeammateTaskTabStatusPaginateOption) (*teammateTaskTabStatusPager, error) {
	pager := &teammateTaskTabStatusPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeammateTaskTabStatusOrder
	}
	return pager, nil
}

func (p *teammateTaskTabStatusPager) applyFilter(query *TeammateTaskTabStatusQuery) (*TeammateTaskTabStatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammateTaskTabStatusPager) toCursor(ttts *TeammateTaskTabStatus) Cursor {
	return p.order.Field.toCursor(ttts)
}

func (p *teammateTaskTabStatusPager) applyCursors(query *TeammateTaskTabStatusQuery, after, before *Cursor) *TeammateTaskTabStatusQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeammateTaskTabStatusOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammateTaskTabStatusPager) applyOrder(query *TeammateTaskTabStatusQuery, reverse bool) *TeammateTaskTabStatusQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeammateTaskTabStatusOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeammateTaskTabStatusOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TeammateTaskTabStatus.
func (ttts *TeammateTaskTabStatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeammateTaskTabStatusPaginateOption,
) (*TeammateTaskTabStatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeammateTaskTabStatusPager(opts)
	if err != nil {
		return nil, err
	}

	if ttts, err = pager.applyFilter(ttts); err != nil {
		return nil, err
	}

	conn := &TeammateTaskTabStatusConnection{Edges: []*TeammateTaskTabStatusEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ttts.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ttts.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ttts = pager.applyCursors(ttts, after, before)
	ttts = pager.applyOrder(ttts, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ttts = ttts.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ttts = ttts.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ttts.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TeammateTaskTabStatus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TeammateTaskTabStatus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TeammateTaskTabStatus {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TeammateTaskTabStatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TeammateTaskTabStatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TeammateTaskTabStatusOrderField defines the ordering field of TeammateTaskTabStatus.
type TeammateTaskTabStatusOrderField struct {
	field    string
	toCursor func(*TeammateTaskTabStatus) Cursor
}

// TeammateTaskTabStatusOrder defines the ordering of TeammateTaskTabStatus.
type TeammateTaskTabStatusOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *TeammateTaskTabStatusOrderField `json:"field"`
}

// DefaultTeammateTaskTabStatusOrder is the default ordering of TeammateTaskTabStatus.
var DefaultTeammateTaskTabStatusOrder = &TeammateTaskTabStatusOrder{
	Direction: OrderDirectionAsc,
	Field: &TeammateTaskTabStatusOrderField{
		field: teammatetasktabstatus.FieldID,
		toCursor: func(ttts *TeammateTaskTabStatus) Cursor {
			return Cursor{ID: ttts.ID}
		},
	},
}

// ToEdge converts TeammateTaskTabStatus into TeammateTaskTabStatusEdge.
func (ttts *TeammateTaskTabStatus) ToEdge(order *TeammateTaskTabStatusOrder) *TeammateTaskTabStatusEdge {
	if order == nil {
		order = DefaultTeammateTaskTabStatusOrder
	}
	return &TeammateTaskTabStatusEdge{
		Node:   ttts,
		Cursor: order.Field.toCursor(ttts),
	}
}

// TestTodoEdge is the edge representation of TestTodo.
type TestTodoEdge struct {
	Node   *TestTodo `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TestTodoConnection is the connection containing edges to TestTodo.
type TestTodoConnection struct {
	Edges      []*TestTodoEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TestTodoPaginateOption enables pagination customization.
type TestTodoPaginateOption func(*testTodoPager) error

// WithTestTodoOrder configures pagination ordering.
func WithTestTodoOrder(order *TestTodoOrder) TestTodoPaginateOption {
	if order == nil {
		order = DefaultTestTodoOrder
	}
	o := *order
	return func(pager *testTodoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTestTodoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTestTodoFilter configures pagination filter.
func WithTestTodoFilter(filter func(*TestTodoQuery) (*TestTodoQuery, error)) TestTodoPaginateOption {
	return func(pager *testTodoPager) error {
		if filter == nil {
			return errors.New("TestTodoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type testTodoPager struct {
	order  *TestTodoOrder
	filter func(*TestTodoQuery) (*TestTodoQuery, error)
}

func newTestTodoPager(opts []TestTodoPaginateOption) (*testTodoPager, error) {
	pager := &testTodoPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTestTodoOrder
	}
	return pager, nil
}

func (p *testTodoPager) applyFilter(query *TestTodoQuery) (*TestTodoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *testTodoPager) toCursor(tt *TestTodo) Cursor {
	return p.order.Field.toCursor(tt)
}

func (p *testTodoPager) applyCursors(query *TestTodoQuery, after, before *Cursor) *TestTodoQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTestTodoOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *testTodoPager) applyOrder(query *TestTodoQuery, reverse bool) *TestTodoQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTestTodoOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTestTodoOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TestTodo.
func (tt *TestTodoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TestTodoPaginateOption,
) (*TestTodoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTestTodoPager(opts)
	if err != nil {
		return nil, err
	}

	if tt, err = pager.applyFilter(tt); err != nil {
		return nil, err
	}

	conn := &TestTodoConnection{Edges: []*TestTodoEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tt = pager.applyCursors(tt, after, before)
	tt = pager.applyOrder(tt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tt = tt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TestTodo
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TestTodo {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TestTodo {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TestTodoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TestTodoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TestTodoOrderField defines the ordering field of TestTodo.
type TestTodoOrderField struct {
	field    string
	toCursor func(*TestTodo) Cursor
}

// TestTodoOrder defines the ordering of TestTodo.
type TestTodoOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TestTodoOrderField `json:"field"`
}

// DefaultTestTodoOrder is the default ordering of TestTodo.
var DefaultTestTodoOrder = &TestTodoOrder{
	Direction: OrderDirectionAsc,
	Field: &TestTodoOrderField{
		field: testtodo.FieldID,
		toCursor: func(tt *TestTodo) Cursor {
			return Cursor{ID: tt.ID}
		},
	},
}

// ToEdge converts TestTodo into TestTodoEdge.
func (tt *TestTodo) ToEdge(order *TestTodoOrder) *TestTodoEdge {
	if order == nil {
		order = DefaultTestTodoOrder
	}
	return &TestTodoEdge{
		Node:   tt,
		Cursor: order.Field.toCursor(tt),
	}
}

// TestUserEdge is the edge representation of TestUser.
type TestUserEdge struct {
	Node   *TestUser `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TestUserConnection is the connection containing edges to TestUser.
type TestUserConnection struct {
	Edges      []*TestUserEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TestUserPaginateOption enables pagination customization.
type TestUserPaginateOption func(*testUserPager) error

// WithTestUserOrder configures pagination ordering.
func WithTestUserOrder(order *TestUserOrder) TestUserPaginateOption {
	if order == nil {
		order = DefaultTestUserOrder
	}
	o := *order
	return func(pager *testUserPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTestUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTestUserFilter configures pagination filter.
func WithTestUserFilter(filter func(*TestUserQuery) (*TestUserQuery, error)) TestUserPaginateOption {
	return func(pager *testUserPager) error {
		if filter == nil {
			return errors.New("TestUserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type testUserPager struct {
	order  *TestUserOrder
	filter func(*TestUserQuery) (*TestUserQuery, error)
}

func newTestUserPager(opts []TestUserPaginateOption) (*testUserPager, error) {
	pager := &testUserPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTestUserOrder
	}
	return pager, nil
}

func (p *testUserPager) applyFilter(query *TestUserQuery) (*TestUserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *testUserPager) toCursor(tu *TestUser) Cursor {
	return p.order.Field.toCursor(tu)
}

func (p *testUserPager) applyCursors(query *TestUserQuery, after, before *Cursor) *TestUserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTestUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *testUserPager) applyOrder(query *TestUserQuery, reverse bool) *TestUserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTestUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTestUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TestUser.
func (tu *TestUserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TestUserPaginateOption,
) (*TestUserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTestUserPager(opts)
	if err != nil {
		return nil, err
	}

	if tu, err = pager.applyFilter(tu); err != nil {
		return nil, err
	}

	conn := &TestUserConnection{Edges: []*TestUserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tu.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tu.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tu = pager.applyCursors(tu, after, before)
	tu = pager.applyOrder(tu, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tu = tu.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tu = tu.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tu.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TestUser
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TestUser {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TestUser {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TestUserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TestUserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TestUserOrderField defines the ordering field of TestUser.
type TestUserOrderField struct {
	field    string
	toCursor func(*TestUser) Cursor
}

// TestUserOrder defines the ordering of TestUser.
type TestUserOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TestUserOrderField `json:"field"`
}

// DefaultTestUserOrder is the default ordering of TestUser.
var DefaultTestUserOrder = &TestUserOrder{
	Direction: OrderDirectionAsc,
	Field: &TestUserOrderField{
		field: testuser.FieldID,
		toCursor: func(tu *TestUser) Cursor {
			return Cursor{ID: tu.ID}
		},
	},
}

// ToEdge converts TestUser into TestUserEdge.
func (tu *TestUser) ToEdge(order *TestUserOrder) *TestUserEdge {
	if order == nil {
		order = DefaultTestUserOrder
	}
	return &TestUserEdge{
		Node:   tu,
		Cursor: order.Field.toCursor(tu),
	}
}

// WorkspaceEdge is the edge representation of Workspace.
type WorkspaceEdge struct {
	Node   *Workspace `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// WorkspaceConnection is the connection containing edges to Workspace.
type WorkspaceConnection struct {
	Edges      []*WorkspaceEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

// WorkspacePaginateOption enables pagination customization.
type WorkspacePaginateOption func(*workspacePager) error

// WithWorkspaceOrder configures pagination ordering.
func WithWorkspaceOrder(order *WorkspaceOrder) WorkspacePaginateOption {
	if order == nil {
		order = DefaultWorkspaceOrder
	}
	o := *order
	return func(pager *workspacePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkspaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkspaceFilter configures pagination filter.
func WithWorkspaceFilter(filter func(*WorkspaceQuery) (*WorkspaceQuery, error)) WorkspacePaginateOption {
	return func(pager *workspacePager) error {
		if filter == nil {
			return errors.New("WorkspaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workspacePager struct {
	order  *WorkspaceOrder
	filter func(*WorkspaceQuery) (*WorkspaceQuery, error)
}

func newWorkspacePager(opts []WorkspacePaginateOption) (*workspacePager, error) {
	pager := &workspacePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkspaceOrder
	}
	return pager, nil
}

func (p *workspacePager) applyFilter(query *WorkspaceQuery) (*WorkspaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workspacePager) toCursor(w *Workspace) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *workspacePager) applyCursors(query *WorkspaceQuery, after, before *Cursor) *WorkspaceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkspaceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workspacePager) applyOrder(query *WorkspaceQuery, reverse bool) *WorkspaceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkspaceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkspaceOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Workspace.
func (w *WorkspaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkspacePaginateOption,
) (*WorkspaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkspacePager(opts)
	if err != nil {
		return nil, err
	}

	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}

	conn := &WorkspaceConnection{Edges: []*WorkspaceEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := w.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := w.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	w = pager.applyCursors(w, after, before)
	w = pager.applyOrder(w, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		w = w.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := w.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Workspace
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Workspace {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Workspace {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkspaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkspaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkspaceOrderField defines the ordering field of Workspace.
type WorkspaceOrderField struct {
	field    string
	toCursor func(*Workspace) Cursor
}

// WorkspaceOrder defines the ordering of Workspace.
type WorkspaceOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *WorkspaceOrderField `json:"field"`
}

// DefaultWorkspaceOrder is the default ordering of Workspace.
var DefaultWorkspaceOrder = &WorkspaceOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkspaceOrderField{
		field: workspace.FieldID,
		toCursor: func(w *Workspace) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}

// ToEdge converts Workspace into WorkspaceEdge.
func (w *Workspace) ToEdge(order *WorkspaceOrder) *WorkspaceEdge {
	if order == nil {
		order = DefaultWorkspaceOrder
	}
	return &WorkspaceEdge{
		Node:   w,
		Cursor: order.Field.toCursor(w),
	}
}

// WorkspaceTeammateEdge is the edge representation of WorkspaceTeammate.
type WorkspaceTeammateEdge struct {
	Node   *WorkspaceTeammate `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// WorkspaceTeammateConnection is the connection containing edges to WorkspaceTeammate.
type WorkspaceTeammateConnection struct {
	Edges      []*WorkspaceTeammateEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

// WorkspaceTeammatePaginateOption enables pagination customization.
type WorkspaceTeammatePaginateOption func(*workspaceTeammatePager) error

// WithWorkspaceTeammateOrder configures pagination ordering.
func WithWorkspaceTeammateOrder(order *WorkspaceTeammateOrder) WorkspaceTeammatePaginateOption {
	if order == nil {
		order = DefaultWorkspaceTeammateOrder
	}
	o := *order
	return func(pager *workspaceTeammatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkspaceTeammateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkspaceTeammateFilter configures pagination filter.
func WithWorkspaceTeammateFilter(filter func(*WorkspaceTeammateQuery) (*WorkspaceTeammateQuery, error)) WorkspaceTeammatePaginateOption {
	return func(pager *workspaceTeammatePager) error {
		if filter == nil {
			return errors.New("WorkspaceTeammateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workspaceTeammatePager struct {
	order  *WorkspaceTeammateOrder
	filter func(*WorkspaceTeammateQuery) (*WorkspaceTeammateQuery, error)
}

func newWorkspaceTeammatePager(opts []WorkspaceTeammatePaginateOption) (*workspaceTeammatePager, error) {
	pager := &workspaceTeammatePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkspaceTeammateOrder
	}
	return pager, nil
}

func (p *workspaceTeammatePager) applyFilter(query *WorkspaceTeammateQuery) (*WorkspaceTeammateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workspaceTeammatePager) toCursor(wt *WorkspaceTeammate) Cursor {
	return p.order.Field.toCursor(wt)
}

func (p *workspaceTeammatePager) applyCursors(query *WorkspaceTeammateQuery, after, before *Cursor) *WorkspaceTeammateQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkspaceTeammateOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workspaceTeammatePager) applyOrder(query *WorkspaceTeammateQuery, reverse bool) *WorkspaceTeammateQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkspaceTeammateOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkspaceTeammateOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to WorkspaceTeammate.
func (wt *WorkspaceTeammateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkspaceTeammatePaginateOption,
) (*WorkspaceTeammateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkspaceTeammatePager(opts)
	if err != nil {
		return nil, err
	}

	if wt, err = pager.applyFilter(wt); err != nil {
		return nil, err
	}

	conn := &WorkspaceTeammateConnection{Edges: []*WorkspaceTeammateEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := wt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := wt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	wt = pager.applyCursors(wt, after, before)
	wt = pager.applyOrder(wt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		wt = wt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		wt = wt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := wt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *WorkspaceTeammate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *WorkspaceTeammate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *WorkspaceTeammate {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkspaceTeammateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkspaceTeammateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkspaceTeammateOrderField defines the ordering field of WorkspaceTeammate.
type WorkspaceTeammateOrderField struct {
	field    string
	toCursor func(*WorkspaceTeammate) Cursor
}

// WorkspaceTeammateOrder defines the ordering of WorkspaceTeammate.
type WorkspaceTeammateOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *WorkspaceTeammateOrderField `json:"field"`
}

// DefaultWorkspaceTeammateOrder is the default ordering of WorkspaceTeammate.
var DefaultWorkspaceTeammateOrder = &WorkspaceTeammateOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkspaceTeammateOrderField{
		field: workspaceteammate.FieldID,
		toCursor: func(wt *WorkspaceTeammate) Cursor {
			return Cursor{ID: wt.ID}
		},
	},
}

// ToEdge converts WorkspaceTeammate into WorkspaceTeammateEdge.
func (wt *WorkspaceTeammate) ToEdge(order *WorkspaceTeammateOrder) *WorkspaceTeammateEdge {
	if order == nil {
		order = DefaultWorkspaceTeammateOrder
	}
	return &WorkspaceTeammateEdge{
		Node:   wt,
		Cursor: order.Field.toCursor(wt),
	}
}
