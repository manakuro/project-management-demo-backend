// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    ulid.ID `msgpack:"i"`
	Value Value   `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// ColorEdge is the edge representation of Color.
type ColorEdge struct {
	Node   *Color `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ColorConnection is the connection containing edges to Color.
type ColorConnection struct {
	Edges      []*ColorEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// ColorPaginateOption enables pagination customization.
type ColorPaginateOption func(*colorPager) error

// WithColorOrder configures pagination ordering.
func WithColorOrder(order *ColorOrder) ColorPaginateOption {
	if order == nil {
		order = DefaultColorOrder
	}
	o := *order
	return func(pager *colorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultColorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithColorFilter configures pagination filter.
func WithColorFilter(filter func(*ColorQuery) (*ColorQuery, error)) ColorPaginateOption {
	return func(pager *colorPager) error {
		if filter == nil {
			return errors.New("ColorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type colorPager struct {
	order  *ColorOrder
	filter func(*ColorQuery) (*ColorQuery, error)
}

func newColorPager(opts []ColorPaginateOption) (*colorPager, error) {
	pager := &colorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultColorOrder
	}
	return pager, nil
}

func (p *colorPager) applyFilter(query *ColorQuery) (*ColorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *colorPager) toCursor(c *Color) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *colorPager) applyCursors(query *ColorQuery, after, before *Cursor) *ColorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultColorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *colorPager) applyOrder(query *ColorQuery, reverse bool) *ColorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultColorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultColorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Color.
func (c *ColorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ColorPaginateOption,
) (*ColorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newColorPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}

	conn := &ColorConnection{Edges: []*ColorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := c.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		c = c.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Color
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Color {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Color {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ColorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ColorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ColorOrderField defines the ordering field of Color.
type ColorOrderField struct {
	field    string
	toCursor func(*Color) Cursor
}

// ColorOrder defines the ordering of Color.
type ColorOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ColorOrderField `json:"field"`
}

// DefaultColorOrder is the default ordering of Color.
var DefaultColorOrder = &ColorOrder{
	Direction: OrderDirectionAsc,
	Field: &ColorOrderField{
		field: color.FieldID,
		toCursor: func(c *Color) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Color into ColorEdge.
func (c *Color) ToEdge(order *ColorOrder) *ColorEdge {
	if order == nil {
		order = DefaultColorOrder
	}
	return &ColorEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// IconEdge is the edge representation of Icon.
type IconEdge struct {
	Node   *Icon  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// IconConnection is the connection containing edges to Icon.
type IconConnection struct {
	Edges      []*IconEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// IconPaginateOption enables pagination customization.
type IconPaginateOption func(*iconPager) error

// WithIconOrder configures pagination ordering.
func WithIconOrder(order *IconOrder) IconPaginateOption {
	if order == nil {
		order = DefaultIconOrder
	}
	o := *order
	return func(pager *iconPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultIconOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithIconFilter configures pagination filter.
func WithIconFilter(filter func(*IconQuery) (*IconQuery, error)) IconPaginateOption {
	return func(pager *iconPager) error {
		if filter == nil {
			return errors.New("IconQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type iconPager struct {
	order  *IconOrder
	filter func(*IconQuery) (*IconQuery, error)
}

func newIconPager(opts []IconPaginateOption) (*iconPager, error) {
	pager := &iconPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultIconOrder
	}
	return pager, nil
}

func (p *iconPager) applyFilter(query *IconQuery) (*IconQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *iconPager) toCursor(i *Icon) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *iconPager) applyCursors(query *IconQuery, after, before *Cursor) *IconQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultIconOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *iconPager) applyOrder(query *IconQuery, reverse bool) *IconQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultIconOrder.Field {
		query = query.Order(direction.orderFunc(DefaultIconOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Icon.
func (i *IconQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...IconPaginateOption,
) (*IconConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newIconPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &IconConnection{Edges: []*IconEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Icon
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Icon {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Icon {
			return nodes[i]
		}
	}

	conn.Edges = make([]*IconEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &IconEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// IconOrderField defines the ordering field of Icon.
type IconOrderField struct {
	field    string
	toCursor func(*Icon) Cursor
}

// IconOrder defines the ordering of Icon.
type IconOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *IconOrderField `json:"field"`
}

// DefaultIconOrder is the default ordering of Icon.
var DefaultIconOrder = &IconOrder{
	Direction: OrderDirectionAsc,
	Field: &IconOrderField{
		field: icon.FieldID,
		toCursor: func(i *Icon) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Icon into IconEdge.
func (i *Icon) ToEdge(order *IconOrder) *IconEdge {
	if order == nil {
		order = DefaultIconOrder
	}
	return &IconEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// ProjectEdge is the edge representation of Project.
type ProjectEdge struct {
	Node   *Project `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProjectConnection is the connection containing edges to Project.
type ProjectConnection struct {
	Edges      []*ProjectEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// ProjectPaginateOption enables pagination customization.
type ProjectPaginateOption func(*projectPager) error

// WithProjectOrder configures pagination ordering.
func WithProjectOrder(order *ProjectOrder) ProjectPaginateOption {
	if order == nil {
		order = DefaultProjectOrder
	}
	o := *order
	return func(pager *projectPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectFilter configures pagination filter.
func WithProjectFilter(filter func(*ProjectQuery) (*ProjectQuery, error)) ProjectPaginateOption {
	return func(pager *projectPager) error {
		if filter == nil {
			return errors.New("ProjectQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectPager struct {
	order  *ProjectOrder
	filter func(*ProjectQuery) (*ProjectQuery, error)
}

func newProjectPager(opts []ProjectPaginateOption) (*projectPager, error) {
	pager := &projectPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectOrder
	}
	return pager, nil
}

func (p *projectPager) applyFilter(query *ProjectQuery) (*ProjectQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectPager) toCursor(pr *Project) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *projectPager) applyCursors(query *ProjectQuery, after, before *Cursor) *ProjectQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectPager) applyOrder(query *ProjectQuery, reverse bool) *ProjectQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Project.
func (pr *ProjectQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectPaginateOption,
) (*ProjectConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectPager(opts)
	if err != nil {
		return nil, err
	}

	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}

	conn := &ProjectConnection{Edges: []*ProjectEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pr.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pr.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pr = pager.applyCursors(pr, after, before)
	pr = pager.applyOrder(pr, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pr = pr.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pr.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Project
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Project {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Project {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectOrderField defines the ordering field of Project.
type ProjectOrderField struct {
	field    string
	toCursor func(*Project) Cursor
}

// ProjectOrder defines the ordering of Project.
type ProjectOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProjectOrderField `json:"field"`
}

// DefaultProjectOrder is the default ordering of Project.
var DefaultProjectOrder = &ProjectOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectOrderField{
		field: project.FieldID,
		toCursor: func(pr *Project) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Project into ProjectEdge.
func (pr *Project) ToEdge(order *ProjectOrder) *ProjectEdge {
	if order == nil {
		order = DefaultProjectOrder
	}
	return &ProjectEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// ProjectBaseColorEdge is the edge representation of ProjectBaseColor.
type ProjectBaseColorEdge struct {
	Node   *ProjectBaseColor `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// ProjectBaseColorConnection is the connection containing edges to ProjectBaseColor.
type ProjectBaseColorConnection struct {
	Edges      []*ProjectBaseColorEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

// ProjectBaseColorPaginateOption enables pagination customization.
type ProjectBaseColorPaginateOption func(*projectBaseColorPager) error

// WithProjectBaseColorOrder configures pagination ordering.
func WithProjectBaseColorOrder(order *ProjectBaseColorOrder) ProjectBaseColorPaginateOption {
	if order == nil {
		order = DefaultProjectBaseColorOrder
	}
	o := *order
	return func(pager *projectBaseColorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectBaseColorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectBaseColorFilter configures pagination filter.
func WithProjectBaseColorFilter(filter func(*ProjectBaseColorQuery) (*ProjectBaseColorQuery, error)) ProjectBaseColorPaginateOption {
	return func(pager *projectBaseColorPager) error {
		if filter == nil {
			return errors.New("ProjectBaseColorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectBaseColorPager struct {
	order  *ProjectBaseColorOrder
	filter func(*ProjectBaseColorQuery) (*ProjectBaseColorQuery, error)
}

func newProjectBaseColorPager(opts []ProjectBaseColorPaginateOption) (*projectBaseColorPager, error) {
	pager := &projectBaseColorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectBaseColorOrder
	}
	return pager, nil
}

func (p *projectBaseColorPager) applyFilter(query *ProjectBaseColorQuery) (*ProjectBaseColorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectBaseColorPager) toCursor(pbc *ProjectBaseColor) Cursor {
	return p.order.Field.toCursor(pbc)
}

func (p *projectBaseColorPager) applyCursors(query *ProjectBaseColorQuery, after, before *Cursor) *ProjectBaseColorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectBaseColorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectBaseColorPager) applyOrder(query *ProjectBaseColorQuery, reverse bool) *ProjectBaseColorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectBaseColorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectBaseColorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectBaseColor.
func (pbc *ProjectBaseColorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectBaseColorPaginateOption,
) (*ProjectBaseColorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectBaseColorPager(opts)
	if err != nil {
		return nil, err
	}

	if pbc, err = pager.applyFilter(pbc); err != nil {
		return nil, err
	}

	conn := &ProjectBaseColorConnection{Edges: []*ProjectBaseColorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pbc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pbc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pbc = pager.applyCursors(pbc, after, before)
	pbc = pager.applyOrder(pbc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pbc = pbc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pbc = pbc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pbc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectBaseColor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectBaseColor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectBaseColor {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectBaseColorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectBaseColorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectBaseColorOrderField defines the ordering field of ProjectBaseColor.
type ProjectBaseColorOrderField struct {
	field    string
	toCursor func(*ProjectBaseColor) Cursor
}

// ProjectBaseColorOrder defines the ordering of ProjectBaseColor.
type ProjectBaseColorOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *ProjectBaseColorOrderField `json:"field"`
}

// DefaultProjectBaseColorOrder is the default ordering of ProjectBaseColor.
var DefaultProjectBaseColorOrder = &ProjectBaseColorOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectBaseColorOrderField{
		field: projectbasecolor.FieldID,
		toCursor: func(pbc *ProjectBaseColor) Cursor {
			return Cursor{ID: pbc.ID}
		},
	},
}

// ToEdge converts ProjectBaseColor into ProjectBaseColorEdge.
func (pbc *ProjectBaseColor) ToEdge(order *ProjectBaseColorOrder) *ProjectBaseColorEdge {
	if order == nil {
		order = DefaultProjectBaseColorOrder
	}
	return &ProjectBaseColorEdge{
		Node:   pbc,
		Cursor: order.Field.toCursor(pbc),
	}
}

// ProjectTeammateEdge is the edge representation of ProjectTeammate.
type ProjectTeammateEdge struct {
	Node   *ProjectTeammate `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// ProjectTeammateConnection is the connection containing edges to ProjectTeammate.
type ProjectTeammateConnection struct {
	Edges      []*ProjectTeammateEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

// ProjectTeammatePaginateOption enables pagination customization.
type ProjectTeammatePaginateOption func(*projectTeammatePager) error

// WithProjectTeammateOrder configures pagination ordering.
func WithProjectTeammateOrder(order *ProjectTeammateOrder) ProjectTeammatePaginateOption {
	if order == nil {
		order = DefaultProjectTeammateOrder
	}
	o := *order
	return func(pager *projectTeammatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProjectTeammateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProjectTeammateFilter configures pagination filter.
func WithProjectTeammateFilter(filter func(*ProjectTeammateQuery) (*ProjectTeammateQuery, error)) ProjectTeammatePaginateOption {
	return func(pager *projectTeammatePager) error {
		if filter == nil {
			return errors.New("ProjectTeammateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type projectTeammatePager struct {
	order  *ProjectTeammateOrder
	filter func(*ProjectTeammateQuery) (*ProjectTeammateQuery, error)
}

func newProjectTeammatePager(opts []ProjectTeammatePaginateOption) (*projectTeammatePager, error) {
	pager := &projectTeammatePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProjectTeammateOrder
	}
	return pager, nil
}

func (p *projectTeammatePager) applyFilter(query *ProjectTeammateQuery) (*ProjectTeammateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *projectTeammatePager) toCursor(pt *ProjectTeammate) Cursor {
	return p.order.Field.toCursor(pt)
}

func (p *projectTeammatePager) applyCursors(query *ProjectTeammateQuery, after, before *Cursor) *ProjectTeammateQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultProjectTeammateOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *projectTeammatePager) applyOrder(query *ProjectTeammateQuery, reverse bool) *ProjectTeammateQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultProjectTeammateOrder.Field {
		query = query.Order(direction.orderFunc(DefaultProjectTeammateOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ProjectTeammate.
func (pt *ProjectTeammateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProjectTeammatePaginateOption,
) (*ProjectTeammateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProjectTeammatePager(opts)
	if err != nil {
		return nil, err
	}

	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}

	conn := &ProjectTeammateConnection{Edges: []*ProjectTeammateEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := pt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := pt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	pt = pager.applyCursors(pt, after, before)
	pt = pager.applyOrder(pt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		pt = pt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		pt = pt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := pt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ProjectTeammate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProjectTeammate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProjectTeammate {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ProjectTeammateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ProjectTeammateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ProjectTeammateOrderField defines the ordering field of ProjectTeammate.
type ProjectTeammateOrderField struct {
	field    string
	toCursor func(*ProjectTeammate) Cursor
}

// ProjectTeammateOrder defines the ordering of ProjectTeammate.
type ProjectTeammateOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *ProjectTeammateOrderField `json:"field"`
}

// DefaultProjectTeammateOrder is the default ordering of ProjectTeammate.
var DefaultProjectTeammateOrder = &ProjectTeammateOrder{
	Direction: OrderDirectionAsc,
	Field: &ProjectTeammateOrderField{
		field: projectteammate.FieldID,
		toCursor: func(pt *ProjectTeammate) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts ProjectTeammate into ProjectTeammateEdge.
func (pt *ProjectTeammate) ToEdge(order *ProjectTeammateOrder) *ProjectTeammateEdge {
	if order == nil {
		order = DefaultProjectTeammateOrder
	}
	return &ProjectTeammateEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// TeammateEdge is the edge representation of Teammate.
type TeammateEdge struct {
	Node   *Teammate `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TeammateConnection is the connection containing edges to Teammate.
type TeammateConnection struct {
	Edges      []*TeammateEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TeammatePaginateOption enables pagination customization.
type TeammatePaginateOption func(*teammatePager) error

// WithTeammateOrder configures pagination ordering.
func WithTeammateOrder(order *TeammateOrder) TeammatePaginateOption {
	if order == nil {
		order = DefaultTeammateOrder
	}
	o := *order
	return func(pager *teammatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTeammateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTeammateFilter configures pagination filter.
func WithTeammateFilter(filter func(*TeammateQuery) (*TeammateQuery, error)) TeammatePaginateOption {
	return func(pager *teammatePager) error {
		if filter == nil {
			return errors.New("TeammateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type teammatePager struct {
	order  *TeammateOrder
	filter func(*TeammateQuery) (*TeammateQuery, error)
}

func newTeammatePager(opts []TeammatePaginateOption) (*teammatePager, error) {
	pager := &teammatePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTeammateOrder
	}
	return pager, nil
}

func (p *teammatePager) applyFilter(query *TeammateQuery) (*TeammateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *teammatePager) toCursor(t *Teammate) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *teammatePager) applyCursors(query *TeammateQuery, after, before *Cursor) *TeammateQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTeammateOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *teammatePager) applyOrder(query *TeammateQuery, reverse bool) *TeammateQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTeammateOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTeammateOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Teammate.
func (t *TeammateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TeammatePaginateOption,
) (*TeammateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTeammatePager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TeammateConnection{Edges: []*TeammateEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Teammate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Teammate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Teammate {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TeammateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TeammateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TeammateOrderField defines the ordering field of Teammate.
type TeammateOrderField struct {
	field    string
	toCursor func(*Teammate) Cursor
}

// TeammateOrder defines the ordering of Teammate.
type TeammateOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TeammateOrderField `json:"field"`
}

// DefaultTeammateOrder is the default ordering of Teammate.
var DefaultTeammateOrder = &TeammateOrder{
	Direction: OrderDirectionAsc,
	Field: &TeammateOrderField{
		field: teammate.FieldID,
		toCursor: func(t *Teammate) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Teammate into TeammateEdge.
func (t *Teammate) ToEdge(order *TeammateOrder) *TeammateEdge {
	if order == nil {
		order = DefaultTeammateOrder
	}
	return &TeammateEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TestTodoEdge is the edge representation of TestTodo.
type TestTodoEdge struct {
	Node   *TestTodo `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TestTodoConnection is the connection containing edges to TestTodo.
type TestTodoConnection struct {
	Edges      []*TestTodoEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TestTodoPaginateOption enables pagination customization.
type TestTodoPaginateOption func(*testTodoPager) error

// WithTestTodoOrder configures pagination ordering.
func WithTestTodoOrder(order *TestTodoOrder) TestTodoPaginateOption {
	if order == nil {
		order = DefaultTestTodoOrder
	}
	o := *order
	return func(pager *testTodoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTestTodoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTestTodoFilter configures pagination filter.
func WithTestTodoFilter(filter func(*TestTodoQuery) (*TestTodoQuery, error)) TestTodoPaginateOption {
	return func(pager *testTodoPager) error {
		if filter == nil {
			return errors.New("TestTodoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type testTodoPager struct {
	order  *TestTodoOrder
	filter func(*TestTodoQuery) (*TestTodoQuery, error)
}

func newTestTodoPager(opts []TestTodoPaginateOption) (*testTodoPager, error) {
	pager := &testTodoPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTestTodoOrder
	}
	return pager, nil
}

func (p *testTodoPager) applyFilter(query *TestTodoQuery) (*TestTodoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *testTodoPager) toCursor(tt *TestTodo) Cursor {
	return p.order.Field.toCursor(tt)
}

func (p *testTodoPager) applyCursors(query *TestTodoQuery, after, before *Cursor) *TestTodoQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTestTodoOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *testTodoPager) applyOrder(query *TestTodoQuery, reverse bool) *TestTodoQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTestTodoOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTestTodoOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TestTodo.
func (tt *TestTodoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TestTodoPaginateOption,
) (*TestTodoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTestTodoPager(opts)
	if err != nil {
		return nil, err
	}

	if tt, err = pager.applyFilter(tt); err != nil {
		return nil, err
	}

	conn := &TestTodoConnection{Edges: []*TestTodoEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tt.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tt.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tt = pager.applyCursors(tt, after, before)
	tt = pager.applyOrder(tt, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tt = tt.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tt.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TestTodo
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TestTodo {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TestTodo {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TestTodoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TestTodoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TestTodoOrderField defines the ordering field of TestTodo.
type TestTodoOrderField struct {
	field    string
	toCursor func(*TestTodo) Cursor
}

// TestTodoOrder defines the ordering of TestTodo.
type TestTodoOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TestTodoOrderField `json:"field"`
}

// DefaultTestTodoOrder is the default ordering of TestTodo.
var DefaultTestTodoOrder = &TestTodoOrder{
	Direction: OrderDirectionAsc,
	Field: &TestTodoOrderField{
		field: testtodo.FieldID,
		toCursor: func(tt *TestTodo) Cursor {
			return Cursor{ID: tt.ID}
		},
	},
}

// ToEdge converts TestTodo into TestTodoEdge.
func (tt *TestTodo) ToEdge(order *TestTodoOrder) *TestTodoEdge {
	if order == nil {
		order = DefaultTestTodoOrder
	}
	return &TestTodoEdge{
		Node:   tt,
		Cursor: order.Field.toCursor(tt),
	}
}

// TestUserEdge is the edge representation of TestUser.
type TestUserEdge struct {
	Node   *TestUser `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// TestUserConnection is the connection containing edges to TestUser.
type TestUserConnection struct {
	Edges      []*TestUserEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// TestUserPaginateOption enables pagination customization.
type TestUserPaginateOption func(*testUserPager) error

// WithTestUserOrder configures pagination ordering.
func WithTestUserOrder(order *TestUserOrder) TestUserPaginateOption {
	if order == nil {
		order = DefaultTestUserOrder
	}
	o := *order
	return func(pager *testUserPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTestUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTestUserFilter configures pagination filter.
func WithTestUserFilter(filter func(*TestUserQuery) (*TestUserQuery, error)) TestUserPaginateOption {
	return func(pager *testUserPager) error {
		if filter == nil {
			return errors.New("TestUserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type testUserPager struct {
	order  *TestUserOrder
	filter func(*TestUserQuery) (*TestUserQuery, error)
}

func newTestUserPager(opts []TestUserPaginateOption) (*testUserPager, error) {
	pager := &testUserPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTestUserOrder
	}
	return pager, nil
}

func (p *testUserPager) applyFilter(query *TestUserQuery) (*TestUserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *testUserPager) toCursor(tu *TestUser) Cursor {
	return p.order.Field.toCursor(tu)
}

func (p *testUserPager) applyCursors(query *TestUserQuery, after, before *Cursor) *TestUserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTestUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *testUserPager) applyOrder(query *TestUserQuery, reverse bool) *TestUserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTestUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTestUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to TestUser.
func (tu *TestUserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TestUserPaginateOption,
) (*TestUserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTestUserPager(opts)
	if err != nil {
		return nil, err
	}

	if tu, err = pager.applyFilter(tu); err != nil {
		return nil, err
	}

	conn := &TestUserConnection{Edges: []*TestUserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := tu.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tu.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tu = pager.applyCursors(tu, after, before)
	tu = pager.applyOrder(tu, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		tu = tu.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		tu = tu.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := tu.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *TestUser
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TestUser {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TestUser {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TestUserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TestUserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TestUserOrderField defines the ordering field of TestUser.
type TestUserOrderField struct {
	field    string
	toCursor func(*TestUser) Cursor
}

// TestUserOrder defines the ordering of TestUser.
type TestUserOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *TestUserOrderField `json:"field"`
}

// DefaultTestUserOrder is the default ordering of TestUser.
var DefaultTestUserOrder = &TestUserOrder{
	Direction: OrderDirectionAsc,
	Field: &TestUserOrderField{
		field: testuser.FieldID,
		toCursor: func(tu *TestUser) Cursor {
			return Cursor{ID: tu.ID}
		},
	},
}

// ToEdge converts TestUser into TestUserEdge.
func (tu *TestUser) ToEdge(order *TestUserOrder) *TestUserEdge {
	if order == nil {
		order = DefaultTestUserOrder
	}
	return &TestUserEdge{
		Node:   tu,
		Cursor: order.Field.toCursor(tu),
	}
}

// WorkspaceEdge is the edge representation of Workspace.
type WorkspaceEdge struct {
	Node   *Workspace `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// WorkspaceConnection is the connection containing edges to Workspace.
type WorkspaceConnection struct {
	Edges      []*WorkspaceEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

// WorkspacePaginateOption enables pagination customization.
type WorkspacePaginateOption func(*workspacePager) error

// WithWorkspaceOrder configures pagination ordering.
func WithWorkspaceOrder(order *WorkspaceOrder) WorkspacePaginateOption {
	if order == nil {
		order = DefaultWorkspaceOrder
	}
	o := *order
	return func(pager *workspacePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultWorkspaceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithWorkspaceFilter configures pagination filter.
func WithWorkspaceFilter(filter func(*WorkspaceQuery) (*WorkspaceQuery, error)) WorkspacePaginateOption {
	return func(pager *workspacePager) error {
		if filter == nil {
			return errors.New("WorkspaceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type workspacePager struct {
	order  *WorkspaceOrder
	filter func(*WorkspaceQuery) (*WorkspaceQuery, error)
}

func newWorkspacePager(opts []WorkspacePaginateOption) (*workspacePager, error) {
	pager := &workspacePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultWorkspaceOrder
	}
	return pager, nil
}

func (p *workspacePager) applyFilter(query *WorkspaceQuery) (*WorkspaceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *workspacePager) toCursor(w *Workspace) Cursor {
	return p.order.Field.toCursor(w)
}

func (p *workspacePager) applyCursors(query *WorkspaceQuery, after, before *Cursor) *WorkspaceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultWorkspaceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *workspacePager) applyOrder(query *WorkspaceQuery, reverse bool) *WorkspaceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultWorkspaceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultWorkspaceOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Workspace.
func (w *WorkspaceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...WorkspacePaginateOption,
) (*WorkspaceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newWorkspacePager(opts)
	if err != nil {
		return nil, err
	}

	if w, err = pager.applyFilter(w); err != nil {
		return nil, err
	}

	conn := &WorkspaceConnection{Edges: []*WorkspaceEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := w.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := w.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	w = pager.applyCursors(w, after, before)
	w = pager.applyOrder(w, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		w = w.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := w.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Workspace
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Workspace {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Workspace {
			return nodes[i]
		}
	}

	conn.Edges = make([]*WorkspaceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &WorkspaceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// WorkspaceOrderField defines the ordering field of Workspace.
type WorkspaceOrderField struct {
	field    string
	toCursor func(*Workspace) Cursor
}

// WorkspaceOrder defines the ordering of Workspace.
type WorkspaceOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *WorkspaceOrderField `json:"field"`
}

// DefaultWorkspaceOrder is the default ordering of Workspace.
var DefaultWorkspaceOrder = &WorkspaceOrder{
	Direction: OrderDirectionAsc,
	Field: &WorkspaceOrderField{
		field: workspace.FieldID,
		toCursor: func(w *Workspace) Cursor {
			return Cursor{ID: w.ID}
		},
	},
}

// ToEdge converts Workspace into WorkspaceEdge.
func (w *Workspace) ToEdge(order *WorkspaceOrder) *WorkspaceEdge {
	if order == nil {
		order = DefaultWorkspaceOrder
	}
	return &WorkspaceEdge{
		Node:   w,
		Cursor: order.Field.toCursor(w),
	}
}
