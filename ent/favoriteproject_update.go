// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FavoriteProjectUpdate is the builder for updating FavoriteProject entities.
type FavoriteProjectUpdate struct {
	config
	hooks    []Hook
	mutation *FavoriteProjectMutation
}

// Where appends a list predicates to the FavoriteProjectUpdate builder.
func (fpu *FavoriteProjectUpdate) Where(ps ...predicate.FavoriteProject) *FavoriteProjectUpdate {
	fpu.mutation.Where(ps...)
	return fpu
}

// SetProjectID sets the "project_id" field.
func (fpu *FavoriteProjectUpdate) SetProjectID(u ulid.ID) *FavoriteProjectUpdate {
	fpu.mutation.SetProjectID(u)
	return fpu
}

// SetTeammateID sets the "teammate_id" field.
func (fpu *FavoriteProjectUpdate) SetTeammateID(u ulid.ID) *FavoriteProjectUpdate {
	fpu.mutation.SetTeammateID(u)
	return fpu
}

// SetProject sets the "project" edge to the Project entity.
func (fpu *FavoriteProjectUpdate) SetProject(p *Project) *FavoriteProjectUpdate {
	return fpu.SetProjectID(p.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (fpu *FavoriteProjectUpdate) SetTeammate(t *Teammate) *FavoriteProjectUpdate {
	return fpu.SetTeammateID(t.ID)
}

// Mutation returns the FavoriteProjectMutation object of the builder.
func (fpu *FavoriteProjectUpdate) Mutation() *FavoriteProjectMutation {
	return fpu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (fpu *FavoriteProjectUpdate) ClearProject() *FavoriteProjectUpdate {
	fpu.mutation.ClearProject()
	return fpu
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (fpu *FavoriteProjectUpdate) ClearTeammate() *FavoriteProjectUpdate {
	fpu.mutation.ClearTeammate()
	return fpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fpu *FavoriteProjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fpu.hooks) == 0 {
		if err = fpu.check(); err != nil {
			return 0, err
		}
		affected, err = fpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavoriteProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fpu.check(); err != nil {
				return 0, err
			}
			fpu.mutation = mutation
			affected, err = fpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fpu.hooks) - 1; i >= 0; i-- {
			if fpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fpu *FavoriteProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := fpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fpu *FavoriteProjectUpdate) Exec(ctx context.Context) error {
	_, err := fpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpu *FavoriteProjectUpdate) ExecX(ctx context.Context) {
	if err := fpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpu *FavoriteProjectUpdate) check() error {
	if _, ok := fpu.mutation.ProjectID(); fpu.mutation.ProjectCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project\"")
	}
	if _, ok := fpu.mutation.TeammateID(); fpu.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	return nil
}

func (fpu *FavoriteProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   favoriteproject.Table,
			Columns: favoriteproject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: favoriteproject.FieldID,
			},
		},
	}
	if ps := fpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fpu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.ProjectTable,
			Columns: []string{favoriteproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fpu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.ProjectTable,
			Columns: []string{favoriteproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fpu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.TeammateTable,
			Columns: []string{favoriteproject.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fpu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.TeammateTable,
			Columns: []string{favoriteproject.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favoriteproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FavoriteProjectUpdateOne is the builder for updating a single FavoriteProject entity.
type FavoriteProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavoriteProjectMutation
}

// SetProjectID sets the "project_id" field.
func (fpuo *FavoriteProjectUpdateOne) SetProjectID(u ulid.ID) *FavoriteProjectUpdateOne {
	fpuo.mutation.SetProjectID(u)
	return fpuo
}

// SetTeammateID sets the "teammate_id" field.
func (fpuo *FavoriteProjectUpdateOne) SetTeammateID(u ulid.ID) *FavoriteProjectUpdateOne {
	fpuo.mutation.SetTeammateID(u)
	return fpuo
}

// SetProject sets the "project" edge to the Project entity.
func (fpuo *FavoriteProjectUpdateOne) SetProject(p *Project) *FavoriteProjectUpdateOne {
	return fpuo.SetProjectID(p.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (fpuo *FavoriteProjectUpdateOne) SetTeammate(t *Teammate) *FavoriteProjectUpdateOne {
	return fpuo.SetTeammateID(t.ID)
}

// Mutation returns the FavoriteProjectMutation object of the builder.
func (fpuo *FavoriteProjectUpdateOne) Mutation() *FavoriteProjectMutation {
	return fpuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (fpuo *FavoriteProjectUpdateOne) ClearProject() *FavoriteProjectUpdateOne {
	fpuo.mutation.ClearProject()
	return fpuo
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (fpuo *FavoriteProjectUpdateOne) ClearTeammate() *FavoriteProjectUpdateOne {
	fpuo.mutation.ClearTeammate()
	return fpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fpuo *FavoriteProjectUpdateOne) Select(field string, fields ...string) *FavoriteProjectUpdateOne {
	fpuo.fields = append([]string{field}, fields...)
	return fpuo
}

// Save executes the query and returns the updated FavoriteProject entity.
func (fpuo *FavoriteProjectUpdateOne) Save(ctx context.Context) (*FavoriteProject, error) {
	var (
		err  error
		node *FavoriteProject
	)
	if len(fpuo.hooks) == 0 {
		if err = fpuo.check(); err != nil {
			return nil, err
		}
		node, err = fpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavoriteProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fpuo.check(); err != nil {
				return nil, err
			}
			fpuo.mutation = mutation
			node, err = fpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fpuo.hooks) - 1; i >= 0; i-- {
			if fpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fpuo *FavoriteProjectUpdateOne) SaveX(ctx context.Context) *FavoriteProject {
	node, err := fpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fpuo *FavoriteProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := fpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpuo *FavoriteProjectUpdateOne) ExecX(ctx context.Context) {
	if err := fpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpuo *FavoriteProjectUpdateOne) check() error {
	if _, ok := fpuo.mutation.ProjectID(); fpuo.mutation.ProjectCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project\"")
	}
	if _, ok := fpuo.mutation.TeammateID(); fpuo.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	return nil
}

func (fpuo *FavoriteProjectUpdateOne) sqlSave(ctx context.Context) (_node *FavoriteProject, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   favoriteproject.Table,
			Columns: favoriteproject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: favoriteproject.FieldID,
			},
		},
	}
	id, ok := fpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FavoriteProject.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favoriteproject.FieldID)
		for _, f := range fields {
			if !favoriteproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favoriteproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fpuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.ProjectTable,
			Columns: []string{favoriteproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fpuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.ProjectTable,
			Columns: []string{favoriteproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fpuo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.TeammateTable,
			Columns: []string{favoriteproject.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fpuo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteproject.TeammateTable,
			Columns: []string{favoriteproject.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FavoriteProject{config: fpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favoriteproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
