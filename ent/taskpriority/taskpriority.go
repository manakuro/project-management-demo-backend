// Code generated by entc, DO NOT EDIT.

package taskpriority

import (
	"fmt"
	"io"
	"project-management-demo-backend/ent/schema/ulid"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the taskpriority type in the database.
	Label = "task_priority"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldColorID holds the string denoting the color_id field in the database.
	FieldColorID = "color_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPriorityType holds the string denoting the priority_type field in the database.
	FieldPriorityType = "priority_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeColor holds the string denoting the color edge name in mutations.
	EdgeColor = "color"
	// Table holds the table name of the taskpriority in the database.
	Table = "task_priorities"
	// ColorTable is the table that holds the color relation/edge.
	ColorTable = "task_priorities"
	// ColorInverseTable is the table name for the Color entity.
	// It exists in this package in order to avoid circular dependency with the "color" package.
	ColorInverseTable = "colors"
	// ColorColumn is the table column denoting the color relation/edge.
	ColorColumn = "color_id"
)

// Columns holds all SQL columns for taskpriority fields.
var Columns = []string{
	FieldID,
	FieldColorID,
	FieldName,
	FieldPriorityType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ID
)

// PriorityType defines the type for the "priority_type" enum field.
type PriorityType string

// PriorityType values.
const (
	PriorityTypeLow    PriorityType = "LOW"
	PriorityTypeMedium PriorityType = "MEDIUM"
	PriorityTypeHigh   PriorityType = "HIGH"
)

func (pt PriorityType) String() string {
	return string(pt)
}

// PriorityTypeValidator is a validator for the "priority_type" field enum values. It is called by the builders before save.
func PriorityTypeValidator(pt PriorityType) error {
	switch pt {
	case PriorityTypeLow, PriorityTypeMedium, PriorityTypeHigh:
		return nil
	default:
		return fmt.Errorf("taskpriority: invalid enum value for priority_type field: %q", pt)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (pt PriorityType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(pt.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (pt *PriorityType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*pt = PriorityType(str)
	if err := PriorityTypeValidator(*pt); err != nil {
		return fmt.Errorf("%s is not a valid PriorityType", str)
	}
	return nil
}
