// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/schema/ulid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IconCreate is the builder for creating a Icon entity.
type IconCreate struct {
	config
	mutation *IconMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ic *IconCreate) SetName(s string) *IconCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetIcon sets the "icon" field.
func (ic *IconCreate) SetIcon(s string) *IconCreate {
	ic.mutation.SetIcon(s)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IconCreate) SetCreatedAt(t time.Time) *IconCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IconCreate) SetNillableCreatedAt(t *time.Time) *IconCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IconCreate) SetUpdatedAt(t time.Time) *IconCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IconCreate) SetNillableUpdatedAt(t *time.Time) *IconCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IconCreate) SetID(u ulid.ID) *IconCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IconCreate) SetNillableID(u *ulid.ID) *IconCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// AddProjectIconIDs adds the "projectIcons" edge to the ProjectIcon entity by IDs.
func (ic *IconCreate) AddProjectIconIDs(ids ...ulid.ID) *IconCreate {
	ic.mutation.AddProjectIconIDs(ids...)
	return ic
}

// AddProjectIcons adds the "projectIcons" edges to the ProjectIcon entity.
func (ic *IconCreate) AddProjectIcons(p ...*ProjectIcon) *IconCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ic.AddProjectIconIDs(ids...)
}

// Mutation returns the IconMutation object of the builder.
func (ic *IconCreate) Mutation() *IconMutation {
	return ic.mutation
}

// Save creates the Icon in the database.
func (ic *IconCreate) Save(ctx context.Context) (*Icon, error) {
	var (
		err  error
		node *Icon
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IconCreate) SaveX(ctx context.Context) *Icon {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IconCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IconCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IconCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := icon.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := icon.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := icon.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IconCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := icon.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "icon"`)}
	}
	if v, ok := ic.mutation.Icon(); ok {
		if err := icon.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "icon": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (ic *IconCreate) sqlSave(ctx context.Context) (*Icon, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (ic *IconCreate) createSpec() (*Icon, *sqlgraph.CreateSpec) {
	var (
		_node = &Icon{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: icon.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: icon.FieldID,
			},
		}
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: icon.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: icon.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: icon.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: icon.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.ProjectIconsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   icon.ProjectIconsTable,
			Columns: []string{icon.ProjectIconsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecticon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Icon.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IconUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (ic *IconCreate) OnConflict(opts ...sql.ConflictOption) *IconUpsertOne {
	ic.conflict = opts
	return &IconUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Icon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ic *IconCreate) OnConflictColumns(columns ...string) *IconUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IconUpsertOne{
		create: ic,
	}
}

type (
	// IconUpsertOne is the builder for "upsert"-ing
	//  one Icon node.
	IconUpsertOne struct {
		create *IconCreate
	}

	// IconUpsert is the "OnConflict" setter.
	IconUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *IconUpsert) SetName(v string) *IconUpsert {
	u.Set(icon.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IconUpsert) UpdateName() *IconUpsert {
	u.SetExcluded(icon.FieldName)
	return u
}

// SetIcon sets the "icon" field.
func (u *IconUpsert) SetIcon(v string) *IconUpsert {
	u.Set(icon.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *IconUpsert) UpdateIcon() *IconUpsert {
	u.SetExcluded(icon.FieldIcon)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *IconUpsert) SetCreatedAt(v time.Time) *IconUpsert {
	u.Set(icon.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IconUpsert) UpdateCreatedAt() *IconUpsert {
	u.SetExcluded(icon.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IconUpsert) SetUpdatedAt(v time.Time) *IconUpsert {
	u.Set(icon.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IconUpsert) UpdateUpdatedAt() *IconUpsert {
	u.SetExcluded(icon.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Icon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icon.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *IconUpsertOne) UpdateNewValues() *IconUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(icon.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Icon.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *IconUpsertOne) Ignore() *IconUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IconUpsertOne) DoNothing() *IconUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IconCreate.OnConflict
// documentation for more info.
func (u *IconUpsertOne) Update(set func(*IconUpsert)) *IconUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IconUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *IconUpsertOne) SetName(v string) *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IconUpsertOne) UpdateName() *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *IconUpsertOne) SetIcon(v string) *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *IconUpsertOne) UpdateIcon() *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.UpdateIcon()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IconUpsertOne) SetCreatedAt(v time.Time) *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IconUpsertOne) UpdateCreatedAt() *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IconUpsertOne) SetUpdatedAt(v time.Time) *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IconUpsertOne) UpdateUpdatedAt() *IconUpsertOne {
	return u.Update(func(s *IconUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *IconUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IconCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IconUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IconUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IconUpsertOne.ID is not supported by MySQL driver. Use IconUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IconUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IconCreateBulk is the builder for creating many Icon entities in bulk.
type IconCreateBulk struct {
	config
	builders []*IconCreate
	conflict []sql.ConflictOption
}

// Save creates the Icon entities in the database.
func (icb *IconCreateBulk) Save(ctx context.Context) ([]*Icon, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Icon, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IconMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IconCreateBulk) SaveX(ctx context.Context) []*Icon {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IconCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IconCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Icon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IconUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (icb *IconCreateBulk) OnConflict(opts ...sql.ConflictOption) *IconUpsertBulk {
	icb.conflict = opts
	return &IconUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Icon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (icb *IconCreateBulk) OnConflictColumns(columns ...string) *IconUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IconUpsertBulk{
		create: icb,
	}
}

// IconUpsertBulk is the builder for "upsert"-ing
// a bulk of Icon nodes.
type IconUpsertBulk struct {
	create *IconCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Icon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icon.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *IconUpsertBulk) UpdateNewValues() *IconUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(icon.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Icon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *IconUpsertBulk) Ignore() *IconUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IconUpsertBulk) DoNothing() *IconUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IconCreateBulk.OnConflict
// documentation for more info.
func (u *IconUpsertBulk) Update(set func(*IconUpsert)) *IconUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IconUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *IconUpsertBulk) SetName(v string) *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *IconUpsertBulk) UpdateName() *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *IconUpsertBulk) SetIcon(v string) *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *IconUpsertBulk) UpdateIcon() *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.UpdateIcon()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *IconUpsertBulk) SetCreatedAt(v time.Time) *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *IconUpsertBulk) UpdateCreatedAt() *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IconUpsertBulk) SetUpdatedAt(v time.Time) *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IconUpsertBulk) UpdateUpdatedAt() *IconUpsertBulk {
	return u.Update(func(s *IconUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *IconUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IconCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IconCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IconUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
