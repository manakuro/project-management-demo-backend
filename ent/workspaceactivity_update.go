// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceactivity"
	"project-management-demo-backend/ent/workspaceactivitytask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceActivityUpdate is the builder for updating WorkspaceActivity entities.
type WorkspaceActivityUpdate struct {
	config
	hooks    []Hook
	mutation *WorkspaceActivityMutation
}

// Where appends a list predicates to the WorkspaceActivityUpdate builder.
func (wau *WorkspaceActivityUpdate) Where(ps ...predicate.WorkspaceActivity) *WorkspaceActivityUpdate {
	wau.mutation.Where(ps...)
	return wau
}

// SetActivityTypeID sets the "activity_type_id" field.
func (wau *WorkspaceActivityUpdate) SetActivityTypeID(u ulid.ID) *WorkspaceActivityUpdate {
	wau.mutation.SetActivityTypeID(u)
	return wau
}

// SetWorkspaceID sets the "workspace_id" field.
func (wau *WorkspaceActivityUpdate) SetWorkspaceID(u ulid.ID) *WorkspaceActivityUpdate {
	wau.mutation.SetWorkspaceID(u)
	return wau
}

// SetProjectID sets the "project_id" field.
func (wau *WorkspaceActivityUpdate) SetProjectID(u ulid.ID) *WorkspaceActivityUpdate {
	wau.mutation.SetProjectID(u)
	return wau
}

// SetTeammateID sets the "teammate_id" field.
func (wau *WorkspaceActivityUpdate) SetTeammateID(u ulid.ID) *WorkspaceActivityUpdate {
	wau.mutation.SetTeammateID(u)
	return wau
}

// SetActivityType sets the "activityType" edge to the ActivityType entity.
func (wau *WorkspaceActivityUpdate) SetActivityType(a *ActivityType) *WorkspaceActivityUpdate {
	return wau.SetActivityTypeID(a.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (wau *WorkspaceActivityUpdate) SetWorkspace(w *Workspace) *WorkspaceActivityUpdate {
	return wau.SetWorkspaceID(w.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (wau *WorkspaceActivityUpdate) SetProject(p *Project) *WorkspaceActivityUpdate {
	return wau.SetProjectID(p.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (wau *WorkspaceActivityUpdate) SetTeammate(t *Teammate) *WorkspaceActivityUpdate {
	return wau.SetTeammateID(t.ID)
}

// AddWorkspaceActivityTaskIDs adds the "workspaceActivityTasks" edge to the WorkspaceActivityTask entity by IDs.
func (wau *WorkspaceActivityUpdate) AddWorkspaceActivityTaskIDs(ids ...ulid.ID) *WorkspaceActivityUpdate {
	wau.mutation.AddWorkspaceActivityTaskIDs(ids...)
	return wau
}

// AddWorkspaceActivityTasks adds the "workspaceActivityTasks" edges to the WorkspaceActivityTask entity.
func (wau *WorkspaceActivityUpdate) AddWorkspaceActivityTasks(w ...*WorkspaceActivityTask) *WorkspaceActivityUpdate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wau.AddWorkspaceActivityTaskIDs(ids...)
}

// Mutation returns the WorkspaceActivityMutation object of the builder.
func (wau *WorkspaceActivityUpdate) Mutation() *WorkspaceActivityMutation {
	return wau.mutation
}

// ClearActivityType clears the "activityType" edge to the ActivityType entity.
func (wau *WorkspaceActivityUpdate) ClearActivityType() *WorkspaceActivityUpdate {
	wau.mutation.ClearActivityType()
	return wau
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (wau *WorkspaceActivityUpdate) ClearWorkspace() *WorkspaceActivityUpdate {
	wau.mutation.ClearWorkspace()
	return wau
}

// ClearProject clears the "project" edge to the Project entity.
func (wau *WorkspaceActivityUpdate) ClearProject() *WorkspaceActivityUpdate {
	wau.mutation.ClearProject()
	return wau
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (wau *WorkspaceActivityUpdate) ClearTeammate() *WorkspaceActivityUpdate {
	wau.mutation.ClearTeammate()
	return wau
}

// ClearWorkspaceActivityTasks clears all "workspaceActivityTasks" edges to the WorkspaceActivityTask entity.
func (wau *WorkspaceActivityUpdate) ClearWorkspaceActivityTasks() *WorkspaceActivityUpdate {
	wau.mutation.ClearWorkspaceActivityTasks()
	return wau
}

// RemoveWorkspaceActivityTaskIDs removes the "workspaceActivityTasks" edge to WorkspaceActivityTask entities by IDs.
func (wau *WorkspaceActivityUpdate) RemoveWorkspaceActivityTaskIDs(ids ...ulid.ID) *WorkspaceActivityUpdate {
	wau.mutation.RemoveWorkspaceActivityTaskIDs(ids...)
	return wau
}

// RemoveWorkspaceActivityTasks removes "workspaceActivityTasks" edges to WorkspaceActivityTask entities.
func (wau *WorkspaceActivityUpdate) RemoveWorkspaceActivityTasks(w ...*WorkspaceActivityTask) *WorkspaceActivityUpdate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wau.RemoveWorkspaceActivityTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wau *WorkspaceActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wau.hooks) == 0 {
		if err = wau.check(); err != nil {
			return 0, err
		}
		affected, err = wau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkspaceActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wau.check(); err != nil {
				return 0, err
			}
			wau.mutation = mutation
			affected, err = wau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wau.hooks) - 1; i >= 0; i-- {
			if wau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wau *WorkspaceActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := wau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wau *WorkspaceActivityUpdate) Exec(ctx context.Context) error {
	_, err := wau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wau *WorkspaceActivityUpdate) ExecX(ctx context.Context) {
	if err := wau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wau *WorkspaceActivityUpdate) check() error {
	if _, ok := wau.mutation.ActivityTypeID(); wau.mutation.ActivityTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.activityType"`)
	}
	if _, ok := wau.mutation.WorkspaceID(); wau.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.workspace"`)
	}
	if _, ok := wau.mutation.ProjectID(); wau.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.project"`)
	}
	if _, ok := wau.mutation.TeammateID(); wau.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.teammate"`)
	}
	return nil
}

func (wau *WorkspaceActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workspaceactivity.Table,
			Columns: workspaceactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: workspaceactivity.FieldID,
			},
		},
	}
	if ps := wau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wau.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ActivityTypeTable,
			Columns: []string{workspaceactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ActivityTypeTable,
			Columns: []string{workspaceactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wau.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.WorkspaceTable,
			Columns: []string{workspaceactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.WorkspaceTable,
			Columns: []string{workspaceactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wau.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ProjectTable,
			Columns: []string{workspaceactivity.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ProjectTable,
			Columns: []string{workspaceactivity.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wau.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.TeammateTable,
			Columns: []string{workspaceactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.TeammateTable,
			Columns: []string{workspaceactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wau.mutation.WorkspaceActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspaceactivity.WorkspaceActivityTasksTable,
			Columns: []string{workspaceactivity.WorkspaceActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivitytask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.RemovedWorkspaceActivityTasksIDs(); len(nodes) > 0 && !wau.mutation.WorkspaceActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspaceactivity.WorkspaceActivityTasksTable,
			Columns: []string{workspaceactivity.WorkspaceActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.WorkspaceActivityTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspaceactivity.WorkspaceActivityTasksTable,
			Columns: []string{workspaceactivity.WorkspaceActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workspaceactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WorkspaceActivityUpdateOne is the builder for updating a single WorkspaceActivity entity.
type WorkspaceActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkspaceActivityMutation
}

// SetActivityTypeID sets the "activity_type_id" field.
func (wauo *WorkspaceActivityUpdateOne) SetActivityTypeID(u ulid.ID) *WorkspaceActivityUpdateOne {
	wauo.mutation.SetActivityTypeID(u)
	return wauo
}

// SetWorkspaceID sets the "workspace_id" field.
func (wauo *WorkspaceActivityUpdateOne) SetWorkspaceID(u ulid.ID) *WorkspaceActivityUpdateOne {
	wauo.mutation.SetWorkspaceID(u)
	return wauo
}

// SetProjectID sets the "project_id" field.
func (wauo *WorkspaceActivityUpdateOne) SetProjectID(u ulid.ID) *WorkspaceActivityUpdateOne {
	wauo.mutation.SetProjectID(u)
	return wauo
}

// SetTeammateID sets the "teammate_id" field.
func (wauo *WorkspaceActivityUpdateOne) SetTeammateID(u ulid.ID) *WorkspaceActivityUpdateOne {
	wauo.mutation.SetTeammateID(u)
	return wauo
}

// SetActivityType sets the "activityType" edge to the ActivityType entity.
func (wauo *WorkspaceActivityUpdateOne) SetActivityType(a *ActivityType) *WorkspaceActivityUpdateOne {
	return wauo.SetActivityTypeID(a.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (wauo *WorkspaceActivityUpdateOne) SetWorkspace(w *Workspace) *WorkspaceActivityUpdateOne {
	return wauo.SetWorkspaceID(w.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (wauo *WorkspaceActivityUpdateOne) SetProject(p *Project) *WorkspaceActivityUpdateOne {
	return wauo.SetProjectID(p.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (wauo *WorkspaceActivityUpdateOne) SetTeammate(t *Teammate) *WorkspaceActivityUpdateOne {
	return wauo.SetTeammateID(t.ID)
}

// AddWorkspaceActivityTaskIDs adds the "workspaceActivityTasks" edge to the WorkspaceActivityTask entity by IDs.
func (wauo *WorkspaceActivityUpdateOne) AddWorkspaceActivityTaskIDs(ids ...ulid.ID) *WorkspaceActivityUpdateOne {
	wauo.mutation.AddWorkspaceActivityTaskIDs(ids...)
	return wauo
}

// AddWorkspaceActivityTasks adds the "workspaceActivityTasks" edges to the WorkspaceActivityTask entity.
func (wauo *WorkspaceActivityUpdateOne) AddWorkspaceActivityTasks(w ...*WorkspaceActivityTask) *WorkspaceActivityUpdateOne {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wauo.AddWorkspaceActivityTaskIDs(ids...)
}

// Mutation returns the WorkspaceActivityMutation object of the builder.
func (wauo *WorkspaceActivityUpdateOne) Mutation() *WorkspaceActivityMutation {
	return wauo.mutation
}

// ClearActivityType clears the "activityType" edge to the ActivityType entity.
func (wauo *WorkspaceActivityUpdateOne) ClearActivityType() *WorkspaceActivityUpdateOne {
	wauo.mutation.ClearActivityType()
	return wauo
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (wauo *WorkspaceActivityUpdateOne) ClearWorkspace() *WorkspaceActivityUpdateOne {
	wauo.mutation.ClearWorkspace()
	return wauo
}

// ClearProject clears the "project" edge to the Project entity.
func (wauo *WorkspaceActivityUpdateOne) ClearProject() *WorkspaceActivityUpdateOne {
	wauo.mutation.ClearProject()
	return wauo
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (wauo *WorkspaceActivityUpdateOne) ClearTeammate() *WorkspaceActivityUpdateOne {
	wauo.mutation.ClearTeammate()
	return wauo
}

// ClearWorkspaceActivityTasks clears all "workspaceActivityTasks" edges to the WorkspaceActivityTask entity.
func (wauo *WorkspaceActivityUpdateOne) ClearWorkspaceActivityTasks() *WorkspaceActivityUpdateOne {
	wauo.mutation.ClearWorkspaceActivityTasks()
	return wauo
}

// RemoveWorkspaceActivityTaskIDs removes the "workspaceActivityTasks" edge to WorkspaceActivityTask entities by IDs.
func (wauo *WorkspaceActivityUpdateOne) RemoveWorkspaceActivityTaskIDs(ids ...ulid.ID) *WorkspaceActivityUpdateOne {
	wauo.mutation.RemoveWorkspaceActivityTaskIDs(ids...)
	return wauo
}

// RemoveWorkspaceActivityTasks removes "workspaceActivityTasks" edges to WorkspaceActivityTask entities.
func (wauo *WorkspaceActivityUpdateOne) RemoveWorkspaceActivityTasks(w ...*WorkspaceActivityTask) *WorkspaceActivityUpdateOne {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wauo.RemoveWorkspaceActivityTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wauo *WorkspaceActivityUpdateOne) Select(field string, fields ...string) *WorkspaceActivityUpdateOne {
	wauo.fields = append([]string{field}, fields...)
	return wauo
}

// Save executes the query and returns the updated WorkspaceActivity entity.
func (wauo *WorkspaceActivityUpdateOne) Save(ctx context.Context) (*WorkspaceActivity, error) {
	var (
		err  error
		node *WorkspaceActivity
	)
	if len(wauo.hooks) == 0 {
		if err = wauo.check(); err != nil {
			return nil, err
		}
		node, err = wauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkspaceActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wauo.check(); err != nil {
				return nil, err
			}
			wauo.mutation = mutation
			node, err = wauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wauo.hooks) - 1; i >= 0; i-- {
			if wauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wauo *WorkspaceActivityUpdateOne) SaveX(ctx context.Context) *WorkspaceActivity {
	node, err := wauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wauo *WorkspaceActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := wauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wauo *WorkspaceActivityUpdateOne) ExecX(ctx context.Context) {
	if err := wauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wauo *WorkspaceActivityUpdateOne) check() error {
	if _, ok := wauo.mutation.ActivityTypeID(); wauo.mutation.ActivityTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.activityType"`)
	}
	if _, ok := wauo.mutation.WorkspaceID(); wauo.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.workspace"`)
	}
	if _, ok := wauo.mutation.ProjectID(); wauo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.project"`)
	}
	if _, ok := wauo.mutation.TeammateID(); wauo.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkspaceActivity.teammate"`)
	}
	return nil
}

func (wauo *WorkspaceActivityUpdateOne) sqlSave(ctx context.Context) (_node *WorkspaceActivity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workspaceactivity.Table,
			Columns: workspaceactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: workspaceactivity.FieldID,
			},
		},
	}
	id, ok := wauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkspaceActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workspaceactivity.FieldID)
		for _, f := range fields {
			if !workspaceactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workspaceactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wauo.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ActivityTypeTable,
			Columns: []string{workspaceactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ActivityTypeTable,
			Columns: []string{workspaceactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wauo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.WorkspaceTable,
			Columns: []string{workspaceactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.WorkspaceTable,
			Columns: []string{workspaceactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wauo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ProjectTable,
			Columns: []string{workspaceactivity.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ProjectTable,
			Columns: []string{workspaceactivity.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wauo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.TeammateTable,
			Columns: []string{workspaceactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.TeammateTable,
			Columns: []string{workspaceactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wauo.mutation.WorkspaceActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspaceactivity.WorkspaceActivityTasksTable,
			Columns: []string{workspaceactivity.WorkspaceActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivitytask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.RemovedWorkspaceActivityTasksIDs(); len(nodes) > 0 && !wauo.mutation.WorkspaceActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspaceactivity.WorkspaceActivityTasksTable,
			Columns: []string{workspaceactivity.WorkspaceActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.WorkspaceActivityTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspaceactivity.WorkspaceActivityTasksTable,
			Columns: []string{workspaceactivity.WorkspaceActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkspaceActivity{config: wauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workspaceactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
