// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/projecttask"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskcollaborator"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/tasktag"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTaskParentID sets the "task_parent_id" field.
func (tu *TaskUpdate) SetTaskParentID(u ulid.ID) *TaskUpdate {
	tu.mutation.SetTaskParentID(u)
	return tu
}

// SetNillableTaskParentID sets the "task_parent_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskParentID(u *ulid.ID) *TaskUpdate {
	if u != nil {
		tu.SetTaskParentID(*u)
	}
	return tu
}

// ClearTaskParentID clears the value of the "task_parent_id" field.
func (tu *TaskUpdate) ClearTaskParentID() *TaskUpdate {
	tu.mutation.ClearTaskParentID()
	return tu
}

// SetTaskPriorityID sets the "task_priority_id" field.
func (tu *TaskUpdate) SetTaskPriorityID(u ulid.ID) *TaskUpdate {
	tu.mutation.SetTaskPriorityID(u)
	return tu
}

// SetAssigneeID sets the "assignee_id" field.
func (tu *TaskUpdate) SetAssigneeID(u ulid.ID) *TaskUpdate {
	tu.mutation.SetAssigneeID(u)
	return tu
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAssigneeID(u *ulid.ID) *TaskUpdate {
	if u != nil {
		tu.SetAssigneeID(*u)
	}
	return tu
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (tu *TaskUpdate) ClearAssigneeID() *TaskUpdate {
	tu.mutation.ClearAssigneeID()
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TaskUpdate) SetCreatedBy(u ulid.ID) *TaskUpdate {
	tu.mutation.SetCreatedBy(u)
	return tu
}

// SetCompleted sets the "completed" field.
func (tu *TaskUpdate) SetCompleted(b bool) *TaskUpdate {
	tu.mutation.SetCompleted(b)
	return tu
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCompleted(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetCompleted(*b)
	}
	return tu
}

// SetCompletedAt sets the "completed_at" field.
func (tu *TaskUpdate) SetCompletedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCompletedAt(t)
	return tu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCompletedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCompletedAt(*t)
	}
	return tu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tu *TaskUpdate) ClearCompletedAt() *TaskUpdate {
	tu.mutation.ClearCompletedAt()
	return tu
}

// SetIsNew sets the "is_new" field.
func (tu *TaskUpdate) SetIsNew(b bool) *TaskUpdate {
	tu.mutation.SetIsNew(b)
	return tu
}

// SetNillableIsNew sets the "is_new" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsNew(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsNew(*b)
	}
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDueDate sets the "due_date" field.
func (tu *TaskUpdate) SetDueDate(t time.Time) *TaskUpdate {
	tu.mutation.SetDueDate(t)
	return tu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDueDate(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDueDate(*t)
	}
	return tu
}

// ClearDueDate clears the value of the "due_date" field.
func (tu *TaskUpdate) ClearDueDate() *TaskUpdate {
	tu.mutation.ClearDueDate()
	return tu
}

// SetDueTime sets the "due_time" field.
func (tu *TaskUpdate) SetDueTime(t time.Time) *TaskUpdate {
	tu.mutation.SetDueTime(t)
	return tu
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDueTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDueTime(*t)
	}
	return tu
}

// ClearDueTime clears the value of the "due_time" field.
func (tu *TaskUpdate) ClearDueTime() *TaskUpdate {
	tu.mutation.ClearDueTime()
	return tu
}

// SetTeammateID sets the "teammate" edge to the Teammate entity by ID.
func (tu *TaskUpdate) SetTeammateID(id ulid.ID) *TaskUpdate {
	tu.mutation.SetTeammateID(id)
	return tu
}

// SetNillableTeammateID sets the "teammate" edge to the Teammate entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableTeammateID(id *ulid.ID) *TaskUpdate {
	if id != nil {
		tu = tu.SetTeammateID(*id)
	}
	return tu
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tu *TaskUpdate) SetTeammate(t *Teammate) *TaskUpdate {
	return tu.SetTeammateID(t.ID)
}

// SetTaskPriority sets the "taskPriority" edge to the TaskPriority entity.
func (tu *TaskUpdate) SetTaskPriority(t *TaskPriority) *TaskUpdate {
	return tu.SetTaskPriorityID(t.ID)
}

// SetParentID sets the "parent" edge to the Task entity by ID.
func (tu *TaskUpdate) SetParentID(id ulid.ID) *TaskUpdate {
	tu.mutation.SetParentID(id)
	return tu
}

// SetNillableParentID sets the "parent" edge to the Task entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableParentID(id *ulid.ID) *TaskUpdate {
	if id != nil {
		tu = tu.SetParentID(*id)
	}
	return tu
}

// SetParent sets the "parent" edge to the Task entity.
func (tu *TaskUpdate) SetParent(t *Task) *TaskUpdate {
	return tu.SetParentID(t.ID)
}

// AddSubTaskIDs adds the "subTasks" edge to the Task entity by IDs.
func (tu *TaskUpdate) AddSubTaskIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddSubTaskIDs(ids...)
	return tu
}

// AddSubTasks adds the "subTasks" edges to the Task entity.
func (tu *TaskUpdate) AddSubTasks(t ...*Task) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddSubTaskIDs(ids...)
}

// AddTeammateTaskIDs adds the "teammateTasks" edge to the TeammateTask entity by IDs.
func (tu *TaskUpdate) AddTeammateTaskIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddTeammateTaskIDs(ids...)
	return tu
}

// AddTeammateTasks adds the "teammateTasks" edges to the TeammateTask entity.
func (tu *TaskUpdate) AddTeammateTasks(t ...*TeammateTask) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTeammateTaskIDs(ids...)
}

// AddProjectTaskIDs adds the "projectTasks" edge to the ProjectTask entity by IDs.
func (tu *TaskUpdate) AddProjectTaskIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddProjectTaskIDs(ids...)
	return tu
}

// AddProjectTasks adds the "projectTasks" edges to the ProjectTask entity.
func (tu *TaskUpdate) AddProjectTasks(p ...*ProjectTask) *TaskUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProjectTaskIDs(ids...)
}

// AddTaskLikeIDs adds the "taskLikes" edge to the TaskLike entity by IDs.
func (tu *TaskUpdate) AddTaskLikeIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddTaskLikeIDs(ids...)
	return tu
}

// AddTaskLikes adds the "taskLikes" edges to the TaskLike entity.
func (tu *TaskUpdate) AddTaskLikes(t ...*TaskLike) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskLikeIDs(ids...)
}

// AddTaskTagIDs adds the "taskTags" edge to the TaskTag entity by IDs.
func (tu *TaskUpdate) AddTaskTagIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddTaskTagIDs(ids...)
	return tu
}

// AddTaskTags adds the "taskTags" edges to the TaskTag entity.
func (tu *TaskUpdate) AddTaskTags(t ...*TaskTag) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskTagIDs(ids...)
}

// AddTaskCollaboratorIDs adds the "taskCollaborators" edge to the TaskCollaborator entity by IDs.
func (tu *TaskUpdate) AddTaskCollaboratorIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddTaskCollaboratorIDs(ids...)
	return tu
}

// AddTaskCollaborators adds the "taskCollaborators" edges to the TaskCollaborator entity.
func (tu *TaskUpdate) AddTaskCollaborators(t ...*TaskCollaborator) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskCollaboratorIDs(ids...)
}

// AddTaskFeedIDs adds the "taskFeeds" edge to the TaskFeed entity by IDs.
func (tu *TaskUpdate) AddTaskFeedIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddTaskFeedIDs(ids...)
	return tu
}

// AddTaskFeeds adds the "taskFeeds" edges to the TaskFeed entity.
func (tu *TaskUpdate) AddTaskFeeds(t ...*TaskFeed) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskFeedIDs(ids...)
}

// AddTaskFeedLikeIDs adds the "taskFeedLikes" edge to the TaskFeedLike entity by IDs.
func (tu *TaskUpdate) AddTaskFeedLikeIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddTaskFeedLikeIDs(ids...)
	return tu
}

// AddTaskFeedLikes adds the "taskFeedLikes" edges to the TaskFeedLike entity.
func (tu *TaskUpdate) AddTaskFeedLikes(t ...*TaskFeedLike) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskFeedLikeIDs(ids...)
}

// AddTaskFileIDs adds the "taskFiles" edge to the TaskFile entity by IDs.
func (tu *TaskUpdate) AddTaskFileIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.AddTaskFileIDs(ids...)
	return tu
}

// AddTaskFiles adds the "taskFiles" edges to the TaskFile entity.
func (tu *TaskUpdate) AddTaskFiles(t ...*TaskFile) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskFileIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tu *TaskUpdate) ClearTeammate() *TaskUpdate {
	tu.mutation.ClearTeammate()
	return tu
}

// ClearTaskPriority clears the "taskPriority" edge to the TaskPriority entity.
func (tu *TaskUpdate) ClearTaskPriority() *TaskUpdate {
	tu.mutation.ClearTaskPriority()
	return tu
}

// ClearParent clears the "parent" edge to the Task entity.
func (tu *TaskUpdate) ClearParent() *TaskUpdate {
	tu.mutation.ClearParent()
	return tu
}

// ClearSubTasks clears all "subTasks" edges to the Task entity.
func (tu *TaskUpdate) ClearSubTasks() *TaskUpdate {
	tu.mutation.ClearSubTasks()
	return tu
}

// RemoveSubTaskIDs removes the "subTasks" edge to Task entities by IDs.
func (tu *TaskUpdate) RemoveSubTaskIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveSubTaskIDs(ids...)
	return tu
}

// RemoveSubTasks removes "subTasks" edges to Task entities.
func (tu *TaskUpdate) RemoveSubTasks(t ...*Task) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveSubTaskIDs(ids...)
}

// ClearTeammateTasks clears all "teammateTasks" edges to the TeammateTask entity.
func (tu *TaskUpdate) ClearTeammateTasks() *TaskUpdate {
	tu.mutation.ClearTeammateTasks()
	return tu
}

// RemoveTeammateTaskIDs removes the "teammateTasks" edge to TeammateTask entities by IDs.
func (tu *TaskUpdate) RemoveTeammateTaskIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveTeammateTaskIDs(ids...)
	return tu
}

// RemoveTeammateTasks removes "teammateTasks" edges to TeammateTask entities.
func (tu *TaskUpdate) RemoveTeammateTasks(t ...*TeammateTask) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTeammateTaskIDs(ids...)
}

// ClearProjectTasks clears all "projectTasks" edges to the ProjectTask entity.
func (tu *TaskUpdate) ClearProjectTasks() *TaskUpdate {
	tu.mutation.ClearProjectTasks()
	return tu
}

// RemoveProjectTaskIDs removes the "projectTasks" edge to ProjectTask entities by IDs.
func (tu *TaskUpdate) RemoveProjectTaskIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveProjectTaskIDs(ids...)
	return tu
}

// RemoveProjectTasks removes "projectTasks" edges to ProjectTask entities.
func (tu *TaskUpdate) RemoveProjectTasks(p ...*ProjectTask) *TaskUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProjectTaskIDs(ids...)
}

// ClearTaskLikes clears all "taskLikes" edges to the TaskLike entity.
func (tu *TaskUpdate) ClearTaskLikes() *TaskUpdate {
	tu.mutation.ClearTaskLikes()
	return tu
}

// RemoveTaskLikeIDs removes the "taskLikes" edge to TaskLike entities by IDs.
func (tu *TaskUpdate) RemoveTaskLikeIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveTaskLikeIDs(ids...)
	return tu
}

// RemoveTaskLikes removes "taskLikes" edges to TaskLike entities.
func (tu *TaskUpdate) RemoveTaskLikes(t ...*TaskLike) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskLikeIDs(ids...)
}

// ClearTaskTags clears all "taskTags" edges to the TaskTag entity.
func (tu *TaskUpdate) ClearTaskTags() *TaskUpdate {
	tu.mutation.ClearTaskTags()
	return tu
}

// RemoveTaskTagIDs removes the "taskTags" edge to TaskTag entities by IDs.
func (tu *TaskUpdate) RemoveTaskTagIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveTaskTagIDs(ids...)
	return tu
}

// RemoveTaskTags removes "taskTags" edges to TaskTag entities.
func (tu *TaskUpdate) RemoveTaskTags(t ...*TaskTag) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskTagIDs(ids...)
}

// ClearTaskCollaborators clears all "taskCollaborators" edges to the TaskCollaborator entity.
func (tu *TaskUpdate) ClearTaskCollaborators() *TaskUpdate {
	tu.mutation.ClearTaskCollaborators()
	return tu
}

// RemoveTaskCollaboratorIDs removes the "taskCollaborators" edge to TaskCollaborator entities by IDs.
func (tu *TaskUpdate) RemoveTaskCollaboratorIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveTaskCollaboratorIDs(ids...)
	return tu
}

// RemoveTaskCollaborators removes "taskCollaborators" edges to TaskCollaborator entities.
func (tu *TaskUpdate) RemoveTaskCollaborators(t ...*TaskCollaborator) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskCollaboratorIDs(ids...)
}

// ClearTaskFeeds clears all "taskFeeds" edges to the TaskFeed entity.
func (tu *TaskUpdate) ClearTaskFeeds() *TaskUpdate {
	tu.mutation.ClearTaskFeeds()
	return tu
}

// RemoveTaskFeedIDs removes the "taskFeeds" edge to TaskFeed entities by IDs.
func (tu *TaskUpdate) RemoveTaskFeedIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveTaskFeedIDs(ids...)
	return tu
}

// RemoveTaskFeeds removes "taskFeeds" edges to TaskFeed entities.
func (tu *TaskUpdate) RemoveTaskFeeds(t ...*TaskFeed) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskFeedIDs(ids...)
}

// ClearTaskFeedLikes clears all "taskFeedLikes" edges to the TaskFeedLike entity.
func (tu *TaskUpdate) ClearTaskFeedLikes() *TaskUpdate {
	tu.mutation.ClearTaskFeedLikes()
	return tu
}

// RemoveTaskFeedLikeIDs removes the "taskFeedLikes" edge to TaskFeedLike entities by IDs.
func (tu *TaskUpdate) RemoveTaskFeedLikeIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveTaskFeedLikeIDs(ids...)
	return tu
}

// RemoveTaskFeedLikes removes "taskFeedLikes" edges to TaskFeedLike entities.
func (tu *TaskUpdate) RemoveTaskFeedLikes(t ...*TaskFeedLike) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskFeedLikeIDs(ids...)
}

// ClearTaskFiles clears all "taskFiles" edges to the TaskFile entity.
func (tu *TaskUpdate) ClearTaskFiles() *TaskUpdate {
	tu.mutation.ClearTaskFiles()
	return tu
}

// RemoveTaskFileIDs removes the "taskFiles" edge to TaskFile entities by IDs.
func (tu *TaskUpdate) RemoveTaskFileIDs(ids ...ulid.ID) *TaskUpdate {
	tu.mutation.RemoveTaskFileIDs(ids...)
	return tu
}

// RemoveTaskFiles removes "taskFiles" edges to TaskFile entities.
func (tu *TaskUpdate) RemoveTaskFiles(t ...*TaskFile) *TaskUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := tu.mutation.TaskPriorityID(); tu.mutation.TaskPriorityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"taskPriority\"")
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCreatedBy,
		})
	}
	if value, ok := tu.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldCompleted,
		})
	}
	if value, ok := tu.mutation.CompletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCompletedAt,
		})
	}
	if tu.mutation.CompletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldCompletedAt,
		})
	}
	if value, ok := tu.mutation.IsNew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldIsNew,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldName,
		})
	}
	if value, ok := tu.mutation.DueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldDueDate,
		})
	}
	if tu.mutation.DueDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldDueDate,
		})
	}
	if value, ok := tu.mutation.DueTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldDueTime,
		})
	}
	if tu.mutation.DueTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldDueTime,
		})
	}
	if tu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TeammateTable,
			Columns: []string{task.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TeammateTable,
			Columns: []string{task.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskPriorityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskPriorityTable,
			Columns: []string{task.TaskPriorityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskPriorityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskPriorityTable,
			Columns: []string{task.TaskPriorityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SubTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubTasksTable,
			Columns: []string{task.SubTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubTasksIDs(); len(nodes) > 0 && !tu.mutation.SubTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubTasksTable,
			Columns: []string{task.SubTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubTasksTable,
			Columns: []string{task.SubTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TeammateTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TeammateTasksTable,
			Columns: []string{task.TeammateTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTeammateTasksIDs(); len(nodes) > 0 && !tu.mutation.TeammateTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TeammateTasksTable,
			Columns: []string{task.TeammateTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TeammateTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TeammateTasksTable,
			Columns: []string{task.TeammateTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ProjectTasksTable,
			Columns: []string{task.ProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProjectTasksIDs(); len(nodes) > 0 && !tu.mutation.ProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ProjectTasksTable,
			Columns: []string{task.ProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ProjectTasksTable,
			Columns: []string{task.ProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLikesTable,
			Columns: []string{task.TaskLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskLikesIDs(); len(nodes) > 0 && !tu.mutation.TaskLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLikesTable,
			Columns: []string{task.TaskLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLikesTable,
			Columns: []string{task.TaskLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskTagsTable,
			Columns: []string{task.TaskTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasktag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskTagsIDs(); len(nodes) > 0 && !tu.mutation.TaskTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskTagsTable,
			Columns: []string{task.TaskTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasktag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskTagsTable,
			Columns: []string{task.TaskTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasktag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskCollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskCollaboratorsTable,
			Columns: []string{task.TaskCollaboratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcollaborator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskCollaboratorsIDs(); len(nodes) > 0 && !tu.mutation.TaskCollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskCollaboratorsTable,
			Columns: []string{task.TaskCollaboratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcollaborator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskCollaboratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskCollaboratorsTable,
			Columns: []string{task.TaskCollaboratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcollaborator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskFeedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedsTable,
			Columns: []string{task.TaskFeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskFeedsIDs(); len(nodes) > 0 && !tu.mutation.TaskFeedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedsTable,
			Columns: []string{task.TaskFeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskFeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedsTable,
			Columns: []string{task.TaskFeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedLikesTable,
			Columns: []string{task.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskFeedLikesIDs(); len(nodes) > 0 && !tu.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedLikesTable,
			Columns: []string{task.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskFeedLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedLikesTable,
			Columns: []string{task.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFilesTable,
			Columns: []string{task.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTaskFilesIDs(); len(nodes) > 0 && !tu.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFilesTable,
			Columns: []string{task.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TaskFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFilesTable,
			Columns: []string{task.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTaskParentID sets the "task_parent_id" field.
func (tuo *TaskUpdateOne) SetTaskParentID(u ulid.ID) *TaskUpdateOne {
	tuo.mutation.SetTaskParentID(u)
	return tuo
}

// SetNillableTaskParentID sets the "task_parent_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskParentID(u *ulid.ID) *TaskUpdateOne {
	if u != nil {
		tuo.SetTaskParentID(*u)
	}
	return tuo
}

// ClearTaskParentID clears the value of the "task_parent_id" field.
func (tuo *TaskUpdateOne) ClearTaskParentID() *TaskUpdateOne {
	tuo.mutation.ClearTaskParentID()
	return tuo
}

// SetTaskPriorityID sets the "task_priority_id" field.
func (tuo *TaskUpdateOne) SetTaskPriorityID(u ulid.ID) *TaskUpdateOne {
	tuo.mutation.SetTaskPriorityID(u)
	return tuo
}

// SetAssigneeID sets the "assignee_id" field.
func (tuo *TaskUpdateOne) SetAssigneeID(u ulid.ID) *TaskUpdateOne {
	tuo.mutation.SetAssigneeID(u)
	return tuo
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAssigneeID(u *ulid.ID) *TaskUpdateOne {
	if u != nil {
		tuo.SetAssigneeID(*u)
	}
	return tuo
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (tuo *TaskUpdateOne) ClearAssigneeID() *TaskUpdateOne {
	tuo.mutation.ClearAssigneeID()
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TaskUpdateOne) SetCreatedBy(u ulid.ID) *TaskUpdateOne {
	tuo.mutation.SetCreatedBy(u)
	return tuo
}

// SetCompleted sets the "completed" field.
func (tuo *TaskUpdateOne) SetCompleted(b bool) *TaskUpdateOne {
	tuo.mutation.SetCompleted(b)
	return tuo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCompleted(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetCompleted(*b)
	}
	return tuo
}

// SetCompletedAt sets the "completed_at" field.
func (tuo *TaskUpdateOne) SetCompletedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCompletedAt(t)
	return tuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCompletedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCompletedAt(*t)
	}
	return tuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tuo *TaskUpdateOne) ClearCompletedAt() *TaskUpdateOne {
	tuo.mutation.ClearCompletedAt()
	return tuo
}

// SetIsNew sets the "is_new" field.
func (tuo *TaskUpdateOne) SetIsNew(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsNew(b)
	return tuo
}

// SetNillableIsNew sets the "is_new" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsNew(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsNew(*b)
	}
	return tuo
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDueDate sets the "due_date" field.
func (tuo *TaskUpdateOne) SetDueDate(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDueDate(t)
	return tuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDueDate(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDueDate(*t)
	}
	return tuo
}

// ClearDueDate clears the value of the "due_date" field.
func (tuo *TaskUpdateOne) ClearDueDate() *TaskUpdateOne {
	tuo.mutation.ClearDueDate()
	return tuo
}

// SetDueTime sets the "due_time" field.
func (tuo *TaskUpdateOne) SetDueTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDueTime(t)
	return tuo
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDueTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDueTime(*t)
	}
	return tuo
}

// ClearDueTime clears the value of the "due_time" field.
func (tuo *TaskUpdateOne) ClearDueTime() *TaskUpdateOne {
	tuo.mutation.ClearDueTime()
	return tuo
}

// SetTeammateID sets the "teammate" edge to the Teammate entity by ID.
func (tuo *TaskUpdateOne) SetTeammateID(id ulid.ID) *TaskUpdateOne {
	tuo.mutation.SetTeammateID(id)
	return tuo
}

// SetNillableTeammateID sets the "teammate" edge to the Teammate entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTeammateID(id *ulid.ID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetTeammateID(*id)
	}
	return tuo
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tuo *TaskUpdateOne) SetTeammate(t *Teammate) *TaskUpdateOne {
	return tuo.SetTeammateID(t.ID)
}

// SetTaskPriority sets the "taskPriority" edge to the TaskPriority entity.
func (tuo *TaskUpdateOne) SetTaskPriority(t *TaskPriority) *TaskUpdateOne {
	return tuo.SetTaskPriorityID(t.ID)
}

// SetParentID sets the "parent" edge to the Task entity by ID.
func (tuo *TaskUpdateOne) SetParentID(id ulid.ID) *TaskUpdateOne {
	tuo.mutation.SetParentID(id)
	return tuo
}

// SetNillableParentID sets the "parent" edge to the Task entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableParentID(id *ulid.ID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetParentID(*id)
	}
	return tuo
}

// SetParent sets the "parent" edge to the Task entity.
func (tuo *TaskUpdateOne) SetParent(t *Task) *TaskUpdateOne {
	return tuo.SetParentID(t.ID)
}

// AddSubTaskIDs adds the "subTasks" edge to the Task entity by IDs.
func (tuo *TaskUpdateOne) AddSubTaskIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddSubTaskIDs(ids...)
	return tuo
}

// AddSubTasks adds the "subTasks" edges to the Task entity.
func (tuo *TaskUpdateOne) AddSubTasks(t ...*Task) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddSubTaskIDs(ids...)
}

// AddTeammateTaskIDs adds the "teammateTasks" edge to the TeammateTask entity by IDs.
func (tuo *TaskUpdateOne) AddTeammateTaskIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddTeammateTaskIDs(ids...)
	return tuo
}

// AddTeammateTasks adds the "teammateTasks" edges to the TeammateTask entity.
func (tuo *TaskUpdateOne) AddTeammateTasks(t ...*TeammateTask) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTeammateTaskIDs(ids...)
}

// AddProjectTaskIDs adds the "projectTasks" edge to the ProjectTask entity by IDs.
func (tuo *TaskUpdateOne) AddProjectTaskIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddProjectTaskIDs(ids...)
	return tuo
}

// AddProjectTasks adds the "projectTasks" edges to the ProjectTask entity.
func (tuo *TaskUpdateOne) AddProjectTasks(p ...*ProjectTask) *TaskUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProjectTaskIDs(ids...)
}

// AddTaskLikeIDs adds the "taskLikes" edge to the TaskLike entity by IDs.
func (tuo *TaskUpdateOne) AddTaskLikeIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddTaskLikeIDs(ids...)
	return tuo
}

// AddTaskLikes adds the "taskLikes" edges to the TaskLike entity.
func (tuo *TaskUpdateOne) AddTaskLikes(t ...*TaskLike) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskLikeIDs(ids...)
}

// AddTaskTagIDs adds the "taskTags" edge to the TaskTag entity by IDs.
func (tuo *TaskUpdateOne) AddTaskTagIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddTaskTagIDs(ids...)
	return tuo
}

// AddTaskTags adds the "taskTags" edges to the TaskTag entity.
func (tuo *TaskUpdateOne) AddTaskTags(t ...*TaskTag) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskTagIDs(ids...)
}

// AddTaskCollaboratorIDs adds the "taskCollaborators" edge to the TaskCollaborator entity by IDs.
func (tuo *TaskUpdateOne) AddTaskCollaboratorIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddTaskCollaboratorIDs(ids...)
	return tuo
}

// AddTaskCollaborators adds the "taskCollaborators" edges to the TaskCollaborator entity.
func (tuo *TaskUpdateOne) AddTaskCollaborators(t ...*TaskCollaborator) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskCollaboratorIDs(ids...)
}

// AddTaskFeedIDs adds the "taskFeeds" edge to the TaskFeed entity by IDs.
func (tuo *TaskUpdateOne) AddTaskFeedIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddTaskFeedIDs(ids...)
	return tuo
}

// AddTaskFeeds adds the "taskFeeds" edges to the TaskFeed entity.
func (tuo *TaskUpdateOne) AddTaskFeeds(t ...*TaskFeed) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskFeedIDs(ids...)
}

// AddTaskFeedLikeIDs adds the "taskFeedLikes" edge to the TaskFeedLike entity by IDs.
func (tuo *TaskUpdateOne) AddTaskFeedLikeIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddTaskFeedLikeIDs(ids...)
	return tuo
}

// AddTaskFeedLikes adds the "taskFeedLikes" edges to the TaskFeedLike entity.
func (tuo *TaskUpdateOne) AddTaskFeedLikes(t ...*TaskFeedLike) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskFeedLikeIDs(ids...)
}

// AddTaskFileIDs adds the "taskFiles" edge to the TaskFile entity by IDs.
func (tuo *TaskUpdateOne) AddTaskFileIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.AddTaskFileIDs(ids...)
	return tuo
}

// AddTaskFiles adds the "taskFiles" edges to the TaskFile entity.
func (tuo *TaskUpdateOne) AddTaskFiles(t ...*TaskFile) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskFileIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tuo *TaskUpdateOne) ClearTeammate() *TaskUpdateOne {
	tuo.mutation.ClearTeammate()
	return tuo
}

// ClearTaskPriority clears the "taskPriority" edge to the TaskPriority entity.
func (tuo *TaskUpdateOne) ClearTaskPriority() *TaskUpdateOne {
	tuo.mutation.ClearTaskPriority()
	return tuo
}

// ClearParent clears the "parent" edge to the Task entity.
func (tuo *TaskUpdateOne) ClearParent() *TaskUpdateOne {
	tuo.mutation.ClearParent()
	return tuo
}

// ClearSubTasks clears all "subTasks" edges to the Task entity.
func (tuo *TaskUpdateOne) ClearSubTasks() *TaskUpdateOne {
	tuo.mutation.ClearSubTasks()
	return tuo
}

// RemoveSubTaskIDs removes the "subTasks" edge to Task entities by IDs.
func (tuo *TaskUpdateOne) RemoveSubTaskIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveSubTaskIDs(ids...)
	return tuo
}

// RemoveSubTasks removes "subTasks" edges to Task entities.
func (tuo *TaskUpdateOne) RemoveSubTasks(t ...*Task) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveSubTaskIDs(ids...)
}

// ClearTeammateTasks clears all "teammateTasks" edges to the TeammateTask entity.
func (tuo *TaskUpdateOne) ClearTeammateTasks() *TaskUpdateOne {
	tuo.mutation.ClearTeammateTasks()
	return tuo
}

// RemoveTeammateTaskIDs removes the "teammateTasks" edge to TeammateTask entities by IDs.
func (tuo *TaskUpdateOne) RemoveTeammateTaskIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveTeammateTaskIDs(ids...)
	return tuo
}

// RemoveTeammateTasks removes "teammateTasks" edges to TeammateTask entities.
func (tuo *TaskUpdateOne) RemoveTeammateTasks(t ...*TeammateTask) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTeammateTaskIDs(ids...)
}

// ClearProjectTasks clears all "projectTasks" edges to the ProjectTask entity.
func (tuo *TaskUpdateOne) ClearProjectTasks() *TaskUpdateOne {
	tuo.mutation.ClearProjectTasks()
	return tuo
}

// RemoveProjectTaskIDs removes the "projectTasks" edge to ProjectTask entities by IDs.
func (tuo *TaskUpdateOne) RemoveProjectTaskIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveProjectTaskIDs(ids...)
	return tuo
}

// RemoveProjectTasks removes "projectTasks" edges to ProjectTask entities.
func (tuo *TaskUpdateOne) RemoveProjectTasks(p ...*ProjectTask) *TaskUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProjectTaskIDs(ids...)
}

// ClearTaskLikes clears all "taskLikes" edges to the TaskLike entity.
func (tuo *TaskUpdateOne) ClearTaskLikes() *TaskUpdateOne {
	tuo.mutation.ClearTaskLikes()
	return tuo
}

// RemoveTaskLikeIDs removes the "taskLikes" edge to TaskLike entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskLikeIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveTaskLikeIDs(ids...)
	return tuo
}

// RemoveTaskLikes removes "taskLikes" edges to TaskLike entities.
func (tuo *TaskUpdateOne) RemoveTaskLikes(t ...*TaskLike) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskLikeIDs(ids...)
}

// ClearTaskTags clears all "taskTags" edges to the TaskTag entity.
func (tuo *TaskUpdateOne) ClearTaskTags() *TaskUpdateOne {
	tuo.mutation.ClearTaskTags()
	return tuo
}

// RemoveTaskTagIDs removes the "taskTags" edge to TaskTag entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskTagIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveTaskTagIDs(ids...)
	return tuo
}

// RemoveTaskTags removes "taskTags" edges to TaskTag entities.
func (tuo *TaskUpdateOne) RemoveTaskTags(t ...*TaskTag) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskTagIDs(ids...)
}

// ClearTaskCollaborators clears all "taskCollaborators" edges to the TaskCollaborator entity.
func (tuo *TaskUpdateOne) ClearTaskCollaborators() *TaskUpdateOne {
	tuo.mutation.ClearTaskCollaborators()
	return tuo
}

// RemoveTaskCollaboratorIDs removes the "taskCollaborators" edge to TaskCollaborator entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskCollaboratorIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveTaskCollaboratorIDs(ids...)
	return tuo
}

// RemoveTaskCollaborators removes "taskCollaborators" edges to TaskCollaborator entities.
func (tuo *TaskUpdateOne) RemoveTaskCollaborators(t ...*TaskCollaborator) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskCollaboratorIDs(ids...)
}

// ClearTaskFeeds clears all "taskFeeds" edges to the TaskFeed entity.
func (tuo *TaskUpdateOne) ClearTaskFeeds() *TaskUpdateOne {
	tuo.mutation.ClearTaskFeeds()
	return tuo
}

// RemoveTaskFeedIDs removes the "taskFeeds" edge to TaskFeed entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskFeedIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveTaskFeedIDs(ids...)
	return tuo
}

// RemoveTaskFeeds removes "taskFeeds" edges to TaskFeed entities.
func (tuo *TaskUpdateOne) RemoveTaskFeeds(t ...*TaskFeed) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskFeedIDs(ids...)
}

// ClearTaskFeedLikes clears all "taskFeedLikes" edges to the TaskFeedLike entity.
func (tuo *TaskUpdateOne) ClearTaskFeedLikes() *TaskUpdateOne {
	tuo.mutation.ClearTaskFeedLikes()
	return tuo
}

// RemoveTaskFeedLikeIDs removes the "taskFeedLikes" edge to TaskFeedLike entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskFeedLikeIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveTaskFeedLikeIDs(ids...)
	return tuo
}

// RemoveTaskFeedLikes removes "taskFeedLikes" edges to TaskFeedLike entities.
func (tuo *TaskUpdateOne) RemoveTaskFeedLikes(t ...*TaskFeedLike) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskFeedLikeIDs(ids...)
}

// ClearTaskFiles clears all "taskFiles" edges to the TaskFile entity.
func (tuo *TaskUpdateOne) ClearTaskFiles() *TaskUpdateOne {
	tuo.mutation.ClearTaskFiles()
	return tuo
}

// RemoveTaskFileIDs removes the "taskFiles" edge to TaskFile entities by IDs.
func (tuo *TaskUpdateOne) RemoveTaskFileIDs(ids ...ulid.ID) *TaskUpdateOne {
	tuo.mutation.RemoveTaskFileIDs(ids...)
	return tuo
}

// RemoveTaskFiles removes "taskFiles" edges to TaskFile entities.
func (tuo *TaskUpdateOne) RemoveTaskFiles(t ...*TaskFile) *TaskUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskFileIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := tuo.mutation.TaskPriorityID(); tuo.mutation.TaskPriorityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"taskPriority\"")
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Task.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCreatedBy,
		})
	}
	if value, ok := tuo.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldCompleted,
		})
	}
	if value, ok := tuo.mutation.CompletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCompletedAt,
		})
	}
	if tuo.mutation.CompletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldCompletedAt,
		})
	}
	if value, ok := tuo.mutation.IsNew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldIsNew,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldName,
		})
	}
	if value, ok := tuo.mutation.DueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldDueDate,
		})
	}
	if tuo.mutation.DueDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldDueDate,
		})
	}
	if value, ok := tuo.mutation.DueTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldDueTime,
		})
	}
	if tuo.mutation.DueTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldDueTime,
		})
	}
	if tuo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TeammateTable,
			Columns: []string{task.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TeammateTable,
			Columns: []string{task.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskPriorityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskPriorityTable,
			Columns: []string{task.TaskPriorityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskPriorityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.TaskPriorityTable,
			Columns: []string{task.TaskPriorityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskpriority.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SubTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubTasksTable,
			Columns: []string{task.SubTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubTasksIDs(); len(nodes) > 0 && !tuo.mutation.SubTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubTasksTable,
			Columns: []string{task.SubTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubTasksTable,
			Columns: []string{task.SubTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TeammateTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TeammateTasksTable,
			Columns: []string{task.TeammateTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTeammateTasksIDs(); len(nodes) > 0 && !tuo.mutation.TeammateTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TeammateTasksTable,
			Columns: []string{task.TeammateTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TeammateTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TeammateTasksTable,
			Columns: []string{task.TeammateTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ProjectTasksTable,
			Columns: []string{task.ProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProjectTasksIDs(); len(nodes) > 0 && !tuo.mutation.ProjectTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ProjectTasksTable,
			Columns: []string{task.ProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ProjectTasksTable,
			Columns: []string{task.ProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLikesTable,
			Columns: []string{task.TaskLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskLikesIDs(); len(nodes) > 0 && !tuo.mutation.TaskLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLikesTable,
			Columns: []string{task.TaskLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskLikesTable,
			Columns: []string{task.TaskLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskTagsTable,
			Columns: []string{task.TaskTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasktag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskTagsIDs(); len(nodes) > 0 && !tuo.mutation.TaskTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskTagsTable,
			Columns: []string{task.TaskTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasktag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskTagsTable,
			Columns: []string{task.TaskTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasktag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskCollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskCollaboratorsTable,
			Columns: []string{task.TaskCollaboratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcollaborator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskCollaboratorsIDs(); len(nodes) > 0 && !tuo.mutation.TaskCollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskCollaboratorsTable,
			Columns: []string{task.TaskCollaboratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcollaborator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskCollaboratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskCollaboratorsTable,
			Columns: []string{task.TaskCollaboratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcollaborator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskFeedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedsTable,
			Columns: []string{task.TaskFeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskFeedsIDs(); len(nodes) > 0 && !tuo.mutation.TaskFeedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedsTable,
			Columns: []string{task.TaskFeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskFeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedsTable,
			Columns: []string{task.TaskFeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedLikesTable,
			Columns: []string{task.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskFeedLikesIDs(); len(nodes) > 0 && !tuo.mutation.TaskFeedLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedLikesTable,
			Columns: []string{task.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskFeedLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFeedLikesTable,
			Columns: []string{task.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFilesTable,
			Columns: []string{task.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTaskFilesIDs(); len(nodes) > 0 && !tuo.mutation.TaskFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFilesTable,
			Columns: []string{task.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TaskFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TaskFilesTable,
			Columns: []string{task.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
