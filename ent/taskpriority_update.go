// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskpriority"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskPriorityUpdate is the builder for updating TaskPriority entities.
type TaskPriorityUpdate struct {
	config
	hooks    []Hook
	mutation *TaskPriorityMutation
}

// Where appends a list predicates to the TaskPriorityUpdate builder.
func (tpu *TaskPriorityUpdate) Where(ps ...predicate.TaskPriority) *TaskPriorityUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetColorID sets the "color_id" field.
func (tpu *TaskPriorityUpdate) SetColorID(u ulid.ID) *TaskPriorityUpdate {
	tpu.mutation.SetColorID(u)
	return tpu
}

// SetName sets the "name" field.
func (tpu *TaskPriorityUpdate) SetName(s string) *TaskPriorityUpdate {
	tpu.mutation.SetName(s)
	return tpu
}

// SetPriorityType sets the "priority_type" field.
func (tpu *TaskPriorityUpdate) SetPriorityType(tt taskpriority.PriorityType) *TaskPriorityUpdate {
	tpu.mutation.SetPriorityType(tt)
	return tpu
}

// SetColor sets the "color" edge to the Color entity.
func (tpu *TaskPriorityUpdate) SetColor(c *Color) *TaskPriorityUpdate {
	return tpu.SetColorID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tpu *TaskPriorityUpdate) AddTaskIDs(ids ...ulid.ID) *TaskPriorityUpdate {
	tpu.mutation.AddTaskIDs(ids...)
	return tpu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tpu *TaskPriorityUpdate) AddTasks(t ...*Task) *TaskPriorityUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpu.AddTaskIDs(ids...)
}

// Mutation returns the TaskPriorityMutation object of the builder.
func (tpu *TaskPriorityUpdate) Mutation() *TaskPriorityMutation {
	return tpu.mutation
}

// ClearColor clears the "color" edge to the Color entity.
func (tpu *TaskPriorityUpdate) ClearColor() *TaskPriorityUpdate {
	tpu.mutation.ClearColor()
	return tpu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tpu *TaskPriorityUpdate) ClearTasks() *TaskPriorityUpdate {
	tpu.mutation.ClearTasks()
	return tpu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tpu *TaskPriorityUpdate) RemoveTaskIDs(ids ...ulid.ID) *TaskPriorityUpdate {
	tpu.mutation.RemoveTaskIDs(ids...)
	return tpu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tpu *TaskPriorityUpdate) RemoveTasks(t ...*Task) *TaskPriorityUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TaskPriorityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tpu.hooks) == 0 {
		if err = tpu.check(); err != nil {
			return 0, err
		}
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskPriorityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpu.check(); err != nil {
				return 0, err
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TaskPriorityUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TaskPriorityUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TaskPriorityUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TaskPriorityUpdate) check() error {
	if v, ok := tpu.mutation.Name(); ok {
		if err := taskpriority.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskPriority.name": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.PriorityType(); ok {
		if err := taskpriority.PriorityTypeValidator(v); err != nil {
			return &ValidationError{Name: "priority_type", err: fmt.Errorf(`ent: validator failed for field "TaskPriority.priority_type": %w`, err)}
		}
	}
	if _, ok := tpu.mutation.ColorID(); tpu.mutation.ColorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskPriority.color"`)
	}
	return nil
}

func (tpu *TaskPriorityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskpriority.Table,
			Columns: taskpriority.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskpriority.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskpriority.FieldName,
		})
	}
	if value, ok := tpu.mutation.PriorityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: taskpriority.FieldPriorityType,
		})
	}
	if tpu.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskpriority.ColorTable,
			Columns: []string{taskpriority.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskpriority.ColorTable,
			Columns: []string{taskpriority.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskpriority.TasksTable,
			Columns: []string{taskpriority.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tpu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskpriority.TasksTable,
			Columns: []string{taskpriority.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskpriority.TasksTable,
			Columns: []string{taskpriority.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskpriority.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskPriorityUpdateOne is the builder for updating a single TaskPriority entity.
type TaskPriorityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskPriorityMutation
}

// SetColorID sets the "color_id" field.
func (tpuo *TaskPriorityUpdateOne) SetColorID(u ulid.ID) *TaskPriorityUpdateOne {
	tpuo.mutation.SetColorID(u)
	return tpuo
}

// SetName sets the "name" field.
func (tpuo *TaskPriorityUpdateOne) SetName(s string) *TaskPriorityUpdateOne {
	tpuo.mutation.SetName(s)
	return tpuo
}

// SetPriorityType sets the "priority_type" field.
func (tpuo *TaskPriorityUpdateOne) SetPriorityType(tt taskpriority.PriorityType) *TaskPriorityUpdateOne {
	tpuo.mutation.SetPriorityType(tt)
	return tpuo
}

// SetColor sets the "color" edge to the Color entity.
func (tpuo *TaskPriorityUpdateOne) SetColor(c *Color) *TaskPriorityUpdateOne {
	return tpuo.SetColorID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tpuo *TaskPriorityUpdateOne) AddTaskIDs(ids ...ulid.ID) *TaskPriorityUpdateOne {
	tpuo.mutation.AddTaskIDs(ids...)
	return tpuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tpuo *TaskPriorityUpdateOne) AddTasks(t ...*Task) *TaskPriorityUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpuo.AddTaskIDs(ids...)
}

// Mutation returns the TaskPriorityMutation object of the builder.
func (tpuo *TaskPriorityUpdateOne) Mutation() *TaskPriorityMutation {
	return tpuo.mutation
}

// ClearColor clears the "color" edge to the Color entity.
func (tpuo *TaskPriorityUpdateOne) ClearColor() *TaskPriorityUpdateOne {
	tpuo.mutation.ClearColor()
	return tpuo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tpuo *TaskPriorityUpdateOne) ClearTasks() *TaskPriorityUpdateOne {
	tpuo.mutation.ClearTasks()
	return tpuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tpuo *TaskPriorityUpdateOne) RemoveTaskIDs(ids ...ulid.ID) *TaskPriorityUpdateOne {
	tpuo.mutation.RemoveTaskIDs(ids...)
	return tpuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tpuo *TaskPriorityUpdateOne) RemoveTasks(t ...*Task) *TaskPriorityUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpuo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TaskPriorityUpdateOne) Select(field string, fields ...string) *TaskPriorityUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TaskPriority entity.
func (tpuo *TaskPriorityUpdateOne) Save(ctx context.Context) (*TaskPriority, error) {
	var (
		err  error
		node *TaskPriority
	)
	if len(tpuo.hooks) == 0 {
		if err = tpuo.check(); err != nil {
			return nil, err
		}
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskPriorityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpuo.check(); err != nil {
				return nil, err
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TaskPriorityUpdateOne) SaveX(ctx context.Context) *TaskPriority {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TaskPriorityUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TaskPriorityUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TaskPriorityUpdateOne) check() error {
	if v, ok := tpuo.mutation.Name(); ok {
		if err := taskpriority.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskPriority.name": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.PriorityType(); ok {
		if err := taskpriority.PriorityTypeValidator(v); err != nil {
			return &ValidationError{Name: "priority_type", err: fmt.Errorf(`ent: validator failed for field "TaskPriority.priority_type": %w`, err)}
		}
	}
	if _, ok := tpuo.mutation.ColorID(); tpuo.mutation.ColorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskPriority.color"`)
	}
	return nil
}

func (tpuo *TaskPriorityUpdateOne) sqlSave(ctx context.Context) (_node *TaskPriority, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskpriority.Table,
			Columns: taskpriority.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskpriority.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskPriority.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskpriority.FieldID)
		for _, f := range fields {
			if !taskpriority.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskpriority.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskpriority.FieldName,
		})
	}
	if value, ok := tpuo.mutation.PriorityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: taskpriority.FieldPriorityType,
		})
	}
	if tpuo.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskpriority.ColorTable,
			Columns: []string{taskpriority.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskpriority.ColorTable,
			Columns: []string{taskpriority.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskpriority.TasksTable,
			Columns: []string{taskpriority.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tpuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskpriority.TasksTable,
			Columns: []string{taskpriority.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskpriority.TasksTable,
			Columns: []string{taskpriority.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskPriority{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskpriority.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
