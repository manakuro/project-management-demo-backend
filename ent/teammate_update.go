// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceteammate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateUpdate is the builder for updating Teammate entities.
type TeammateUpdate struct {
	config
	hooks    []Hook
	mutation *TeammateMutation
}

// Where appends a list predicates to the TeammateUpdate builder.
func (tu *TeammateUpdate) Where(ps ...predicate.Teammate) *TeammateUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TeammateUpdate) SetName(s string) *TeammateUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetImage sets the "image" field.
func (tu *TeammateUpdate) SetImage(s string) *TeammateUpdate {
	tu.mutation.SetImage(s)
	return tu
}

// SetEmail sets the "email" field.
func (tu *TeammateUpdate) SetEmail(s string) *TeammateUpdate {
	tu.mutation.SetEmail(s)
	return tu
}

// AddWorkspaceIDs adds the "workspaces" edge to the Workspace entity by IDs.
func (tu *TeammateUpdate) AddWorkspaceIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.AddWorkspaceIDs(ids...)
	return tu
}

// AddWorkspaces adds the "workspaces" edges to the Workspace entity.
func (tu *TeammateUpdate) AddWorkspaces(w ...*Workspace) *TeammateUpdate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tu.AddWorkspaceIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (tu *TeammateUpdate) AddProjectIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.AddProjectIDs(ids...)
	return tu
}

// AddProjects adds the "projects" edges to the Project entity.
func (tu *TeammateUpdate) AddProjects(p ...*Project) *TeammateUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProjectIDs(ids...)
}

// AddProjectTeammateIDs adds the "project_teammates" edge to the ProjectTeammate entity by IDs.
func (tu *TeammateUpdate) AddProjectTeammateIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.AddProjectTeammateIDs(ids...)
	return tu
}

// AddProjectTeammates adds the "project_teammates" edges to the ProjectTeammate entity.
func (tu *TeammateUpdate) AddProjectTeammates(p ...*ProjectTeammate) *TeammateUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddProjectTeammateIDs(ids...)
}

// AddWorkspaceTeammateIDs adds the "workspace_teammates" edge to the WorkspaceTeammate entity by IDs.
func (tu *TeammateUpdate) AddWorkspaceTeammateIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.AddWorkspaceTeammateIDs(ids...)
	return tu
}

// AddWorkspaceTeammates adds the "workspace_teammates" edges to the WorkspaceTeammate entity.
func (tu *TeammateUpdate) AddWorkspaceTeammates(w ...*WorkspaceTeammate) *TeammateUpdate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tu.AddWorkspaceTeammateIDs(ids...)
}

// Mutation returns the TeammateMutation object of the builder.
func (tu *TeammateUpdate) Mutation() *TeammateMutation {
	return tu.mutation
}

// ClearWorkspaces clears all "workspaces" edges to the Workspace entity.
func (tu *TeammateUpdate) ClearWorkspaces() *TeammateUpdate {
	tu.mutation.ClearWorkspaces()
	return tu
}

// RemoveWorkspaceIDs removes the "workspaces" edge to Workspace entities by IDs.
func (tu *TeammateUpdate) RemoveWorkspaceIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.RemoveWorkspaceIDs(ids...)
	return tu
}

// RemoveWorkspaces removes "workspaces" edges to Workspace entities.
func (tu *TeammateUpdate) RemoveWorkspaces(w ...*Workspace) *TeammateUpdate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tu.RemoveWorkspaceIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (tu *TeammateUpdate) ClearProjects() *TeammateUpdate {
	tu.mutation.ClearProjects()
	return tu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (tu *TeammateUpdate) RemoveProjectIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.RemoveProjectIDs(ids...)
	return tu
}

// RemoveProjects removes "projects" edges to Project entities.
func (tu *TeammateUpdate) RemoveProjects(p ...*Project) *TeammateUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProjectIDs(ids...)
}

// ClearProjectTeammates clears all "project_teammates" edges to the ProjectTeammate entity.
func (tu *TeammateUpdate) ClearProjectTeammates() *TeammateUpdate {
	tu.mutation.ClearProjectTeammates()
	return tu
}

// RemoveProjectTeammateIDs removes the "project_teammates" edge to ProjectTeammate entities by IDs.
func (tu *TeammateUpdate) RemoveProjectTeammateIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.RemoveProjectTeammateIDs(ids...)
	return tu
}

// RemoveProjectTeammates removes "project_teammates" edges to ProjectTeammate entities.
func (tu *TeammateUpdate) RemoveProjectTeammates(p ...*ProjectTeammate) *TeammateUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemoveProjectTeammateIDs(ids...)
}

// ClearWorkspaceTeammates clears all "workspace_teammates" edges to the WorkspaceTeammate entity.
func (tu *TeammateUpdate) ClearWorkspaceTeammates() *TeammateUpdate {
	tu.mutation.ClearWorkspaceTeammates()
	return tu
}

// RemoveWorkspaceTeammateIDs removes the "workspace_teammates" edge to WorkspaceTeammate entities by IDs.
func (tu *TeammateUpdate) RemoveWorkspaceTeammateIDs(ids ...ulid.ID) *TeammateUpdate {
	tu.mutation.RemoveWorkspaceTeammateIDs(ids...)
	return tu
}

// RemoveWorkspaceTeammates removes "workspace_teammates" edges to WorkspaceTeammate entities.
func (tu *TeammateUpdate) RemoveWorkspaceTeammates(w ...*WorkspaceTeammate) *TeammateUpdate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tu.RemoveWorkspaceTeammateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeammateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeammateUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeammateUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeammateUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TeammateUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := teammate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Image(); ok {
		if err := teammate.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf("ent: validator failed for field \"image\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Email(); ok {
		if err := teammate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	return nil
}

func (tu *TeammateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammate.Table,
			Columns: teammate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammate.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldName,
		})
	}
	if value, ok := tu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldImage,
		})
	}
	if value, ok := tu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldEmail,
		})
	}
	if tu.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspacesTable,
			Columns: []string{teammate.WorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedWorkspacesIDs(); len(nodes) > 0 && !tu.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspacesTable,
			Columns: []string{teammate.WorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.WorkspacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspacesTable,
			Columns: []string{teammate.WorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectsTable,
			Columns: []string{teammate.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !tu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectsTable,
			Columns: []string{teammate.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectsTable,
			Columns: []string{teammate.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProjectTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectTeammatesTable,
			Columns: []string{teammate.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedProjectTeammatesIDs(); len(nodes) > 0 && !tu.mutation.ProjectTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectTeammatesTable,
			Columns: []string{teammate.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectTeammatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectTeammatesTable,
			Columns: []string{teammate.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.WorkspaceTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceTeammatesTable,
			Columns: []string{teammate.WorkspaceTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceteammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedWorkspaceTeammatesIDs(); len(nodes) > 0 && !tu.mutation.WorkspaceTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceTeammatesTable,
			Columns: []string{teammate.WorkspaceTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.WorkspaceTeammatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceTeammatesTable,
			Columns: []string{teammate.WorkspaceTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TeammateUpdateOne is the builder for updating a single Teammate entity.
type TeammateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeammateMutation
}

// SetName sets the "name" field.
func (tuo *TeammateUpdateOne) SetName(s string) *TeammateUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetImage sets the "image" field.
func (tuo *TeammateUpdateOne) SetImage(s string) *TeammateUpdateOne {
	tuo.mutation.SetImage(s)
	return tuo
}

// SetEmail sets the "email" field.
func (tuo *TeammateUpdateOne) SetEmail(s string) *TeammateUpdateOne {
	tuo.mutation.SetEmail(s)
	return tuo
}

// AddWorkspaceIDs adds the "workspaces" edge to the Workspace entity by IDs.
func (tuo *TeammateUpdateOne) AddWorkspaceIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.AddWorkspaceIDs(ids...)
	return tuo
}

// AddWorkspaces adds the "workspaces" edges to the Workspace entity.
func (tuo *TeammateUpdateOne) AddWorkspaces(w ...*Workspace) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tuo.AddWorkspaceIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (tuo *TeammateUpdateOne) AddProjectIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.AddProjectIDs(ids...)
	return tuo
}

// AddProjects adds the "projects" edges to the Project entity.
func (tuo *TeammateUpdateOne) AddProjects(p ...*Project) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProjectIDs(ids...)
}

// AddProjectTeammateIDs adds the "project_teammates" edge to the ProjectTeammate entity by IDs.
func (tuo *TeammateUpdateOne) AddProjectTeammateIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.AddProjectTeammateIDs(ids...)
	return tuo
}

// AddProjectTeammates adds the "project_teammates" edges to the ProjectTeammate entity.
func (tuo *TeammateUpdateOne) AddProjectTeammates(p ...*ProjectTeammate) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddProjectTeammateIDs(ids...)
}

// AddWorkspaceTeammateIDs adds the "workspace_teammates" edge to the WorkspaceTeammate entity by IDs.
func (tuo *TeammateUpdateOne) AddWorkspaceTeammateIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.AddWorkspaceTeammateIDs(ids...)
	return tuo
}

// AddWorkspaceTeammates adds the "workspace_teammates" edges to the WorkspaceTeammate entity.
func (tuo *TeammateUpdateOne) AddWorkspaceTeammates(w ...*WorkspaceTeammate) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tuo.AddWorkspaceTeammateIDs(ids...)
}

// Mutation returns the TeammateMutation object of the builder.
func (tuo *TeammateUpdateOne) Mutation() *TeammateMutation {
	return tuo.mutation
}

// ClearWorkspaces clears all "workspaces" edges to the Workspace entity.
func (tuo *TeammateUpdateOne) ClearWorkspaces() *TeammateUpdateOne {
	tuo.mutation.ClearWorkspaces()
	return tuo
}

// RemoveWorkspaceIDs removes the "workspaces" edge to Workspace entities by IDs.
func (tuo *TeammateUpdateOne) RemoveWorkspaceIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.RemoveWorkspaceIDs(ids...)
	return tuo
}

// RemoveWorkspaces removes "workspaces" edges to Workspace entities.
func (tuo *TeammateUpdateOne) RemoveWorkspaces(w ...*Workspace) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tuo.RemoveWorkspaceIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (tuo *TeammateUpdateOne) ClearProjects() *TeammateUpdateOne {
	tuo.mutation.ClearProjects()
	return tuo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (tuo *TeammateUpdateOne) RemoveProjectIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.RemoveProjectIDs(ids...)
	return tuo
}

// RemoveProjects removes "projects" edges to Project entities.
func (tuo *TeammateUpdateOne) RemoveProjects(p ...*Project) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProjectIDs(ids...)
}

// ClearProjectTeammates clears all "project_teammates" edges to the ProjectTeammate entity.
func (tuo *TeammateUpdateOne) ClearProjectTeammates() *TeammateUpdateOne {
	tuo.mutation.ClearProjectTeammates()
	return tuo
}

// RemoveProjectTeammateIDs removes the "project_teammates" edge to ProjectTeammate entities by IDs.
func (tuo *TeammateUpdateOne) RemoveProjectTeammateIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.RemoveProjectTeammateIDs(ids...)
	return tuo
}

// RemoveProjectTeammates removes "project_teammates" edges to ProjectTeammate entities.
func (tuo *TeammateUpdateOne) RemoveProjectTeammates(p ...*ProjectTeammate) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemoveProjectTeammateIDs(ids...)
}

// ClearWorkspaceTeammates clears all "workspace_teammates" edges to the WorkspaceTeammate entity.
func (tuo *TeammateUpdateOne) ClearWorkspaceTeammates() *TeammateUpdateOne {
	tuo.mutation.ClearWorkspaceTeammates()
	return tuo
}

// RemoveWorkspaceTeammateIDs removes the "workspace_teammates" edge to WorkspaceTeammate entities by IDs.
func (tuo *TeammateUpdateOne) RemoveWorkspaceTeammateIDs(ids ...ulid.ID) *TeammateUpdateOne {
	tuo.mutation.RemoveWorkspaceTeammateIDs(ids...)
	return tuo
}

// RemoveWorkspaceTeammates removes "workspace_teammates" edges to WorkspaceTeammate entities.
func (tuo *TeammateUpdateOne) RemoveWorkspaceTeammates(w ...*WorkspaceTeammate) *TeammateUpdateOne {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tuo.RemoveWorkspaceTeammateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeammateUpdateOne) Select(field string, fields ...string) *TeammateUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Teammate entity.
func (tuo *TeammateUpdateOne) Save(ctx context.Context) (*Teammate, error) {
	var (
		err  error
		node *Teammate
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeammateUpdateOne) SaveX(ctx context.Context) *Teammate {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeammateUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeammateUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TeammateUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := teammate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Image(); ok {
		if err := teammate.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf("ent: validator failed for field \"image\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Email(); ok {
		if err := teammate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	return nil
}

func (tuo *TeammateUpdateOne) sqlSave(ctx context.Context) (_node *Teammate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammate.Table,
			Columns: teammate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammate.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Teammate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammate.FieldID)
		for _, f := range fields {
			if !teammate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teammate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldName,
		})
	}
	if value, ok := tuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldImage,
		})
	}
	if value, ok := tuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldEmail,
		})
	}
	if tuo.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspacesTable,
			Columns: []string{teammate.WorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedWorkspacesIDs(); len(nodes) > 0 && !tuo.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspacesTable,
			Columns: []string{teammate.WorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.WorkspacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspacesTable,
			Columns: []string{teammate.WorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectsTable,
			Columns: []string{teammate.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !tuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectsTable,
			Columns: []string{teammate.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectsTable,
			Columns: []string{teammate.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProjectTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectTeammatesTable,
			Columns: []string{teammate.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedProjectTeammatesIDs(); len(nodes) > 0 && !tuo.mutation.ProjectTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectTeammatesTable,
			Columns: []string{teammate.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectTeammatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectTeammatesTable,
			Columns: []string{teammate.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.WorkspaceTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceTeammatesTable,
			Columns: []string{teammate.WorkspaceTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceteammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedWorkspaceTeammatesIDs(); len(nodes) > 0 && !tuo.mutation.WorkspaceTeammatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceTeammatesTable,
			Columns: []string{teammate.WorkspaceTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.WorkspaceTeammatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceTeammatesTable,
			Columns: []string{teammate.WorkspaceTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Teammate{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
