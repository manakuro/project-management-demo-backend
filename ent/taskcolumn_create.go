// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskColumnCreate is the builder for creating a TaskColumn entity.
type TaskColumnCreate struct {
	config
	mutation *TaskColumnMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tcc *TaskColumnCreate) SetName(s string) *TaskColumnCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetType sets the "type" field.
func (tcc *TaskColumnCreate) SetType(t taskcolumn.Type) *TaskColumnCreate {
	tcc.mutation.SetType(t)
	return tcc
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TaskColumnCreate) SetCreatedAt(t time.Time) *TaskColumnCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TaskColumnCreate) SetNillableCreatedAt(t *time.Time) *TaskColumnCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TaskColumnCreate) SetUpdatedAt(t time.Time) *TaskColumnCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TaskColumnCreate) SetNillableUpdatedAt(t *time.Time) *TaskColumnCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TaskColumnCreate) SetID(u ulid.ID) *TaskColumnCreate {
	tcc.mutation.SetID(u)
	return tcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcc *TaskColumnCreate) SetNillableID(u *ulid.ID) *TaskColumnCreate {
	if u != nil {
		tcc.SetID(*u)
	}
	return tcc
}

// AddTeammateTaskColumnIDs adds the "teammateTaskColumns" edge to the TeammateTaskColumn entity by IDs.
func (tcc *TaskColumnCreate) AddTeammateTaskColumnIDs(ids ...ulid.ID) *TaskColumnCreate {
	tcc.mutation.AddTeammateTaskColumnIDs(ids...)
	return tcc
}

// AddTeammateTaskColumns adds the "teammateTaskColumns" edges to the TeammateTaskColumn entity.
func (tcc *TaskColumnCreate) AddTeammateTaskColumns(t ...*TeammateTaskColumn) *TaskColumnCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddTeammateTaskColumnIDs(ids...)
}

// AddProjectTaskColumnIDs adds the "projectTaskColumns" edge to the ProjectTaskColumn entity by IDs.
func (tcc *TaskColumnCreate) AddProjectTaskColumnIDs(ids ...ulid.ID) *TaskColumnCreate {
	tcc.mutation.AddProjectTaskColumnIDs(ids...)
	return tcc
}

// AddProjectTaskColumns adds the "projectTaskColumns" edges to the ProjectTaskColumn entity.
func (tcc *TaskColumnCreate) AddProjectTaskColumns(p ...*ProjectTaskColumn) *TaskColumnCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tcc.AddProjectTaskColumnIDs(ids...)
}

// Mutation returns the TaskColumnMutation object of the builder.
func (tcc *TaskColumnCreate) Mutation() *TaskColumnMutation {
	return tcc.mutation
}

// Save creates the TaskColumn in the database.
func (tcc *TaskColumnCreate) Save(ctx context.Context) (*TaskColumn, error) {
	var (
		err  error
		node *TaskColumn
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskColumnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TaskColumnCreate) SaveX(ctx context.Context) *TaskColumn {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TaskColumnCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TaskColumnCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TaskColumnCreate) defaults() {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := taskcolumn.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := taskcolumn.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.ID(); !ok {
		v := taskcolumn.DefaultID()
		tcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TaskColumnCreate) check() error {
	if _, ok := tcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TaskColumn.name"`)}
	}
	if v, ok := tcc.mutation.Name(); ok {
		if err := taskcolumn.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskColumn.name": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TaskColumn.type"`)}
	}
	if v, ok := tcc.mutation.GetType(); ok {
		if err := taskcolumn.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TaskColumn.type": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskColumn.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskColumn.updated_at"`)}
	}
	return nil
}

func (tcc *TaskColumnCreate) sqlSave(ctx context.Context) (*TaskColumn, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tcc *TaskColumnCreate) createSpec() (*TaskColumn, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskColumn{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskcolumn.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskcolumn.FieldID,
			},
		}
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskcolumn.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tcc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: taskcolumn.FieldType,
		})
		_node.Type = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskcolumn.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskcolumn.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := tcc.mutation.TeammateTaskColumnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcolumn.TeammateTaskColumnsTable,
			Columns: []string{taskcolumn.TeammateTaskColumnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetaskcolumn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.ProjectTaskColumnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskcolumn.ProjectTaskColumnsTable,
			Columns: []string{taskcolumn.ProjectTaskColumnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttaskcolumn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskColumn.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskColumnUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tcc *TaskColumnCreate) OnConflict(opts ...sql.ConflictOption) *TaskColumnUpsertOne {
	tcc.conflict = opts
	return &TaskColumnUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskColumn.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcc *TaskColumnCreate) OnConflictColumns(columns ...string) *TaskColumnUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TaskColumnUpsertOne{
		create: tcc,
	}
}

type (
	// TaskColumnUpsertOne is the builder for "upsert"-ing
	//  one TaskColumn node.
	TaskColumnUpsertOne struct {
		create *TaskColumnCreate
	}

	// TaskColumnUpsert is the "OnConflict" setter.
	TaskColumnUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TaskColumnUpsert) SetName(v string) *TaskColumnUpsert {
	u.Set(taskcolumn.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskColumnUpsert) UpdateName() *TaskColumnUpsert {
	u.SetExcluded(taskcolumn.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *TaskColumnUpsert) SetType(v taskcolumn.Type) *TaskColumnUpsert {
	u.Set(taskcolumn.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskColumnUpsert) UpdateType() *TaskColumnUpsert {
	u.SetExcluded(taskcolumn.FieldType)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskColumnUpsert) SetCreatedAt(v time.Time) *TaskColumnUpsert {
	u.Set(taskcolumn.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskColumnUpsert) UpdateCreatedAt() *TaskColumnUpsert {
	u.SetExcluded(taskcolumn.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskColumnUpsert) SetUpdatedAt(v time.Time) *TaskColumnUpsert {
	u.Set(taskcolumn.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskColumnUpsert) UpdateUpdatedAt() *TaskColumnUpsert {
	u.SetExcluded(taskcolumn.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskColumn.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskcolumn.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskColumnUpsertOne) UpdateNewValues() *TaskColumnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(taskcolumn.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(taskcolumn.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(taskcolumn.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TaskColumn.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TaskColumnUpsertOne) Ignore() *TaskColumnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskColumnUpsertOne) DoNothing() *TaskColumnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskColumnCreate.OnConflict
// documentation for more info.
func (u *TaskColumnUpsertOne) Update(set func(*TaskColumnUpsert)) *TaskColumnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskColumnUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskColumnUpsertOne) SetName(v string) *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskColumnUpsertOne) UpdateName() *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *TaskColumnUpsertOne) SetType(v taskcolumn.Type) *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskColumnUpsertOne) UpdateType() *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskColumnUpsertOne) SetCreatedAt(v time.Time) *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskColumnUpsertOne) UpdateCreatedAt() *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskColumnUpsertOne) SetUpdatedAt(v time.Time) *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskColumnUpsertOne) UpdateUpdatedAt() *TaskColumnUpsertOne {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskColumnUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskColumnCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskColumnUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskColumnUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TaskColumnUpsertOne.ID is not supported by MySQL driver. Use TaskColumnUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskColumnUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskColumnCreateBulk is the builder for creating many TaskColumn entities in bulk.
type TaskColumnCreateBulk struct {
	config
	builders []*TaskColumnCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskColumn entities in the database.
func (tccb *TaskColumnCreateBulk) Save(ctx context.Context) ([]*TaskColumn, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TaskColumn, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskColumnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TaskColumnCreateBulk) SaveX(ctx context.Context) []*TaskColumn {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TaskColumnCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TaskColumnCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskColumn.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskColumnUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tccb *TaskColumnCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskColumnUpsertBulk {
	tccb.conflict = opts
	return &TaskColumnUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskColumn.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tccb *TaskColumnCreateBulk) OnConflictColumns(columns ...string) *TaskColumnUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TaskColumnUpsertBulk{
		create: tccb,
	}
}

// TaskColumnUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskColumn nodes.
type TaskColumnUpsertBulk struct {
	create *TaskColumnCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskColumn.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskcolumn.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskColumnUpsertBulk) UpdateNewValues() *TaskColumnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(taskcolumn.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(taskcolumn.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(taskcolumn.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskColumn.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TaskColumnUpsertBulk) Ignore() *TaskColumnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskColumnUpsertBulk) DoNothing() *TaskColumnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskColumnCreateBulk.OnConflict
// documentation for more info.
func (u *TaskColumnUpsertBulk) Update(set func(*TaskColumnUpsert)) *TaskColumnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskColumnUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskColumnUpsertBulk) SetName(v string) *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskColumnUpsertBulk) UpdateName() *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *TaskColumnUpsertBulk) SetType(v taskcolumn.Type) *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskColumnUpsertBulk) UpdateType() *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskColumnUpsertBulk) SetCreatedAt(v time.Time) *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskColumnUpsertBulk) UpdateCreatedAt() *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskColumnUpsertBulk) SetUpdatedAt(v time.Time) *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskColumnUpsertBulk) UpdateUpdatedAt() *TaskColumnUpsertBulk {
	return u.Update(func(s *TaskColumnUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskColumnUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskColumnCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskColumnCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskColumnUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
