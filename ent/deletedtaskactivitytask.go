// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/deletedtaskactivitytask"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// DeletedTaskActivityTask is the model entity for the DeletedTaskActivityTask schema.
type DeletedTaskActivityTask struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// TaskActivityID holds the value of the "task_activity_id" field.
	TaskActivityID ulid.ID `json:"task_activity_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID ulid.ID `json:"task_id,omitempty"`
	// TaskActivityTaskID holds the value of the "task_activity_task_id" field.
	TaskActivityTaskID ulid.ID `json:"task_activity_task_id,omitempty"`
	// TaskActivityTaskCreatedAt holds the value of the "task_activity_task_created_at" field.
	TaskActivityTaskCreatedAt time.Time `json:"task_activity_task_created_at,omitempty"`
	// TaskActivityTaskUpdatedAt holds the value of the "task_activity_task_updated_at" field.
	TaskActivityTaskUpdatedAt time.Time `json:"task_activity_task_updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeletedTaskActivityTaskQuery when eager-loading is set.
	Edges DeletedTaskActivityTaskEdges `json:"edges"`
}

// DeletedTaskActivityTaskEdges holds the relations/edges for other nodes in the graph.
type DeletedTaskActivityTaskEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeletedTaskActivityTaskEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// The edge task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeletedTaskActivityTask) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deletedtaskactivitytask.FieldTaskActivityTaskCreatedAt, deletedtaskactivitytask.FieldTaskActivityTaskUpdatedAt, deletedtaskactivitytask.FieldCreatedAt, deletedtaskactivitytask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case deletedtaskactivitytask.FieldID, deletedtaskactivitytask.FieldTaskActivityID, deletedtaskactivitytask.FieldTaskID, deletedtaskactivitytask.FieldTaskActivityTaskID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeletedTaskActivityTask", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeletedTaskActivityTask fields.
func (dtat *DeletedTaskActivityTask) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deletedtaskactivitytask.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dtat.ID = *value
			}
		case deletedtaskactivitytask.FieldTaskActivityID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_activity_id", values[i])
			} else if value != nil {
				dtat.TaskActivityID = *value
			}
		case deletedtaskactivitytask.FieldTaskID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				dtat.TaskID = *value
			}
		case deletedtaskactivitytask.FieldTaskActivityTaskID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_activity_task_id", values[i])
			} else if value != nil {
				dtat.TaskActivityTaskID = *value
			}
		case deletedtaskactivitytask.FieldTaskActivityTaskCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field task_activity_task_created_at", values[i])
			} else if value.Valid {
				dtat.TaskActivityTaskCreatedAt = value.Time
			}
		case deletedtaskactivitytask.FieldTaskActivityTaskUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field task_activity_task_updated_at", values[i])
			} else if value.Valid {
				dtat.TaskActivityTaskUpdatedAt = value.Time
			}
		case deletedtaskactivitytask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dtat.CreatedAt = value.Time
			}
		case deletedtaskactivitytask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dtat.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTask queries the "task" edge of the DeletedTaskActivityTask entity.
func (dtat *DeletedTaskActivityTask) QueryTask() *TaskQuery {
	return (&DeletedTaskActivityTaskClient{config: dtat.config}).QueryTask(dtat)
}

// Update returns a builder for updating this DeletedTaskActivityTask.
// Note that you need to call DeletedTaskActivityTask.Unwrap() before calling this method if this DeletedTaskActivityTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (dtat *DeletedTaskActivityTask) Update() *DeletedTaskActivityTaskUpdateOne {
	return (&DeletedTaskActivityTaskClient{config: dtat.config}).UpdateOne(dtat)
}

// Unwrap unwraps the DeletedTaskActivityTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dtat *DeletedTaskActivityTask) Unwrap() *DeletedTaskActivityTask {
	tx, ok := dtat.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeletedTaskActivityTask is not a transactional entity")
	}
	dtat.config.driver = tx.drv
	return dtat
}

// String implements the fmt.Stringer.
func (dtat *DeletedTaskActivityTask) String() string {
	var builder strings.Builder
	builder.WriteString("DeletedTaskActivityTask(")
	builder.WriteString(fmt.Sprintf("id=%v", dtat.ID))
	builder.WriteString(", task_activity_id=")
	builder.WriteString(fmt.Sprintf("%v", dtat.TaskActivityID))
	builder.WriteString(", task_id=")
	builder.WriteString(fmt.Sprintf("%v", dtat.TaskID))
	builder.WriteString(", task_activity_task_id=")
	builder.WriteString(fmt.Sprintf("%v", dtat.TaskActivityTaskID))
	builder.WriteString(", task_activity_task_created_at=")
	builder.WriteString(dtat.TaskActivityTaskCreatedAt.Format(time.ANSIC))
	builder.WriteString(", task_activity_task_updated_at=")
	builder.WriteString(dtat.TaskActivityTaskUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(dtat.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(dtat.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeletedTaskActivityTasks is a parsable slice of DeletedTaskActivityTask.
type DeletedTaskActivityTasks []*DeletedTaskActivityTask

func (dtat DeletedTaskActivityTasks) config(cfg config) {
	for _i := range dtat {
		dtat[_i].config = cfg
	}
}
