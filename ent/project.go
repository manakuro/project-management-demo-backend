// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// WorkspaceID holds the value of the "workspace_id" field.
	WorkspaceID ulid.ID `json:"workspace_id,omitempty"`
	// ProjectBaseColorID holds the value of the "project_base_color_id" field.
	ProjectBaseColorID ulid.ID `json:"project_base_color_id,omitempty"`
	// ProjectLightColorID holds the value of the "project_light_color_id" field.
	ProjectLightColorID ulid.ID `json:"project_light_color_id,omitempty"`
	// ProjectIconID holds the value of the "project_icon_id" field.
	ProjectIconID ulid.ID `json:"project_icon_id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy ulid.ID `json:"created_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]interface{} `json:"description,omitempty"`
	// DescriptionTitle holds the value of the "description_title" field.
	DescriptionTitle string `json:"description_title,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate *time.Time `json:"due_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges ProjectEdges `json:"edges"`
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Workspace holds the value of the workspace edge.
	Workspace *Workspace `json:"workspace,omitempty"`
	// ProjectBaseColor holds the value of the projectBaseColor edge.
	ProjectBaseColor *ProjectBaseColor `json:"projectBaseColor,omitempty"`
	// ProjectLightColor holds the value of the projectLightColor edge.
	ProjectLightColor *ProjectLightColor `json:"projectLightColor,omitempty"`
	// ProjectIcon holds the value of the projectIcon edge.
	ProjectIcon *ProjectIcon `json:"projectIcon,omitempty"`
	// Teammate holds the value of the teammate edge.
	Teammate *Teammate `json:"teammate,omitempty"`
	// ProjectTeammates holds the value of the projectTeammates edge.
	ProjectTeammates []*ProjectTeammate `json:"projectTeammates,omitempty"`
	// FavoriteProjects holds the value of the favoriteProjects edge.
	FavoriteProjects []*FavoriteProject `json:"favoriteProjects,omitempty"`
	// ProjectTaskColumns holds the value of the projectTaskColumns edge.
	ProjectTaskColumns []*ProjectTaskColumn `json:"projectTaskColumns,omitempty"`
	// ProjectTaskListStatuses holds the value of the projectTaskListStatuses edge.
	ProjectTaskListStatuses []*ProjectTaskListStatus `json:"projectTaskListStatuses,omitempty"`
	// ProjectTaskSections holds the value of the projectTaskSections edge.
	ProjectTaskSections []*ProjectTaskSection `json:"projectTaskSections,omitempty"`
	// ProjectTasks holds the value of the projectTasks edge.
	ProjectTasks []*ProjectTask `json:"projectTasks,omitempty"`
	// TaskFiles holds the value of the taskFiles edge.
	TaskFiles []*TaskFile `json:"taskFiles,omitempty"`
	// WorkspaceActivities holds the value of the workspaceActivities edge.
	WorkspaceActivities []*WorkspaceActivity `json:"workspaceActivities,omitempty"`
	// ArchivedWorkspaceActivities holds the value of the archivedWorkspaceActivities edge.
	ArchivedWorkspaceActivities []*ArchivedWorkspaceActivity `json:"archivedWorkspaceActivities,omitempty"`
	// DeletedProjectTasks holds the value of the deletedProjectTasks edge.
	DeletedProjectTasks []*DeletedProjectTask `json:"deletedProjectTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
}

// WorkspaceOrErr returns the Workspace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) WorkspaceOrErr() (*Workspace, error) {
	if e.loadedTypes[0] {
		if e.Workspace == nil {
			// The edge workspace was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workspace.Label}
		}
		return e.Workspace, nil
	}
	return nil, &NotLoadedError{edge: "workspace"}
}

// ProjectBaseColorOrErr returns the ProjectBaseColor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) ProjectBaseColorOrErr() (*ProjectBaseColor, error) {
	if e.loadedTypes[1] {
		if e.ProjectBaseColor == nil {
			// The edge projectBaseColor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: projectbasecolor.Label}
		}
		return e.ProjectBaseColor, nil
	}
	return nil, &NotLoadedError{edge: "projectBaseColor"}
}

// ProjectLightColorOrErr returns the ProjectLightColor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) ProjectLightColorOrErr() (*ProjectLightColor, error) {
	if e.loadedTypes[2] {
		if e.ProjectLightColor == nil {
			// The edge projectLightColor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: projectlightcolor.Label}
		}
		return e.ProjectLightColor, nil
	}
	return nil, &NotLoadedError{edge: "projectLightColor"}
}

// ProjectIconOrErr returns the ProjectIcon value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) ProjectIconOrErr() (*ProjectIcon, error) {
	if e.loadedTypes[3] {
		if e.ProjectIcon == nil {
			// The edge projectIcon was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: projecticon.Label}
		}
		return e.ProjectIcon, nil
	}
	return nil, &NotLoadedError{edge: "projectIcon"}
}

// TeammateOrErr returns the Teammate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) TeammateOrErr() (*Teammate, error) {
	if e.loadedTypes[4] {
		if e.Teammate == nil {
			// The edge teammate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammate.Label}
		}
		return e.Teammate, nil
	}
	return nil, &NotLoadedError{edge: "teammate"}
}

// ProjectTeammatesOrErr returns the ProjectTeammates value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectTeammatesOrErr() ([]*ProjectTeammate, error) {
	if e.loadedTypes[5] {
		return e.ProjectTeammates, nil
	}
	return nil, &NotLoadedError{edge: "projectTeammates"}
}

// FavoriteProjectsOrErr returns the FavoriteProjects value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) FavoriteProjectsOrErr() ([]*FavoriteProject, error) {
	if e.loadedTypes[6] {
		return e.FavoriteProjects, nil
	}
	return nil, &NotLoadedError{edge: "favoriteProjects"}
}

// ProjectTaskColumnsOrErr returns the ProjectTaskColumns value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectTaskColumnsOrErr() ([]*ProjectTaskColumn, error) {
	if e.loadedTypes[7] {
		return e.ProjectTaskColumns, nil
	}
	return nil, &NotLoadedError{edge: "projectTaskColumns"}
}

// ProjectTaskListStatusesOrErr returns the ProjectTaskListStatuses value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectTaskListStatusesOrErr() ([]*ProjectTaskListStatus, error) {
	if e.loadedTypes[8] {
		return e.ProjectTaskListStatuses, nil
	}
	return nil, &NotLoadedError{edge: "projectTaskListStatuses"}
}

// ProjectTaskSectionsOrErr returns the ProjectTaskSections value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectTaskSectionsOrErr() ([]*ProjectTaskSection, error) {
	if e.loadedTypes[9] {
		return e.ProjectTaskSections, nil
	}
	return nil, &NotLoadedError{edge: "projectTaskSections"}
}

// ProjectTasksOrErr returns the ProjectTasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectTasksOrErr() ([]*ProjectTask, error) {
	if e.loadedTypes[10] {
		return e.ProjectTasks, nil
	}
	return nil, &NotLoadedError{edge: "projectTasks"}
}

// TaskFilesOrErr returns the TaskFiles value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) TaskFilesOrErr() ([]*TaskFile, error) {
	if e.loadedTypes[11] {
		return e.TaskFiles, nil
	}
	return nil, &NotLoadedError{edge: "taskFiles"}
}

// WorkspaceActivitiesOrErr returns the WorkspaceActivities value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) WorkspaceActivitiesOrErr() ([]*WorkspaceActivity, error) {
	if e.loadedTypes[12] {
		return e.WorkspaceActivities, nil
	}
	return nil, &NotLoadedError{edge: "workspaceActivities"}
}

// ArchivedWorkspaceActivitiesOrErr returns the ArchivedWorkspaceActivities value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ArchivedWorkspaceActivitiesOrErr() ([]*ArchivedWorkspaceActivity, error) {
	if e.loadedTypes[13] {
		return e.ArchivedWorkspaceActivities, nil
	}
	return nil, &NotLoadedError{edge: "archivedWorkspaceActivities"}
}

// DeletedProjectTasksOrErr returns the DeletedProjectTasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) DeletedProjectTasksOrErr() ([]*DeletedProjectTask, error) {
	if e.loadedTypes[14] {
		return e.DeletedProjectTasks, nil
	}
	return nil, &NotLoadedError{edge: "deletedProjectTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldDescription:
			values[i] = new([]byte)
		case project.FieldName, project.FieldDescriptionTitle:
			values[i] = new(sql.NullString)
		case project.FieldDueDate, project.FieldCreatedAt, project.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case project.FieldID, project.FieldWorkspaceID, project.FieldProjectBaseColorID, project.FieldProjectLightColorID, project.FieldProjectIconID, project.FieldCreatedBy:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Project", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case project.FieldWorkspaceID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value != nil {
				pr.WorkspaceID = *value
			}
		case project.FieldProjectBaseColorID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field project_base_color_id", values[i])
			} else if value != nil {
				pr.ProjectBaseColorID = *value
			}
		case project.FieldProjectLightColorID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field project_light_color_id", values[i])
			} else if value != nil {
				pr.ProjectLightColorID = *value
			}
		case project.FieldProjectIconID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field project_icon_id", values[i])
			} else if value != nil {
				pr.ProjectIconID = *value
			}
		case project.FieldCreatedBy:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				pr.CreatedBy = *value
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case project.FieldDescriptionTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description_title", values[i])
			} else if value.Valid {
				pr.DescriptionTitle = value.String
			}
		case project.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				pr.DueDate = new(time.Time)
				*pr.DueDate = value.Time
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryWorkspace queries the "workspace" edge of the Project entity.
func (pr *Project) QueryWorkspace() *WorkspaceQuery {
	return (&ProjectClient{config: pr.config}).QueryWorkspace(pr)
}

// QueryProjectBaseColor queries the "projectBaseColor" edge of the Project entity.
func (pr *Project) QueryProjectBaseColor() *ProjectBaseColorQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectBaseColor(pr)
}

// QueryProjectLightColor queries the "projectLightColor" edge of the Project entity.
func (pr *Project) QueryProjectLightColor() *ProjectLightColorQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectLightColor(pr)
}

// QueryProjectIcon queries the "projectIcon" edge of the Project entity.
func (pr *Project) QueryProjectIcon() *ProjectIconQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectIcon(pr)
}

// QueryTeammate queries the "teammate" edge of the Project entity.
func (pr *Project) QueryTeammate() *TeammateQuery {
	return (&ProjectClient{config: pr.config}).QueryTeammate(pr)
}

// QueryProjectTeammates queries the "projectTeammates" edge of the Project entity.
func (pr *Project) QueryProjectTeammates() *ProjectTeammateQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectTeammates(pr)
}

// QueryFavoriteProjects queries the "favoriteProjects" edge of the Project entity.
func (pr *Project) QueryFavoriteProjects() *FavoriteProjectQuery {
	return (&ProjectClient{config: pr.config}).QueryFavoriteProjects(pr)
}

// QueryProjectTaskColumns queries the "projectTaskColumns" edge of the Project entity.
func (pr *Project) QueryProjectTaskColumns() *ProjectTaskColumnQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectTaskColumns(pr)
}

// QueryProjectTaskListStatuses queries the "projectTaskListStatuses" edge of the Project entity.
func (pr *Project) QueryProjectTaskListStatuses() *ProjectTaskListStatusQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectTaskListStatuses(pr)
}

// QueryProjectTaskSections queries the "projectTaskSections" edge of the Project entity.
func (pr *Project) QueryProjectTaskSections() *ProjectTaskSectionQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectTaskSections(pr)
}

// QueryProjectTasks queries the "projectTasks" edge of the Project entity.
func (pr *Project) QueryProjectTasks() *ProjectTaskQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectTasks(pr)
}

// QueryTaskFiles queries the "taskFiles" edge of the Project entity.
func (pr *Project) QueryTaskFiles() *TaskFileQuery {
	return (&ProjectClient{config: pr.config}).QueryTaskFiles(pr)
}

// QueryWorkspaceActivities queries the "workspaceActivities" edge of the Project entity.
func (pr *Project) QueryWorkspaceActivities() *WorkspaceActivityQuery {
	return (&ProjectClient{config: pr.config}).QueryWorkspaceActivities(pr)
}

// QueryArchivedWorkspaceActivities queries the "archivedWorkspaceActivities" edge of the Project entity.
func (pr *Project) QueryArchivedWorkspaceActivities() *ArchivedWorkspaceActivityQuery {
	return (&ProjectClient{config: pr.config}).QueryArchivedWorkspaceActivities(pr)
}

// QueryDeletedProjectTasks queries the "deletedProjectTasks" edge of the Project entity.
func (pr *Project) QueryDeletedProjectTasks() *DeletedProjectTaskQuery {
	return (&ProjectClient{config: pr.config}).QueryDeletedProjectTasks(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return (&ProjectClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", workspace_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.WorkspaceID))
	builder.WriteString(", project_base_color_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProjectBaseColorID))
	builder.WriteString(", project_light_color_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProjectLightColorID))
	builder.WriteString(", project_icon_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProjectIconID))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatedBy))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", description=")
	builder.WriteString(fmt.Sprintf("%v", pr.Description))
	builder.WriteString(", description_title=")
	builder.WriteString(pr.DescriptionTitle)
	if v := pr.DueDate; v != nil {
		builder.WriteString(", due_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project

func (pr Projects) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
