// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/teammate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskFeedLikeUpdate is the builder for updating TaskFeedLike entities.
type TaskFeedLikeUpdate struct {
	config
	hooks    []Hook
	mutation *TaskFeedLikeMutation
}

// Where appends a list predicates to the TaskFeedLikeUpdate builder.
func (tflu *TaskFeedLikeUpdate) Where(ps ...predicate.TaskFeedLike) *TaskFeedLikeUpdate {
	tflu.mutation.Where(ps...)
	return tflu
}

// SetTaskID sets the "task_id" field.
func (tflu *TaskFeedLikeUpdate) SetTaskID(u ulid.ID) *TaskFeedLikeUpdate {
	tflu.mutation.SetTaskID(u)
	return tflu
}

// SetTeammateID sets the "teammate_id" field.
func (tflu *TaskFeedLikeUpdate) SetTeammateID(u ulid.ID) *TaskFeedLikeUpdate {
	tflu.mutation.SetTeammateID(u)
	return tflu
}

// SetTaskFeedID sets the "task_feed_id" field.
func (tflu *TaskFeedLikeUpdate) SetTaskFeedID(u ulid.ID) *TaskFeedLikeUpdate {
	tflu.mutation.SetTaskFeedID(u)
	return tflu
}

// SetTask sets the "task" edge to the Task entity.
func (tflu *TaskFeedLikeUpdate) SetTask(t *Task) *TaskFeedLikeUpdate {
	return tflu.SetTaskID(t.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tflu *TaskFeedLikeUpdate) SetTeammate(t *Teammate) *TaskFeedLikeUpdate {
	return tflu.SetTeammateID(t.ID)
}

// SetFeedID sets the "feed" edge to the TaskFeed entity by ID.
func (tflu *TaskFeedLikeUpdate) SetFeedID(id ulid.ID) *TaskFeedLikeUpdate {
	tflu.mutation.SetFeedID(id)
	return tflu
}

// SetFeed sets the "feed" edge to the TaskFeed entity.
func (tflu *TaskFeedLikeUpdate) SetFeed(t *TaskFeed) *TaskFeedLikeUpdate {
	return tflu.SetFeedID(t.ID)
}

// Mutation returns the TaskFeedLikeMutation object of the builder.
func (tflu *TaskFeedLikeUpdate) Mutation() *TaskFeedLikeMutation {
	return tflu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tflu *TaskFeedLikeUpdate) ClearTask() *TaskFeedLikeUpdate {
	tflu.mutation.ClearTask()
	return tflu
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tflu *TaskFeedLikeUpdate) ClearTeammate() *TaskFeedLikeUpdate {
	tflu.mutation.ClearTeammate()
	return tflu
}

// ClearFeed clears the "feed" edge to the TaskFeed entity.
func (tflu *TaskFeedLikeUpdate) ClearFeed() *TaskFeedLikeUpdate {
	tflu.mutation.ClearFeed()
	return tflu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tflu *TaskFeedLikeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tflu.hooks) == 0 {
		if err = tflu.check(); err != nil {
			return 0, err
		}
		affected, err = tflu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskFeedLikeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tflu.check(); err != nil {
				return 0, err
			}
			tflu.mutation = mutation
			affected, err = tflu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tflu.hooks) - 1; i >= 0; i-- {
			if tflu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tflu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tflu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tflu *TaskFeedLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := tflu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tflu *TaskFeedLikeUpdate) Exec(ctx context.Context) error {
	_, err := tflu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tflu *TaskFeedLikeUpdate) ExecX(ctx context.Context) {
	if err := tflu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tflu *TaskFeedLikeUpdate) check() error {
	if _, ok := tflu.mutation.TaskID(); tflu.mutation.TaskCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task\"")
	}
	if _, ok := tflu.mutation.TeammateID(); tflu.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	if _, ok := tflu.mutation.FeedID(); tflu.mutation.FeedCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"feed\"")
	}
	return nil
}

func (tflu *TaskFeedLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskfeedlike.Table,
			Columns: taskfeedlike.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskfeedlike.FieldID,
			},
		},
	}
	if ps := tflu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tflu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TaskTable,
			Columns: []string{taskfeedlike.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tflu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TaskTable,
			Columns: []string{taskfeedlike.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tflu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TeammateTable,
			Columns: []string{taskfeedlike.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tflu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TeammateTable,
			Columns: []string{taskfeedlike.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tflu.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.FeedTable,
			Columns: []string{taskfeedlike.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tflu.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.FeedTable,
			Columns: []string{taskfeedlike.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tflu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskfeedlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskFeedLikeUpdateOne is the builder for updating a single TaskFeedLike entity.
type TaskFeedLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskFeedLikeMutation
}

// SetTaskID sets the "task_id" field.
func (tfluo *TaskFeedLikeUpdateOne) SetTaskID(u ulid.ID) *TaskFeedLikeUpdateOne {
	tfluo.mutation.SetTaskID(u)
	return tfluo
}

// SetTeammateID sets the "teammate_id" field.
func (tfluo *TaskFeedLikeUpdateOne) SetTeammateID(u ulid.ID) *TaskFeedLikeUpdateOne {
	tfluo.mutation.SetTeammateID(u)
	return tfluo
}

// SetTaskFeedID sets the "task_feed_id" field.
func (tfluo *TaskFeedLikeUpdateOne) SetTaskFeedID(u ulid.ID) *TaskFeedLikeUpdateOne {
	tfluo.mutation.SetTaskFeedID(u)
	return tfluo
}

// SetTask sets the "task" edge to the Task entity.
func (tfluo *TaskFeedLikeUpdateOne) SetTask(t *Task) *TaskFeedLikeUpdateOne {
	return tfluo.SetTaskID(t.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tfluo *TaskFeedLikeUpdateOne) SetTeammate(t *Teammate) *TaskFeedLikeUpdateOne {
	return tfluo.SetTeammateID(t.ID)
}

// SetFeedID sets the "feed" edge to the TaskFeed entity by ID.
func (tfluo *TaskFeedLikeUpdateOne) SetFeedID(id ulid.ID) *TaskFeedLikeUpdateOne {
	tfluo.mutation.SetFeedID(id)
	return tfluo
}

// SetFeed sets the "feed" edge to the TaskFeed entity.
func (tfluo *TaskFeedLikeUpdateOne) SetFeed(t *TaskFeed) *TaskFeedLikeUpdateOne {
	return tfluo.SetFeedID(t.ID)
}

// Mutation returns the TaskFeedLikeMutation object of the builder.
func (tfluo *TaskFeedLikeUpdateOne) Mutation() *TaskFeedLikeMutation {
	return tfluo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tfluo *TaskFeedLikeUpdateOne) ClearTask() *TaskFeedLikeUpdateOne {
	tfluo.mutation.ClearTask()
	return tfluo
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tfluo *TaskFeedLikeUpdateOne) ClearTeammate() *TaskFeedLikeUpdateOne {
	tfluo.mutation.ClearTeammate()
	return tfluo
}

// ClearFeed clears the "feed" edge to the TaskFeed entity.
func (tfluo *TaskFeedLikeUpdateOne) ClearFeed() *TaskFeedLikeUpdateOne {
	tfluo.mutation.ClearFeed()
	return tfluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfluo *TaskFeedLikeUpdateOne) Select(field string, fields ...string) *TaskFeedLikeUpdateOne {
	tfluo.fields = append([]string{field}, fields...)
	return tfluo
}

// Save executes the query and returns the updated TaskFeedLike entity.
func (tfluo *TaskFeedLikeUpdateOne) Save(ctx context.Context) (*TaskFeedLike, error) {
	var (
		err  error
		node *TaskFeedLike
	)
	if len(tfluo.hooks) == 0 {
		if err = tfluo.check(); err != nil {
			return nil, err
		}
		node, err = tfluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskFeedLikeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tfluo.check(); err != nil {
				return nil, err
			}
			tfluo.mutation = mutation
			node, err = tfluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tfluo.hooks) - 1; i >= 0; i-- {
			if tfluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tfluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tfluo *TaskFeedLikeUpdateOne) SaveX(ctx context.Context) *TaskFeedLike {
	node, err := tfluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfluo *TaskFeedLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := tfluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfluo *TaskFeedLikeUpdateOne) ExecX(ctx context.Context) {
	if err := tfluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfluo *TaskFeedLikeUpdateOne) check() error {
	if _, ok := tfluo.mutation.TaskID(); tfluo.mutation.TaskCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task\"")
	}
	if _, ok := tfluo.mutation.TeammateID(); tfluo.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	if _, ok := tfluo.mutation.FeedID(); tfluo.mutation.FeedCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"feed\"")
	}
	return nil
}

func (tfluo *TaskFeedLikeUpdateOne) sqlSave(ctx context.Context) (_node *TaskFeedLike, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskfeedlike.Table,
			Columns: taskfeedlike.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskfeedlike.FieldID,
			},
		},
	}
	id, ok := tfluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TaskFeedLike.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tfluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskfeedlike.FieldID)
		for _, f := range fields {
			if !taskfeedlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskfeedlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tfluo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TaskTable,
			Columns: []string{taskfeedlike.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfluo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TaskTable,
			Columns: []string{taskfeedlike.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfluo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TeammateTable,
			Columns: []string{taskfeedlike.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfluo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.TeammateTable,
			Columns: []string{taskfeedlike.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tfluo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.FeedTable,
			Columns: []string{taskfeedlike.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfluo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeedlike.FeedTable,
			Columns: []string{taskfeedlike.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskFeedLike{config: tfluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskfeedlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
