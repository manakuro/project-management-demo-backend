// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectTeammateCreate is the builder for creating a ProjectTeammate entity.
type ProjectTeammateCreate struct {
	config
	mutation *ProjectTeammateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProjectID sets the "project_id" field.
func (ptc *ProjectTeammateCreate) SetProjectID(u ulid.ID) *ProjectTeammateCreate {
	ptc.mutation.SetProjectID(u)
	return ptc
}

// SetTeammateID sets the "teammate_id" field.
func (ptc *ProjectTeammateCreate) SetTeammateID(u ulid.ID) *ProjectTeammateCreate {
	ptc.mutation.SetTeammateID(u)
	return ptc
}

// SetRole sets the "role" field.
func (ptc *ProjectTeammateCreate) SetRole(s string) *ProjectTeammateCreate {
	ptc.mutation.SetRole(s)
	return ptc
}

// SetIsOwner sets the "is_owner" field.
func (ptc *ProjectTeammateCreate) SetIsOwner(b bool) *ProjectTeammateCreate {
	ptc.mutation.SetIsOwner(b)
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *ProjectTeammateCreate) SetCreatedAt(t time.Time) *ProjectTeammateCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *ProjectTeammateCreate) SetNillableCreatedAt(t *time.Time) *ProjectTeammateCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptc *ProjectTeammateCreate) SetUpdatedAt(t time.Time) *ProjectTeammateCreate {
	ptc.mutation.SetUpdatedAt(t)
	return ptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptc *ProjectTeammateCreate) SetNillableUpdatedAt(t *time.Time) *ProjectTeammateCreate {
	if t != nil {
		ptc.SetUpdatedAt(*t)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *ProjectTeammateCreate) SetID(u ulid.ID) *ProjectTeammateCreate {
	ptc.mutation.SetID(u)
	return ptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptc *ProjectTeammateCreate) SetNillableID(u *ulid.ID) *ProjectTeammateCreate {
	if u != nil {
		ptc.SetID(*u)
	}
	return ptc
}

// SetProject sets the "project" edge to the Project entity.
func (ptc *ProjectTeammateCreate) SetProject(p *Project) *ProjectTeammateCreate {
	return ptc.SetProjectID(p.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (ptc *ProjectTeammateCreate) SetTeammate(t *Teammate) *ProjectTeammateCreate {
	return ptc.SetTeammateID(t.ID)
}

// Mutation returns the ProjectTeammateMutation object of the builder.
func (ptc *ProjectTeammateCreate) Mutation() *ProjectTeammateMutation {
	return ptc.mutation
}

// Save creates the ProjectTeammate in the database.
func (ptc *ProjectTeammateCreate) Save(ctx context.Context) (*ProjectTeammate, error) {
	var (
		err  error
		node *ProjectTeammate
	)
	ptc.defaults()
	if len(ptc.hooks) == 0 {
		if err = ptc.check(); err != nil {
			return nil, err
		}
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectTeammateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptc.check(); err != nil {
				return nil, err
			}
			ptc.mutation = mutation
			if node, err = ptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			if ptc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProjectTeammateCreate) SaveX(ctx context.Context) *ProjectTeammate {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProjectTeammateCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProjectTeammateCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProjectTeammateCreate) defaults() {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := projectteammate.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		v := projectteammate.DefaultUpdatedAt()
		ptc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptc.mutation.ID(); !ok {
		v := projectteammate.DefaultID()
		ptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProjectTeammateCreate) check() error {
	if _, ok := ptc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectTeammate.project_id"`)}
	}
	if _, ok := ptc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "ProjectTeammate.teammate_id"`)}
	}
	if _, ok := ptc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "ProjectTeammate.role"`)}
	}
	if v, ok := ptc.mutation.Role(); ok {
		if err := projectteammate.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ProjectTeammate.role": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.IsOwner(); !ok {
		return &ValidationError{Name: "is_owner", err: errors.New(`ent: missing required field "ProjectTeammate.is_owner"`)}
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectTeammate.created_at"`)}
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectTeammate.updated_at"`)}
	}
	if _, ok := ptc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectTeammate.project"`)}
	}
	if _, ok := ptc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New(`ent: missing required edge "ProjectTeammate.teammate"`)}
	}
	return nil
}

func (ptc *ProjectTeammateCreate) sqlSave(ctx context.Context) (*ProjectTeammate, error) {
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ptc *ProjectTeammateCreate) createSpec() (*ProjectTeammate, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectTeammate{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: projectteammate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: projectteammate.FieldID,
			},
		}
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectteammate.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := ptc.mutation.IsOwner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: projectteammate.FieldIsOwner,
		})
		_node.IsOwner = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectteammate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ptc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectteammate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ptc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectteammate.ProjectTable,
			Columns: []string{projectteammate.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectteammate.TeammateTable,
			Columns: []string{projectteammate.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectTeammate.Create().
//		SetProjectID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectTeammateUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (ptc *ProjectTeammateCreate) OnConflict(opts ...sql.ConflictOption) *ProjectTeammateUpsertOne {
	ptc.conflict = opts
	return &ProjectTeammateUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectTeammate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptc *ProjectTeammateCreate) OnConflictColumns(columns ...string) *ProjectTeammateUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &ProjectTeammateUpsertOne{
		create: ptc,
	}
}

type (
	// ProjectTeammateUpsertOne is the builder for "upsert"-ing
	//  one ProjectTeammate node.
	ProjectTeammateUpsertOne struct {
		create *ProjectTeammateCreate
	}

	// ProjectTeammateUpsert is the "OnConflict" setter.
	ProjectTeammateUpsert struct {
		*sql.UpdateSet
	}
)

// SetProjectID sets the "project_id" field.
func (u *ProjectTeammateUpsert) SetProjectID(v ulid.ID) *ProjectTeammateUpsert {
	u.Set(projectteammate.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectTeammateUpsert) UpdateProjectID() *ProjectTeammateUpsert {
	u.SetExcluded(projectteammate.FieldProjectID)
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *ProjectTeammateUpsert) SetTeammateID(v ulid.ID) *ProjectTeammateUpsert {
	u.Set(projectteammate.FieldTeammateID, v)
	return u
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *ProjectTeammateUpsert) UpdateTeammateID() *ProjectTeammateUpsert {
	u.SetExcluded(projectteammate.FieldTeammateID)
	return u
}

// SetRole sets the "role" field.
func (u *ProjectTeammateUpsert) SetRole(v string) *ProjectTeammateUpsert {
	u.Set(projectteammate.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ProjectTeammateUpsert) UpdateRole() *ProjectTeammateUpsert {
	u.SetExcluded(projectteammate.FieldRole)
	return u
}

// SetIsOwner sets the "is_owner" field.
func (u *ProjectTeammateUpsert) SetIsOwner(v bool) *ProjectTeammateUpsert {
	u.Set(projectteammate.FieldIsOwner, v)
	return u
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *ProjectTeammateUpsert) UpdateIsOwner() *ProjectTeammateUpsert {
	u.SetExcluded(projectteammate.FieldIsOwner)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectTeammateUpsert) SetCreatedAt(v time.Time) *ProjectTeammateUpsert {
	u.Set(projectteammate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectTeammateUpsert) UpdateCreatedAt() *ProjectTeammateUpsert {
	u.SetExcluded(projectteammate.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectTeammateUpsert) SetUpdatedAt(v time.Time) *ProjectTeammateUpsert {
	u.Set(projectteammate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectTeammateUpsert) UpdateUpdatedAt() *ProjectTeammateUpsert {
	u.SetExcluded(projectteammate.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProjectTeammate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectteammate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProjectTeammateUpsertOne) UpdateNewValues() *ProjectTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(projectteammate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(projectteammate.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(projectteammate.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ProjectTeammate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ProjectTeammateUpsertOne) Ignore() *ProjectTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectTeammateUpsertOne) DoNothing() *ProjectTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectTeammateCreate.OnConflict
// documentation for more info.
func (u *ProjectTeammateUpsertOne) Update(set func(*ProjectTeammateUpsert)) *ProjectTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectTeammateUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *ProjectTeammateUpsertOne) SetProjectID(v ulid.ID) *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectTeammateUpsertOne) UpdateProjectID() *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateProjectID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *ProjectTeammateUpsertOne) SetTeammateID(v ulid.ID) *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *ProjectTeammateUpsertOne) UpdateTeammateID() *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateTeammateID()
	})
}

// SetRole sets the "role" field.
func (u *ProjectTeammateUpsertOne) SetRole(v string) *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ProjectTeammateUpsertOne) UpdateRole() *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateRole()
	})
}

// SetIsOwner sets the "is_owner" field.
func (u *ProjectTeammateUpsertOne) SetIsOwner(v bool) *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetIsOwner(v)
	})
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *ProjectTeammateUpsertOne) UpdateIsOwner() *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateIsOwner()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectTeammateUpsertOne) SetCreatedAt(v time.Time) *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectTeammateUpsertOne) UpdateCreatedAt() *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectTeammateUpsertOne) SetUpdatedAt(v time.Time) *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectTeammateUpsertOne) UpdateUpdatedAt() *ProjectTeammateUpsertOne {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectTeammateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectTeammateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectTeammateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectTeammateUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectTeammateUpsertOne.ID is not supported by MySQL driver. Use ProjectTeammateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectTeammateUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectTeammateCreateBulk is the builder for creating many ProjectTeammate entities in bulk.
type ProjectTeammateCreateBulk struct {
	config
	builders []*ProjectTeammateCreate
	conflict []sql.ConflictOption
}

// Save creates the ProjectTeammate entities in the database.
func (ptcb *ProjectTeammateCreateBulk) Save(ctx context.Context) ([]*ProjectTeammate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProjectTeammate, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectTeammateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProjectTeammateCreateBulk) SaveX(ctx context.Context) []*ProjectTeammate {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProjectTeammateCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProjectTeammateCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectTeammate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectTeammateUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (ptcb *ProjectTeammateCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectTeammateUpsertBulk {
	ptcb.conflict = opts
	return &ProjectTeammateUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectTeammate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptcb *ProjectTeammateCreateBulk) OnConflictColumns(columns ...string) *ProjectTeammateUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectTeammateUpsertBulk{
		create: ptcb,
	}
}

// ProjectTeammateUpsertBulk is the builder for "upsert"-ing
// a bulk of ProjectTeammate nodes.
type ProjectTeammateUpsertBulk struct {
	create *ProjectTeammateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProjectTeammate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectteammate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProjectTeammateUpsertBulk) UpdateNewValues() *ProjectTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(projectteammate.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(projectteammate.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(projectteammate.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectTeammate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ProjectTeammateUpsertBulk) Ignore() *ProjectTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectTeammateUpsertBulk) DoNothing() *ProjectTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectTeammateCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectTeammateUpsertBulk) Update(set func(*ProjectTeammateUpsert)) *ProjectTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectTeammateUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *ProjectTeammateUpsertBulk) SetProjectID(v ulid.ID) *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ProjectTeammateUpsertBulk) UpdateProjectID() *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateProjectID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *ProjectTeammateUpsertBulk) SetTeammateID(v ulid.ID) *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *ProjectTeammateUpsertBulk) UpdateTeammateID() *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateTeammateID()
	})
}

// SetRole sets the "role" field.
func (u *ProjectTeammateUpsertBulk) SetRole(v string) *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *ProjectTeammateUpsertBulk) UpdateRole() *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateRole()
	})
}

// SetIsOwner sets the "is_owner" field.
func (u *ProjectTeammateUpsertBulk) SetIsOwner(v bool) *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetIsOwner(v)
	})
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *ProjectTeammateUpsertBulk) UpdateIsOwner() *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateIsOwner()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectTeammateUpsertBulk) SetCreatedAt(v time.Time) *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectTeammateUpsertBulk) UpdateCreatedAt() *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectTeammateUpsertBulk) SetUpdatedAt(v time.Time) *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectTeammateUpsertBulk) UpdateUpdatedAt() *ProjectTeammateUpsertBulk {
	return u.Update(func(s *ProjectTeammateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectTeammateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectTeammateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectTeammateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectTeammateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
