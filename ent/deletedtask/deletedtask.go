// Code generated by entc, DO NOT EDIT.

package deletedtask

import (
	"fmt"
	"io"
	"project-management-demo-backend/ent/schema/ulid"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the deletedtask type in the database.
	Label = "deleted_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldWorkspaceID holds the string denoting the workspace_id field in the database.
	FieldWorkspaceID = "workspace_id"
	// FieldTaskSectionID holds the string denoting the task_section_id field in the database.
	FieldTaskSectionID = "task_section_id"
	// FieldTaskType holds the string denoting the task_type field in the database.
	FieldTaskType = "task_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeWorkspace holds the string denoting the workspace edge name in mutations.
	EdgeWorkspace = "workspace"
	// Table holds the table name of the deletedtask in the database.
	Table = "deleted_tasks"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "deleted_tasks"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
	// WorkspaceTable is the table that holds the workspace relation/edge.
	WorkspaceTable = "deleted_tasks"
	// WorkspaceInverseTable is the table name for the Workspace entity.
	// It exists in this package in order to avoid circular dependency with the "workspace" package.
	WorkspaceInverseTable = "workspaces"
	// WorkspaceColumn is the table column denoting the workspace relation/edge.
	WorkspaceColumn = "workspace_id"
)

// Columns holds all SQL columns for deletedtask fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldWorkspaceID,
	FieldTaskSectionID,
	FieldTaskType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ID
)

// TaskType defines the type for the "task_type" enum field.
type TaskType string

// TaskType values.
const (
	TaskTypeTeammate TaskType = "TEAMMATE"
	TaskTypeProject  TaskType = "PROJECT"
)

func (tt TaskType) String() string {
	return string(tt)
}

// TaskTypeValidator is a validator for the "task_type" field enum values. It is called by the builders before save.
func TaskTypeValidator(tt TaskType) error {
	switch tt {
	case TaskTypeTeammate, TaskTypeProject:
		return nil
	default:
		return fmt.Errorf("deletedtask: invalid enum value for task_type field: %q", tt)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (tt TaskType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(tt.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (tt *TaskType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*tt = TaskType(str)
	if err := TaskTypeValidator(*tt); err != nil {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}
