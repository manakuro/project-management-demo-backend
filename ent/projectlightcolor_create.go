// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/schema/ulid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectLightColorCreate is the builder for creating a ProjectLightColor entity.
type ProjectLightColorCreate struct {
	config
	mutation *ProjectLightColorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetColorID sets the "color_id" field.
func (plcc *ProjectLightColorCreate) SetColorID(u ulid.ID) *ProjectLightColorCreate {
	plcc.mutation.SetColorID(u)
	return plcc
}

// SetCreatedAt sets the "created_at" field.
func (plcc *ProjectLightColorCreate) SetCreatedAt(t time.Time) *ProjectLightColorCreate {
	plcc.mutation.SetCreatedAt(t)
	return plcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (plcc *ProjectLightColorCreate) SetNillableCreatedAt(t *time.Time) *ProjectLightColorCreate {
	if t != nil {
		plcc.SetCreatedAt(*t)
	}
	return plcc
}

// SetUpdatedAt sets the "updated_at" field.
func (plcc *ProjectLightColorCreate) SetUpdatedAt(t time.Time) *ProjectLightColorCreate {
	plcc.mutation.SetUpdatedAt(t)
	return plcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (plcc *ProjectLightColorCreate) SetNillableUpdatedAt(t *time.Time) *ProjectLightColorCreate {
	if t != nil {
		plcc.SetUpdatedAt(*t)
	}
	return plcc
}

// SetID sets the "id" field.
func (plcc *ProjectLightColorCreate) SetID(u ulid.ID) *ProjectLightColorCreate {
	plcc.mutation.SetID(u)
	return plcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (plcc *ProjectLightColorCreate) SetNillableID(u *ulid.ID) *ProjectLightColorCreate {
	if u != nil {
		plcc.SetID(*u)
	}
	return plcc
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (plcc *ProjectLightColorCreate) AddProjectIDs(ids ...ulid.ID) *ProjectLightColorCreate {
	plcc.mutation.AddProjectIDs(ids...)
	return plcc
}

// AddProjects adds the "projects" edges to the Project entity.
func (plcc *ProjectLightColorCreate) AddProjects(p ...*Project) *ProjectLightColorCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return plcc.AddProjectIDs(ids...)
}

// SetColor sets the "color" edge to the Color entity.
func (plcc *ProjectLightColorCreate) SetColor(c *Color) *ProjectLightColorCreate {
	return plcc.SetColorID(c.ID)
}

// Mutation returns the ProjectLightColorMutation object of the builder.
func (plcc *ProjectLightColorCreate) Mutation() *ProjectLightColorMutation {
	return plcc.mutation
}

// Save creates the ProjectLightColor in the database.
func (plcc *ProjectLightColorCreate) Save(ctx context.Context) (*ProjectLightColor, error) {
	var (
		err  error
		node *ProjectLightColor
	)
	plcc.defaults()
	if len(plcc.hooks) == 0 {
		if err = plcc.check(); err != nil {
			return nil, err
		}
		node, err = plcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectLightColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plcc.check(); err != nil {
				return nil, err
			}
			plcc.mutation = mutation
			if node, err = plcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(plcc.hooks) - 1; i >= 0; i-- {
			if plcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = plcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (plcc *ProjectLightColorCreate) SaveX(ctx context.Context) *ProjectLightColor {
	v, err := plcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcc *ProjectLightColorCreate) Exec(ctx context.Context) error {
	_, err := plcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcc *ProjectLightColorCreate) ExecX(ctx context.Context) {
	if err := plcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plcc *ProjectLightColorCreate) defaults() {
	if _, ok := plcc.mutation.CreatedAt(); !ok {
		v := projectlightcolor.DefaultCreatedAt()
		plcc.mutation.SetCreatedAt(v)
	}
	if _, ok := plcc.mutation.UpdatedAt(); !ok {
		v := projectlightcolor.DefaultUpdatedAt()
		plcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := plcc.mutation.ID(); !ok {
		v := projectlightcolor.DefaultID()
		plcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plcc *ProjectLightColorCreate) check() error {
	if _, ok := plcc.mutation.ColorID(); !ok {
		return &ValidationError{Name: "color_id", err: errors.New(`ent: missing required field "color_id"`)}
	}
	if _, ok := plcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := plcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := plcc.mutation.ColorID(); !ok {
		return &ValidationError{Name: "color", err: errors.New("ent: missing required edge \"color\"")}
	}
	return nil
}

func (plcc *ProjectLightColorCreate) sqlSave(ctx context.Context) (*ProjectLightColor, error) {
	_node, _spec := plcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (plcc *ProjectLightColorCreate) createSpec() (*ProjectLightColor, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectLightColor{config: plcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: projectlightcolor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: projectlightcolor.FieldID,
			},
		}
	)
	_spec.OnConflict = plcc.conflict
	if id, ok := plcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := plcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectlightcolor.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := plcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectlightcolor.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := plcc.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectlightcolor.ProjectsTable,
			Columns: []string{projectlightcolor.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plcc.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlightcolor.ColorTable,
			Columns: []string{projectlightcolor.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ColorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectLightColor.Create().
//		SetColorID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectLightColorUpsert) {
//			SetColorID(v+v).
//		}).
//		Exec(ctx)
//
func (plcc *ProjectLightColorCreate) OnConflict(opts ...sql.ConflictOption) *ProjectLightColorUpsertOne {
	plcc.conflict = opts
	return &ProjectLightColorUpsertOne{
		create: plcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectLightColor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (plcc *ProjectLightColorCreate) OnConflictColumns(columns ...string) *ProjectLightColorUpsertOne {
	plcc.conflict = append(plcc.conflict, sql.ConflictColumns(columns...))
	return &ProjectLightColorUpsertOne{
		create: plcc,
	}
}

type (
	// ProjectLightColorUpsertOne is the builder for "upsert"-ing
	//  one ProjectLightColor node.
	ProjectLightColorUpsertOne struct {
		create *ProjectLightColorCreate
	}

	// ProjectLightColorUpsert is the "OnConflict" setter.
	ProjectLightColorUpsert struct {
		*sql.UpdateSet
	}
)

// SetColorID sets the "color_id" field.
func (u *ProjectLightColorUpsert) SetColorID(v ulid.ID) *ProjectLightColorUpsert {
	u.Set(projectlightcolor.FieldColorID, v)
	return u
}

// UpdateColorID sets the "color_id" field to the value that was provided on create.
func (u *ProjectLightColorUpsert) UpdateColorID() *ProjectLightColorUpsert {
	u.SetExcluded(projectlightcolor.FieldColorID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectLightColorUpsert) SetCreatedAt(v time.Time) *ProjectLightColorUpsert {
	u.Set(projectlightcolor.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectLightColorUpsert) UpdateCreatedAt() *ProjectLightColorUpsert {
	u.SetExcluded(projectlightcolor.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectLightColorUpsert) SetUpdatedAt(v time.Time) *ProjectLightColorUpsert {
	u.Set(projectlightcolor.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectLightColorUpsert) UpdateUpdatedAt() *ProjectLightColorUpsert {
	u.SetExcluded(projectlightcolor.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProjectLightColor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectlightcolor.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProjectLightColorUpsertOne) UpdateNewValues() *ProjectLightColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(projectlightcolor.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ProjectLightColor.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ProjectLightColorUpsertOne) Ignore() *ProjectLightColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectLightColorUpsertOne) DoNothing() *ProjectLightColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectLightColorCreate.OnConflict
// documentation for more info.
func (u *ProjectLightColorUpsertOne) Update(set func(*ProjectLightColorUpsert)) *ProjectLightColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectLightColorUpsert{UpdateSet: update})
	}))
	return u
}

// SetColorID sets the "color_id" field.
func (u *ProjectLightColorUpsertOne) SetColorID(v ulid.ID) *ProjectLightColorUpsertOne {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.SetColorID(v)
	})
}

// UpdateColorID sets the "color_id" field to the value that was provided on create.
func (u *ProjectLightColorUpsertOne) UpdateColorID() *ProjectLightColorUpsertOne {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.UpdateColorID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectLightColorUpsertOne) SetCreatedAt(v time.Time) *ProjectLightColorUpsertOne {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectLightColorUpsertOne) UpdateCreatedAt() *ProjectLightColorUpsertOne {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectLightColorUpsertOne) SetUpdatedAt(v time.Time) *ProjectLightColorUpsertOne {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectLightColorUpsertOne) UpdateUpdatedAt() *ProjectLightColorUpsertOne {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectLightColorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectLightColorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectLightColorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectLightColorUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectLightColorUpsertOne.ID is not supported by MySQL driver. Use ProjectLightColorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectLightColorUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectLightColorCreateBulk is the builder for creating many ProjectLightColor entities in bulk.
type ProjectLightColorCreateBulk struct {
	config
	builders []*ProjectLightColorCreate
	conflict []sql.ConflictOption
}

// Save creates the ProjectLightColor entities in the database.
func (plccb *ProjectLightColorCreateBulk) Save(ctx context.Context) ([]*ProjectLightColor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(plccb.builders))
	nodes := make([]*ProjectLightColor, len(plccb.builders))
	mutators := make([]Mutator, len(plccb.builders))
	for i := range plccb.builders {
		func(i int, root context.Context) {
			builder := plccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectLightColorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = plccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plccb *ProjectLightColorCreateBulk) SaveX(ctx context.Context) []*ProjectLightColor {
	v, err := plccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plccb *ProjectLightColorCreateBulk) Exec(ctx context.Context) error {
	_, err := plccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plccb *ProjectLightColorCreateBulk) ExecX(ctx context.Context) {
	if err := plccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectLightColor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectLightColorUpsert) {
//			SetColorID(v+v).
//		}).
//		Exec(ctx)
//
func (plccb *ProjectLightColorCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectLightColorUpsertBulk {
	plccb.conflict = opts
	return &ProjectLightColorUpsertBulk{
		create: plccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectLightColor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (plccb *ProjectLightColorCreateBulk) OnConflictColumns(columns ...string) *ProjectLightColorUpsertBulk {
	plccb.conflict = append(plccb.conflict, sql.ConflictColumns(columns...))
	return &ProjectLightColorUpsertBulk{
		create: plccb,
	}
}

// ProjectLightColorUpsertBulk is the builder for "upsert"-ing
// a bulk of ProjectLightColor nodes.
type ProjectLightColorUpsertBulk struct {
	create *ProjectLightColorCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProjectLightColor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(projectlightcolor.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProjectLightColorUpsertBulk) UpdateNewValues() *ProjectLightColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(projectlightcolor.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectLightColor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ProjectLightColorUpsertBulk) Ignore() *ProjectLightColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectLightColorUpsertBulk) DoNothing() *ProjectLightColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectLightColorCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectLightColorUpsertBulk) Update(set func(*ProjectLightColorUpsert)) *ProjectLightColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectLightColorUpsert{UpdateSet: update})
	}))
	return u
}

// SetColorID sets the "color_id" field.
func (u *ProjectLightColorUpsertBulk) SetColorID(v ulid.ID) *ProjectLightColorUpsertBulk {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.SetColorID(v)
	})
}

// UpdateColorID sets the "color_id" field to the value that was provided on create.
func (u *ProjectLightColorUpsertBulk) UpdateColorID() *ProjectLightColorUpsertBulk {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.UpdateColorID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectLightColorUpsertBulk) SetCreatedAt(v time.Time) *ProjectLightColorUpsertBulk {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectLightColorUpsertBulk) UpdateCreatedAt() *ProjectLightColorUpsertBulk {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectLightColorUpsertBulk) SetUpdatedAt(v time.Time) *ProjectLightColorUpsertBulk {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectLightColorUpsertBulk) UpdateUpdatedAt() *ProjectLightColorUpsertBulk {
	return u.Update(func(s *ProjectLightColorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectLightColorUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectLightColorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectLightColorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectLightColorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
