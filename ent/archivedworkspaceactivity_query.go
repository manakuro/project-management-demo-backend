// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/archivedworkspaceactivity"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArchivedWorkspaceActivityQuery is the builder for querying ArchivedWorkspaceActivity entities.
type ArchivedWorkspaceActivityQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ArchivedWorkspaceActivity
	// eager-loading edges.
	withActivityType *ActivityTypeQuery
	withWorkspace    *WorkspaceQuery
	withProject      *ProjectQuery
	withTeammate     *TeammateQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ArchivedWorkspaceActivityQuery builder.
func (awaq *ArchivedWorkspaceActivityQuery) Where(ps ...predicate.ArchivedWorkspaceActivity) *ArchivedWorkspaceActivityQuery {
	awaq.predicates = append(awaq.predicates, ps...)
	return awaq
}

// Limit adds a limit step to the query.
func (awaq *ArchivedWorkspaceActivityQuery) Limit(limit int) *ArchivedWorkspaceActivityQuery {
	awaq.limit = &limit
	return awaq
}

// Offset adds an offset step to the query.
func (awaq *ArchivedWorkspaceActivityQuery) Offset(offset int) *ArchivedWorkspaceActivityQuery {
	awaq.offset = &offset
	return awaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (awaq *ArchivedWorkspaceActivityQuery) Unique(unique bool) *ArchivedWorkspaceActivityQuery {
	awaq.unique = &unique
	return awaq
}

// Order adds an order step to the query.
func (awaq *ArchivedWorkspaceActivityQuery) Order(o ...OrderFunc) *ArchivedWorkspaceActivityQuery {
	awaq.order = append(awaq.order, o...)
	return awaq
}

// QueryActivityType chains the current query on the "activityType" edge.
func (awaq *ArchivedWorkspaceActivityQuery) QueryActivityType() *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: awaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := awaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := awaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedworkspaceactivity.Table, archivedworkspaceactivity.FieldID, selector),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedworkspaceactivity.ActivityTypeTable, archivedworkspaceactivity.ActivityTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(awaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspace chains the current query on the "workspace" edge.
func (awaq *ArchivedWorkspaceActivityQuery) QueryWorkspace() *WorkspaceQuery {
	query := &WorkspaceQuery{config: awaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := awaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := awaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedworkspaceactivity.Table, archivedworkspaceactivity.FieldID, selector),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedworkspaceactivity.WorkspaceTable, archivedworkspaceactivity.WorkspaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(awaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (awaq *ArchivedWorkspaceActivityQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: awaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := awaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := awaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedworkspaceactivity.Table, archivedworkspaceactivity.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedworkspaceactivity.ProjectTable, archivedworkspaceactivity.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(awaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammate chains the current query on the "teammate" edge.
func (awaq *ArchivedWorkspaceActivityQuery) QueryTeammate() *TeammateQuery {
	query := &TeammateQuery{config: awaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := awaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := awaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(archivedworkspaceactivity.Table, archivedworkspaceactivity.FieldID, selector),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, archivedworkspaceactivity.TeammateTable, archivedworkspaceactivity.TeammateColumn),
		)
		fromU = sqlgraph.SetNeighbors(awaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ArchivedWorkspaceActivity entity from the query.
// Returns a *NotFoundError when no ArchivedWorkspaceActivity was found.
func (awaq *ArchivedWorkspaceActivityQuery) First(ctx context.Context) (*ArchivedWorkspaceActivity, error) {
	nodes, err := awaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{archivedworkspaceactivity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) FirstX(ctx context.Context) *ArchivedWorkspaceActivity {
	node, err := awaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ArchivedWorkspaceActivity ID from the query.
// Returns a *NotFoundError when no ArchivedWorkspaceActivity ID was found.
func (awaq *ArchivedWorkspaceActivityQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = awaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{archivedworkspaceactivity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := awaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ArchivedWorkspaceActivity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ArchivedWorkspaceActivity entity is found.
// Returns a *NotFoundError when no ArchivedWorkspaceActivity entities are found.
func (awaq *ArchivedWorkspaceActivityQuery) Only(ctx context.Context) (*ArchivedWorkspaceActivity, error) {
	nodes, err := awaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{archivedworkspaceactivity.Label}
	default:
		return nil, &NotSingularError{archivedworkspaceactivity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) OnlyX(ctx context.Context) *ArchivedWorkspaceActivity {
	node, err := awaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ArchivedWorkspaceActivity ID in the query.
// Returns a *NotSingularError when more than one ArchivedWorkspaceActivity ID is found.
// Returns a *NotFoundError when no entities are found.
func (awaq *ArchivedWorkspaceActivityQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = awaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = &NotSingularError{archivedworkspaceactivity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := awaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ArchivedWorkspaceActivities.
func (awaq *ArchivedWorkspaceActivityQuery) All(ctx context.Context) ([]*ArchivedWorkspaceActivity, error) {
	if err := awaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return awaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) AllX(ctx context.Context) []*ArchivedWorkspaceActivity {
	nodes, err := awaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ArchivedWorkspaceActivity IDs.
func (awaq *ArchivedWorkspaceActivityQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := awaq.Select(archivedworkspaceactivity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := awaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (awaq *ArchivedWorkspaceActivityQuery) Count(ctx context.Context) (int, error) {
	if err := awaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return awaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) CountX(ctx context.Context) int {
	count, err := awaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (awaq *ArchivedWorkspaceActivityQuery) Exist(ctx context.Context) (bool, error) {
	if err := awaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return awaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (awaq *ArchivedWorkspaceActivityQuery) ExistX(ctx context.Context) bool {
	exist, err := awaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ArchivedWorkspaceActivityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (awaq *ArchivedWorkspaceActivityQuery) Clone() *ArchivedWorkspaceActivityQuery {
	if awaq == nil {
		return nil
	}
	return &ArchivedWorkspaceActivityQuery{
		config:           awaq.config,
		limit:            awaq.limit,
		offset:           awaq.offset,
		order:            append([]OrderFunc{}, awaq.order...),
		predicates:       append([]predicate.ArchivedWorkspaceActivity{}, awaq.predicates...),
		withActivityType: awaq.withActivityType.Clone(),
		withWorkspace:    awaq.withWorkspace.Clone(),
		withProject:      awaq.withProject.Clone(),
		withTeammate:     awaq.withTeammate.Clone(),
		// clone intermediate query.
		sql:    awaq.sql.Clone(),
		path:   awaq.path,
		unique: awaq.unique,
	}
}

// WithActivityType tells the query-builder to eager-load the nodes that are connected to
// the "activityType" edge. The optional arguments are used to configure the query builder of the edge.
func (awaq *ArchivedWorkspaceActivityQuery) WithActivityType(opts ...func(*ActivityTypeQuery)) *ArchivedWorkspaceActivityQuery {
	query := &ActivityTypeQuery{config: awaq.config}
	for _, opt := range opts {
		opt(query)
	}
	awaq.withActivityType = query
	return awaq
}

// WithWorkspace tells the query-builder to eager-load the nodes that are connected to
// the "workspace" edge. The optional arguments are used to configure the query builder of the edge.
func (awaq *ArchivedWorkspaceActivityQuery) WithWorkspace(opts ...func(*WorkspaceQuery)) *ArchivedWorkspaceActivityQuery {
	query := &WorkspaceQuery{config: awaq.config}
	for _, opt := range opts {
		opt(query)
	}
	awaq.withWorkspace = query
	return awaq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (awaq *ArchivedWorkspaceActivityQuery) WithProject(opts ...func(*ProjectQuery)) *ArchivedWorkspaceActivityQuery {
	query := &ProjectQuery{config: awaq.config}
	for _, opt := range opts {
		opt(query)
	}
	awaq.withProject = query
	return awaq
}

// WithTeammate tells the query-builder to eager-load the nodes that are connected to
// the "teammate" edge. The optional arguments are used to configure the query builder of the edge.
func (awaq *ArchivedWorkspaceActivityQuery) WithTeammate(opts ...func(*TeammateQuery)) *ArchivedWorkspaceActivityQuery {
	query := &TeammateQuery{config: awaq.config}
	for _, opt := range opts {
		opt(query)
	}
	awaq.withTeammate = query
	return awaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ActivityTypeID ulid.ID `json:"activity_type_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ArchivedWorkspaceActivity.Query().
//		GroupBy(archivedworkspaceactivity.FieldActivityTypeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (awaq *ArchivedWorkspaceActivityQuery) GroupBy(field string, fields ...string) *ArchivedWorkspaceActivityGroupBy {
	group := &ArchivedWorkspaceActivityGroupBy{config: awaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := awaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return awaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ActivityTypeID ulid.ID `json:"activity_type_id,omitempty"`
//	}
//
//	client.ArchivedWorkspaceActivity.Query().
//		Select(archivedworkspaceactivity.FieldActivityTypeID).
//		Scan(ctx, &v)
//
func (awaq *ArchivedWorkspaceActivityQuery) Select(fields ...string) *ArchivedWorkspaceActivitySelect {
	awaq.fields = append(awaq.fields, fields...)
	return &ArchivedWorkspaceActivitySelect{ArchivedWorkspaceActivityQuery: awaq}
}

func (awaq *ArchivedWorkspaceActivityQuery) prepareQuery(ctx context.Context) error {
	for _, f := range awaq.fields {
		if !archivedworkspaceactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if awaq.path != nil {
		prev, err := awaq.path(ctx)
		if err != nil {
			return err
		}
		awaq.sql = prev
	}
	return nil
}

func (awaq *ArchivedWorkspaceActivityQuery) sqlAll(ctx context.Context) ([]*ArchivedWorkspaceActivity, error) {
	var (
		nodes       = []*ArchivedWorkspaceActivity{}
		_spec       = awaq.querySpec()
		loadedTypes = [4]bool{
			awaq.withActivityType != nil,
			awaq.withWorkspace != nil,
			awaq.withProject != nil,
			awaq.withTeammate != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ArchivedWorkspaceActivity{config: awaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, awaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := awaq.withActivityType; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*ArchivedWorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].ActivityTypeID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(activitytype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "activity_type_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ActivityType = n
			}
		}
	}

	if query := awaq.withWorkspace; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*ArchivedWorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].WorkspaceID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(workspace.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workspace_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Workspace = n
			}
		}
	}

	if query := awaq.withProject; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*ArchivedWorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].ProjectID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(project.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Project = n
			}
		}
	}

	if query := awaq.withTeammate; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*ArchivedWorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].TeammateID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teammate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teammate = n
			}
		}
	}

	return nodes, nil
}

func (awaq *ArchivedWorkspaceActivityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := awaq.querySpec()
	_spec.Node.Columns = awaq.fields
	if len(awaq.fields) > 0 {
		_spec.Unique = awaq.unique != nil && *awaq.unique
	}
	return sqlgraph.CountNodes(ctx, awaq.driver, _spec)
}

func (awaq *ArchivedWorkspaceActivityQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := awaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (awaq *ArchivedWorkspaceActivityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivedworkspaceactivity.Table,
			Columns: archivedworkspaceactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: archivedworkspaceactivity.FieldID,
			},
		},
		From:   awaq.sql,
		Unique: true,
	}
	if unique := awaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := awaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, archivedworkspaceactivity.FieldID)
		for i := range fields {
			if fields[i] != archivedworkspaceactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := awaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := awaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := awaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := awaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (awaq *ArchivedWorkspaceActivityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(awaq.driver.Dialect())
	t1 := builder.Table(archivedworkspaceactivity.Table)
	columns := awaq.fields
	if len(columns) == 0 {
		columns = archivedworkspaceactivity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if awaq.sql != nil {
		selector = awaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if awaq.unique != nil && *awaq.unique {
		selector.Distinct()
	}
	for _, p := range awaq.predicates {
		p(selector)
	}
	for _, p := range awaq.order {
		p(selector)
	}
	if offset := awaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := awaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ArchivedWorkspaceActivityGroupBy is the group-by builder for ArchivedWorkspaceActivity entities.
type ArchivedWorkspaceActivityGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (awagb *ArchivedWorkspaceActivityGroupBy) Aggregate(fns ...AggregateFunc) *ArchivedWorkspaceActivityGroupBy {
	awagb.fns = append(awagb.fns, fns...)
	return awagb
}

// Scan applies the group-by query and scans the result into the given value.
func (awagb *ArchivedWorkspaceActivityGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := awagb.path(ctx)
	if err != nil {
		return err
	}
	awagb.sql = query
	return awagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := awagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(awagb.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivityGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := awagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) StringsX(ctx context.Context) []string {
	v, err := awagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = awagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivityGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) StringX(ctx context.Context) string {
	v, err := awagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(awagb.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivityGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := awagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) IntsX(ctx context.Context) []int {
	v, err := awagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = awagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivityGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) IntX(ctx context.Context) int {
	v, err := awagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(awagb.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivityGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := awagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := awagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = awagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivityGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) Float64X(ctx context.Context) float64 {
	v, err := awagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(awagb.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivityGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := awagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := awagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (awagb *ArchivedWorkspaceActivityGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = awagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivityGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (awagb *ArchivedWorkspaceActivityGroupBy) BoolX(ctx context.Context) bool {
	v, err := awagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (awagb *ArchivedWorkspaceActivityGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range awagb.fields {
		if !archivedworkspaceactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := awagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := awagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (awagb *ArchivedWorkspaceActivityGroupBy) sqlQuery() *sql.Selector {
	selector := awagb.sql.Select()
	aggregation := make([]string, 0, len(awagb.fns))
	for _, fn := range awagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(awagb.fields)+len(awagb.fns))
		for _, f := range awagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(awagb.fields...)...)
}

// ArchivedWorkspaceActivitySelect is the builder for selecting fields of ArchivedWorkspaceActivity entities.
type ArchivedWorkspaceActivitySelect struct {
	*ArchivedWorkspaceActivityQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (awas *ArchivedWorkspaceActivitySelect) Scan(ctx context.Context, v interface{}) error {
	if err := awas.prepareQuery(ctx); err != nil {
		return err
	}
	awas.sql = awas.ArchivedWorkspaceActivityQuery.sqlQuery(ctx)
	return awas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) ScanX(ctx context.Context, v interface{}) {
	if err := awas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) Strings(ctx context.Context) ([]string, error) {
	if len(awas.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivitySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := awas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) StringsX(ctx context.Context) []string {
	v, err := awas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = awas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivitySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) StringX(ctx context.Context) string {
	v, err := awas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) Ints(ctx context.Context) ([]int, error) {
	if len(awas.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivitySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := awas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) IntsX(ctx context.Context) []int {
	v, err := awas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = awas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivitySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) IntX(ctx context.Context) int {
	v, err := awas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(awas.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivitySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := awas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) Float64sX(ctx context.Context) []float64 {
	v, err := awas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = awas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivitySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) Float64X(ctx context.Context) float64 {
	v, err := awas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(awas.fields) > 1 {
		return nil, errors.New("ent: ArchivedWorkspaceActivitySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := awas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) BoolsX(ctx context.Context) []bool {
	v, err := awas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (awas *ArchivedWorkspaceActivitySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = awas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{archivedworkspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: ArchivedWorkspaceActivitySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (awas *ArchivedWorkspaceActivitySelect) BoolX(ctx context.Context) bool {
	v, err := awas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (awas *ArchivedWorkspaceActivitySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := awas.sql.Query()
	if err := awas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
