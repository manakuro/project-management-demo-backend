// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/archivedtaskactivitytask"
	"project-management-demo-backend/ent/archivedworkspaceactivitytask"
	"project-management-demo-backend/ent/deletedtask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/projecttask"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskactivitytask"
	"project-management-demo-backend/ent/taskcollaborator"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/tasktag"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/workspaceactivitytask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskQuery is the builder for querying Task entities.
type TaskQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Task
	// eager-loading edges.
	withTeammate                       *TeammateQuery
	withTaskPriority                   *TaskPriorityQuery
	withSubTasks                       *TaskQuery
	withParentTask                     *TaskQuery
	withTeammateTasks                  *TeammateTaskQuery
	withProjectTasks                   *ProjectTaskQuery
	withTaskLikes                      *TaskLikeQuery
	withTaskTags                       *TaskTagQuery
	withTaskCollaborators              *TaskCollaboratorQuery
	withTaskFeeds                      *TaskFeedQuery
	withTaskFeedLikes                  *TaskFeedLikeQuery
	withTaskFiles                      *TaskFileQuery
	withDeletedTasksRef                *DeletedTaskQuery
	withTaskActivityTasks              *TaskActivityTaskQuery
	withWorkspaceActivityTasks         *WorkspaceActivityTaskQuery
	withArchivedTaskActivityTasks      *ArchivedTaskActivityTaskQuery
	withArchivedWorkspaceActivityTasks *ArchivedWorkspaceActivityTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskQuery builder.
func (tq *TaskQuery) Where(ps ...predicate.Task) *TaskQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit adds a limit step to the query.
func (tq *TaskQuery) Limit(limit int) *TaskQuery {
	tq.limit = &limit
	return tq
}

// Offset adds an offset step to the query.
func (tq *TaskQuery) Offset(offset int) *TaskQuery {
	tq.offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TaskQuery) Unique(unique bool) *TaskQuery {
	tq.unique = &unique
	return tq
}

// Order adds an order step to the query.
func (tq *TaskQuery) Order(o ...OrderFunc) *TaskQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryTeammate chains the current query on the "teammate" edge.
func (tq *TaskQuery) QueryTeammate() *TeammateQuery {
	query := &TeammateQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.TeammateTable, task.TeammateColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskPriority chains the current query on the "taskPriority" edge.
func (tq *TaskQuery) QueryTaskPriority() *TaskPriorityQuery {
	query := &TaskPriorityQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(taskpriority.Table, taskpriority.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.TaskPriorityTable, task.TaskPriorityColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubTasks chains the current query on the "subTasks" edge.
func (tq *TaskQuery) QuerySubTasks() *TaskQuery {
	query := &TaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.SubTasksTable, task.SubTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentTask chains the current query on the "parentTask" edge.
func (tq *TaskQuery) QueryParentTask() *TaskQuery {
	query := &TaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.ParentTaskTable, task.ParentTaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammateTasks chains the current query on the "teammateTasks" edge.
func (tq *TaskQuery) QueryTeammateTasks() *TeammateTaskQuery {
	query := &TeammateTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(teammatetask.Table, teammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TeammateTasksTable, task.TeammateTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjectTasks chains the current query on the "projectTasks" edge.
func (tq *TaskQuery) QueryProjectTasks() *ProjectTaskQuery {
	query := &ProjectTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(projecttask.Table, projecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ProjectTasksTable, task.ProjectTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskLikes chains the current query on the "taskLikes" edge.
func (tq *TaskQuery) QueryTaskLikes() *TaskLikeQuery {
	query := &TaskLikeQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(tasklike.Table, tasklike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskLikesTable, task.TaskLikesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskTags chains the current query on the "taskTags" edge.
func (tq *TaskQuery) QueryTaskTags() *TaskTagQuery {
	query := &TaskTagQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(tasktag.Table, tasktag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskTagsTable, task.TaskTagsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskCollaborators chains the current query on the "taskCollaborators" edge.
func (tq *TaskQuery) QueryTaskCollaborators() *TaskCollaboratorQuery {
	query := &TaskCollaboratorQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(taskcollaborator.Table, taskcollaborator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskCollaboratorsTable, task.TaskCollaboratorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskFeeds chains the current query on the "taskFeeds" edge.
func (tq *TaskQuery) QueryTaskFeeds() *TaskFeedQuery {
	query := &TaskFeedQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(taskfeed.Table, taskfeed.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskFeedsTable, task.TaskFeedsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskFeedLikes chains the current query on the "taskFeedLikes" edge.
func (tq *TaskQuery) QueryTaskFeedLikes() *TaskFeedLikeQuery {
	query := &TaskFeedLikeQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(taskfeedlike.Table, taskfeedlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskFeedLikesTable, task.TaskFeedLikesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskFiles chains the current query on the "taskFiles" edge.
func (tq *TaskQuery) QueryTaskFiles() *TaskFileQuery {
	query := &TaskFileQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(taskfile.Table, taskfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskFilesTable, task.TaskFilesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeletedTasksRef chains the current query on the "deletedTasksRef" edge.
func (tq *TaskQuery) QueryDeletedTasksRef() *DeletedTaskQuery {
	query := &DeletedTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(deletedtask.Table, deletedtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.DeletedTasksRefTable, task.DeletedTasksRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskActivityTasks chains the current query on the "taskActivityTasks" edge.
func (tq *TaskQuery) QueryTaskActivityTasks() *TaskActivityTaskQuery {
	query := &TaskActivityTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(taskactivitytask.Table, taskactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.TaskActivityTasksTable, task.TaskActivityTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspaceActivityTasks chains the current query on the "workspaceActivityTasks" edge.
func (tq *TaskQuery) QueryWorkspaceActivityTasks() *WorkspaceActivityTaskQuery {
	query := &WorkspaceActivityTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(workspaceactivitytask.Table, workspaceactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.WorkspaceActivityTasksTable, task.WorkspaceActivityTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArchivedTaskActivityTasks chains the current query on the "archivedTaskActivityTasks" edge.
func (tq *TaskQuery) QueryArchivedTaskActivityTasks() *ArchivedTaskActivityTaskQuery {
	query := &ArchivedTaskActivityTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(archivedtaskactivitytask.Table, archivedtaskactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ArchivedTaskActivityTasksTable, task.ArchivedTaskActivityTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArchivedWorkspaceActivityTasks chains the current query on the "archivedWorkspaceActivityTasks" edge.
func (tq *TaskQuery) QueryArchivedWorkspaceActivityTasks() *ArchivedWorkspaceActivityTaskQuery {
	query := &ArchivedWorkspaceActivityTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(archivedworkspaceactivitytask.Table, archivedworkspaceactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ArchivedWorkspaceActivityTasksTable, task.ArchivedWorkspaceActivityTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Task entity from the query.
// Returns a *NotFoundError when no Task was found.
func (tq *TaskQuery) First(ctx context.Context) (*Task, error) {
	nodes, err := tq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{task.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TaskQuery) FirstX(ctx context.Context) *Task {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Task ID from the query.
// Returns a *NotFoundError when no Task ID was found.
func (tq *TaskQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{task.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TaskQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Task entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Task entity is found.
// Returns a *NotFoundError when no Task entities are found.
func (tq *TaskQuery) Only(ctx context.Context) (*Task, error) {
	nodes, err := tq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{task.Label}
	default:
		return nil, &NotSingularError{task.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TaskQuery) OnlyX(ctx context.Context) *Task {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Task ID in the query.
// Returns a *NotSingularError when more than one Task ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TaskQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = &NotSingularError{task.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TaskQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Tasks.
func (tq *TaskQuery) All(ctx context.Context) ([]*Task, error) {
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tq *TaskQuery) AllX(ctx context.Context) []*Task {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Task IDs.
func (tq *TaskQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := tq.Select(task.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TaskQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TaskQuery) Count(ctx context.Context) (int, error) {
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TaskQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TaskQuery) Exist(ctx context.Context) (bool, error) {
	if err := tq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TaskQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TaskQuery) Clone() *TaskQuery {
	if tq == nil {
		return nil
	}
	return &TaskQuery{
		config:                             tq.config,
		limit:                              tq.limit,
		offset:                             tq.offset,
		order:                              append([]OrderFunc{}, tq.order...),
		predicates:                         append([]predicate.Task{}, tq.predicates...),
		withTeammate:                       tq.withTeammate.Clone(),
		withTaskPriority:                   tq.withTaskPriority.Clone(),
		withSubTasks:                       tq.withSubTasks.Clone(),
		withParentTask:                     tq.withParentTask.Clone(),
		withTeammateTasks:                  tq.withTeammateTasks.Clone(),
		withProjectTasks:                   tq.withProjectTasks.Clone(),
		withTaskLikes:                      tq.withTaskLikes.Clone(),
		withTaskTags:                       tq.withTaskTags.Clone(),
		withTaskCollaborators:              tq.withTaskCollaborators.Clone(),
		withTaskFeeds:                      tq.withTaskFeeds.Clone(),
		withTaskFeedLikes:                  tq.withTaskFeedLikes.Clone(),
		withTaskFiles:                      tq.withTaskFiles.Clone(),
		withDeletedTasksRef:                tq.withDeletedTasksRef.Clone(),
		withTaskActivityTasks:              tq.withTaskActivityTasks.Clone(),
		withWorkspaceActivityTasks:         tq.withWorkspaceActivityTasks.Clone(),
		withArchivedTaskActivityTasks:      tq.withArchivedTaskActivityTasks.Clone(),
		withArchivedWorkspaceActivityTasks: tq.withArchivedWorkspaceActivityTasks.Clone(),
		// clone intermediate query.
		sql:    tq.sql.Clone(),
		path:   tq.path,
		unique: tq.unique,
	}
}

// WithTeammate tells the query-builder to eager-load the nodes that are connected to
// the "teammate" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTeammate(opts ...func(*TeammateQuery)) *TaskQuery {
	query := &TeammateQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTeammate = query
	return tq
}

// WithTaskPriority tells the query-builder to eager-load the nodes that are connected to
// the "taskPriority" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskPriority(opts ...func(*TaskPriorityQuery)) *TaskQuery {
	query := &TaskPriorityQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskPriority = query
	return tq
}

// WithSubTasks tells the query-builder to eager-load the nodes that are connected to
// the "subTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithSubTasks(opts ...func(*TaskQuery)) *TaskQuery {
	query := &TaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withSubTasks = query
	return tq
}

// WithParentTask tells the query-builder to eager-load the nodes that are connected to
// the "parentTask" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithParentTask(opts ...func(*TaskQuery)) *TaskQuery {
	query := &TaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withParentTask = query
	return tq
}

// WithTeammateTasks tells the query-builder to eager-load the nodes that are connected to
// the "teammateTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTeammateTasks(opts ...func(*TeammateTaskQuery)) *TaskQuery {
	query := &TeammateTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTeammateTasks = query
	return tq
}

// WithProjectTasks tells the query-builder to eager-load the nodes that are connected to
// the "projectTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithProjectTasks(opts ...func(*ProjectTaskQuery)) *TaskQuery {
	query := &ProjectTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withProjectTasks = query
	return tq
}

// WithTaskLikes tells the query-builder to eager-load the nodes that are connected to
// the "taskLikes" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskLikes(opts ...func(*TaskLikeQuery)) *TaskQuery {
	query := &TaskLikeQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskLikes = query
	return tq
}

// WithTaskTags tells the query-builder to eager-load the nodes that are connected to
// the "taskTags" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskTags(opts ...func(*TaskTagQuery)) *TaskQuery {
	query := &TaskTagQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskTags = query
	return tq
}

// WithTaskCollaborators tells the query-builder to eager-load the nodes that are connected to
// the "taskCollaborators" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskCollaborators(opts ...func(*TaskCollaboratorQuery)) *TaskQuery {
	query := &TaskCollaboratorQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskCollaborators = query
	return tq
}

// WithTaskFeeds tells the query-builder to eager-load the nodes that are connected to
// the "taskFeeds" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskFeeds(opts ...func(*TaskFeedQuery)) *TaskQuery {
	query := &TaskFeedQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskFeeds = query
	return tq
}

// WithTaskFeedLikes tells the query-builder to eager-load the nodes that are connected to
// the "taskFeedLikes" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskFeedLikes(opts ...func(*TaskFeedLikeQuery)) *TaskQuery {
	query := &TaskFeedLikeQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskFeedLikes = query
	return tq
}

// WithTaskFiles tells the query-builder to eager-load the nodes that are connected to
// the "taskFiles" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskFiles(opts ...func(*TaskFileQuery)) *TaskQuery {
	query := &TaskFileQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskFiles = query
	return tq
}

// WithDeletedTasksRef tells the query-builder to eager-load the nodes that are connected to
// the "deletedTasksRef" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithDeletedTasksRef(opts ...func(*DeletedTaskQuery)) *TaskQuery {
	query := &DeletedTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withDeletedTasksRef = query
	return tq
}

// WithTaskActivityTasks tells the query-builder to eager-load the nodes that are connected to
// the "taskActivityTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithTaskActivityTasks(opts ...func(*TaskActivityTaskQuery)) *TaskQuery {
	query := &TaskActivityTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskActivityTasks = query
	return tq
}

// WithWorkspaceActivityTasks tells the query-builder to eager-load the nodes that are connected to
// the "workspaceActivityTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithWorkspaceActivityTasks(opts ...func(*WorkspaceActivityTaskQuery)) *TaskQuery {
	query := &WorkspaceActivityTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withWorkspaceActivityTasks = query
	return tq
}

// WithArchivedTaskActivityTasks tells the query-builder to eager-load the nodes that are connected to
// the "archivedTaskActivityTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithArchivedTaskActivityTasks(opts ...func(*ArchivedTaskActivityTaskQuery)) *TaskQuery {
	query := &ArchivedTaskActivityTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withArchivedTaskActivityTasks = query
	return tq
}

// WithArchivedWorkspaceActivityTasks tells the query-builder to eager-load the nodes that are connected to
// the "archivedWorkspaceActivityTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithArchivedWorkspaceActivityTasks(opts ...func(*ArchivedWorkspaceActivityTaskQuery)) *TaskQuery {
	query := &ArchivedWorkspaceActivityTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withArchivedWorkspaceActivityTasks = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TaskParentID ulid.ID `json:"task_parent_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Task.Query().
//		GroupBy(task.FieldTaskParentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tq *TaskQuery) GroupBy(field string, fields ...string) *TaskGroupBy {
	group := &TaskGroupBy{config: tq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TaskParentID ulid.ID `json:"task_parent_id,omitempty"`
//	}
//
//	client.Task.Query().
//		Select(task.FieldTaskParentID).
//		Scan(ctx, &v)
//
func (tq *TaskQuery) Select(fields ...string) *TaskSelect {
	tq.fields = append(tq.fields, fields...)
	return &TaskSelect{TaskQuery: tq}
}

func (tq *TaskQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tq.fields {
		if !task.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TaskQuery) sqlAll(ctx context.Context) ([]*Task, error) {
	var (
		nodes       = []*Task{}
		_spec       = tq.querySpec()
		loadedTypes = [17]bool{
			tq.withTeammate != nil,
			tq.withTaskPriority != nil,
			tq.withSubTasks != nil,
			tq.withParentTask != nil,
			tq.withTeammateTasks != nil,
			tq.withProjectTasks != nil,
			tq.withTaskLikes != nil,
			tq.withTaskTags != nil,
			tq.withTaskCollaborators != nil,
			tq.withTaskFeeds != nil,
			tq.withTaskFeedLikes != nil,
			tq.withTaskFiles != nil,
			tq.withDeletedTasksRef != nil,
			tq.withTaskActivityTasks != nil,
			tq.withWorkspaceActivityTasks != nil,
			tq.withArchivedTaskActivityTasks != nil,
			tq.withArchivedWorkspaceActivityTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Task{config: tq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tq.withTeammate; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*Task)
		for i := range nodes {
			fk := nodes[i].AssigneeID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teammate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "assignee_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teammate = n
			}
		}
	}

	if query := tq.withTaskPriority; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*Task)
		for i := range nodes {
			fk := nodes[i].TaskPriorityID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(taskpriority.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_priority_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.TaskPriority = n
			}
		}
	}

	if query := tq.withSubTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SubTasks = []*Task{}
		}
		query.Where(predicate.Task(func(s *sql.Selector) {
			s.Where(sql.InValues(task.SubTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskParentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_parent_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.SubTasks = append(node.Edges.SubTasks, n)
		}
	}

	if query := tq.withParentTask; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*Task)
		for i := range nodes {
			fk := nodes[i].TaskParentID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(task.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_parent_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ParentTask = n
			}
		}
	}

	if query := tq.withTeammateTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeammateTasks = []*TeammateTask{}
		}
		query.Where(predicate.TeammateTask(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TeammateTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeammateTasks = append(node.Edges.TeammateTasks, n)
		}
	}

	if query := tq.withProjectTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProjectTasks = []*ProjectTask{}
		}
		query.Where(predicate.ProjectTask(func(s *sql.Selector) {
			s.Where(sql.InValues(task.ProjectTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ProjectTasks = append(node.Edges.ProjectTasks, n)
		}
	}

	if query := tq.withTaskLikes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskLikes = []*TaskLike{}
		}
		query.Where(predicate.TaskLike(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TaskLikesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskLikes = append(node.Edges.TaskLikes, n)
		}
	}

	if query := tq.withTaskTags; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskTags = []*TaskTag{}
		}
		query.Where(predicate.TaskTag(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TaskTagsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskTags = append(node.Edges.TaskTags, n)
		}
	}

	if query := tq.withTaskCollaborators; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskCollaborators = []*TaskCollaborator{}
		}
		query.Where(predicate.TaskCollaborator(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TaskCollaboratorsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskCollaborators = append(node.Edges.TaskCollaborators, n)
		}
	}

	if query := tq.withTaskFeeds; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskFeeds = []*TaskFeed{}
		}
		query.Where(predicate.TaskFeed(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TaskFeedsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskFeeds = append(node.Edges.TaskFeeds, n)
		}
	}

	if query := tq.withTaskFeedLikes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskFeedLikes = []*TaskFeedLike{}
		}
		query.Where(predicate.TaskFeedLike(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TaskFeedLikesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskFeedLikes = append(node.Edges.TaskFeedLikes, n)
		}
	}

	if query := tq.withTaskFiles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskFiles = []*TaskFile{}
		}
		query.Where(predicate.TaskFile(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TaskFilesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskFiles = append(node.Edges.TaskFiles, n)
		}
	}

	if query := tq.withDeletedTasksRef; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.DeletedTasksRef = []*DeletedTask{}
		}
		query.Where(predicate.DeletedTask(func(s *sql.Selector) {
			s.Where(sql.InValues(task.DeletedTasksRefColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.DeletedTasksRef = append(node.Edges.DeletedTasksRef, n)
		}
	}

	if query := tq.withTaskActivityTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskActivityTasks = []*TaskActivityTask{}
		}
		query.Where(predicate.TaskActivityTask(func(s *sql.Selector) {
			s.Where(sql.InValues(task.TaskActivityTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskActivityTasks = append(node.Edges.TaskActivityTasks, n)
		}
	}

	if query := tq.withWorkspaceActivityTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkspaceActivityTasks = []*WorkspaceActivityTask{}
		}
		query.Where(predicate.WorkspaceActivityTask(func(s *sql.Selector) {
			s.Where(sql.InValues(task.WorkspaceActivityTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.WorkspaceActivityTasks = append(node.Edges.WorkspaceActivityTasks, n)
		}
	}

	if query := tq.withArchivedTaskActivityTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ArchivedTaskActivityTasks = []*ArchivedTaskActivityTask{}
		}
		query.Where(predicate.ArchivedTaskActivityTask(func(s *sql.Selector) {
			s.Where(sql.InValues(task.ArchivedTaskActivityTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ArchivedTaskActivityTasks = append(node.Edges.ArchivedTaskActivityTasks, n)
		}
	}

	if query := tq.withArchivedWorkspaceActivityTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Task)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ArchivedWorkspaceActivityTasks = []*ArchivedWorkspaceActivityTask{}
		}
		query.Where(predicate.ArchivedWorkspaceActivityTask(func(s *sql.Selector) {
			s.Where(sql.InValues(task.ArchivedWorkspaceActivityTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ArchivedWorkspaceActivityTasks = append(node.Edges.ArchivedWorkspaceActivityTasks, n)
		}
	}

	return nodes, nil
}

func (tq *TaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.fields
	if len(tq.fields) > 0 {
		_spec.Unique = tq.unique != nil && *tq.unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TaskQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tq *TaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: task.FieldID,
			},
		},
		From:   tq.sql,
		Unique: true,
	}
	if unique := tq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for i := range fields {
			if fields[i] != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(task.Table)
	columns := tq.fields
	if len(columns) == 0 {
		columns = task.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.unique != nil && *tq.unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskGroupBy is the group-by builder for Task entities.
type TaskGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TaskGroupBy) Aggregate(fns ...AggregateFunc) *TaskGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tgb *TaskGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tgb.path(ctx)
	if err != nil {
		return err
	}
	tgb.sql = query
	return tgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tgb *TaskGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TaskGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tgb *TaskGroupBy) StringsX(ctx context.Context) []string {
	v, err := tgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tgb *TaskGroupBy) StringX(ctx context.Context) string {
	v, err := tgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TaskGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tgb *TaskGroupBy) IntsX(ctx context.Context) []int {
	v, err := tgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tgb *TaskGroupBy) IntX(ctx context.Context) int {
	v, err := tgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TaskGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tgb *TaskGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tgb *TaskGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TaskGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tgb *TaskGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TaskGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tgb *TaskGroupBy) BoolX(ctx context.Context) bool {
	v, err := tgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tgb *TaskGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tgb.fields {
		if !task.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tgb *TaskGroupBy) sqlQuery() *sql.Selector {
	selector := tgb.sql.Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tgb.fields)+len(tgb.fns))
		for _, f := range tgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tgb.fields...)...)
}

// TaskSelect is the builder for selecting fields of Task entities.
type TaskSelect struct {
	*TaskQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TaskSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	ts.sql = ts.TaskQuery.sqlQuery(ctx)
	return ts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ts *TaskSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TaskSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ts *TaskSelect) StringsX(ctx context.Context) []string {
	v, err := ts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ts *TaskSelect) StringX(ctx context.Context) string {
	v, err := ts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TaskSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ts *TaskSelect) IntsX(ctx context.Context) []int {
	v, err := ts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ts *TaskSelect) IntX(ctx context.Context) int {
	v, err := ts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TaskSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ts *TaskSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ts *TaskSelect) Float64X(ctx context.Context) float64 {
	v, err := ts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TaskSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ts *TaskSelect) BoolsX(ctx context.Context) []bool {
	v, err := ts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ts *TaskSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = fmt.Errorf("ent: TaskSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ts *TaskSelect) BoolX(ctx context.Context) bool {
	v, err := ts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ts *TaskSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ts.sql.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
