// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceactivity"
	"project-management-demo-backend/ent/workspaceactivitytask"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceActivityCreate is the builder for creating a WorkspaceActivity entity.
type WorkspaceActivityCreate struct {
	config
	mutation *WorkspaceActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetActivityTypeID sets the "activity_type_id" field.
func (wac *WorkspaceActivityCreate) SetActivityTypeID(u ulid.ID) *WorkspaceActivityCreate {
	wac.mutation.SetActivityTypeID(u)
	return wac
}

// SetWorkspaceID sets the "workspace_id" field.
func (wac *WorkspaceActivityCreate) SetWorkspaceID(u ulid.ID) *WorkspaceActivityCreate {
	wac.mutation.SetWorkspaceID(u)
	return wac
}

// SetProjectID sets the "project_id" field.
func (wac *WorkspaceActivityCreate) SetProjectID(u ulid.ID) *WorkspaceActivityCreate {
	wac.mutation.SetProjectID(u)
	return wac
}

// SetTeammateID sets the "teammate_id" field.
func (wac *WorkspaceActivityCreate) SetTeammateID(u ulid.ID) *WorkspaceActivityCreate {
	wac.mutation.SetTeammateID(u)
	return wac
}

// SetCreatedAt sets the "created_at" field.
func (wac *WorkspaceActivityCreate) SetCreatedAt(t time.Time) *WorkspaceActivityCreate {
	wac.mutation.SetCreatedAt(t)
	return wac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wac *WorkspaceActivityCreate) SetNillableCreatedAt(t *time.Time) *WorkspaceActivityCreate {
	if t != nil {
		wac.SetCreatedAt(*t)
	}
	return wac
}

// SetUpdatedAt sets the "updated_at" field.
func (wac *WorkspaceActivityCreate) SetUpdatedAt(t time.Time) *WorkspaceActivityCreate {
	wac.mutation.SetUpdatedAt(t)
	return wac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wac *WorkspaceActivityCreate) SetNillableUpdatedAt(t *time.Time) *WorkspaceActivityCreate {
	if t != nil {
		wac.SetUpdatedAt(*t)
	}
	return wac
}

// SetID sets the "id" field.
func (wac *WorkspaceActivityCreate) SetID(u ulid.ID) *WorkspaceActivityCreate {
	wac.mutation.SetID(u)
	return wac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wac *WorkspaceActivityCreate) SetNillableID(u *ulid.ID) *WorkspaceActivityCreate {
	if u != nil {
		wac.SetID(*u)
	}
	return wac
}

// SetActivityType sets the "activityType" edge to the ActivityType entity.
func (wac *WorkspaceActivityCreate) SetActivityType(a *ActivityType) *WorkspaceActivityCreate {
	return wac.SetActivityTypeID(a.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (wac *WorkspaceActivityCreate) SetWorkspace(w *Workspace) *WorkspaceActivityCreate {
	return wac.SetWorkspaceID(w.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (wac *WorkspaceActivityCreate) SetProject(p *Project) *WorkspaceActivityCreate {
	return wac.SetProjectID(p.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (wac *WorkspaceActivityCreate) SetTeammate(t *Teammate) *WorkspaceActivityCreate {
	return wac.SetTeammateID(t.ID)
}

// AddWorkspaceActivityTaskIDs adds the "workspaceActivityTasks" edge to the WorkspaceActivityTask entity by IDs.
func (wac *WorkspaceActivityCreate) AddWorkspaceActivityTaskIDs(ids ...ulid.ID) *WorkspaceActivityCreate {
	wac.mutation.AddWorkspaceActivityTaskIDs(ids...)
	return wac
}

// AddWorkspaceActivityTasks adds the "workspaceActivityTasks" edges to the WorkspaceActivityTask entity.
func (wac *WorkspaceActivityCreate) AddWorkspaceActivityTasks(w ...*WorkspaceActivityTask) *WorkspaceActivityCreate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wac.AddWorkspaceActivityTaskIDs(ids...)
}

// Mutation returns the WorkspaceActivityMutation object of the builder.
func (wac *WorkspaceActivityCreate) Mutation() *WorkspaceActivityMutation {
	return wac.mutation
}

// Save creates the WorkspaceActivity in the database.
func (wac *WorkspaceActivityCreate) Save(ctx context.Context) (*WorkspaceActivity, error) {
	var (
		err  error
		node *WorkspaceActivity
	)
	wac.defaults()
	if len(wac.hooks) == 0 {
		if err = wac.check(); err != nil {
			return nil, err
		}
		node, err = wac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkspaceActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wac.check(); err != nil {
				return nil, err
			}
			wac.mutation = mutation
			if node, err = wac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wac.hooks) - 1; i >= 0; i-- {
			if wac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wac *WorkspaceActivityCreate) SaveX(ctx context.Context) *WorkspaceActivity {
	v, err := wac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wac *WorkspaceActivityCreate) Exec(ctx context.Context) error {
	_, err := wac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wac *WorkspaceActivityCreate) ExecX(ctx context.Context) {
	if err := wac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wac *WorkspaceActivityCreate) defaults() {
	if _, ok := wac.mutation.CreatedAt(); !ok {
		v := workspaceactivity.DefaultCreatedAt()
		wac.mutation.SetCreatedAt(v)
	}
	if _, ok := wac.mutation.UpdatedAt(); !ok {
		v := workspaceactivity.DefaultUpdatedAt()
		wac.mutation.SetUpdatedAt(v)
	}
	if _, ok := wac.mutation.ID(); !ok {
		v := workspaceactivity.DefaultID()
		wac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wac *WorkspaceActivityCreate) check() error {
	if _, ok := wac.mutation.ActivityTypeID(); !ok {
		return &ValidationError{Name: "activity_type_id", err: errors.New(`ent: missing required field "WorkspaceActivity.activity_type_id"`)}
	}
	if _, ok := wac.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "WorkspaceActivity.workspace_id"`)}
	}
	if _, ok := wac.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "WorkspaceActivity.project_id"`)}
	}
	if _, ok := wac.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "WorkspaceActivity.teammate_id"`)}
	}
	if _, ok := wac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkspaceActivity.created_at"`)}
	}
	if _, ok := wac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkspaceActivity.updated_at"`)}
	}
	if _, ok := wac.mutation.ActivityTypeID(); !ok {
		return &ValidationError{Name: "activityType", err: errors.New(`ent: missing required edge "WorkspaceActivity.activityType"`)}
	}
	if _, ok := wac.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New(`ent: missing required edge "WorkspaceActivity.workspace"`)}
	}
	if _, ok := wac.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "WorkspaceActivity.project"`)}
	}
	if _, ok := wac.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New(`ent: missing required edge "WorkspaceActivity.teammate"`)}
	}
	return nil
}

func (wac *WorkspaceActivityCreate) sqlSave(ctx context.Context) (*WorkspaceActivity, error) {
	_node, _spec := wac.createSpec()
	if err := sqlgraph.CreateNode(ctx, wac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (wac *WorkspaceActivityCreate) createSpec() (*WorkspaceActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkspaceActivity{config: wac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workspaceactivity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: workspaceactivity.FieldID,
			},
		}
	)
	_spec.OnConflict = wac.conflict
	if id, ok := wac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workspaceactivity.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workspaceactivity.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := wac.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ActivityTypeTable,
			Columns: []string{workspaceactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActivityTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wac.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.WorkspaceTable,
			Columns: []string{workspaceactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wac.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.ProjectTable,
			Columns: []string{workspaceactivity.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wac.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceactivity.TeammateTable,
			Columns: []string{workspaceactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wac.mutation.WorkspaceActivityTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspaceactivity.WorkspaceActivityTasksTable,
			Columns: []string{workspaceactivity.WorkspaceActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceActivity.Create().
//		SetActivityTypeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceActivityUpsert) {
//			SetActivityTypeID(v+v).
//		}).
//		Exec(ctx)
//
func (wac *WorkspaceActivityCreate) OnConflict(opts ...sql.ConflictOption) *WorkspaceActivityUpsertOne {
	wac.conflict = opts
	return &WorkspaceActivityUpsertOne{
		create: wac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wac *WorkspaceActivityCreate) OnConflictColumns(columns ...string) *WorkspaceActivityUpsertOne {
	wac.conflict = append(wac.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceActivityUpsertOne{
		create: wac,
	}
}

type (
	// WorkspaceActivityUpsertOne is the builder for "upsert"-ing
	//  one WorkspaceActivity node.
	WorkspaceActivityUpsertOne struct {
		create *WorkspaceActivityCreate
	}

	// WorkspaceActivityUpsert is the "OnConflict" setter.
	WorkspaceActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetActivityTypeID sets the "activity_type_id" field.
func (u *WorkspaceActivityUpsert) SetActivityTypeID(v ulid.ID) *WorkspaceActivityUpsert {
	u.Set(workspaceactivity.FieldActivityTypeID, v)
	return u
}

// UpdateActivityTypeID sets the "activity_type_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsert) UpdateActivityTypeID() *WorkspaceActivityUpsert {
	u.SetExcluded(workspaceactivity.FieldActivityTypeID)
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceActivityUpsert) SetWorkspaceID(v ulid.ID) *WorkspaceActivityUpsert {
	u.Set(workspaceactivity.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsert) UpdateWorkspaceID() *WorkspaceActivityUpsert {
	u.SetExcluded(workspaceactivity.FieldWorkspaceID)
	return u
}

// SetProjectID sets the "project_id" field.
func (u *WorkspaceActivityUpsert) SetProjectID(v ulid.ID) *WorkspaceActivityUpsert {
	u.Set(workspaceactivity.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsert) UpdateProjectID() *WorkspaceActivityUpsert {
	u.SetExcluded(workspaceactivity.FieldProjectID)
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *WorkspaceActivityUpsert) SetTeammateID(v ulid.ID) *WorkspaceActivityUpsert {
	u.Set(workspaceactivity.FieldTeammateID, v)
	return u
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsert) UpdateTeammateID() *WorkspaceActivityUpsert {
	u.SetExcluded(workspaceactivity.FieldTeammateID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceActivityUpsert) SetCreatedAt(v time.Time) *WorkspaceActivityUpsert {
	u.Set(workspaceactivity.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceActivityUpsert) UpdateCreatedAt() *WorkspaceActivityUpsert {
	u.SetExcluded(workspaceactivity.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceActivityUpsert) SetUpdatedAt(v time.Time) *WorkspaceActivityUpsert {
	u.Set(workspaceactivity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceActivityUpsert) UpdateUpdatedAt() *WorkspaceActivityUpsert {
	u.SetExcluded(workspaceactivity.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkspaceActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceactivity.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WorkspaceActivityUpsertOne) UpdateNewValues() *WorkspaceActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workspaceactivity.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workspaceactivity.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(workspaceactivity.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.WorkspaceActivity.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *WorkspaceActivityUpsertOne) Ignore() *WorkspaceActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceActivityUpsertOne) DoNothing() *WorkspaceActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceActivityCreate.OnConflict
// documentation for more info.
func (u *WorkspaceActivityUpsertOne) Update(set func(*WorkspaceActivityUpsert)) *WorkspaceActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetActivityTypeID sets the "activity_type_id" field.
func (u *WorkspaceActivityUpsertOne) SetActivityTypeID(v ulid.ID) *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetActivityTypeID(v)
	})
}

// UpdateActivityTypeID sets the "activity_type_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertOne) UpdateActivityTypeID() *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateActivityTypeID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceActivityUpsertOne) SetWorkspaceID(v ulid.ID) *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertOne) UpdateWorkspaceID() *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetProjectID sets the "project_id" field.
func (u *WorkspaceActivityUpsertOne) SetProjectID(v ulid.ID) *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertOne) UpdateProjectID() *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateProjectID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *WorkspaceActivityUpsertOne) SetTeammateID(v ulid.ID) *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertOne) UpdateTeammateID() *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateTeammateID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceActivityUpsertOne) SetCreatedAt(v time.Time) *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertOne) UpdateCreatedAt() *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceActivityUpsertOne) SetUpdatedAt(v time.Time) *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertOne) UpdateUpdatedAt() *WorkspaceActivityUpsertOne {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WorkspaceActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkspaceActivityUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkspaceActivityUpsertOne.ID is not supported by MySQL driver. Use WorkspaceActivityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkspaceActivityUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkspaceActivityCreateBulk is the builder for creating many WorkspaceActivity entities in bulk.
type WorkspaceActivityCreateBulk struct {
	config
	builders []*WorkspaceActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkspaceActivity entities in the database.
func (wacb *WorkspaceActivityCreateBulk) Save(ctx context.Context) ([]*WorkspaceActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wacb.builders))
	nodes := make([]*WorkspaceActivity, len(wacb.builders))
	mutators := make([]Mutator, len(wacb.builders))
	for i := range wacb.builders {
		func(i int, root context.Context) {
			builder := wacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkspaceActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wacb *WorkspaceActivityCreateBulk) SaveX(ctx context.Context) []*WorkspaceActivity {
	v, err := wacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wacb *WorkspaceActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := wacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wacb *WorkspaceActivityCreateBulk) ExecX(ctx context.Context) {
	if err := wacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceActivity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceActivityUpsert) {
//			SetActivityTypeID(v+v).
//		}).
//		Exec(ctx)
//
func (wacb *WorkspaceActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkspaceActivityUpsertBulk {
	wacb.conflict = opts
	return &WorkspaceActivityUpsertBulk{
		create: wacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceActivity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wacb *WorkspaceActivityCreateBulk) OnConflictColumns(columns ...string) *WorkspaceActivityUpsertBulk {
	wacb.conflict = append(wacb.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceActivityUpsertBulk{
		create: wacb,
	}
}

// WorkspaceActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkspaceActivity nodes.
type WorkspaceActivityUpsertBulk struct {
	create *WorkspaceActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkspaceActivity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceactivity.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WorkspaceActivityUpsertBulk) UpdateNewValues() *WorkspaceActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workspaceactivity.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workspaceactivity.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(workspaceactivity.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceActivity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *WorkspaceActivityUpsertBulk) Ignore() *WorkspaceActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceActivityUpsertBulk) DoNothing() *WorkspaceActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceActivityCreateBulk.OnConflict
// documentation for more info.
func (u *WorkspaceActivityUpsertBulk) Update(set func(*WorkspaceActivityUpsert)) *WorkspaceActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetActivityTypeID sets the "activity_type_id" field.
func (u *WorkspaceActivityUpsertBulk) SetActivityTypeID(v ulid.ID) *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetActivityTypeID(v)
	})
}

// UpdateActivityTypeID sets the "activity_type_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertBulk) UpdateActivityTypeID() *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateActivityTypeID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceActivityUpsertBulk) SetWorkspaceID(v ulid.ID) *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertBulk) UpdateWorkspaceID() *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetProjectID sets the "project_id" field.
func (u *WorkspaceActivityUpsertBulk) SetProjectID(v ulid.ID) *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertBulk) UpdateProjectID() *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateProjectID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *WorkspaceActivityUpsertBulk) SetTeammateID(v ulid.ID) *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertBulk) UpdateTeammateID() *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateTeammateID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceActivityUpsertBulk) SetCreatedAt(v time.Time) *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertBulk) UpdateCreatedAt() *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceActivityUpsertBulk) SetUpdatedAt(v time.Time) *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceActivityUpsertBulk) UpdateUpdatedAt() *WorkspaceActivityUpsertBulk {
	return u.Update(func(s *WorkspaceActivityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WorkspaceActivityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkspaceActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
