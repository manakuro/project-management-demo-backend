// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/schema/ulid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectIconUpdate is the builder for updating ProjectIcon entities.
type ProjectIconUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectIconMutation
}

// Where appends a list predicates to the ProjectIconUpdate builder.
func (piu *ProjectIconUpdate) Where(ps ...predicate.ProjectIcon) *ProjectIconUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetIconID sets the "icon_id" field.
func (piu *ProjectIconUpdate) SetIconID(u ulid.ID) *ProjectIconUpdate {
	piu.mutation.SetIconID(u)
	return piu
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (piu *ProjectIconUpdate) AddProjectIDs(ids ...ulid.ID) *ProjectIconUpdate {
	piu.mutation.AddProjectIDs(ids...)
	return piu
}

// AddProjects adds the "projects" edges to the Project entity.
func (piu *ProjectIconUpdate) AddProjects(p ...*Project) *ProjectIconUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddProjectIDs(ids...)
}

// SetIcon sets the "icon" edge to the Icon entity.
func (piu *ProjectIconUpdate) SetIcon(i *Icon) *ProjectIconUpdate {
	return piu.SetIconID(i.ID)
}

// Mutation returns the ProjectIconMutation object of the builder.
func (piu *ProjectIconUpdate) Mutation() *ProjectIconMutation {
	return piu.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (piu *ProjectIconUpdate) ClearProjects() *ProjectIconUpdate {
	piu.mutation.ClearProjects()
	return piu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (piu *ProjectIconUpdate) RemoveProjectIDs(ids ...ulid.ID) *ProjectIconUpdate {
	piu.mutation.RemoveProjectIDs(ids...)
	return piu
}

// RemoveProjects removes "projects" edges to Project entities.
func (piu *ProjectIconUpdate) RemoveProjects(p ...*Project) *ProjectIconUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveProjectIDs(ids...)
}

// ClearIcon clears the "icon" edge to the Icon entity.
func (piu *ProjectIconUpdate) ClearIcon() *ProjectIconUpdate {
	piu.mutation.ClearIcon()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProjectIconUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(piu.hooks) == 0 {
		if err = piu.check(); err != nil {
			return 0, err
		}
		affected, err = piu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectIconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piu.check(); err != nil {
				return 0, err
			}
			piu.mutation = mutation
			affected, err = piu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(piu.hooks) - 1; i >= 0; i-- {
			if piu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = piu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProjectIconUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProjectIconUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProjectIconUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProjectIconUpdate) check() error {
	if _, ok := piu.mutation.IconID(); piu.mutation.IconCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"icon\"")
	}
	return nil
}

func (piu *ProjectIconUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projecticon.Table,
			Columns: projecticon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: projecticon.FieldID,
			},
		},
	}
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if piu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecticon.ProjectsTable,
			Columns: []string{projecticon.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !piu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecticon.ProjectsTable,
			Columns: []string{projecticon.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecticon.ProjectsTable,
			Columns: []string{projecticon.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecticon.IconTable,
			Columns: []string{projecticon.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: icon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.IconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecticon.IconTable,
			Columns: []string{projecticon.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: icon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecticon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProjectIconUpdateOne is the builder for updating a single ProjectIcon entity.
type ProjectIconUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectIconMutation
}

// SetIconID sets the "icon_id" field.
func (piuo *ProjectIconUpdateOne) SetIconID(u ulid.ID) *ProjectIconUpdateOne {
	piuo.mutation.SetIconID(u)
	return piuo
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (piuo *ProjectIconUpdateOne) AddProjectIDs(ids ...ulid.ID) *ProjectIconUpdateOne {
	piuo.mutation.AddProjectIDs(ids...)
	return piuo
}

// AddProjects adds the "projects" edges to the Project entity.
func (piuo *ProjectIconUpdateOne) AddProjects(p ...*Project) *ProjectIconUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddProjectIDs(ids...)
}

// SetIcon sets the "icon" edge to the Icon entity.
func (piuo *ProjectIconUpdateOne) SetIcon(i *Icon) *ProjectIconUpdateOne {
	return piuo.SetIconID(i.ID)
}

// Mutation returns the ProjectIconMutation object of the builder.
func (piuo *ProjectIconUpdateOne) Mutation() *ProjectIconMutation {
	return piuo.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (piuo *ProjectIconUpdateOne) ClearProjects() *ProjectIconUpdateOne {
	piuo.mutation.ClearProjects()
	return piuo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (piuo *ProjectIconUpdateOne) RemoveProjectIDs(ids ...ulid.ID) *ProjectIconUpdateOne {
	piuo.mutation.RemoveProjectIDs(ids...)
	return piuo
}

// RemoveProjects removes "projects" edges to Project entities.
func (piuo *ProjectIconUpdateOne) RemoveProjects(p ...*Project) *ProjectIconUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveProjectIDs(ids...)
}

// ClearIcon clears the "icon" edge to the Icon entity.
func (piuo *ProjectIconUpdateOne) ClearIcon() *ProjectIconUpdateOne {
	piuo.mutation.ClearIcon()
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProjectIconUpdateOne) Select(field string, fields ...string) *ProjectIconUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProjectIcon entity.
func (piuo *ProjectIconUpdateOne) Save(ctx context.Context) (*ProjectIcon, error) {
	var (
		err  error
		node *ProjectIcon
	)
	if len(piuo.hooks) == 0 {
		if err = piuo.check(); err != nil {
			return nil, err
		}
		node, err = piuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectIconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piuo.check(); err != nil {
				return nil, err
			}
			piuo.mutation = mutation
			node, err = piuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(piuo.hooks) - 1; i >= 0; i-- {
			if piuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = piuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProjectIconUpdateOne) SaveX(ctx context.Context) *ProjectIcon {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProjectIconUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProjectIconUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProjectIconUpdateOne) check() error {
	if _, ok := piuo.mutation.IconID(); piuo.mutation.IconCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"icon\"")
	}
	return nil
}

func (piuo *ProjectIconUpdateOne) sqlSave(ctx context.Context) (_node *ProjectIcon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projecticon.Table,
			Columns: projecticon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: projecticon.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProjectIcon.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projecticon.FieldID)
		for _, f := range fields {
			if !projecticon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projecticon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if piuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecticon.ProjectsTable,
			Columns: []string{projecticon.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !piuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecticon.ProjectsTable,
			Columns: []string{projecticon.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projecticon.ProjectsTable,
			Columns: []string{projecticon.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.IconCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecticon.IconTable,
			Columns: []string{projecticon.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: icon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.IconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecticon.IconTable,
			Columns: []string{projecticon.IconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: icon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectIcon{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecticon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
