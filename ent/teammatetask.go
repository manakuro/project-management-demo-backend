// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetasksection"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TeammateTask is the model entity for the TeammateTask schema.
type TeammateTask struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// TeammateID holds the value of the "teammate_id" field.
	TeammateID ulid.ID `json:"teammate_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID ulid.ID `json:"task_id,omitempty"`
	// TeammateTaskSectionID holds the value of the "teammate_task_section_id" field.
	TeammateTaskSectionID ulid.ID `json:"teammate_task_section_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeammateTaskQuery when eager-loading is set.
	Edges TeammateTaskEdges `json:"edges"`
}

// TeammateTaskEdges holds the relations/edges for other nodes in the graph.
type TeammateTaskEdges struct {
	// Teammate holds the value of the teammate edge.
	Teammate *Teammate `json:"teammate,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// TeammateTaskSection holds the value of the teammateTaskSection edge.
	TeammateTaskSection *TeammateTaskSection `json:"teammateTaskSection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TeammateOrErr returns the Teammate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskEdges) TeammateOrErr() (*Teammate, error) {
	if e.loadedTypes[0] {
		if e.Teammate == nil {
			// The edge teammate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammate.Label}
		}
		return e.Teammate, nil
	}
	return nil, &NotLoadedError{edge: "teammate"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// The edge task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// TeammateTaskSectionOrErr returns the TeammateTaskSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskEdges) TeammateTaskSectionOrErr() (*TeammateTaskSection, error) {
	if e.loadedTypes[2] {
		if e.TeammateTaskSection == nil {
			// The edge teammateTaskSection was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammatetasksection.Label}
		}
		return e.TeammateTaskSection, nil
	}
	return nil, &NotLoadedError{edge: "teammateTaskSection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeammateTask) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case teammatetask.FieldCreatedAt, teammatetask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case teammatetask.FieldID, teammatetask.FieldTeammateID, teammatetask.FieldTaskID, teammatetask.FieldTeammateTaskSectionID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TeammateTask", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeammateTask fields.
func (tt *TeammateTask) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teammatetask.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tt.ID = *value
			}
		case teammatetask.FieldTeammateID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field teammate_id", values[i])
			} else if value != nil {
				tt.TeammateID = *value
			}
		case teammatetask.FieldTaskID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				tt.TaskID = *value
			}
		case teammatetask.FieldTeammateTaskSectionID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field teammate_task_section_id", values[i])
			} else if value != nil {
				tt.TeammateTaskSectionID = *value
			}
		case teammatetask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tt.CreatedAt = value.Time
			}
		case teammatetask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tt.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTeammate queries the "teammate" edge of the TeammateTask entity.
func (tt *TeammateTask) QueryTeammate() *TeammateQuery {
	return (&TeammateTaskClient{config: tt.config}).QueryTeammate(tt)
}

// QueryTask queries the "task" edge of the TeammateTask entity.
func (tt *TeammateTask) QueryTask() *TaskQuery {
	return (&TeammateTaskClient{config: tt.config}).QueryTask(tt)
}

// QueryTeammateTaskSection queries the "teammateTaskSection" edge of the TeammateTask entity.
func (tt *TeammateTask) QueryTeammateTaskSection() *TeammateTaskSectionQuery {
	return (&TeammateTaskClient{config: tt.config}).QueryTeammateTaskSection(tt)
}

// Update returns a builder for updating this TeammateTask.
// Note that you need to call TeammateTask.Unwrap() before calling this method if this TeammateTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TeammateTask) Update() *TeammateTaskUpdateOne {
	return (&TeammateTaskClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TeammateTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TeammateTask) Unwrap() *TeammateTask {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeammateTask is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TeammateTask) String() string {
	var builder strings.Builder
	builder.WriteString("TeammateTask(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", teammate_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TeammateID))
	builder.WriteString(", task_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TaskID))
	builder.WriteString(", teammate_task_section_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TeammateTaskSectionID))
	builder.WriteString(", created_at=")
	builder.WriteString(tt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TeammateTasks is a parsable slice of TeammateTask.
type TeammateTasks []*TeammateTask

func (tt TeammateTasks) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
