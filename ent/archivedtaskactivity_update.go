// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/archivedtaskactivity"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArchivedTaskActivityUpdate is the builder for updating ArchivedTaskActivity entities.
type ArchivedTaskActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ArchivedTaskActivityMutation
}

// Where appends a list predicates to the ArchivedTaskActivityUpdate builder.
func (atau *ArchivedTaskActivityUpdate) Where(ps ...predicate.ArchivedTaskActivity) *ArchivedTaskActivityUpdate {
	atau.mutation.Where(ps...)
	return atau
}

// SetActivityTypeID sets the "activity_type_id" field.
func (atau *ArchivedTaskActivityUpdate) SetActivityTypeID(u ulid.ID) *ArchivedTaskActivityUpdate {
	atau.mutation.SetActivityTypeID(u)
	return atau
}

// SetTeammateID sets the "teammate_id" field.
func (atau *ArchivedTaskActivityUpdate) SetTeammateID(u ulid.ID) *ArchivedTaskActivityUpdate {
	atau.mutation.SetTeammateID(u)
	return atau
}

// SetWorkspaceID sets the "workspace_id" field.
func (atau *ArchivedTaskActivityUpdate) SetWorkspaceID(u ulid.ID) *ArchivedTaskActivityUpdate {
	atau.mutation.SetWorkspaceID(u)
	return atau
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (atau *ArchivedTaskActivityUpdate) SetTeammate(t *Teammate) *ArchivedTaskActivityUpdate {
	return atau.SetTeammateID(t.ID)
}

// SetActivityType sets the "activityType" edge to the ActivityType entity.
func (atau *ArchivedTaskActivityUpdate) SetActivityType(a *ActivityType) *ArchivedTaskActivityUpdate {
	return atau.SetActivityTypeID(a.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (atau *ArchivedTaskActivityUpdate) SetWorkspace(w *Workspace) *ArchivedTaskActivityUpdate {
	return atau.SetWorkspaceID(w.ID)
}

// Mutation returns the ArchivedTaskActivityMutation object of the builder.
func (atau *ArchivedTaskActivityUpdate) Mutation() *ArchivedTaskActivityMutation {
	return atau.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (atau *ArchivedTaskActivityUpdate) ClearTeammate() *ArchivedTaskActivityUpdate {
	atau.mutation.ClearTeammate()
	return atau
}

// ClearActivityType clears the "activityType" edge to the ActivityType entity.
func (atau *ArchivedTaskActivityUpdate) ClearActivityType() *ArchivedTaskActivityUpdate {
	atau.mutation.ClearActivityType()
	return atau
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (atau *ArchivedTaskActivityUpdate) ClearWorkspace() *ArchivedTaskActivityUpdate {
	atau.mutation.ClearWorkspace()
	return atau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atau *ArchivedTaskActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(atau.hooks) == 0 {
		if err = atau.check(); err != nil {
			return 0, err
		}
		affected, err = atau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivedTaskActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atau.check(); err != nil {
				return 0, err
			}
			atau.mutation = mutation
			affected, err = atau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atau.hooks) - 1; i >= 0; i-- {
			if atau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atau *ArchivedTaskActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := atau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atau *ArchivedTaskActivityUpdate) Exec(ctx context.Context) error {
	_, err := atau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atau *ArchivedTaskActivityUpdate) ExecX(ctx context.Context) {
	if err := atau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atau *ArchivedTaskActivityUpdate) check() error {
	if _, ok := atau.mutation.TeammateID(); atau.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedTaskActivity.teammate"`)
	}
	if _, ok := atau.mutation.ActivityTypeID(); atau.mutation.ActivityTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedTaskActivity.activityType"`)
	}
	if _, ok := atau.mutation.WorkspaceID(); atau.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedTaskActivity.workspace"`)
	}
	return nil
}

func (atau *ArchivedTaskActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivedtaskactivity.Table,
			Columns: archivedtaskactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: archivedtaskactivity.FieldID,
			},
		},
	}
	if ps := atau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if atau.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.TeammateTable,
			Columns: []string{archivedtaskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atau.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.TeammateTable,
			Columns: []string{archivedtaskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atau.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.ActivityTypeTable,
			Columns: []string{archivedtaskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atau.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.ActivityTypeTable,
			Columns: []string{archivedtaskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atau.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.WorkspaceTable,
			Columns: []string{archivedtaskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atau.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.WorkspaceTable,
			Columns: []string{archivedtaskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivedtaskactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ArchivedTaskActivityUpdateOne is the builder for updating a single ArchivedTaskActivity entity.
type ArchivedTaskActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArchivedTaskActivityMutation
}

// SetActivityTypeID sets the "activity_type_id" field.
func (atauo *ArchivedTaskActivityUpdateOne) SetActivityTypeID(u ulid.ID) *ArchivedTaskActivityUpdateOne {
	atauo.mutation.SetActivityTypeID(u)
	return atauo
}

// SetTeammateID sets the "teammate_id" field.
func (atauo *ArchivedTaskActivityUpdateOne) SetTeammateID(u ulid.ID) *ArchivedTaskActivityUpdateOne {
	atauo.mutation.SetTeammateID(u)
	return atauo
}

// SetWorkspaceID sets the "workspace_id" field.
func (atauo *ArchivedTaskActivityUpdateOne) SetWorkspaceID(u ulid.ID) *ArchivedTaskActivityUpdateOne {
	atauo.mutation.SetWorkspaceID(u)
	return atauo
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (atauo *ArchivedTaskActivityUpdateOne) SetTeammate(t *Teammate) *ArchivedTaskActivityUpdateOne {
	return atauo.SetTeammateID(t.ID)
}

// SetActivityType sets the "activityType" edge to the ActivityType entity.
func (atauo *ArchivedTaskActivityUpdateOne) SetActivityType(a *ActivityType) *ArchivedTaskActivityUpdateOne {
	return atauo.SetActivityTypeID(a.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (atauo *ArchivedTaskActivityUpdateOne) SetWorkspace(w *Workspace) *ArchivedTaskActivityUpdateOne {
	return atauo.SetWorkspaceID(w.ID)
}

// Mutation returns the ArchivedTaskActivityMutation object of the builder.
func (atauo *ArchivedTaskActivityUpdateOne) Mutation() *ArchivedTaskActivityMutation {
	return atauo.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (atauo *ArchivedTaskActivityUpdateOne) ClearTeammate() *ArchivedTaskActivityUpdateOne {
	atauo.mutation.ClearTeammate()
	return atauo
}

// ClearActivityType clears the "activityType" edge to the ActivityType entity.
func (atauo *ArchivedTaskActivityUpdateOne) ClearActivityType() *ArchivedTaskActivityUpdateOne {
	atauo.mutation.ClearActivityType()
	return atauo
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (atauo *ArchivedTaskActivityUpdateOne) ClearWorkspace() *ArchivedTaskActivityUpdateOne {
	atauo.mutation.ClearWorkspace()
	return atauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atauo *ArchivedTaskActivityUpdateOne) Select(field string, fields ...string) *ArchivedTaskActivityUpdateOne {
	atauo.fields = append([]string{field}, fields...)
	return atauo
}

// Save executes the query and returns the updated ArchivedTaskActivity entity.
func (atauo *ArchivedTaskActivityUpdateOne) Save(ctx context.Context) (*ArchivedTaskActivity, error) {
	var (
		err  error
		node *ArchivedTaskActivity
	)
	if len(atauo.hooks) == 0 {
		if err = atauo.check(); err != nil {
			return nil, err
		}
		node, err = atauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivedTaskActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atauo.check(); err != nil {
				return nil, err
			}
			atauo.mutation = mutation
			node, err = atauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atauo.hooks) - 1; i >= 0; i-- {
			if atauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atauo *ArchivedTaskActivityUpdateOne) SaveX(ctx context.Context) *ArchivedTaskActivity {
	node, err := atauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atauo *ArchivedTaskActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := atauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atauo *ArchivedTaskActivityUpdateOne) ExecX(ctx context.Context) {
	if err := atauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atauo *ArchivedTaskActivityUpdateOne) check() error {
	if _, ok := atauo.mutation.TeammateID(); atauo.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedTaskActivity.teammate"`)
	}
	if _, ok := atauo.mutation.ActivityTypeID(); atauo.mutation.ActivityTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedTaskActivity.activityType"`)
	}
	if _, ok := atauo.mutation.WorkspaceID(); atauo.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedTaskActivity.workspace"`)
	}
	return nil
}

func (atauo *ArchivedTaskActivityUpdateOne) sqlSave(ctx context.Context) (_node *ArchivedTaskActivity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivedtaskactivity.Table,
			Columns: archivedtaskactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: archivedtaskactivity.FieldID,
			},
		},
	}
	id, ok := atauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArchivedTaskActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, archivedtaskactivity.FieldID)
		for _, f := range fields {
			if !archivedtaskactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != archivedtaskactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if atauo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.TeammateTable,
			Columns: []string{archivedtaskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atauo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.TeammateTable,
			Columns: []string{archivedtaskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atauo.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.ActivityTypeTable,
			Columns: []string{archivedtaskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atauo.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.ActivityTypeTable,
			Columns: []string{archivedtaskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atauo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.WorkspaceTable,
			Columns: []string{archivedtaskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atauo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedtaskactivity.WorkspaceTable,
			Columns: []string{archivedtaskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArchivedTaskActivity{config: atauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivedtaskactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
