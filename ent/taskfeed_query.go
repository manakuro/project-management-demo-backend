// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/teammate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskFeedQuery is the builder for querying TaskFeed entities.
type TaskFeedQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TaskFeed
	// eager-loading edges.
	withTask          *TaskQuery
	withTeammate      *TeammateQuery
	withTaskFeedLikes *TaskFeedLikeQuery
	withTaskFiles     *TaskFileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskFeedQuery builder.
func (tfq *TaskFeedQuery) Where(ps ...predicate.TaskFeed) *TaskFeedQuery {
	tfq.predicates = append(tfq.predicates, ps...)
	return tfq
}

// Limit adds a limit step to the query.
func (tfq *TaskFeedQuery) Limit(limit int) *TaskFeedQuery {
	tfq.limit = &limit
	return tfq
}

// Offset adds an offset step to the query.
func (tfq *TaskFeedQuery) Offset(offset int) *TaskFeedQuery {
	tfq.offset = &offset
	return tfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tfq *TaskFeedQuery) Unique(unique bool) *TaskFeedQuery {
	tfq.unique = &unique
	return tfq
}

// Order adds an order step to the query.
func (tfq *TaskFeedQuery) Order(o ...OrderFunc) *TaskFeedQuery {
	tfq.order = append(tfq.order, o...)
	return tfq
}

// QueryTask chains the current query on the "task" edge.
func (tfq *TaskFeedQuery) QueryTask() *TaskQuery {
	query := &TaskQuery{config: tfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfeed.TaskTable, taskfeed.TaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(tfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammate chains the current query on the "teammate" edge.
func (tfq *TaskFeedQuery) QueryTeammate() *TeammateQuery {
	query := &TeammateQuery{config: tfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, selector),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskfeed.TeammateTable, taskfeed.TeammateColumn),
		)
		fromU = sqlgraph.SetNeighbors(tfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskFeedLikes chains the current query on the "task_feed_likes" edge.
func (tfq *TaskFeedQuery) QueryTaskFeedLikes() *TaskFeedLikeQuery {
	query := &TaskFeedLikeQuery{config: tfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, selector),
			sqlgraph.To(taskfeedlike.Table, taskfeedlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskfeed.TaskFeedLikesTable, taskfeed.TaskFeedLikesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskFiles chains the current query on the "task_files" edge.
func (tfq *TaskFeedQuery) QueryTaskFiles() *TaskFileQuery {
	query := &TaskFileQuery{config: tfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskfeed.Table, taskfeed.FieldID, selector),
			sqlgraph.To(taskfile.Table, taskfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskfeed.TaskFilesTable, taskfeed.TaskFilesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TaskFeed entity from the query.
// Returns a *NotFoundError when no TaskFeed was found.
func (tfq *TaskFeedQuery) First(ctx context.Context) (*TaskFeed, error) {
	nodes, err := tfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{taskfeed.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tfq *TaskFeedQuery) FirstX(ctx context.Context) *TaskFeed {
	node, err := tfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TaskFeed ID from the query.
// Returns a *NotFoundError when no TaskFeed ID was found.
func (tfq *TaskFeedQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{taskfeed.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tfq *TaskFeedQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := tfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TaskFeed entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TaskFeed entity is not found.
// Returns a *NotFoundError when no TaskFeed entities are found.
func (tfq *TaskFeedQuery) Only(ctx context.Context) (*TaskFeed, error) {
	nodes, err := tfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{taskfeed.Label}
	default:
		return nil, &NotSingularError{taskfeed.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tfq *TaskFeedQuery) OnlyX(ctx context.Context) *TaskFeed {
	node, err := tfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TaskFeed ID in the query.
// Returns a *NotSingularError when exactly one TaskFeed ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tfq *TaskFeedQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = &NotSingularError{taskfeed.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tfq *TaskFeedQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := tfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TaskFeeds.
func (tfq *TaskFeedQuery) All(ctx context.Context) ([]*TaskFeed, error) {
	if err := tfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tfq *TaskFeedQuery) AllX(ctx context.Context) []*TaskFeed {
	nodes, err := tfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TaskFeed IDs.
func (tfq *TaskFeedQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := tfq.Select(taskfeed.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tfq *TaskFeedQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := tfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tfq *TaskFeedQuery) Count(ctx context.Context) (int, error) {
	if err := tfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tfq *TaskFeedQuery) CountX(ctx context.Context) int {
	count, err := tfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tfq *TaskFeedQuery) Exist(ctx context.Context) (bool, error) {
	if err := tfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tfq *TaskFeedQuery) ExistX(ctx context.Context) bool {
	exist, err := tfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskFeedQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tfq *TaskFeedQuery) Clone() *TaskFeedQuery {
	if tfq == nil {
		return nil
	}
	return &TaskFeedQuery{
		config:            tfq.config,
		limit:             tfq.limit,
		offset:            tfq.offset,
		order:             append([]OrderFunc{}, tfq.order...),
		predicates:        append([]predicate.TaskFeed{}, tfq.predicates...),
		withTask:          tfq.withTask.Clone(),
		withTeammate:      tfq.withTeammate.Clone(),
		withTaskFeedLikes: tfq.withTaskFeedLikes.Clone(),
		withTaskFiles:     tfq.withTaskFiles.Clone(),
		// clone intermediate query.
		sql:  tfq.sql.Clone(),
		path: tfq.path,
	}
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (tfq *TaskFeedQuery) WithTask(opts ...func(*TaskQuery)) *TaskFeedQuery {
	query := &TaskQuery{config: tfq.config}
	for _, opt := range opts {
		opt(query)
	}
	tfq.withTask = query
	return tfq
}

// WithTeammate tells the query-builder to eager-load the nodes that are connected to
// the "teammate" edge. The optional arguments are used to configure the query builder of the edge.
func (tfq *TaskFeedQuery) WithTeammate(opts ...func(*TeammateQuery)) *TaskFeedQuery {
	query := &TeammateQuery{config: tfq.config}
	for _, opt := range opts {
		opt(query)
	}
	tfq.withTeammate = query
	return tfq
}

// WithTaskFeedLikes tells the query-builder to eager-load the nodes that are connected to
// the "task_feed_likes" edge. The optional arguments are used to configure the query builder of the edge.
func (tfq *TaskFeedQuery) WithTaskFeedLikes(opts ...func(*TaskFeedLikeQuery)) *TaskFeedQuery {
	query := &TaskFeedLikeQuery{config: tfq.config}
	for _, opt := range opts {
		opt(query)
	}
	tfq.withTaskFeedLikes = query
	return tfq
}

// WithTaskFiles tells the query-builder to eager-load the nodes that are connected to
// the "task_files" edge. The optional arguments are used to configure the query builder of the edge.
func (tfq *TaskFeedQuery) WithTaskFiles(opts ...func(*TaskFileQuery)) *TaskFeedQuery {
	query := &TaskFileQuery{config: tfq.config}
	for _, opt := range opts {
		opt(query)
	}
	tfq.withTaskFiles = query
	return tfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TaskID ulid.ID `json:"task_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TaskFeed.Query().
//		GroupBy(taskfeed.FieldTaskID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tfq *TaskFeedQuery) GroupBy(field string, fields ...string) *TaskFeedGroupBy {
	group := &TaskFeedGroupBy{config: tfq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tfq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TaskID ulid.ID `json:"task_id,omitempty"`
//	}
//
//	client.TaskFeed.Query().
//		Select(taskfeed.FieldTaskID).
//		Scan(ctx, &v)
//
func (tfq *TaskFeedQuery) Select(fields ...string) *TaskFeedSelect {
	tfq.fields = append(tfq.fields, fields...)
	return &TaskFeedSelect{TaskFeedQuery: tfq}
}

func (tfq *TaskFeedQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tfq.fields {
		if !taskfeed.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tfq.path != nil {
		prev, err := tfq.path(ctx)
		if err != nil {
			return err
		}
		tfq.sql = prev
	}
	return nil
}

func (tfq *TaskFeedQuery) sqlAll(ctx context.Context) ([]*TaskFeed, error) {
	var (
		nodes       = []*TaskFeed{}
		_spec       = tfq.querySpec()
		loadedTypes = [4]bool{
			tfq.withTask != nil,
			tfq.withTeammate != nil,
			tfq.withTaskFeedLikes != nil,
			tfq.withTaskFiles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TaskFeed{config: tfq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tfq.withTask; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*TaskFeed)
		for i := range nodes {
			fk := nodes[i].TaskID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(task.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Task = n
			}
		}
	}

	if query := tfq.withTeammate; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*TaskFeed)
		for i := range nodes {
			fk := nodes[i].TeammateID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teammate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teammate = n
			}
		}
	}

	if query := tfq.withTaskFeedLikes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*TaskFeed)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskFeedLikes = []*TaskFeedLike{}
		}
		query.Where(predicate.TaskFeedLike(func(s *sql.Selector) {
			s.Where(sql.InValues(taskfeed.TaskFeedLikesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskFeedID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_feed_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskFeedLikes = append(node.Edges.TaskFeedLikes, n)
		}
	}

	if query := tfq.withTaskFiles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*TaskFeed)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskFiles = []*TaskFile{}
		}
		query.Where(predicate.TaskFile(func(s *sql.Selector) {
			s.Where(sql.InValues(taskfeed.TaskFilesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskFeedID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_feed_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskFiles = append(node.Edges.TaskFiles, n)
		}
	}

	return nodes, nil
}

func (tfq *TaskFeedQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tfq.querySpec()
	return sqlgraph.CountNodes(ctx, tfq.driver, _spec)
}

func (tfq *TaskFeedQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tfq *TaskFeedQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskfeed.Table,
			Columns: taskfeed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskfeed.FieldID,
			},
		},
		From:   tfq.sql,
		Unique: true,
	}
	if unique := tfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskfeed.FieldID)
		for i := range fields {
			if fields[i] != taskfeed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tfq *TaskFeedQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tfq.driver.Dialect())
	t1 := builder.Table(taskfeed.Table)
	columns := tfq.fields
	if len(columns) == 0 {
		columns = taskfeed.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tfq.sql != nil {
		selector = tfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range tfq.predicates {
		p(selector)
	}
	for _, p := range tfq.order {
		p(selector)
	}
	if offset := tfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskFeedGroupBy is the group-by builder for TaskFeed entities.
type TaskFeedGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tfgb *TaskFeedGroupBy) Aggregate(fns ...AggregateFunc) *TaskFeedGroupBy {
	tfgb.fns = append(tfgb.fns, fns...)
	return tfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tfgb *TaskFeedGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tfgb.path(ctx)
	if err != nil {
		return err
	}
	tfgb.sql = query
	return tfgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tfgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tfgb.fields) > 1 {
		return nil, errors.New("ent: TaskFeedGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) StringsX(ctx context.Context) []string {
	v, err := tfgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tfgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) StringX(ctx context.Context) string {
	v, err := tfgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tfgb.fields) > 1 {
		return nil, errors.New("ent: TaskFeedGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) IntsX(ctx context.Context) []int {
	v, err := tfgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tfgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) IntX(ctx context.Context) int {
	v, err := tfgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tfgb.fields) > 1 {
		return nil, errors.New("ent: TaskFeedGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tfgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tfgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tfgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tfgb.fields) > 1 {
		return nil, errors.New("ent: TaskFeedGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tfgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tfgb *TaskFeedGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tfgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tfgb *TaskFeedGroupBy) BoolX(ctx context.Context) bool {
	v, err := tfgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tfgb *TaskFeedGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tfgb.fields {
		if !taskfeed.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tfgb *TaskFeedGroupBy) sqlQuery() *sql.Selector {
	selector := tfgb.sql.Select()
	aggregation := make([]string, 0, len(tfgb.fns))
	for _, fn := range tfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tfgb.fields)+len(tfgb.fns))
		for _, f := range tfgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tfgb.fields...)...)
}

// TaskFeedSelect is the builder for selecting fields of TaskFeed entities.
type TaskFeedSelect struct {
	*TaskFeedQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tfs *TaskFeedSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tfs.prepareQuery(ctx); err != nil {
		return err
	}
	tfs.sql = tfs.TaskFeedQuery.sqlQuery(ctx)
	return tfs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tfs *TaskFeedSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tfs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tfs.fields) > 1 {
		return nil, errors.New("ent: TaskFeedSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tfs *TaskFeedSelect) StringsX(ctx context.Context) []string {
	v, err := tfs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tfs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tfs *TaskFeedSelect) StringX(ctx context.Context) string {
	v, err := tfs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tfs.fields) > 1 {
		return nil, errors.New("ent: TaskFeedSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tfs *TaskFeedSelect) IntsX(ctx context.Context) []int {
	v, err := tfs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tfs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tfs *TaskFeedSelect) IntX(ctx context.Context) int {
	v, err := tfs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tfs.fields) > 1 {
		return nil, errors.New("ent: TaskFeedSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tfs *TaskFeedSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tfs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tfs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tfs *TaskFeedSelect) Float64X(ctx context.Context) float64 {
	v, err := tfs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tfs.fields) > 1 {
		return nil, errors.New("ent: TaskFeedSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tfs *TaskFeedSelect) BoolsX(ctx context.Context) []bool {
	v, err := tfs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tfs *TaskFeedSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tfs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskfeed.Label}
	default:
		err = fmt.Errorf("ent: TaskFeedSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tfs *TaskFeedSelect) BoolX(ctx context.Context) bool {
	v, err := tfs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tfs *TaskFeedSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tfs.sql.Query()
	if err := tfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
