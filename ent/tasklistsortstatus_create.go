// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskListSortStatusCreate is the builder for creating a TaskListSortStatus entity.
type TaskListSortStatusCreate struct {
	config
	mutation *TaskListSortStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tlssc *TaskListSortStatusCreate) SetName(s string) *TaskListSortStatusCreate {
	tlssc.mutation.SetName(s)
	return tlssc
}

// SetStatusCode sets the "status_code" field.
func (tlssc *TaskListSortStatusCreate) SetStatusCode(tc tasklistsortstatus.StatusCode) *TaskListSortStatusCreate {
	tlssc.mutation.SetStatusCode(tc)
	return tlssc
}

// SetCreatedAt sets the "created_at" field.
func (tlssc *TaskListSortStatusCreate) SetCreatedAt(t time.Time) *TaskListSortStatusCreate {
	tlssc.mutation.SetCreatedAt(t)
	return tlssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlssc *TaskListSortStatusCreate) SetNillableCreatedAt(t *time.Time) *TaskListSortStatusCreate {
	if t != nil {
		tlssc.SetCreatedAt(*t)
	}
	return tlssc
}

// SetUpdatedAt sets the "updated_at" field.
func (tlssc *TaskListSortStatusCreate) SetUpdatedAt(t time.Time) *TaskListSortStatusCreate {
	tlssc.mutation.SetUpdatedAt(t)
	return tlssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tlssc *TaskListSortStatusCreate) SetNillableUpdatedAt(t *time.Time) *TaskListSortStatusCreate {
	if t != nil {
		tlssc.SetUpdatedAt(*t)
	}
	return tlssc
}

// SetID sets the "id" field.
func (tlssc *TaskListSortStatusCreate) SetID(u ulid.ID) *TaskListSortStatusCreate {
	tlssc.mutation.SetID(u)
	return tlssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlssc *TaskListSortStatusCreate) SetNillableID(u *ulid.ID) *TaskListSortStatusCreate {
	if u != nil {
		tlssc.SetID(*u)
	}
	return tlssc
}

// AddTeammateTaskListStatuseIDs adds the "teammateTaskListStatuses" edge to the TeammateTaskListStatus entity by IDs.
func (tlssc *TaskListSortStatusCreate) AddTeammateTaskListStatuseIDs(ids ...ulid.ID) *TaskListSortStatusCreate {
	tlssc.mutation.AddTeammateTaskListStatuseIDs(ids...)
	return tlssc
}

// AddTeammateTaskListStatuses adds the "teammateTaskListStatuses" edges to the TeammateTaskListStatus entity.
func (tlssc *TaskListSortStatusCreate) AddTeammateTaskListStatuses(t ...*TeammateTaskListStatus) *TaskListSortStatusCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tlssc.AddTeammateTaskListStatuseIDs(ids...)
}

// AddProjectTaskListStatuseIDs adds the "projectTaskListStatuses" edge to the ProjectTaskListStatus entity by IDs.
func (tlssc *TaskListSortStatusCreate) AddProjectTaskListStatuseIDs(ids ...ulid.ID) *TaskListSortStatusCreate {
	tlssc.mutation.AddProjectTaskListStatuseIDs(ids...)
	return tlssc
}

// AddProjectTaskListStatuses adds the "projectTaskListStatuses" edges to the ProjectTaskListStatus entity.
func (tlssc *TaskListSortStatusCreate) AddProjectTaskListStatuses(p ...*ProjectTaskListStatus) *TaskListSortStatusCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tlssc.AddProjectTaskListStatuseIDs(ids...)
}

// Mutation returns the TaskListSortStatusMutation object of the builder.
func (tlssc *TaskListSortStatusCreate) Mutation() *TaskListSortStatusMutation {
	return tlssc.mutation
}

// Save creates the TaskListSortStatus in the database.
func (tlssc *TaskListSortStatusCreate) Save(ctx context.Context) (*TaskListSortStatus, error) {
	var (
		err  error
		node *TaskListSortStatus
	)
	tlssc.defaults()
	if len(tlssc.hooks) == 0 {
		if err = tlssc.check(); err != nil {
			return nil, err
		}
		node, err = tlssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskListSortStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlssc.check(); err != nil {
				return nil, err
			}
			tlssc.mutation = mutation
			if node, err = tlssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tlssc.hooks) - 1; i >= 0; i-- {
			if tlssc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlssc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlssc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tlssc *TaskListSortStatusCreate) SaveX(ctx context.Context) *TaskListSortStatus {
	v, err := tlssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlssc *TaskListSortStatusCreate) Exec(ctx context.Context) error {
	_, err := tlssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlssc *TaskListSortStatusCreate) ExecX(ctx context.Context) {
	if err := tlssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlssc *TaskListSortStatusCreate) defaults() {
	if _, ok := tlssc.mutation.CreatedAt(); !ok {
		v := tasklistsortstatus.DefaultCreatedAt()
		tlssc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlssc.mutation.UpdatedAt(); !ok {
		v := tasklistsortstatus.DefaultUpdatedAt()
		tlssc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tlssc.mutation.ID(); !ok {
		v := tasklistsortstatus.DefaultID()
		tlssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlssc *TaskListSortStatusCreate) check() error {
	if _, ok := tlssc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := tlssc.mutation.Name(); ok {
		if err := tasklistsortstatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := tlssc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "status_code"`)}
	}
	if v, ok := tlssc.mutation.StatusCode(); ok {
		if err := tasklistsortstatus.StatusCodeValidator(v); err != nil {
			return &ValidationError{Name: "status_code", err: fmt.Errorf(`ent: validator failed for field "status_code": %w`, err)}
		}
	}
	if _, ok := tlssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tlssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (tlssc *TaskListSortStatusCreate) sqlSave(ctx context.Context) (*TaskListSortStatus, error) {
	_node, _spec := tlssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (tlssc *TaskListSortStatusCreate) createSpec() (*TaskListSortStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskListSortStatus{config: tlssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tasklistsortstatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tasklistsortstatus.FieldID,
			},
		}
	)
	_spec.OnConflict = tlssc.conflict
	if id, ok := tlssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tlssc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklistsortstatus.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tlssc.mutation.StatusCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: tasklistsortstatus.FieldStatusCode,
		})
		_node.StatusCode = value
	}
	if value, ok := tlssc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklistsortstatus.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tlssc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklistsortstatus.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := tlssc.mutation.TeammateTaskListStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasklistsortstatus.TeammateTaskListStatusesTable,
			Columns: []string{tasklistsortstatus.TeammateTaskListStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetaskliststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlssc.mutation.ProjectTaskListStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasklistsortstatus.ProjectTaskListStatusesTable,
			Columns: []string{tasklistsortstatus.ProjectTaskListStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttaskliststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskListSortStatus.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskListSortStatusUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tlssc *TaskListSortStatusCreate) OnConflict(opts ...sql.ConflictOption) *TaskListSortStatusUpsertOne {
	tlssc.conflict = opts
	return &TaskListSortStatusUpsertOne{
		create: tlssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskListSortStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tlssc *TaskListSortStatusCreate) OnConflictColumns(columns ...string) *TaskListSortStatusUpsertOne {
	tlssc.conflict = append(tlssc.conflict, sql.ConflictColumns(columns...))
	return &TaskListSortStatusUpsertOne{
		create: tlssc,
	}
}

type (
	// TaskListSortStatusUpsertOne is the builder for "upsert"-ing
	//  one TaskListSortStatus node.
	TaskListSortStatusUpsertOne struct {
		create *TaskListSortStatusCreate
	}

	// TaskListSortStatusUpsert is the "OnConflict" setter.
	TaskListSortStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TaskListSortStatusUpsert) SetName(v string) *TaskListSortStatusUpsert {
	u.Set(tasklistsortstatus.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskListSortStatusUpsert) UpdateName() *TaskListSortStatusUpsert {
	u.SetExcluded(tasklistsortstatus.FieldName)
	return u
}

// SetStatusCode sets the "status_code" field.
func (u *TaskListSortStatusUpsert) SetStatusCode(v tasklistsortstatus.StatusCode) *TaskListSortStatusUpsert {
	u.Set(tasklistsortstatus.FieldStatusCode, v)
	return u
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *TaskListSortStatusUpsert) UpdateStatusCode() *TaskListSortStatusUpsert {
	u.SetExcluded(tasklistsortstatus.FieldStatusCode)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskListSortStatusUpsert) SetCreatedAt(v time.Time) *TaskListSortStatusUpsert {
	u.Set(tasklistsortstatus.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskListSortStatusUpsert) UpdateCreatedAt() *TaskListSortStatusUpsert {
	u.SetExcluded(tasklistsortstatus.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskListSortStatusUpsert) SetUpdatedAt(v time.Time) *TaskListSortStatusUpsert {
	u.Set(tasklistsortstatus.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskListSortStatusUpsert) UpdateUpdatedAt() *TaskListSortStatusUpsert {
	u.SetExcluded(tasklistsortstatus.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskListSortStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tasklistsortstatus.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskListSortStatusUpsertOne) UpdateNewValues() *TaskListSortStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tasklistsortstatus.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TaskListSortStatus.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TaskListSortStatusUpsertOne) Ignore() *TaskListSortStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskListSortStatusUpsertOne) DoNothing() *TaskListSortStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskListSortStatusCreate.OnConflict
// documentation for more info.
func (u *TaskListSortStatusUpsertOne) Update(set func(*TaskListSortStatusUpsert)) *TaskListSortStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskListSortStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskListSortStatusUpsertOne) SetName(v string) *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertOne) UpdateName() *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateName()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *TaskListSortStatusUpsertOne) SetStatusCode(v tasklistsortstatus.StatusCode) *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertOne) UpdateStatusCode() *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateStatusCode()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskListSortStatusUpsertOne) SetCreatedAt(v time.Time) *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertOne) UpdateCreatedAt() *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskListSortStatusUpsertOne) SetUpdatedAt(v time.Time) *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertOne) UpdateUpdatedAt() *TaskListSortStatusUpsertOne {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskListSortStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskListSortStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskListSortStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskListSortStatusUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TaskListSortStatusUpsertOne.ID is not supported by MySQL driver. Use TaskListSortStatusUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskListSortStatusUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskListSortStatusCreateBulk is the builder for creating many TaskListSortStatus entities in bulk.
type TaskListSortStatusCreateBulk struct {
	config
	builders []*TaskListSortStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskListSortStatus entities in the database.
func (tlsscb *TaskListSortStatusCreateBulk) Save(ctx context.Context) ([]*TaskListSortStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlsscb.builders))
	nodes := make([]*TaskListSortStatus, len(tlsscb.builders))
	mutators := make([]Mutator, len(tlsscb.builders))
	for i := range tlsscb.builders {
		func(i int, root context.Context) {
			builder := tlsscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskListSortStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlsscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tlsscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlsscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlsscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlsscb *TaskListSortStatusCreateBulk) SaveX(ctx context.Context) []*TaskListSortStatus {
	v, err := tlsscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlsscb *TaskListSortStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := tlsscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlsscb *TaskListSortStatusCreateBulk) ExecX(ctx context.Context) {
	if err := tlsscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskListSortStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskListSortStatusUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tlsscb *TaskListSortStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskListSortStatusUpsertBulk {
	tlsscb.conflict = opts
	return &TaskListSortStatusUpsertBulk{
		create: tlsscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskListSortStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tlsscb *TaskListSortStatusCreateBulk) OnConflictColumns(columns ...string) *TaskListSortStatusUpsertBulk {
	tlsscb.conflict = append(tlsscb.conflict, sql.ConflictColumns(columns...))
	return &TaskListSortStatusUpsertBulk{
		create: tlsscb,
	}
}

// TaskListSortStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskListSortStatus nodes.
type TaskListSortStatusUpsertBulk struct {
	create *TaskListSortStatusCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskListSortStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tasklistsortstatus.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskListSortStatusUpsertBulk) UpdateNewValues() *TaskListSortStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tasklistsortstatus.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskListSortStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TaskListSortStatusUpsertBulk) Ignore() *TaskListSortStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskListSortStatusUpsertBulk) DoNothing() *TaskListSortStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskListSortStatusCreateBulk.OnConflict
// documentation for more info.
func (u *TaskListSortStatusUpsertBulk) Update(set func(*TaskListSortStatusUpsert)) *TaskListSortStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskListSortStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskListSortStatusUpsertBulk) SetName(v string) *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertBulk) UpdateName() *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateName()
	})
}

// SetStatusCode sets the "status_code" field.
func (u *TaskListSortStatusUpsertBulk) SetStatusCode(v tasklistsortstatus.StatusCode) *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetStatusCode(v)
	})
}

// UpdateStatusCode sets the "status_code" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertBulk) UpdateStatusCode() *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateStatusCode()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskListSortStatusUpsertBulk) SetCreatedAt(v time.Time) *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertBulk) UpdateCreatedAt() *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskListSortStatusUpsertBulk) SetUpdatedAt(v time.Time) *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskListSortStatusUpsertBulk) UpdateUpdatedAt() *TaskListSortStatusUpsertBulk {
	return u.Update(func(s *TaskListSortStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskListSortStatusUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskListSortStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskListSortStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskListSortStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
