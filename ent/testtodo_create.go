// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestTodoCreate is the builder for creating a TestTodo entity.
type TestTodoCreate struct {
	config
	mutation *TestTodoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTestUserID sets the "test_user_id" field.
func (ttc *TestTodoCreate) SetTestUserID(u ulid.ID) *TestTodoCreate {
	ttc.mutation.SetTestUserID(u)
	return ttc
}

// SetNillableTestUserID sets the "test_user_id" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableTestUserID(u *ulid.ID) *TestTodoCreate {
	if u != nil {
		ttc.SetTestUserID(*u)
	}
	return ttc
}

// SetCreatedBy sets the "created_by" field.
func (ttc *TestTodoCreate) SetCreatedBy(u ulid.ID) *TestTodoCreate {
	ttc.mutation.SetCreatedBy(u)
	return ttc
}

// SetParentTodoID sets the "parent_todo_id" field.
func (ttc *TestTodoCreate) SetParentTodoID(u ulid.ID) *TestTodoCreate {
	ttc.mutation.SetParentTodoID(u)
	return ttc
}

// SetNillableParentTodoID sets the "parent_todo_id" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableParentTodoID(u *ulid.ID) *TestTodoCreate {
	if u != nil {
		ttc.SetParentTodoID(*u)
	}
	return ttc
}

// SetName sets the "name" field.
func (ttc *TestTodoCreate) SetName(s string) *TestTodoCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableName(s *string) *TestTodoCreate {
	if s != nil {
		ttc.SetName(*s)
	}
	return ttc
}

// SetStatus sets the "status" field.
func (ttc *TestTodoCreate) SetStatus(t testtodo.Status) *TestTodoCreate {
	ttc.mutation.SetStatus(t)
	return ttc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableStatus(t *testtodo.Status) *TestTodoCreate {
	if t != nil {
		ttc.SetStatus(*t)
	}
	return ttc
}

// SetPriority sets the "priority" field.
func (ttc *TestTodoCreate) SetPriority(i int) *TestTodoCreate {
	ttc.mutation.SetPriority(i)
	return ttc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillablePriority(i *int) *TestTodoCreate {
	if i != nil {
		ttc.SetPriority(*i)
	}
	return ttc
}

// SetDueDate sets the "due_date" field.
func (ttc *TestTodoCreate) SetDueDate(t time.Time) *TestTodoCreate {
	ttc.mutation.SetDueDate(t)
	return ttc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableDueDate(t *time.Time) *TestTodoCreate {
	if t != nil {
		ttc.SetDueDate(*t)
	}
	return ttc
}

// SetCreatedAt sets the "created_at" field.
func (ttc *TestTodoCreate) SetCreatedAt(t time.Time) *TestTodoCreate {
	ttc.mutation.SetCreatedAt(t)
	return ttc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableCreatedAt(t *time.Time) *TestTodoCreate {
	if t != nil {
		ttc.SetCreatedAt(*t)
	}
	return ttc
}

// SetUpdatedAt sets the "updated_at" field.
func (ttc *TestTodoCreate) SetUpdatedAt(t time.Time) *TestTodoCreate {
	ttc.mutation.SetUpdatedAt(t)
	return ttc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableUpdatedAt(t *time.Time) *TestTodoCreate {
	if t != nil {
		ttc.SetUpdatedAt(*t)
	}
	return ttc
}

// SetID sets the "id" field.
func (ttc *TestTodoCreate) SetID(u ulid.ID) *TestTodoCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableID(u *ulid.ID) *TestTodoCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// SetTestUser sets the "testUser" edge to the TestUser entity.
func (ttc *TestTodoCreate) SetTestUser(t *TestUser) *TestTodoCreate {
	return ttc.SetTestUserID(t.ID)
}

// SetParentID sets the "parent" edge to the TestTodo entity by ID.
func (ttc *TestTodoCreate) SetParentID(id ulid.ID) *TestTodoCreate {
	ttc.mutation.SetParentID(id)
	return ttc
}

// SetNillableParentID sets the "parent" edge to the TestTodo entity by ID if the given value is not nil.
func (ttc *TestTodoCreate) SetNillableParentID(id *ulid.ID) *TestTodoCreate {
	if id != nil {
		ttc = ttc.SetParentID(*id)
	}
	return ttc
}

// SetParent sets the "parent" edge to the TestTodo entity.
func (ttc *TestTodoCreate) SetParent(t *TestTodo) *TestTodoCreate {
	return ttc.SetParentID(t.ID)
}

// AddChildIDs adds the "children" edge to the TestTodo entity by IDs.
func (ttc *TestTodoCreate) AddChildIDs(ids ...ulid.ID) *TestTodoCreate {
	ttc.mutation.AddChildIDs(ids...)
	return ttc
}

// AddChildren adds the "children" edges to the TestTodo entity.
func (ttc *TestTodoCreate) AddChildren(t ...*TestTodo) *TestTodoCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddChildIDs(ids...)
}

// Mutation returns the TestTodoMutation object of the builder.
func (ttc *TestTodoCreate) Mutation() *TestTodoMutation {
	return ttc.mutation
}

// Save creates the TestTodo in the database.
func (ttc *TestTodoCreate) Save(ctx context.Context) (*TestTodo, error) {
	var (
		err  error
		node *TestTodo
	)
	ttc.defaults()
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestTodoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			if node, err = ttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			if ttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TestTodoCreate) SaveX(ctx context.Context) *TestTodo {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TestTodoCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TestTodoCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TestTodoCreate) defaults() {
	if _, ok := ttc.mutation.Name(); !ok {
		v := testtodo.DefaultName
		ttc.mutation.SetName(v)
	}
	if _, ok := ttc.mutation.Status(); !ok {
		v := testtodo.DefaultStatus
		ttc.mutation.SetStatus(v)
	}
	if _, ok := ttc.mutation.Priority(); !ok {
		v := testtodo.DefaultPriority
		ttc.mutation.SetPriority(v)
	}
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		v := testtodo.DefaultCreatedAt()
		ttc.mutation.SetCreatedAt(v)
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		v := testtodo.DefaultUpdatedAt()
		ttc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ttc.mutation.ID(); !ok {
		v := testtodo.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TestTodoCreate) check() error {
	if _, ok := ttc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "TestTodo.created_by"`)}
	}
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TestTodo.name"`)}
	}
	if _, ok := ttc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TestTodo.status"`)}
	}
	if v, ok := ttc.mutation.Status(); ok {
		if err := testtodo.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TestTodo.status": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "TestTodo.priority"`)}
	}
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestTodo.created_at"`)}
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestTodo.updated_at"`)}
	}
	return nil
}

func (ttc *TestTodoCreate) sqlSave(ctx context.Context) (*TestTodo, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ttc *TestTodoCreate) createSpec() (*TestTodo, *sqlgraph.CreateSpec) {
	var (
		_node = &TestTodo{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testtodo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: testtodo.FieldID,
			},
		}
	)
	_spec.OnConflict = ttc.conflict
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtodo.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := ttc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testtodo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ttc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: testtodo.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ttc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: testtodo.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := ttc.mutation.DueDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testtodo.FieldDueDate,
		})
		_node.DueDate = &value
	}
	if value, ok := ttc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testtodo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ttc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testtodo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ttc.mutation.TestUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testtodo.TestUserTable,
			Columns: []string{testtodo.TestUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: testuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testtodo.ParentTable,
			Columns: []string{testtodo.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: testtodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentTodoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testtodo.ChildrenTable,
			Columns: []string{testtodo.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: testtodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestTodo.Create().
//		SetTestUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestTodoUpsert) {
//			SetTestUserID(v+v).
//		}).
//		Exec(ctx)
//
func (ttc *TestTodoCreate) OnConflict(opts ...sql.ConflictOption) *TestTodoUpsertOne {
	ttc.conflict = opts
	return &TestTodoUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestTodo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ttc *TestTodoCreate) OnConflictColumns(columns ...string) *TestTodoUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &TestTodoUpsertOne{
		create: ttc,
	}
}

type (
	// TestTodoUpsertOne is the builder for "upsert"-ing
	//  one TestTodo node.
	TestTodoUpsertOne struct {
		create *TestTodoCreate
	}

	// TestTodoUpsert is the "OnConflict" setter.
	TestTodoUpsert struct {
		*sql.UpdateSet
	}
)

// SetTestUserID sets the "test_user_id" field.
func (u *TestTodoUpsert) SetTestUserID(v ulid.ID) *TestTodoUpsert {
	u.Set(testtodo.FieldTestUserID, v)
	return u
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateTestUserID() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldTestUserID)
	return u
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *TestTodoUpsert) ClearTestUserID() *TestTodoUpsert {
	u.SetNull(testtodo.FieldTestUserID)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TestTodoUpsert) SetCreatedBy(v ulid.ID) *TestTodoUpsert {
	u.Set(testtodo.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateCreatedBy() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldCreatedBy)
	return u
}

// SetParentTodoID sets the "parent_todo_id" field.
func (u *TestTodoUpsert) SetParentTodoID(v ulid.ID) *TestTodoUpsert {
	u.Set(testtodo.FieldParentTodoID, v)
	return u
}

// UpdateParentTodoID sets the "parent_todo_id" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateParentTodoID() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldParentTodoID)
	return u
}

// ClearParentTodoID clears the value of the "parent_todo_id" field.
func (u *TestTodoUpsert) ClearParentTodoID() *TestTodoUpsert {
	u.SetNull(testtodo.FieldParentTodoID)
	return u
}

// SetName sets the "name" field.
func (u *TestTodoUpsert) SetName(v string) *TestTodoUpsert {
	u.Set(testtodo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateName() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *TestTodoUpsert) SetStatus(v testtodo.Status) *TestTodoUpsert {
	u.Set(testtodo.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateStatus() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldStatus)
	return u
}

// SetPriority sets the "priority" field.
func (u *TestTodoUpsert) SetPriority(v int) *TestTodoUpsert {
	u.Set(testtodo.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdatePriority() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *TestTodoUpsert) AddPriority(v int) *TestTodoUpsert {
	u.Add(testtodo.FieldPriority, v)
	return u
}

// SetDueDate sets the "due_date" field.
func (u *TestTodoUpsert) SetDueDate(v time.Time) *TestTodoUpsert {
	u.Set(testtodo.FieldDueDate, v)
	return u
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateDueDate() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldDueDate)
	return u
}

// ClearDueDate clears the value of the "due_date" field.
func (u *TestTodoUpsert) ClearDueDate() *TestTodoUpsert {
	u.SetNull(testtodo.FieldDueDate)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TestTodoUpsert) SetCreatedAt(v time.Time) *TestTodoUpsert {
	u.Set(testtodo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateCreatedAt() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestTodoUpsert) SetUpdatedAt(v time.Time) *TestTodoUpsert {
	u.Set(testtodo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestTodoUpsert) UpdateUpdatedAt() *TestTodoUpsert {
	u.SetExcluded(testtodo.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TestTodo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testtodo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TestTodoUpsertOne) UpdateNewValues() *TestTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(testtodo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(testtodo.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(testtodo.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TestTodo.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TestTodoUpsertOne) Ignore() *TestTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestTodoUpsertOne) DoNothing() *TestTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestTodoCreate.OnConflict
// documentation for more info.
func (u *TestTodoUpsertOne) Update(set func(*TestTodoUpsert)) *TestTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestTodoUpsert{UpdateSet: update})
	}))
	return u
}

// SetTestUserID sets the "test_user_id" field.
func (u *TestTodoUpsertOne) SetTestUserID(v ulid.ID) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetTestUserID(v)
	})
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateTestUserID() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateTestUserID()
	})
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *TestTodoUpsertOne) ClearTestUserID() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.ClearTestUserID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TestTodoUpsertOne) SetCreatedBy(v ulid.ID) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateCreatedBy() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetParentTodoID sets the "parent_todo_id" field.
func (u *TestTodoUpsertOne) SetParentTodoID(v ulid.ID) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetParentTodoID(v)
	})
}

// UpdateParentTodoID sets the "parent_todo_id" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateParentTodoID() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateParentTodoID()
	})
}

// ClearParentTodoID clears the value of the "parent_todo_id" field.
func (u *TestTodoUpsertOne) ClearParentTodoID() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.ClearParentTodoID()
	})
}

// SetName sets the "name" field.
func (u *TestTodoUpsertOne) SetName(v string) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateName() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *TestTodoUpsertOne) SetStatus(v testtodo.Status) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateStatus() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateStatus()
	})
}

// SetPriority sets the "priority" field.
func (u *TestTodoUpsertOne) SetPriority(v int) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *TestTodoUpsertOne) AddPriority(v int) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdatePriority() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdatePriority()
	})
}

// SetDueDate sets the "due_date" field.
func (u *TestTodoUpsertOne) SetDueDate(v time.Time) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateDueDate() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateDueDate()
	})
}

// ClearDueDate clears the value of the "due_date" field.
func (u *TestTodoUpsertOne) ClearDueDate() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.ClearDueDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TestTodoUpsertOne) SetCreatedAt(v time.Time) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateCreatedAt() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestTodoUpsertOne) SetUpdatedAt(v time.Time) *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestTodoUpsertOne) UpdateUpdatedAt() *TestTodoUpsertOne {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TestTodoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestTodoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestTodoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestTodoUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TestTodoUpsertOne.ID is not supported by MySQL driver. Use TestTodoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestTodoUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestTodoCreateBulk is the builder for creating many TestTodo entities in bulk.
type TestTodoCreateBulk struct {
	config
	builders []*TestTodoCreate
	conflict []sql.ConflictOption
}

// Save creates the TestTodo entities in the database.
func (ttcb *TestTodoCreateBulk) Save(ctx context.Context) ([]*TestTodo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TestTodo, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestTodoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TestTodoCreateBulk) SaveX(ctx context.Context) []*TestTodo {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TestTodoCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TestTodoCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestTodo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestTodoUpsert) {
//			SetTestUserID(v+v).
//		}).
//		Exec(ctx)
//
func (ttcb *TestTodoCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestTodoUpsertBulk {
	ttcb.conflict = opts
	return &TestTodoUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestTodo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ttcb *TestTodoCreateBulk) OnConflictColumns(columns ...string) *TestTodoUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &TestTodoUpsertBulk{
		create: ttcb,
	}
}

// TestTodoUpsertBulk is the builder for "upsert"-ing
// a bulk of TestTodo nodes.
type TestTodoUpsertBulk struct {
	create *TestTodoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestTodo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testtodo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TestTodoUpsertBulk) UpdateNewValues() *TestTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(testtodo.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(testtodo.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(testtodo.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestTodo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TestTodoUpsertBulk) Ignore() *TestTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestTodoUpsertBulk) DoNothing() *TestTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestTodoCreateBulk.OnConflict
// documentation for more info.
func (u *TestTodoUpsertBulk) Update(set func(*TestTodoUpsert)) *TestTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestTodoUpsert{UpdateSet: update})
	}))
	return u
}

// SetTestUserID sets the "test_user_id" field.
func (u *TestTodoUpsertBulk) SetTestUserID(v ulid.ID) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetTestUserID(v)
	})
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateTestUserID() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateTestUserID()
	})
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *TestTodoUpsertBulk) ClearTestUserID() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.ClearTestUserID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TestTodoUpsertBulk) SetCreatedBy(v ulid.ID) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateCreatedBy() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetParentTodoID sets the "parent_todo_id" field.
func (u *TestTodoUpsertBulk) SetParentTodoID(v ulid.ID) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetParentTodoID(v)
	})
}

// UpdateParentTodoID sets the "parent_todo_id" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateParentTodoID() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateParentTodoID()
	})
}

// ClearParentTodoID clears the value of the "parent_todo_id" field.
func (u *TestTodoUpsertBulk) ClearParentTodoID() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.ClearParentTodoID()
	})
}

// SetName sets the "name" field.
func (u *TestTodoUpsertBulk) SetName(v string) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateName() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *TestTodoUpsertBulk) SetStatus(v testtodo.Status) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateStatus() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateStatus()
	})
}

// SetPriority sets the "priority" field.
func (u *TestTodoUpsertBulk) SetPriority(v int) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *TestTodoUpsertBulk) AddPriority(v int) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdatePriority() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdatePriority()
	})
}

// SetDueDate sets the "due_date" field.
func (u *TestTodoUpsertBulk) SetDueDate(v time.Time) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateDueDate() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateDueDate()
	})
}

// ClearDueDate clears the value of the "due_date" field.
func (u *TestTodoUpsertBulk) ClearDueDate() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.ClearDueDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TestTodoUpsertBulk) SetCreatedAt(v time.Time) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateCreatedAt() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestTodoUpsertBulk) SetUpdatedAt(v time.Time) *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestTodoUpsertBulk) UpdateUpdatedAt() *TestTodoUpsertBulk {
	return u.Update(func(s *TestTodoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TestTodoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestTodoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestTodoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestTodoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
