// Code generated by entc, DO NOT EDIT.

package ent

import (
	"project-management-demo-backend/ent/schema/editor"
	"project-management-demo-backend/ent/schema/testuserprofile"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/testtodo"
	"time"
)

// CreateColorInput represents a mutation input for creating colors.
type CreateColorInput struct {
	Name                 string
	Color                string
	Hex                  string
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	ProjectBaseColorIDs  []ulid.ID
	ProjectLightColorIDs []ulid.ID
	TaskPriorityIDs      []ulid.ID
}

// Mutate applies the CreateColorInput on the ColorCreate builder.
func (i *CreateColorInput) Mutate(m *ColorCreate) {
	m.SetName(i.Name)
	m.SetColor(i.Color)
	m.SetHex(i.Hex)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectBaseColorIDs; len(ids) > 0 {
		m.AddProjectBaseColorIDs(ids...)
	}
	if ids := i.ProjectLightColorIDs; len(ids) > 0 {
		m.AddProjectLightColorIDs(ids...)
	}
	if ids := i.TaskPriorityIDs; len(ids) > 0 {
		m.AddTaskPriorityIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateColorInput on the create builder.
func (c *ColorCreate) SetInput(i CreateColorInput) *ColorCreate {
	i.Mutate(c)
	return c
}

// UpdateColorInput represents a mutation input for updating colors.
type UpdateColorInput struct {
	ID                         ulid.ID
	Name                       *string
	Color                      *string
	Hex                        *string
	AddProjectBaseColorIDs     []ulid.ID
	RemoveProjectBaseColorIDs  []ulid.ID
	AddProjectLightColorIDs    []ulid.ID
	RemoveProjectLightColorIDs []ulid.ID
	AddTaskPriorityIDs         []ulid.ID
	RemoveTaskPriorityIDs      []ulid.ID
}

// Mutate applies the UpdateColorInput on the ColorMutation.
func (i *UpdateColorInput) Mutate(m *ColorMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Color; v != nil {
		m.SetColor(*v)
	}
	if v := i.Hex; v != nil {
		m.SetHex(*v)
	}
	if ids := i.AddProjectBaseColorIDs; len(ids) > 0 {
		m.AddProjectBaseColorIDs(ids...)
	}
	if ids := i.RemoveProjectBaseColorIDs; len(ids) > 0 {
		m.RemoveProjectBaseColorIDs(ids...)
	}
	if ids := i.AddProjectLightColorIDs; len(ids) > 0 {
		m.AddProjectLightColorIDs(ids...)
	}
	if ids := i.RemoveProjectLightColorIDs; len(ids) > 0 {
		m.RemoveProjectLightColorIDs(ids...)
	}
	if ids := i.AddTaskPriorityIDs; len(ids) > 0 {
		m.AddTaskPriorityIDs(ids...)
	}
	if ids := i.RemoveTaskPriorityIDs; len(ids) > 0 {
		m.RemoveTaskPriorityIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateColorInput on the update builder.
func (u *ColorUpdate) SetInput(i UpdateColorInput) *ColorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateColorInput on the update-one builder.
func (u *ColorUpdateOne) SetInput(i UpdateColorInput) *ColorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateFavoriteProjectInput represents a mutation input for creating favoriteprojects.
type CreateFavoriteProjectInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectID  ulid.ID
	TeammateID ulid.ID
}

// Mutate applies the CreateFavoriteProjectInput on the FavoriteProjectCreate builder.
func (i *CreateFavoriteProjectInput) Mutate(m *FavoriteProjectCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateFavoriteProjectInput on the create builder.
func (c *FavoriteProjectCreate) SetInput(i CreateFavoriteProjectInput) *FavoriteProjectCreate {
	i.Mutate(c)
	return c
}

// UpdateFavoriteProjectInput represents a mutation input for updating favoriteprojects.
type UpdateFavoriteProjectInput struct {
	ID            ulid.ID
	ProjectID     *ulid.ID
	ClearProject  bool
	TeammateID    *ulid.ID
	ClearTeammate bool
}

// Mutate applies the UpdateFavoriteProjectInput on the FavoriteProjectMutation.
func (i *UpdateFavoriteProjectInput) Mutate(m *FavoriteProjectMutation) {
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateFavoriteProjectInput on the update builder.
func (u *FavoriteProjectUpdate) SetInput(i UpdateFavoriteProjectInput) *FavoriteProjectUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateFavoriteProjectInput on the update-one builder.
func (u *FavoriteProjectUpdateOne) SetInput(i UpdateFavoriteProjectInput) *FavoriteProjectUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateFavoriteWorkspaceInput represents a mutation input for creating favoriteworkspaces.
type CreateFavoriteWorkspaceInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	WorkspaceID ulid.ID
	TeammateID  ulid.ID
}

// Mutate applies the CreateFavoriteWorkspaceInput on the FavoriteWorkspaceCreate builder.
func (i *CreateFavoriteWorkspaceInput) Mutate(m *FavoriteWorkspaceCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateFavoriteWorkspaceInput on the create builder.
func (c *FavoriteWorkspaceCreate) SetInput(i CreateFavoriteWorkspaceInput) *FavoriteWorkspaceCreate {
	i.Mutate(c)
	return c
}

// UpdateFavoriteWorkspaceInput represents a mutation input for updating favoriteworkspaces.
type UpdateFavoriteWorkspaceInput struct {
	ID             ulid.ID
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
}

// Mutate applies the UpdateFavoriteWorkspaceInput on the FavoriteWorkspaceMutation.
func (i *UpdateFavoriteWorkspaceInput) Mutate(m *FavoriteWorkspaceMutation) {
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateFavoriteWorkspaceInput on the update builder.
func (u *FavoriteWorkspaceUpdate) SetInput(i UpdateFavoriteWorkspaceInput) *FavoriteWorkspaceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateFavoriteWorkspaceInput on the update-one builder.
func (u *FavoriteWorkspaceUpdateOne) SetInput(i UpdateFavoriteWorkspaceInput) *FavoriteWorkspaceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateIconInput represents a mutation input for creating icons.
type CreateIconInput struct {
	Name           string
	Icon           string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	ProjectIconIDs []ulid.ID
}

// Mutate applies the CreateIconInput on the IconCreate builder.
func (i *CreateIconInput) Mutate(m *IconCreate) {
	m.SetName(i.Name)
	m.SetIcon(i.Icon)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIconIDs; len(ids) > 0 {
		m.AddProjectIconIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateIconInput on the create builder.
func (c *IconCreate) SetInput(i CreateIconInput) *IconCreate {
	i.Mutate(c)
	return c
}

// UpdateIconInput represents a mutation input for updating icons.
type UpdateIconInput struct {
	ID                   ulid.ID
	Name                 *string
	Icon                 *string
	AddProjectIconIDs    []ulid.ID
	RemoveProjectIconIDs []ulid.ID
}

// Mutate applies the UpdateIconInput on the IconMutation.
func (i *UpdateIconInput) Mutate(m *IconMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if ids := i.AddProjectIconIDs; len(ids) > 0 {
		m.AddProjectIconIDs(ids...)
	}
	if ids := i.RemoveProjectIconIDs; len(ids) > 0 {
		m.RemoveProjectIconIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateIconInput on the update builder.
func (u *IconUpdate) SetInput(i UpdateIconInput) *IconUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateIconInput on the update-one builder.
func (u *IconUpdateOne) SetInput(i UpdateIconInput) *IconUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectInput represents a mutation input for creating projects.
type CreateProjectInput struct {
	Name                     string
	Description              editor.Description
	DescriptionTitle         string
	DueDate                  *time.Time
	CreatedAt                *time.Time
	UpdatedAt                *time.Time
	WorkspaceID              ulid.ID
	ProjectBaseColorID       ulid.ID
	ProjectLightColorID      ulid.ID
	ProjectIconID            ulid.ID
	CreatedBy                ulid.ID
	ProjectTeammateIDs       []ulid.ID
	FavoriteProjectIDs       []ulid.ID
	ProjectTaskColumnIDs     []ulid.ID
	ProjectTaskListStatusIDs []ulid.ID
	ProjectTaskSectionIDs    []ulid.ID
}

// Mutate applies the CreateProjectInput on the ProjectCreate builder.
func (i *CreateProjectInput) Mutate(m *ProjectCreate) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetDescriptionTitle(i.DescriptionTitle)
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetProjectBaseColorID(i.ProjectBaseColorID)
	m.SetProjectLightColorID(i.ProjectLightColorID)
	m.SetProjectIconID(i.ProjectIconID)
	m.SetTeammateID(i.CreatedBy)
	if ids := i.ProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.FavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.ProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
	if ids := i.ProjectTaskListStatusIDs; len(ids) > 0 {
		m.AddProjectTaskListStatusIDs(ids...)
	}
	if ids := i.ProjectTaskSectionIDs; len(ids) > 0 {
		m.AddProjectTaskSectionIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateProjectInput on the create builder.
func (c *ProjectCreate) SetInput(i CreateProjectInput) *ProjectCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	ID                             ulid.ID
	Name                           *string
	Description                    *editor.Description
	DescriptionTitle               *string
	DueDate                        *time.Time
	WorkspaceID                    *ulid.ID
	ClearWorkspace                 bool
	ProjectBaseColorID             *ulid.ID
	ClearProjectBaseColor          bool
	ProjectLightColorID            *ulid.ID
	ClearProjectLightColor         bool
	ProjectIconID                  *ulid.ID
	ClearProjectIcon               bool
	CreatedBy                      *ulid.ID
	ClearTeammate                  bool
	AddProjectTeammateIDs          []ulid.ID
	RemoveProjectTeammateIDs       []ulid.ID
	AddFavoriteProjectIDs          []ulid.ID
	RemoveFavoriteProjectIDs       []ulid.ID
	AddProjectTaskColumnIDs        []ulid.ID
	RemoveProjectTaskColumnIDs     []ulid.ID
	AddProjectTaskListStatusIDs    []ulid.ID
	RemoveProjectTaskListStatusIDs []ulid.ID
	AddProjectTaskSectionIDs       []ulid.ID
	RemoveProjectTaskSectionIDs    []ulid.ID
}

// Mutate applies the UpdateProjectInput on the ProjectMutation.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.DescriptionTitle; v != nil {
		m.SetDescriptionTitle(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearProjectBaseColor {
		m.ClearProjectBaseColor()
	}
	if v := i.ProjectBaseColorID; v != nil {
		m.SetProjectBaseColorID(*v)
	}
	if i.ClearProjectLightColor {
		m.ClearProjectLightColor()
	}
	if v := i.ProjectLightColorID; v != nil {
		m.SetProjectLightColorID(*v)
	}
	if i.ClearProjectIcon {
		m.ClearProjectIcon()
	}
	if v := i.ProjectIconID; v != nil {
		m.SetProjectIconID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.CreatedBy; v != nil {
		m.SetTeammateID(*v)
	}
	if ids := i.AddProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.RemoveProjectTeammateIDs; len(ids) > 0 {
		m.RemoveProjectTeammateIDs(ids...)
	}
	if ids := i.AddFavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.RemoveFavoriteProjectIDs; len(ids) > 0 {
		m.RemoveFavoriteProjectIDs(ids...)
	}
	if ids := i.AddProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
	if ids := i.RemoveProjectTaskColumnIDs; len(ids) > 0 {
		m.RemoveProjectTaskColumnIDs(ids...)
	}
	if ids := i.AddProjectTaskListStatusIDs; len(ids) > 0 {
		m.AddProjectTaskListStatusIDs(ids...)
	}
	if ids := i.RemoveProjectTaskListStatusIDs; len(ids) > 0 {
		m.RemoveProjectTaskListStatusIDs(ids...)
	}
	if ids := i.AddProjectTaskSectionIDs; len(ids) > 0 {
		m.AddProjectTaskSectionIDs(ids...)
	}
	if ids := i.RemoveProjectTaskSectionIDs; len(ids) > 0 {
		m.RemoveProjectTaskSectionIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the update builder.
func (u *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectInput on the update-one builder.
func (u *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectBaseColorInput represents a mutation input for creating projectbasecolors.
type CreateProjectBaseColorInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectIDs []ulid.ID
	ColorID    ulid.ID
}

// Mutate applies the CreateProjectBaseColorInput on the ProjectBaseColorCreate builder.
func (i *CreateProjectBaseColorInput) Mutate(m *ProjectBaseColorCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	m.SetColorID(i.ColorID)
}

// SetInput applies the change-set in the CreateProjectBaseColorInput on the create builder.
func (c *ProjectBaseColorCreate) SetInput(i CreateProjectBaseColorInput) *ProjectBaseColorCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectBaseColorInput represents a mutation input for updating projectbasecolors.
type UpdateProjectBaseColorInput struct {
	ID               ulid.ID
	AddProjectIDs    []ulid.ID
	RemoveProjectIDs []ulid.ID
	ColorID          *ulid.ID
	ClearColor       bool
}

// Mutate applies the UpdateProjectBaseColorInput on the ProjectBaseColorMutation.
func (i *UpdateProjectBaseColorInput) Mutate(m *ProjectBaseColorMutation) {
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if i.ClearColor {
		m.ClearColor()
	}
	if v := i.ColorID; v != nil {
		m.SetColorID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectBaseColorInput on the update builder.
func (u *ProjectBaseColorUpdate) SetInput(i UpdateProjectBaseColorInput) *ProjectBaseColorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectBaseColorInput on the update-one builder.
func (u *ProjectBaseColorUpdateOne) SetInput(i UpdateProjectBaseColorInput) *ProjectBaseColorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectIconInput represents a mutation input for creating projecticons.
type CreateProjectIconInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectIDs []ulid.ID
	IconID     ulid.ID
}

// Mutate applies the CreateProjectIconInput on the ProjectIconCreate builder.
func (i *CreateProjectIconInput) Mutate(m *ProjectIconCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	m.SetIconID(i.IconID)
}

// SetInput applies the change-set in the CreateProjectIconInput on the create builder.
func (c *ProjectIconCreate) SetInput(i CreateProjectIconInput) *ProjectIconCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectIconInput represents a mutation input for updating projecticons.
type UpdateProjectIconInput struct {
	ID               ulid.ID
	AddProjectIDs    []ulid.ID
	RemoveProjectIDs []ulid.ID
	IconID           *ulid.ID
	ClearIcon        bool
}

// Mutate applies the UpdateProjectIconInput on the ProjectIconMutation.
func (i *UpdateProjectIconInput) Mutate(m *ProjectIconMutation) {
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if i.ClearIcon {
		m.ClearIcon()
	}
	if v := i.IconID; v != nil {
		m.SetIconID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectIconInput on the update builder.
func (u *ProjectIconUpdate) SetInput(i UpdateProjectIconInput) *ProjectIconUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectIconInput on the update-one builder.
func (u *ProjectIconUpdateOne) SetInput(i UpdateProjectIconInput) *ProjectIconUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectLightColorInput represents a mutation input for creating projectlightcolors.
type CreateProjectLightColorInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectIDs []ulid.ID
	ColorID    ulid.ID
}

// Mutate applies the CreateProjectLightColorInput on the ProjectLightColorCreate builder.
func (i *CreateProjectLightColorInput) Mutate(m *ProjectLightColorCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	m.SetColorID(i.ColorID)
}

// SetInput applies the change-set in the CreateProjectLightColorInput on the create builder.
func (c *ProjectLightColorCreate) SetInput(i CreateProjectLightColorInput) *ProjectLightColorCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectLightColorInput represents a mutation input for updating projectlightcolors.
type UpdateProjectLightColorInput struct {
	ID               ulid.ID
	AddProjectIDs    []ulid.ID
	RemoveProjectIDs []ulid.ID
	ColorID          *ulid.ID
	ClearColor       bool
}

// Mutate applies the UpdateProjectLightColorInput on the ProjectLightColorMutation.
func (i *UpdateProjectLightColorInput) Mutate(m *ProjectLightColorMutation) {
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if i.ClearColor {
		m.ClearColor()
	}
	if v := i.ColorID; v != nil {
		m.SetColorID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectLightColorInput on the update builder.
func (u *ProjectLightColorUpdate) SetInput(i UpdateProjectLightColorInput) *ProjectLightColorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectLightColorInput on the update-one builder.
func (u *ProjectLightColorUpdateOne) SetInput(i UpdateProjectLightColorInput) *ProjectLightColorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTaskColumnInput represents a mutation input for creating projecttaskcolumns.
type CreateProjectTaskColumnInput struct {
	Width        string
	Disabled     bool
	Customizable bool
	Order        int
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	ProjectID    ulid.ID
	TaskColumnID ulid.ID
}

// Mutate applies the CreateProjectTaskColumnInput on the ProjectTaskColumnCreate builder.
func (i *CreateProjectTaskColumnInput) Mutate(m *ProjectTaskColumnCreate) {
	m.SetWidth(i.Width)
	m.SetDisabled(i.Disabled)
	m.SetCustomizable(i.Customizable)
	m.SetOrder(i.Order)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTaskColumnID(i.TaskColumnID)
}

// SetInput applies the change-set in the CreateProjectTaskColumnInput on the create builder.
func (c *ProjectTaskColumnCreate) SetInput(i CreateProjectTaskColumnInput) *ProjectTaskColumnCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTaskColumnInput represents a mutation input for updating projecttaskcolumns.
type UpdateProjectTaskColumnInput struct {
	ID              ulid.ID
	Width           *string
	Disabled        *bool
	Customizable    *bool
	Order           *int
	ProjectID       *ulid.ID
	ClearProject    bool
	TaskColumnID    *ulid.ID
	ClearTaskColumn bool
}

// Mutate applies the UpdateProjectTaskColumnInput on the ProjectTaskColumnMutation.
func (i *UpdateProjectTaskColumnInput) Mutate(m *ProjectTaskColumnMutation) {
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.Customizable; v != nil {
		m.SetCustomizable(*v)
	}
	if v := i.Order; v != nil {
		m.SetOrder(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTaskColumn {
		m.ClearTaskColumn()
	}
	if v := i.TaskColumnID; v != nil {
		m.SetTaskColumnID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskColumnInput on the update builder.
func (u *ProjectTaskColumnUpdate) SetInput(i UpdateProjectTaskColumnInput) *ProjectTaskColumnUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTaskColumnInput on the update-one builder.
func (u *ProjectTaskColumnUpdateOne) SetInput(i UpdateProjectTaskColumnInput) *ProjectTaskColumnUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTaskListStatusInput represents a mutation input for creating projecttaskliststatusslice.
type CreateProjectTaskListStatusInput struct {
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	ProjectID                 ulid.ID
	TaskListCompletedStatusID ulid.ID
	TaskListSortStatusID      ulid.ID
}

// Mutate applies the CreateProjectTaskListStatusInput on the ProjectTaskListStatusCreate builder.
func (i *CreateProjectTaskListStatusInput) Mutate(m *ProjectTaskListStatusCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTaskListCompletedStatusID(i.TaskListCompletedStatusID)
	m.SetTaskListSortStatusID(i.TaskListSortStatusID)
}

// SetInput applies the change-set in the CreateProjectTaskListStatusInput on the create builder.
func (c *ProjectTaskListStatusCreate) SetInput(i CreateProjectTaskListStatusInput) *ProjectTaskListStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTaskListStatusInput represents a mutation input for updating projecttaskliststatusslice.
type UpdateProjectTaskListStatusInput struct {
	ID                           ulid.ID
	ProjectID                    *ulid.ID
	ClearProject                 bool
	TaskListCompletedStatusID    *ulid.ID
	ClearTaskListCompletedStatus bool
	TaskListSortStatusID         *ulid.ID
	ClearTaskListSortStatus      bool
}

// Mutate applies the UpdateProjectTaskListStatusInput on the ProjectTaskListStatusMutation.
func (i *UpdateProjectTaskListStatusInput) Mutate(m *ProjectTaskListStatusMutation) {
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTaskListCompletedStatus {
		m.ClearTaskListCompletedStatus()
	}
	if v := i.TaskListCompletedStatusID; v != nil {
		m.SetTaskListCompletedStatusID(*v)
	}
	if i.ClearTaskListSortStatus {
		m.ClearTaskListSortStatus()
	}
	if v := i.TaskListSortStatusID; v != nil {
		m.SetTaskListSortStatusID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskListStatusInput on the update builder.
func (u *ProjectTaskListStatusUpdate) SetInput(i UpdateProjectTaskListStatusInput) *ProjectTaskListStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTaskListStatusInput on the update-one builder.
func (u *ProjectTaskListStatusUpdateOne) SetInput(i UpdateProjectTaskListStatusInput) *ProjectTaskListStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTaskSectionInput represents a mutation input for creating projecttasksections.
type CreateProjectTaskSectionInput struct {
	Name      string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	ProjectID ulid.ID
}

// Mutate applies the CreateProjectTaskSectionInput on the ProjectTaskSectionCreate builder.
func (i *CreateProjectTaskSectionInput) Mutate(m *ProjectTaskSectionCreate) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
}

// SetInput applies the change-set in the CreateProjectTaskSectionInput on the create builder.
func (c *ProjectTaskSectionCreate) SetInput(i CreateProjectTaskSectionInput) *ProjectTaskSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTaskSectionInput represents a mutation input for updating projecttasksections.
type UpdateProjectTaskSectionInput struct {
	ID           ulid.ID
	Name         *string
	ProjectID    *ulid.ID
	ClearProject bool
}

// Mutate applies the UpdateProjectTaskSectionInput on the ProjectTaskSectionMutation.
func (i *UpdateProjectTaskSectionInput) Mutate(m *ProjectTaskSectionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskSectionInput on the update builder.
func (u *ProjectTaskSectionUpdate) SetInput(i UpdateProjectTaskSectionInput) *ProjectTaskSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTaskSectionInput on the update-one builder.
func (u *ProjectTaskSectionUpdateOne) SetInput(i UpdateProjectTaskSectionInput) *ProjectTaskSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTeammateInput represents a mutation input for creating projectteammates.
type CreateProjectTeammateInput struct {
	Role       string
	IsOwner    bool
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectID  ulid.ID
	TeammateID ulid.ID
}

// Mutate applies the CreateProjectTeammateInput on the ProjectTeammateCreate builder.
func (i *CreateProjectTeammateInput) Mutate(m *ProjectTeammateCreate) {
	m.SetRole(i.Role)
	m.SetIsOwner(i.IsOwner)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateProjectTeammateInput on the create builder.
func (c *ProjectTeammateCreate) SetInput(i CreateProjectTeammateInput) *ProjectTeammateCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTeammateInput represents a mutation input for updating projectteammates.
type UpdateProjectTeammateInput struct {
	ID            ulid.ID
	Role          *string
	IsOwner       *bool
	ProjectID     *ulid.ID
	ClearProject  bool
	TeammateID    *ulid.ID
	ClearTeammate bool
}

// Mutate applies the UpdateProjectTeammateInput on the ProjectTeammateMutation.
func (i *UpdateProjectTeammateInput) Mutate(m *ProjectTeammateMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.IsOwner; v != nil {
		m.SetIsOwner(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTeammateInput on the update builder.
func (u *ProjectTeammateUpdate) SetInput(i UpdateProjectTeammateInput) *ProjectTeammateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTeammateInput on the update-one builder.
func (u *ProjectTeammateUpdateOne) SetInput(i UpdateProjectTeammateInput) *ProjectTeammateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskInput represents a mutation input for creating tasks.
type CreateTaskInput struct {
	CreatedBy      ulid.ID
	Completed      *bool
	CompletedAt    *time.Time
	IsNew          *bool
	Name           string
	DueDate        *time.Time
	DueTime        *time.Time
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	AssigneeID     *ulid.ID
	TaskPriorityID ulid.ID
	TaskParentID   *ulid.ID
	SubTaskIDs     []ulid.ID
}

// Mutate applies the CreateTaskInput on the TaskCreate builder.
func (i *CreateTaskInput) Mutate(m *TaskCreate) {
	m.SetCreatedBy(i.CreatedBy)
	if v := i.Completed; v != nil {
		m.SetCompleted(*v)
	}
	if v := i.CompletedAt; v != nil {
		m.SetCompletedAt(*v)
	}
	if v := i.IsNew; v != nil {
		m.SetIsNew(*v)
	}
	m.SetName(i.Name)
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.DueTime; v != nil {
		m.SetDueTime(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AssigneeID; v != nil {
		m.SetTeammateID(*v)
	}
	m.SetTaskPriorityID(i.TaskPriorityID)
	if v := i.TaskParentID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.SubTaskIDs; len(ids) > 0 {
		m.AddSubTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskInput on the create builder.
func (c *TaskCreate) SetInput(i CreateTaskInput) *TaskCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskInput represents a mutation input for updating tasks.
type UpdateTaskInput struct {
	ID                ulid.ID
	CreatedBy         *ulid.ID
	Completed         *bool
	CompletedAt       *time.Time
	ClearCompletedAt  bool
	IsNew             *bool
	Name              *string
	DueDate           *time.Time
	ClearDueDate      bool
	DueTime           *time.Time
	ClearDueTime      bool
	AssigneeID        *ulid.ID
	ClearTeammate     bool
	TaskPriorityID    *ulid.ID
	ClearTaskPriority bool
	TaskParentID      *ulid.ID
	ClearParent       bool
	AddSubTaskIDs     []ulid.ID
	RemoveSubTaskIDs  []ulid.ID
}

// Mutate applies the UpdateTaskInput on the TaskMutation.
func (i *UpdateTaskInput) Mutate(m *TaskMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.Completed; v != nil {
		m.SetCompleted(*v)
	}
	if i.ClearCompletedAt {
		m.ClearCompletedAt()
	}
	if v := i.CompletedAt; v != nil {
		m.SetCompletedAt(*v)
	}
	if v := i.IsNew; v != nil {
		m.SetIsNew(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDueDate {
		m.ClearDueDate()
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearDueTime {
		m.ClearDueTime()
	}
	if v := i.DueTime; v != nil {
		m.SetDueTime(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.AssigneeID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearTaskPriority {
		m.ClearTaskPriority()
	}
	if v := i.TaskPriorityID; v != nil {
		m.SetTaskPriorityID(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.TaskParentID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.AddSubTaskIDs; len(ids) > 0 {
		m.AddSubTaskIDs(ids...)
	}
	if ids := i.RemoveSubTaskIDs; len(ids) > 0 {
		m.RemoveSubTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskInput on the update builder.
func (u *TaskUpdate) SetInput(i UpdateTaskInput) *TaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskInput on the update-one builder.
func (u *TaskUpdateOne) SetInput(i UpdateTaskInput) *TaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskColumnInput represents a mutation input for creating taskcolumns.
type CreateTaskColumnInput struct {
	Name                  string
	Type                  taskcolumn.Type
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	TeammateTaskColumnIDs []ulid.ID
	ProjectTaskColumnIDs  []ulid.ID
}

// Mutate applies the CreateTaskColumnInput on the TaskColumnCreate builder.
func (i *CreateTaskColumnInput) Mutate(m *TaskColumnCreate) {
	m.SetName(i.Name)
	m.SetType(i.Type)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.ProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskColumnInput on the create builder.
func (c *TaskColumnCreate) SetInput(i CreateTaskColumnInput) *TaskColumnCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskColumnInput represents a mutation input for updating taskcolumns.
type UpdateTaskColumnInput struct {
	ID                          ulid.ID
	Name                        *string
	Type                        *taskcolumn.Type
	AddTeammateTaskColumnIDs    []ulid.ID
	RemoveTeammateTaskColumnIDs []ulid.ID
	AddProjectTaskColumnIDs     []ulid.ID
	RemoveProjectTaskColumnIDs  []ulid.ID
}

// Mutate applies the UpdateTaskColumnInput on the TaskColumnMutation.
func (i *UpdateTaskColumnInput) Mutate(m *TaskColumnMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if ids := i.AddTeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskColumnIDs; len(ids) > 0 {
		m.RemoveTeammateTaskColumnIDs(ids...)
	}
	if ids := i.AddProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
	if ids := i.RemoveProjectTaskColumnIDs; len(ids) > 0 {
		m.RemoveProjectTaskColumnIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskColumnInput on the update builder.
func (u *TaskColumnUpdate) SetInput(i UpdateTaskColumnInput) *TaskColumnUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskColumnInput on the update-one builder.
func (u *TaskColumnUpdateOne) SetInput(i UpdateTaskColumnInput) *TaskColumnUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskListCompletedStatusInput represents a mutation input for creating tasklistcompletedstatusslice.
type CreateTaskListCompletedStatusInput struct {
	Name                      string
	StatusCode                tasklistcompletedstatus.StatusCode
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	TeammateTaskListStatusIDs []ulid.ID
	ProjectTaskListStatusIDs  []ulid.ID
}

// Mutate applies the CreateTaskListCompletedStatusInput on the TaskListCompletedStatusCreate builder.
func (i *CreateTaskListCompletedStatusInput) Mutate(m *TaskListCompletedStatusCreate) {
	m.SetName(i.Name)
	m.SetStatusCode(i.StatusCode)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.ProjectTaskListStatusIDs; len(ids) > 0 {
		m.AddProjectTaskListStatusIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskListCompletedStatusInput on the create builder.
func (c *TaskListCompletedStatusCreate) SetInput(i CreateTaskListCompletedStatusInput) *TaskListCompletedStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskListCompletedStatusInput represents a mutation input for updating tasklistcompletedstatusslice.
type UpdateTaskListCompletedStatusInput struct {
	ID                              ulid.ID
	Name                            *string
	StatusCode                      *tasklistcompletedstatus.StatusCode
	AddTeammateTaskListStatusIDs    []ulid.ID
	RemoveTeammateTaskListStatusIDs []ulid.ID
	AddProjectTaskListStatusIDs     []ulid.ID
	RemoveProjectTaskListStatusIDs  []ulid.ID
}

// Mutate applies the UpdateTaskListCompletedStatusInput on the TaskListCompletedStatusMutation.
func (i *UpdateTaskListCompletedStatusInput) Mutate(m *TaskListCompletedStatusMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if ids := i.AddTeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatusIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.AddProjectTaskListStatusIDs; len(ids) > 0 {
		m.AddProjectTaskListStatusIDs(ids...)
	}
	if ids := i.RemoveProjectTaskListStatusIDs; len(ids) > 0 {
		m.RemoveProjectTaskListStatusIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskListCompletedStatusInput on the update builder.
func (u *TaskListCompletedStatusUpdate) SetInput(i UpdateTaskListCompletedStatusInput) *TaskListCompletedStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskListCompletedStatusInput on the update-one builder.
func (u *TaskListCompletedStatusUpdateOne) SetInput(i UpdateTaskListCompletedStatusInput) *TaskListCompletedStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskListSortStatusInput represents a mutation input for creating tasklistsortstatusslice.
type CreateTaskListSortStatusInput struct {
	Name                      string
	StatusCode                tasklistsortstatus.StatusCode
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	TeammateTaskListStatusIDs []ulid.ID
	ProjectTaskListStatusIDs  []ulid.ID
}

// Mutate applies the CreateTaskListSortStatusInput on the TaskListSortStatusCreate builder.
func (i *CreateTaskListSortStatusInput) Mutate(m *TaskListSortStatusCreate) {
	m.SetName(i.Name)
	m.SetStatusCode(i.StatusCode)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.ProjectTaskListStatusIDs; len(ids) > 0 {
		m.AddProjectTaskListStatusIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskListSortStatusInput on the create builder.
func (c *TaskListSortStatusCreate) SetInput(i CreateTaskListSortStatusInput) *TaskListSortStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskListSortStatusInput represents a mutation input for updating tasklistsortstatusslice.
type UpdateTaskListSortStatusInput struct {
	ID                              ulid.ID
	Name                            *string
	StatusCode                      *tasklistsortstatus.StatusCode
	AddTeammateTaskListStatusIDs    []ulid.ID
	RemoveTeammateTaskListStatusIDs []ulid.ID
	AddProjectTaskListStatusIDs     []ulid.ID
	RemoveProjectTaskListStatusIDs  []ulid.ID
}

// Mutate applies the UpdateTaskListSortStatusInput on the TaskListSortStatusMutation.
func (i *UpdateTaskListSortStatusInput) Mutate(m *TaskListSortStatusMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if ids := i.AddTeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatusIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.AddProjectTaskListStatusIDs; len(ids) > 0 {
		m.AddProjectTaskListStatusIDs(ids...)
	}
	if ids := i.RemoveProjectTaskListStatusIDs; len(ids) > 0 {
		m.RemoveProjectTaskListStatusIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskListSortStatusInput on the update builder.
func (u *TaskListSortStatusUpdate) SetInput(i UpdateTaskListSortStatusInput) *TaskListSortStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskListSortStatusInput on the update-one builder.
func (u *TaskListSortStatusUpdateOne) SetInput(i UpdateTaskListSortStatusInput) *TaskListSortStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskPriorityInput represents a mutation input for creating taskpriorities.
type CreateTaskPriorityInput struct {
	Name         string
	PriorityType taskpriority.PriorityType
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	ColorID      ulid.ID
	TaskIDs      []ulid.ID
}

// Mutate applies the CreateTaskPriorityInput on the TaskPriorityCreate builder.
func (i *CreateTaskPriorityInput) Mutate(m *TaskPriorityCreate) {
	m.SetName(i.Name)
	m.SetPriorityType(i.PriorityType)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetColorID(i.ColorID)
	if ids := i.TaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskPriorityInput on the create builder.
func (c *TaskPriorityCreate) SetInput(i CreateTaskPriorityInput) *TaskPriorityCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskPriorityInput represents a mutation input for updating taskpriorities.
type UpdateTaskPriorityInput struct {
	ID            ulid.ID
	Name          *string
	PriorityType  *taskpriority.PriorityType
	ColorID       *ulid.ID
	ClearColor    bool
	AddTaskIDs    []ulid.ID
	RemoveTaskIDs []ulid.ID
}

// Mutate applies the UpdateTaskPriorityInput on the TaskPriorityMutation.
func (i *UpdateTaskPriorityInput) Mutate(m *TaskPriorityMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PriorityType; v != nil {
		m.SetPriorityType(*v)
	}
	if i.ClearColor {
		m.ClearColor()
	}
	if v := i.ColorID; v != nil {
		m.SetColorID(*v)
	}
	if ids := i.AddTaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
	if ids := i.RemoveTaskIDs; len(ids) > 0 {
		m.RemoveTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskPriorityInput on the update builder.
func (u *TaskPriorityUpdate) SetInput(i UpdateTaskPriorityInput) *TaskPriorityUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskPriorityInput on the update-one builder.
func (u *TaskPriorityUpdateOne) SetInput(i UpdateTaskPriorityInput) *TaskPriorityUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskSectionInput represents a mutation input for creating tasksections.
type CreateTaskSectionInput struct {
	Name      string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the CreateTaskSectionInput on the TaskSectionCreate builder.
func (i *CreateTaskSectionInput) Mutate(m *TaskSectionCreate) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateTaskSectionInput on the create builder.
func (c *TaskSectionCreate) SetInput(i CreateTaskSectionInput) *TaskSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskSectionInput represents a mutation input for updating tasksections.
type UpdateTaskSectionInput struct {
	ID   ulid.ID
	Name *string
}

// Mutate applies the UpdateTaskSectionInput on the TaskSectionMutation.
func (i *UpdateTaskSectionInput) Mutate(m *TaskSectionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskSectionInput on the update builder.
func (u *TaskSectionUpdate) SetInput(i UpdateTaskSectionInput) *TaskSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskSectionInput on the update-one builder.
func (u *TaskSectionUpdateOne) SetInput(i UpdateTaskSectionInput) *TaskSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateInput represents a mutation input for creating teammates.
type CreateTeammateInput struct {
	Name                      string
	Image                     string
	Email                     string
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	WorkspaceIDs              []ulid.ID
	ProjectIDs                []ulid.ID
	ProjectTeammateIDs        []ulid.ID
	WorkspaceTeammateIDs      []ulid.ID
	FavoriteProjectIDs        []ulid.ID
	FavoriteWorkspaceIDs      []ulid.ID
	TeammateTaskTabStatusIDs  []ulid.ID
	TeammateTaskColumnIDs     []ulid.ID
	TeammateTaskListStatusIDs []ulid.ID
	TeammateTaskSectionIDs    []ulid.ID
	TaskIDs                   []ulid.ID
}

// Mutate applies the CreateTeammateInput on the TeammateCreate builder.
func (i *CreateTeammateInput) Mutate(m *TeammateCreate) {
	m.SetName(i.Name)
	m.SetImage(i.Image)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.WorkspaceIDs; len(ids) > 0 {
		m.AddWorkspaceIDs(ids...)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.ProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.WorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.FavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.FavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.TeammateTaskTabStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatusIDs(ids...)
	}
	if ids := i.TeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.TeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.TeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
	if ids := i.TaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTeammateInput on the create builder.
func (c *TeammateCreate) SetInput(i CreateTeammateInput) *TeammateCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateInput represents a mutation input for updating teammates.
type UpdateTeammateInput struct {
	ID                              ulid.ID
	Name                            *string
	Image                           *string
	Email                           *string
	AddWorkspaceIDs                 []ulid.ID
	RemoveWorkspaceIDs              []ulid.ID
	AddProjectIDs                   []ulid.ID
	RemoveProjectIDs                []ulid.ID
	AddProjectTeammateIDs           []ulid.ID
	RemoveProjectTeammateIDs        []ulid.ID
	AddWorkspaceTeammateIDs         []ulid.ID
	RemoveWorkspaceTeammateIDs      []ulid.ID
	AddFavoriteProjectIDs           []ulid.ID
	RemoveFavoriteProjectIDs        []ulid.ID
	AddFavoriteWorkspaceIDs         []ulid.ID
	RemoveFavoriteWorkspaceIDs      []ulid.ID
	AddTeammateTaskTabStatusIDs     []ulid.ID
	RemoveTeammateTaskTabStatusIDs  []ulid.ID
	AddTeammateTaskColumnIDs        []ulid.ID
	RemoveTeammateTaskColumnIDs     []ulid.ID
	AddTeammateTaskListStatusIDs    []ulid.ID
	RemoveTeammateTaskListStatusIDs []ulid.ID
	AddTeammateTaskSectionIDs       []ulid.ID
	RemoveTeammateTaskSectionIDs    []ulid.ID
	AddTaskIDs                      []ulid.ID
	RemoveTaskIDs                   []ulid.ID
}

// Mutate applies the UpdateTeammateInput on the TeammateMutation.
func (i *UpdateTeammateInput) Mutate(m *TeammateMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if ids := i.AddWorkspaceIDs; len(ids) > 0 {
		m.AddWorkspaceIDs(ids...)
	}
	if ids := i.RemoveWorkspaceIDs; len(ids) > 0 {
		m.RemoveWorkspaceIDs(ids...)
	}
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if ids := i.AddProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.RemoveProjectTeammateIDs; len(ids) > 0 {
		m.RemoveProjectTeammateIDs(ids...)
	}
	if ids := i.AddWorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.RemoveWorkspaceTeammateIDs; len(ids) > 0 {
		m.RemoveWorkspaceTeammateIDs(ids...)
	}
	if ids := i.AddFavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.RemoveFavoriteProjectIDs; len(ids) > 0 {
		m.RemoveFavoriteProjectIDs(ids...)
	}
	if ids := i.AddFavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.RemoveFavoriteWorkspaceIDs; len(ids) > 0 {
		m.RemoveFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.AddTeammateTaskTabStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatusIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskTabStatusIDs; len(ids) > 0 {
		m.RemoveTeammateTaskTabStatusIDs(ids...)
	}
	if ids := i.AddTeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskColumnIDs; len(ids) > 0 {
		m.RemoveTeammateTaskColumnIDs(ids...)
	}
	if ids := i.AddTeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatusIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.AddTeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskSectionIDs; len(ids) > 0 {
		m.RemoveTeammateTaskSectionIDs(ids...)
	}
	if ids := i.AddTaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
	if ids := i.RemoveTaskIDs; len(ids) > 0 {
		m.RemoveTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTeammateInput on the update builder.
func (u *TeammateUpdate) SetInput(i UpdateTeammateInput) *TeammateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateInput on the update-one builder.
func (u *TeammateUpdateOne) SetInput(i UpdateTeammateInput) *TeammateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskColumnInput represents a mutation input for creating teammatetaskcolumns.
type CreateTeammateTaskColumnInput struct {
	Width        string
	Disabled     bool
	Customizable bool
	Order        int
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	TeammateID   ulid.ID
	TaskColumnID ulid.ID
}

// Mutate applies the CreateTeammateTaskColumnInput on the TeammateTaskColumnCreate builder.
func (i *CreateTeammateTaskColumnInput) Mutate(m *TeammateTaskColumnCreate) {
	m.SetWidth(i.Width)
	m.SetDisabled(i.Disabled)
	m.SetCustomizable(i.Customizable)
	m.SetOrder(i.Order)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetTaskColumnID(i.TaskColumnID)
}

// SetInput applies the change-set in the CreateTeammateTaskColumnInput on the create builder.
func (c *TeammateTaskColumnCreate) SetInput(i CreateTeammateTaskColumnInput) *TeammateTaskColumnCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskColumnInput represents a mutation input for updating teammatetaskcolumns.
type UpdateTeammateTaskColumnInput struct {
	ID              ulid.ID
	Width           *string
	Disabled        *bool
	Customizable    *bool
	Order           *int
	TeammateID      *ulid.ID
	ClearTeammate   bool
	TaskColumnID    *ulid.ID
	ClearTaskColumn bool
}

// Mutate applies the UpdateTeammateTaskColumnInput on the TeammateTaskColumnMutation.
func (i *UpdateTeammateTaskColumnInput) Mutate(m *TeammateTaskColumnMutation) {
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.Customizable; v != nil {
		m.SetCustomizable(*v)
	}
	if v := i.Order; v != nil {
		m.SetOrder(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearTaskColumn {
		m.ClearTaskColumn()
	}
	if v := i.TaskColumnID; v != nil {
		m.SetTaskColumnID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskColumnInput on the update builder.
func (u *TeammateTaskColumnUpdate) SetInput(i UpdateTeammateTaskColumnInput) *TeammateTaskColumnUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskColumnInput on the update-one builder.
func (u *TeammateTaskColumnUpdateOne) SetInput(i UpdateTeammateTaskColumnInput) *TeammateTaskColumnUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskListStatusInput represents a mutation input for creating teammatetaskliststatusslice.
type CreateTeammateTaskListStatusInput struct {
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	WorkspaceID               ulid.ID
	TeammateID                ulid.ID
	TaskListCompletedStatusID ulid.ID
	TaskListSortStatusID      ulid.ID
}

// Mutate applies the CreateTeammateTaskListStatusInput on the TeammateTaskListStatusCreate builder.
func (i *CreateTeammateTaskListStatusInput) Mutate(m *TeammateTaskListStatusCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
	m.SetTaskListCompletedStatusID(i.TaskListCompletedStatusID)
	m.SetTaskListSortStatusID(i.TaskListSortStatusID)
}

// SetInput applies the change-set in the CreateTeammateTaskListStatusInput on the create builder.
func (c *TeammateTaskListStatusCreate) SetInput(i CreateTeammateTaskListStatusInput) *TeammateTaskListStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskListStatusInput represents a mutation input for updating teammatetaskliststatusslice.
type UpdateTeammateTaskListStatusInput struct {
	ID                           ulid.ID
	WorkspaceID                  *ulid.ID
	ClearWorkspace               bool
	TeammateID                   *ulid.ID
	ClearTeammate                bool
	TaskListCompletedStatusID    *ulid.ID
	ClearTaskListCompletedStatus bool
	TaskListSortStatusID         *ulid.ID
	ClearTaskListSortStatus      bool
}

// Mutate applies the UpdateTeammateTaskListStatusInput on the TeammateTaskListStatusMutation.
func (i *UpdateTeammateTaskListStatusInput) Mutate(m *TeammateTaskListStatusMutation) {
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearTaskListCompletedStatus {
		m.ClearTaskListCompletedStatus()
	}
	if v := i.TaskListCompletedStatusID; v != nil {
		m.SetTaskListCompletedStatusID(*v)
	}
	if i.ClearTaskListSortStatus {
		m.ClearTaskListSortStatus()
	}
	if v := i.TaskListSortStatusID; v != nil {
		m.SetTaskListSortStatusID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskListStatusInput on the update builder.
func (u *TeammateTaskListStatusUpdate) SetInput(i UpdateTeammateTaskListStatusInput) *TeammateTaskListStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskListStatusInput on the update-one builder.
func (u *TeammateTaskListStatusUpdateOne) SetInput(i UpdateTeammateTaskListStatusInput) *TeammateTaskListStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskSectionInput represents a mutation input for creating teammatetasksections.
type CreateTeammateTaskSectionInput struct {
	Name        string
	Assigned    bool
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TeammateID  ulid.ID
	WorkspaceID ulid.ID
}

// Mutate applies the CreateTeammateTaskSectionInput on the TeammateTaskSectionCreate builder.
func (i *CreateTeammateTaskSectionInput) Mutate(m *TeammateTaskSectionCreate) {
	m.SetName(i.Name)
	m.SetAssigned(i.Assigned)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetWorkspaceID(i.WorkspaceID)
}

// SetInput applies the change-set in the CreateTeammateTaskSectionInput on the create builder.
func (c *TeammateTaskSectionCreate) SetInput(i CreateTeammateTaskSectionInput) *TeammateTaskSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskSectionInput represents a mutation input for updating teammatetasksections.
type UpdateTeammateTaskSectionInput struct {
	ID             ulid.ID
	Name           *string
	Assigned       *bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
}

// Mutate applies the UpdateTeammateTaskSectionInput on the TeammateTaskSectionMutation.
func (i *UpdateTeammateTaskSectionInput) Mutate(m *TeammateTaskSectionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Assigned; v != nil {
		m.SetAssigned(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskSectionInput on the update builder.
func (u *TeammateTaskSectionUpdate) SetInput(i UpdateTeammateTaskSectionInput) *TeammateTaskSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskSectionInput on the update-one builder.
func (u *TeammateTaskSectionUpdateOne) SetInput(i UpdateTeammateTaskSectionInput) *TeammateTaskSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskTabStatusInput represents a mutation input for creating teammatetasktabstatusslice.
type CreateTeammateTaskTabStatusInput struct {
	StatusCode  *teammatetasktabstatus.StatusCode
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	WorkspaceID ulid.ID
	TeammateID  ulid.ID
}

// Mutate applies the CreateTeammateTaskTabStatusInput on the TeammateTaskTabStatusCreate builder.
func (i *CreateTeammateTaskTabStatusInput) Mutate(m *TeammateTaskTabStatusCreate) {
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateTeammateTaskTabStatusInput on the create builder.
func (c *TeammateTaskTabStatusCreate) SetInput(i CreateTeammateTaskTabStatusInput) *TeammateTaskTabStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskTabStatusInput represents a mutation input for updating teammatetasktabstatusslice.
type UpdateTeammateTaskTabStatusInput struct {
	ID             ulid.ID
	StatusCode     *teammatetasktabstatus.StatusCode
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
}

// Mutate applies the UpdateTeammateTaskTabStatusInput on the TeammateTaskTabStatusMutation.
func (i *UpdateTeammateTaskTabStatusInput) Mutate(m *TeammateTaskTabStatusMutation) {
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskTabStatusInput on the update builder.
func (u *TeammateTaskTabStatusUpdate) SetInput(i UpdateTeammateTaskTabStatusInput) *TeammateTaskTabStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskTabStatusInput on the update-one builder.
func (u *TeammateTaskTabStatusUpdateOne) SetInput(i UpdateTeammateTaskTabStatusInput) *TeammateTaskTabStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTestTodoInput represents a mutation input for creating testtodos.
type CreateTestTodoInput struct {
	CreatedBy    *ulid.ID
	Name         *string
	Status       *testtodo.Status
	Priority     *int
	DueDate      *time.Time
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	TestUserID   *ulid.ID
	ParentTodoID *ulid.ID
	ChildIDs     []ulid.ID
}

// Mutate applies the CreateTestTodoInput on the TestTodoCreate builder.
func (i *CreateTestTodoInput) Mutate(m *TestTodoCreate) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TestUserID; v != nil {
		m.SetTestUserID(*v)
	}
	if v := i.ParentTodoID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.ChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTestTodoInput on the create builder.
func (c *TestTodoCreate) SetInput(i CreateTestTodoInput) *TestTodoCreate {
	i.Mutate(c)
	return c
}

// UpdateTestTodoInput represents a mutation input for updating testtodos.
type UpdateTestTodoInput struct {
	ID             ulid.ID
	CreatedBy      *ulid.ID
	ClearCreatedBy bool
	Name           *string
	Status         *testtodo.Status
	Priority       *int
	DueDate        *time.Time
	ClearDueDate   bool
	TestUserID     *ulid.ID
	ClearTestUser  bool
	ParentTodoID   *ulid.ID
	ClearParent    bool
	AddChildIDs    []ulid.ID
	RemoveChildIDs []ulid.ID
}

// Mutate applies the UpdateTestTodoInput on the TestTodoMutation.
func (i *UpdateTestTodoInput) Mutate(m *TestTodoMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if i.ClearDueDate {
		m.ClearDueDate()
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearTestUser {
		m.ClearTestUser()
	}
	if v := i.TestUserID; v != nil {
		m.SetTestUserID(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentTodoID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTestTodoInput on the update builder.
func (u *TestTodoUpdate) SetInput(i UpdateTestTodoInput) *TestTodoUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTestTodoInput on the update-one builder.
func (u *TestTodoUpdateOne) SetInput(i UpdateTestTodoInput) *TestTodoUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTestUserInput represents a mutation input for creating testusers.
type CreateTestUserInput struct {
	Name        string
	Age         int
	Profile     testuserprofile.TestUserProfile
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TestTodoIDs []ulid.ID
}

// Mutate applies the CreateTestUserInput on the TestUserCreate builder.
func (i *CreateTestUserInput) Mutate(m *TestUserCreate) {
	m.SetName(i.Name)
	m.SetAge(i.Age)
	m.SetProfile(i.Profile)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TestTodoIDs; len(ids) > 0 {
		m.AddTestTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTestUserInput on the create builder.
func (c *TestUserCreate) SetInput(i CreateTestUserInput) *TestUserCreate {
	i.Mutate(c)
	return c
}

// UpdateTestUserInput represents a mutation input for updating testusers.
type UpdateTestUserInput struct {
	ID                ulid.ID
	Name              *string
	Age               *int
	Profile           *testuserprofile.TestUserProfile
	AddTestTodoIDs    []ulid.ID
	RemoveTestTodoIDs []ulid.ID
}

// Mutate applies the UpdateTestUserInput on the TestUserMutation.
func (i *UpdateTestUserInput) Mutate(m *TestUserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Age; v != nil {
		m.SetAge(*v)
	}
	if v := i.Profile; v != nil {
		m.SetProfile(*v)
	}
	if ids := i.AddTestTodoIDs; len(ids) > 0 {
		m.AddTestTodoIDs(ids...)
	}
	if ids := i.RemoveTestTodoIDs; len(ids) > 0 {
		m.RemoveTestTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTestUserInput on the update builder.
func (u *TestUserUpdate) SetInput(i UpdateTestUserInput) *TestUserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTestUserInput on the update-one builder.
func (u *TestUserUpdateOne) SetInput(i UpdateTestUserInput) *TestUserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkspaceInput represents a mutation input for creating workspaces.
type CreateWorkspaceInput struct {
	Name                      string
	Description               editor.Description
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	CreatedBy                 ulid.ID
	ProjectIDs                []ulid.ID
	WorkspaceTeammateIDs      []ulid.ID
	FavoriteWorkspaceIDs      []ulid.ID
	TeammateTaskTabStatusIDs  []ulid.ID
	TeammateTaskListStatusIDs []ulid.ID
	TeammateTaskSectionIDs    []ulid.ID
}

// Mutate applies the CreateWorkspaceInput on the WorkspaceCreate builder.
func (i *CreateWorkspaceInput) Mutate(m *WorkspaceCreate) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.CreatedBy)
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.WorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.FavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.TeammateTaskTabStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatusIDs(ids...)
	}
	if ids := i.TeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.TeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateWorkspaceInput on the create builder.
func (c *WorkspaceCreate) SetInput(i CreateWorkspaceInput) *WorkspaceCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkspaceInput represents a mutation input for updating workspaces.
type UpdateWorkspaceInput struct {
	ID                              ulid.ID
	Name                            *string
	Description                     *editor.Description
	CreatedBy                       *ulid.ID
	ClearTeammate                   bool
	AddProjectIDs                   []ulid.ID
	RemoveProjectIDs                []ulid.ID
	AddWorkspaceTeammateIDs         []ulid.ID
	RemoveWorkspaceTeammateIDs      []ulid.ID
	AddFavoriteWorkspaceIDs         []ulid.ID
	RemoveFavoriteWorkspaceIDs      []ulid.ID
	AddTeammateTaskTabStatusIDs     []ulid.ID
	RemoveTeammateTaskTabStatusIDs  []ulid.ID
	AddTeammateTaskListStatusIDs    []ulid.ID
	RemoveTeammateTaskListStatusIDs []ulid.ID
	AddTeammateTaskSectionIDs       []ulid.ID
	RemoveTeammateTaskSectionIDs    []ulid.ID
}

// Mutate applies the UpdateWorkspaceInput on the WorkspaceMutation.
func (i *UpdateWorkspaceInput) Mutate(m *WorkspaceMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.CreatedBy; v != nil {
		m.SetTeammateID(*v)
	}
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if ids := i.AddWorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.RemoveWorkspaceTeammateIDs; len(ids) > 0 {
		m.RemoveWorkspaceTeammateIDs(ids...)
	}
	if ids := i.AddFavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.RemoveFavoriteWorkspaceIDs; len(ids) > 0 {
		m.RemoveFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.AddTeammateTaskTabStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatusIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskTabStatusIDs; len(ids) > 0 {
		m.RemoveTeammateTaskTabStatusIDs(ids...)
	}
	if ids := i.AddTeammateTaskListStatusIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatusIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatusIDs(ids...)
	}
	if ids := i.AddTeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskSectionIDs; len(ids) > 0 {
		m.RemoveTeammateTaskSectionIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceInput on the update builder.
func (u *WorkspaceUpdate) SetInput(i UpdateWorkspaceInput) *WorkspaceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkspaceInput on the update-one builder.
func (u *WorkspaceUpdateOne) SetInput(i UpdateWorkspaceInput) *WorkspaceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkspaceTeammateInput represents a mutation input for creating workspaceteammates.
type CreateWorkspaceTeammateInput struct {
	Role        string
	IsOwner     bool
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	WorkspaceID ulid.ID
	TeammateID  ulid.ID
}

// Mutate applies the CreateWorkspaceTeammateInput on the WorkspaceTeammateCreate builder.
func (i *CreateWorkspaceTeammateInput) Mutate(m *WorkspaceTeammateCreate) {
	m.SetRole(i.Role)
	m.SetIsOwner(i.IsOwner)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateWorkspaceTeammateInput on the create builder.
func (c *WorkspaceTeammateCreate) SetInput(i CreateWorkspaceTeammateInput) *WorkspaceTeammateCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkspaceTeammateInput represents a mutation input for updating workspaceteammates.
type UpdateWorkspaceTeammateInput struct {
	ID             ulid.ID
	Role           *string
	IsOwner        *bool
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
}

// Mutate applies the UpdateWorkspaceTeammateInput on the WorkspaceTeammateMutation.
func (i *UpdateWorkspaceTeammateInput) Mutate(m *WorkspaceTeammateMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.IsOwner; v != nil {
		m.SetIsOwner(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceTeammateInput on the update builder.
func (u *WorkspaceTeammateUpdate) SetInput(i UpdateWorkspaceTeammateInput) *WorkspaceTeammateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkspaceTeammateInput on the update-one builder.
func (u *WorkspaceTeammateUpdateOne) SetInput(i UpdateWorkspaceTeammateInput) *WorkspaceTeammateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
