// Code generated by entc, DO NOT EDIT.

package ent

import (
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/filetype"
	"project-management-demo-backend/ent/schema/testuserprofile"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/testtodo"
	"time"
)

// CreateActivityTypeInput represents a mutation input for creating activitytypes.
type CreateActivityTypeInput struct {
	Name                         string
	TypeCode                     activitytype.TypeCode
	CreatedAt                    *time.Time
	UpdatedAt                    *time.Time
	TaskActivityIDs              []ulid.ID
	WorkspaceActivityIDs         []ulid.ID
	ArchivedTaskActivityIDs      []ulid.ID
	ArchivedWorkspaceActivityIDs []ulid.ID
	RequestID                    string
}

// Mutate applies the CreateActivityTypeInput on the ActivityTypeCreate builder.
func (i *CreateActivityTypeInput) Mutate(m *ActivityTypeCreate) {
	m.SetName(i.Name)
	m.SetTypeCode(i.TypeCode)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TaskActivityIDs; len(ids) > 0 {
		m.AddTaskActivityIDs(ids...)
	}
	if ids := i.WorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.ArchivedTaskActivityIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityIDs(ids...)
	}
	if ids := i.ArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateActivityTypeInput on the create builder.
func (c *ActivityTypeCreate) SetInput(i CreateActivityTypeInput) *ActivityTypeCreate {
	i.Mutate(c)
	return c
}

// UpdateActivityTypeInput represents a mutation input for updating activitytypes.
type UpdateActivityTypeInput struct {
	ID                                 ulid.ID
	Name                               *string
	TypeCode                           *activitytype.TypeCode
	AddTaskActivityIDs                 []ulid.ID
	RemoveTaskActivityIDs              []ulid.ID
	AddWorkspaceActivityIDs            []ulid.ID
	RemoveWorkspaceActivityIDs         []ulid.ID
	AddArchivedTaskActivityIDs         []ulid.ID
	RemoveArchivedTaskActivityIDs      []ulid.ID
	AddArchivedWorkspaceActivityIDs    []ulid.ID
	RemoveArchivedWorkspaceActivityIDs []ulid.ID
	RequestID                          string
}

// Mutate applies the UpdateActivityTypeInput on the ActivityTypeMutation.
func (i *UpdateActivityTypeInput) Mutate(m *ActivityTypeMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.TypeCode; v != nil {
		m.SetTypeCode(*v)
	}
	if ids := i.AddTaskActivityIDs; len(ids) > 0 {
		m.AddTaskActivityIDs(ids...)
	}
	if ids := i.RemoveTaskActivityIDs; len(ids) > 0 {
		m.RemoveTaskActivityIDs(ids...)
	}
	if ids := i.AddWorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveWorkspaceActivityIDs(ids...)
	}
	if ids := i.AddArchivedTaskActivityIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityIDs(ids...)
	}
	if ids := i.RemoveArchivedTaskActivityIDs; len(ids) > 0 {
		m.RemoveArchivedTaskActivityIDs(ids...)
	}
	if ids := i.AddArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveArchivedWorkspaceActivityIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateActivityTypeInput on the update builder.
func (u *ActivityTypeUpdate) SetInput(i UpdateActivityTypeInput) *ActivityTypeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateActivityTypeInput on the update-one builder.
func (u *ActivityTypeUpdateOne) SetInput(i UpdateActivityTypeInput) *ActivityTypeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateArchivedTaskActivityInput represents a mutation input for creating archivedtaskactivities.
type CreateArchivedTaskActivityInput struct {
	CreatedAt                   *time.Time
	UpdatedAt                   *time.Time
	TeammateID                  ulid.ID
	ActivityTypeID              ulid.ID
	WorkspaceID                 ulid.ID
	ArchivedTaskActivityTaskIDs []ulid.ID
	RequestID                   string
}

// Mutate applies the CreateArchivedTaskActivityInput on the ArchivedTaskActivityCreate builder.
func (i *CreateArchivedTaskActivityInput) Mutate(m *ArchivedTaskActivityCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetActivityTypeID(i.ActivityTypeID)
	m.SetWorkspaceID(i.WorkspaceID)
	if ids := i.ArchivedTaskActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateArchivedTaskActivityInput on the create builder.
func (c *ArchivedTaskActivityCreate) SetInput(i CreateArchivedTaskActivityInput) *ArchivedTaskActivityCreate {
	i.Mutate(c)
	return c
}

// UpdateArchivedTaskActivityInput represents a mutation input for updating archivedtaskactivities.
type UpdateArchivedTaskActivityInput struct {
	ID                                ulid.ID
	TeammateID                        *ulid.ID
	ClearTeammate                     bool
	ActivityTypeID                    *ulid.ID
	ClearActivityType                 bool
	WorkspaceID                       *ulid.ID
	ClearWorkspace                    bool
	AddArchivedTaskActivityTaskIDs    []ulid.ID
	RemoveArchivedTaskActivityTaskIDs []ulid.ID
	RequestID                         string
}

// Mutate applies the UpdateArchivedTaskActivityInput on the ArchivedTaskActivityMutation.
func (i *UpdateArchivedTaskActivityInput) Mutate(m *ArchivedTaskActivityMutation) {
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearActivityType {
		m.ClearActivityType()
	}
	if v := i.ActivityTypeID; v != nil {
		m.SetActivityTypeID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if ids := i.AddArchivedTaskActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityTaskIDs(ids...)
	}
	if ids := i.RemoveArchivedTaskActivityTaskIDs; len(ids) > 0 {
		m.RemoveArchivedTaskActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateArchivedTaskActivityInput on the update builder.
func (u *ArchivedTaskActivityUpdate) SetInput(i UpdateArchivedTaskActivityInput) *ArchivedTaskActivityUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateArchivedTaskActivityInput on the update-one builder.
func (u *ArchivedTaskActivityUpdateOne) SetInput(i UpdateArchivedTaskActivityInput) *ArchivedTaskActivityUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateArchivedTaskActivityTaskInput represents a mutation input for creating archivedtaskactivitytasks.
type CreateArchivedTaskActivityTaskInput struct {
	CreatedAt              *time.Time
	UpdatedAt              *time.Time
	TaskID                 ulid.ID
	ArchivedTaskActivityID ulid.ID
	RequestID              string
}

// Mutate applies the CreateArchivedTaskActivityTaskInput on the ArchivedTaskActivityTaskCreate builder.
func (i *CreateArchivedTaskActivityTaskInput) Mutate(m *ArchivedTaskActivityTaskCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetArchivedTaskActivityID(i.ArchivedTaskActivityID)
}

// SetInput applies the change-set in the CreateArchivedTaskActivityTaskInput on the create builder.
func (c *ArchivedTaskActivityTaskCreate) SetInput(i CreateArchivedTaskActivityTaskInput) *ArchivedTaskActivityTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateArchivedTaskActivityTaskInput represents a mutation input for updating archivedtaskactivitytasks.
type UpdateArchivedTaskActivityTaskInput struct {
	ID                        ulid.ID
	TaskID                    *ulid.ID
	ClearTask                 bool
	ArchivedTaskActivityID    *ulid.ID
	ClearArchivedTaskActivity bool
	RequestID                 string
}

// Mutate applies the UpdateArchivedTaskActivityTaskInput on the ArchivedTaskActivityTaskMutation.
func (i *UpdateArchivedTaskActivityTaskInput) Mutate(m *ArchivedTaskActivityTaskMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearArchivedTaskActivity {
		m.ClearArchivedTaskActivity()
	}
	if v := i.ArchivedTaskActivityID; v != nil {
		m.SetArchivedTaskActivityID(*v)
	}
}

// SetInput applies the change-set in the UpdateArchivedTaskActivityTaskInput on the update builder.
func (u *ArchivedTaskActivityTaskUpdate) SetInput(i UpdateArchivedTaskActivityTaskInput) *ArchivedTaskActivityTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateArchivedTaskActivityTaskInput on the update-one builder.
func (u *ArchivedTaskActivityTaskUpdateOne) SetInput(i UpdateArchivedTaskActivityTaskInput) *ArchivedTaskActivityTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateArchivedWorkspaceActivityInput represents a mutation input for creating archivedworkspaceactivities.
type CreateArchivedWorkspaceActivityInput struct {
	CreatedAt                        *time.Time
	UpdatedAt                        *time.Time
	ActivityTypeID                   ulid.ID
	WorkspaceID                      ulid.ID
	ProjectID                        ulid.ID
	TeammateID                       ulid.ID
	ArchivedWorkspaceActivityTaskIDs []ulid.ID
	RequestID                        string
}

// Mutate applies the CreateArchivedWorkspaceActivityInput on the ArchivedWorkspaceActivityCreate builder.
func (i *CreateArchivedWorkspaceActivityInput) Mutate(m *ArchivedWorkspaceActivityCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetActivityTypeID(i.ActivityTypeID)
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetProjectID(i.ProjectID)
	m.SetTeammateID(i.TeammateID)
	if ids := i.ArchivedWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateArchivedWorkspaceActivityInput on the create builder.
func (c *ArchivedWorkspaceActivityCreate) SetInput(i CreateArchivedWorkspaceActivityInput) *ArchivedWorkspaceActivityCreate {
	i.Mutate(c)
	return c
}

// UpdateArchivedWorkspaceActivityInput represents a mutation input for updating archivedworkspaceactivities.
type UpdateArchivedWorkspaceActivityInput struct {
	ID                                     ulid.ID
	ActivityTypeID                         *ulid.ID
	ClearActivityType                      bool
	WorkspaceID                            *ulid.ID
	ClearWorkspace                         bool
	ProjectID                              *ulid.ID
	ClearProject                           bool
	TeammateID                             *ulid.ID
	ClearTeammate                          bool
	AddArchivedWorkspaceActivityTaskIDs    []ulid.ID
	RemoveArchivedWorkspaceActivityTaskIDs []ulid.ID
	RequestID                              string
}

// Mutate applies the UpdateArchivedWorkspaceActivityInput on the ArchivedWorkspaceActivityMutation.
func (i *UpdateArchivedWorkspaceActivityInput) Mutate(m *ArchivedWorkspaceActivityMutation) {
	if i.ClearActivityType {
		m.ClearActivityType()
	}
	if v := i.ActivityTypeID; v != nil {
		m.SetActivityTypeID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if ids := i.AddArchivedWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.RemoveArchivedWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.RemoveArchivedWorkspaceActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateArchivedWorkspaceActivityInput on the update builder.
func (u *ArchivedWorkspaceActivityUpdate) SetInput(i UpdateArchivedWorkspaceActivityInput) *ArchivedWorkspaceActivityUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateArchivedWorkspaceActivityInput on the update-one builder.
func (u *ArchivedWorkspaceActivityUpdateOne) SetInput(i UpdateArchivedWorkspaceActivityInput) *ArchivedWorkspaceActivityUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateArchivedWorkspaceActivityTaskInput represents a mutation input for creating archivedworkspaceactivitytasks.
type CreateArchivedWorkspaceActivityTaskInput struct {
	CreatedAt                   *time.Time
	UpdatedAt                   *time.Time
	TaskID                      ulid.ID
	ArchivedWorkspaceActivityID ulid.ID
	RequestID                   string
}

// Mutate applies the CreateArchivedWorkspaceActivityTaskInput on the ArchivedWorkspaceActivityTaskCreate builder.
func (i *CreateArchivedWorkspaceActivityTaskInput) Mutate(m *ArchivedWorkspaceActivityTaskCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetArchivedWorkspaceActivityID(i.ArchivedWorkspaceActivityID)
}

// SetInput applies the change-set in the CreateArchivedWorkspaceActivityTaskInput on the create builder.
func (c *ArchivedWorkspaceActivityTaskCreate) SetInput(i CreateArchivedWorkspaceActivityTaskInput) *ArchivedWorkspaceActivityTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateArchivedWorkspaceActivityTaskInput represents a mutation input for updating archivedworkspaceactivitytasks.
type UpdateArchivedWorkspaceActivityTaskInput struct {
	ID                             ulid.ID
	TaskID                         *ulid.ID
	ClearTask                      bool
	ArchivedWorkspaceActivityID    *ulid.ID
	ClearArchivedWorkspaceActivity bool
	RequestID                      string
}

// Mutate applies the UpdateArchivedWorkspaceActivityTaskInput on the ArchivedWorkspaceActivityTaskMutation.
func (i *UpdateArchivedWorkspaceActivityTaskInput) Mutate(m *ArchivedWorkspaceActivityTaskMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearArchivedWorkspaceActivity {
		m.ClearArchivedWorkspaceActivity()
	}
	if v := i.ArchivedWorkspaceActivityID; v != nil {
		m.SetArchivedWorkspaceActivityID(*v)
	}
}

// SetInput applies the change-set in the UpdateArchivedWorkspaceActivityTaskInput on the update builder.
func (u *ArchivedWorkspaceActivityTaskUpdate) SetInput(i UpdateArchivedWorkspaceActivityTaskInput) *ArchivedWorkspaceActivityTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateArchivedWorkspaceActivityTaskInput on the update-one builder.
func (u *ArchivedWorkspaceActivityTaskUpdateOne) SetInput(i UpdateArchivedWorkspaceActivityTaskInput) *ArchivedWorkspaceActivityTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateColorInput represents a mutation input for creating colors.
type CreateColorInput struct {
	Name                 string
	Color                string
	Hex                  string
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	ProjectBaseColorIDs  []ulid.ID
	ProjectLightColorIDs []ulid.ID
	TaskPriorityIDs      []ulid.ID
	TagIDs               []ulid.ID
	RequestID            string
}

// Mutate applies the CreateColorInput on the ColorCreate builder.
func (i *CreateColorInput) Mutate(m *ColorCreate) {
	m.SetName(i.Name)
	m.SetColor(i.Color)
	m.SetHex(i.Hex)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectBaseColorIDs; len(ids) > 0 {
		m.AddProjectBaseColorIDs(ids...)
	}
	if ids := i.ProjectLightColorIDs; len(ids) > 0 {
		m.AddProjectLightColorIDs(ids...)
	}
	if ids := i.TaskPriorityIDs; len(ids) > 0 {
		m.AddTaskPriorityIDs(ids...)
	}
	if ids := i.TagIDs; len(ids) > 0 {
		m.AddTagIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateColorInput on the create builder.
func (c *ColorCreate) SetInput(i CreateColorInput) *ColorCreate {
	i.Mutate(c)
	return c
}

// UpdateColorInput represents a mutation input for updating colors.
type UpdateColorInput struct {
	ID                         ulid.ID
	Name                       *string
	Color                      *string
	Hex                        *string
	AddProjectBaseColorIDs     []ulid.ID
	RemoveProjectBaseColorIDs  []ulid.ID
	AddProjectLightColorIDs    []ulid.ID
	RemoveProjectLightColorIDs []ulid.ID
	AddTaskPriorityIDs         []ulid.ID
	RemoveTaskPriorityIDs      []ulid.ID
	AddTagIDs                  []ulid.ID
	RemoveTagIDs               []ulid.ID
	RequestID                  string
}

// Mutate applies the UpdateColorInput on the ColorMutation.
func (i *UpdateColorInput) Mutate(m *ColorMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Color; v != nil {
		m.SetColor(*v)
	}
	if v := i.Hex; v != nil {
		m.SetHex(*v)
	}
	if ids := i.AddProjectBaseColorIDs; len(ids) > 0 {
		m.AddProjectBaseColorIDs(ids...)
	}
	if ids := i.RemoveProjectBaseColorIDs; len(ids) > 0 {
		m.RemoveProjectBaseColorIDs(ids...)
	}
	if ids := i.AddProjectLightColorIDs; len(ids) > 0 {
		m.AddProjectLightColorIDs(ids...)
	}
	if ids := i.RemoveProjectLightColorIDs; len(ids) > 0 {
		m.RemoveProjectLightColorIDs(ids...)
	}
	if ids := i.AddTaskPriorityIDs; len(ids) > 0 {
		m.AddTaskPriorityIDs(ids...)
	}
	if ids := i.RemoveTaskPriorityIDs; len(ids) > 0 {
		m.RemoveTaskPriorityIDs(ids...)
	}
	if ids := i.AddTagIDs; len(ids) > 0 {
		m.AddTagIDs(ids...)
	}
	if ids := i.RemoveTagIDs; len(ids) > 0 {
		m.RemoveTagIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateColorInput on the update builder.
func (u *ColorUpdate) SetInput(i UpdateColorInput) *ColorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateColorInput on the update-one builder.
func (u *ColorUpdateOne) SetInput(i UpdateColorInput) *ColorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateDeletedProjectTaskInput represents a mutation input for creating deletedprojecttasks.
type CreateDeletedProjectTaskInput struct {
	ProjectTaskSectionID ulid.ID
	ProjectTaskID        ulid.ID
	ProjectTaskCreatedAt time.Time
	ProjectTaskUpdatedAt time.Time
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	ProjectID            ulid.ID
	TaskID               ulid.ID
	RequestID            string
}

// Mutate applies the CreateDeletedProjectTaskInput on the DeletedProjectTaskCreate builder.
func (i *CreateDeletedProjectTaskInput) Mutate(m *DeletedProjectTaskCreate) {
	m.SetProjectTaskSectionID(i.ProjectTaskSectionID)
	m.SetProjectTaskID(i.ProjectTaskID)
	m.SetProjectTaskCreatedAt(i.ProjectTaskCreatedAt)
	m.SetProjectTaskUpdatedAt(i.ProjectTaskUpdatedAt)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTaskID(i.TaskID)
}

// SetInput applies the change-set in the CreateDeletedProjectTaskInput on the create builder.
func (c *DeletedProjectTaskCreate) SetInput(i CreateDeletedProjectTaskInput) *DeletedProjectTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateDeletedProjectTaskInput represents a mutation input for updating deletedprojecttasks.
type UpdateDeletedProjectTaskInput struct {
	ID                   ulid.ID
	ProjectTaskSectionID *ulid.ID
	ProjectTaskID        *ulid.ID
	ProjectTaskCreatedAt *time.Time
	ProjectTaskUpdatedAt *time.Time
	ProjectID            *ulid.ID
	ClearProject         bool
	TaskID               *ulid.ID
	ClearTask            bool
	RequestID            string
}

// Mutate applies the UpdateDeletedProjectTaskInput on the DeletedProjectTaskMutation.
func (i *UpdateDeletedProjectTaskInput) Mutate(m *DeletedProjectTaskMutation) {
	if v := i.ProjectTaskSectionID; v != nil {
		m.SetProjectTaskSectionID(*v)
	}
	if v := i.ProjectTaskID; v != nil {
		m.SetProjectTaskID(*v)
	}
	if v := i.ProjectTaskCreatedAt; v != nil {
		m.SetProjectTaskCreatedAt(*v)
	}
	if v := i.ProjectTaskUpdatedAt; v != nil {
		m.SetProjectTaskUpdatedAt(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeletedProjectTaskInput on the update builder.
func (u *DeletedProjectTaskUpdate) SetInput(i UpdateDeletedProjectTaskInput) *DeletedProjectTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDeletedProjectTaskInput on the update-one builder.
func (u *DeletedProjectTaskUpdateOne) SetInput(i UpdateDeletedProjectTaskInput) *DeletedProjectTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateDeletedTaskInput represents a mutation input for creating deletedtasks.
type CreateDeletedTaskInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TaskID      ulid.ID
	WorkspaceID ulid.ID
	RequestID   string
}

// Mutate applies the CreateDeletedTaskInput on the DeletedTaskCreate builder.
func (i *CreateDeletedTaskInput) Mutate(m *DeletedTaskCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetWorkspaceID(i.WorkspaceID)
}

// SetInput applies the change-set in the CreateDeletedTaskInput on the create builder.
func (c *DeletedTaskCreate) SetInput(i CreateDeletedTaskInput) *DeletedTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateDeletedTaskInput represents a mutation input for updating deletedtasks.
type UpdateDeletedTaskInput struct {
	ID             ulid.ID
	TaskID         *ulid.ID
	ClearTask      bool
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	RequestID      string
}

// Mutate applies the UpdateDeletedTaskInput on the DeletedTaskMutation.
func (i *UpdateDeletedTaskInput) Mutate(m *DeletedTaskMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeletedTaskInput on the update builder.
func (u *DeletedTaskUpdate) SetInput(i UpdateDeletedTaskInput) *DeletedTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDeletedTaskInput on the update-one builder.
func (u *DeletedTaskUpdateOne) SetInput(i UpdateDeletedTaskInput) *DeletedTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateDeletedTeammateTaskInput represents a mutation input for creating deletedteammatetasks.
type CreateDeletedTeammateTaskInput struct {
	TeammateTaskSectionID ulid.ID
	TeammateTaskID        ulid.ID
	TeammateTaskCreatedAt time.Time
	TeammateTaskUpdatedAt time.Time
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	TeammateID            ulid.ID
	TaskID                ulid.ID
	WorkspaceID           ulid.ID
	RequestID             string
}

// Mutate applies the CreateDeletedTeammateTaskInput on the DeletedTeammateTaskCreate builder.
func (i *CreateDeletedTeammateTaskInput) Mutate(m *DeletedTeammateTaskCreate) {
	m.SetTeammateTaskSectionID(i.TeammateTaskSectionID)
	m.SetTeammateTaskID(i.TeammateTaskID)
	m.SetTeammateTaskCreatedAt(i.TeammateTaskCreatedAt)
	m.SetTeammateTaskUpdatedAt(i.TeammateTaskUpdatedAt)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetTaskID(i.TaskID)
	m.SetWorkspaceID(i.WorkspaceID)
}

// SetInput applies the change-set in the CreateDeletedTeammateTaskInput on the create builder.
func (c *DeletedTeammateTaskCreate) SetInput(i CreateDeletedTeammateTaskInput) *DeletedTeammateTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateDeletedTeammateTaskInput represents a mutation input for updating deletedteammatetasks.
type UpdateDeletedTeammateTaskInput struct {
	ID                    ulid.ID
	TeammateTaskSectionID *ulid.ID
	TeammateTaskID        *ulid.ID
	TeammateTaskCreatedAt *time.Time
	TeammateTaskUpdatedAt *time.Time
	TeammateID            *ulid.ID
	ClearTeammate         bool
	TaskID                *ulid.ID
	ClearTask             bool
	WorkspaceID           *ulid.ID
	ClearWorkspace        bool
	RequestID             string
}

// Mutate applies the UpdateDeletedTeammateTaskInput on the DeletedTeammateTaskMutation.
func (i *UpdateDeletedTeammateTaskInput) Mutate(m *DeletedTeammateTaskMutation) {
	if v := i.TeammateTaskSectionID; v != nil {
		m.SetTeammateTaskSectionID(*v)
	}
	if v := i.TeammateTaskID; v != nil {
		m.SetTeammateTaskID(*v)
	}
	if v := i.TeammateTaskCreatedAt; v != nil {
		m.SetTeammateTaskCreatedAt(*v)
	}
	if v := i.TeammateTaskUpdatedAt; v != nil {
		m.SetTeammateTaskUpdatedAt(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeletedTeammateTaskInput on the update builder.
func (u *DeletedTeammateTaskUpdate) SetInput(i UpdateDeletedTeammateTaskInput) *DeletedTeammateTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDeletedTeammateTaskInput on the update-one builder.
func (u *DeletedTeammateTaskUpdateOne) SetInput(i UpdateDeletedTeammateTaskInput) *DeletedTeammateTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateFavoriteProjectInput represents a mutation input for creating favoriteprojects.
type CreateFavoriteProjectInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectID  ulid.ID
	TeammateID ulid.ID
	RequestID  string
}

// Mutate applies the CreateFavoriteProjectInput on the FavoriteProjectCreate builder.
func (i *CreateFavoriteProjectInput) Mutate(m *FavoriteProjectCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateFavoriteProjectInput on the create builder.
func (c *FavoriteProjectCreate) SetInput(i CreateFavoriteProjectInput) *FavoriteProjectCreate {
	i.Mutate(c)
	return c
}

// UpdateFavoriteProjectInput represents a mutation input for updating favoriteprojects.
type UpdateFavoriteProjectInput struct {
	ID            ulid.ID
	ProjectID     *ulid.ID
	ClearProject  bool
	TeammateID    *ulid.ID
	ClearTeammate bool
	RequestID     string
}

// Mutate applies the UpdateFavoriteProjectInput on the FavoriteProjectMutation.
func (i *UpdateFavoriteProjectInput) Mutate(m *FavoriteProjectMutation) {
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateFavoriteProjectInput on the update builder.
func (u *FavoriteProjectUpdate) SetInput(i UpdateFavoriteProjectInput) *FavoriteProjectUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateFavoriteProjectInput on the update-one builder.
func (u *FavoriteProjectUpdateOne) SetInput(i UpdateFavoriteProjectInput) *FavoriteProjectUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateFavoriteWorkspaceInput represents a mutation input for creating favoriteworkspaces.
type CreateFavoriteWorkspaceInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	WorkspaceID ulid.ID
	TeammateID  ulid.ID
	RequestID   string
}

// Mutate applies the CreateFavoriteWorkspaceInput on the FavoriteWorkspaceCreate builder.
func (i *CreateFavoriteWorkspaceInput) Mutate(m *FavoriteWorkspaceCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateFavoriteWorkspaceInput on the create builder.
func (c *FavoriteWorkspaceCreate) SetInput(i CreateFavoriteWorkspaceInput) *FavoriteWorkspaceCreate {
	i.Mutate(c)
	return c
}

// UpdateFavoriteWorkspaceInput represents a mutation input for updating favoriteworkspaces.
type UpdateFavoriteWorkspaceInput struct {
	ID             ulid.ID
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
	RequestID      string
}

// Mutate applies the UpdateFavoriteWorkspaceInput on the FavoriteWorkspaceMutation.
func (i *UpdateFavoriteWorkspaceInput) Mutate(m *FavoriteWorkspaceMutation) {
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateFavoriteWorkspaceInput on the update builder.
func (u *FavoriteWorkspaceUpdate) SetInput(i UpdateFavoriteWorkspaceInput) *FavoriteWorkspaceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateFavoriteWorkspaceInput on the update-one builder.
func (u *FavoriteWorkspaceUpdateOne) SetInput(i UpdateFavoriteWorkspaceInput) *FavoriteWorkspaceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateFileTypeInput represents a mutation input for creating filetypes.
type CreateFileTypeInput struct {
	Name        string
	TypeCode    filetype.TypeCode
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TaskFileIDs []ulid.ID
	RequestID   string
}

// Mutate applies the CreateFileTypeInput on the FileTypeCreate builder.
func (i *CreateFileTypeInput) Mutate(m *FileTypeCreate) {
	m.SetName(i.Name)
	m.SetTypeCode(i.TypeCode)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateFileTypeInput on the create builder.
func (c *FileTypeCreate) SetInput(i CreateFileTypeInput) *FileTypeCreate {
	i.Mutate(c)
	return c
}

// UpdateFileTypeInput represents a mutation input for updating filetypes.
type UpdateFileTypeInput struct {
	ID                ulid.ID
	Name              *string
	TypeCode          *filetype.TypeCode
	AddTaskFileIDs    []ulid.ID
	RemoveTaskFileIDs []ulid.ID
	RequestID         string
}

// Mutate applies the UpdateFileTypeInput on the FileTypeMutation.
func (i *UpdateFileTypeInput) Mutate(m *FileTypeMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.TypeCode; v != nil {
		m.SetTypeCode(*v)
	}
	if ids := i.AddTaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
	if ids := i.RemoveTaskFileIDs; len(ids) > 0 {
		m.RemoveTaskFileIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateFileTypeInput on the update builder.
func (u *FileTypeUpdate) SetInput(i UpdateFileTypeInput) *FileTypeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateFileTypeInput on the update-one builder.
func (u *FileTypeUpdateOne) SetInput(i UpdateFileTypeInput) *FileTypeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateIconInput represents a mutation input for creating icons.
type CreateIconInput struct {
	Name           string
	Icon           string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	ProjectIconIDs []ulid.ID
	RequestID      string
}

// Mutate applies the CreateIconInput on the IconCreate builder.
func (i *CreateIconInput) Mutate(m *IconCreate) {
	m.SetName(i.Name)
	m.SetIcon(i.Icon)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIconIDs; len(ids) > 0 {
		m.AddProjectIconIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateIconInput on the create builder.
func (c *IconCreate) SetInput(i CreateIconInput) *IconCreate {
	i.Mutate(c)
	return c
}

// UpdateIconInput represents a mutation input for updating icons.
type UpdateIconInput struct {
	ID                   ulid.ID
	Name                 *string
	Icon                 *string
	AddProjectIconIDs    []ulid.ID
	RemoveProjectIconIDs []ulid.ID
	RequestID            string
}

// Mutate applies the UpdateIconInput on the IconMutation.
func (i *UpdateIconInput) Mutate(m *IconMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if ids := i.AddProjectIconIDs; len(ids) > 0 {
		m.AddProjectIconIDs(ids...)
	}
	if ids := i.RemoveProjectIconIDs; len(ids) > 0 {
		m.RemoveProjectIconIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateIconInput on the update builder.
func (u *IconUpdate) SetInput(i UpdateIconInput) *IconUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateIconInput on the update-one builder.
func (u *IconUpdateOne) SetInput(i UpdateIconInput) *IconUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectInput represents a mutation input for creating projects.
type CreateProjectInput struct {
	Name                         string
	Description                  map[string]interface{}
	DescriptionTitle             string
	DueDate                      *time.Time
	CreatedAt                    *time.Time
	UpdatedAt                    *time.Time
	WorkspaceID                  ulid.ID
	ProjectBaseColorID           ulid.ID
	ProjectLightColorID          ulid.ID
	ProjectIconID                ulid.ID
	CreatedBy                    ulid.ID
	ProjectTeammateIDs           []ulid.ID
	FavoriteProjectIDs           []ulid.ID
	ProjectTaskColumnIDs         []ulid.ID
	ProjectTaskListStatuseIDs    []ulid.ID
	ProjectTaskSectionIDs        []ulid.ID
	ProjectTaskIDs               []ulid.ID
	TaskFileIDs                  []ulid.ID
	WorkspaceActivityIDs         []ulid.ID
	ArchivedWorkspaceActivityIDs []ulid.ID
	DeletedProjectTaskIDs        []ulid.ID
	RequestID                    string
}

// Mutate applies the CreateProjectInput on the ProjectCreate builder.
func (i *CreateProjectInput) Mutate(m *ProjectCreate) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetDescriptionTitle(i.DescriptionTitle)
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetProjectBaseColorID(i.ProjectBaseColorID)
	m.SetProjectLightColorID(i.ProjectLightColorID)
	m.SetProjectIconID(i.ProjectIconID)
	m.SetTeammateID(i.CreatedBy)
	if ids := i.ProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.FavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.ProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
	if ids := i.ProjectTaskListStatuseIDs; len(ids) > 0 {
		m.AddProjectTaskListStatuseIDs(ids...)
	}
	if ids := i.ProjectTaskSectionIDs; len(ids) > 0 {
		m.AddProjectTaskSectionIDs(ids...)
	}
	if ids := i.ProjectTaskIDs; len(ids) > 0 {
		m.AddProjectTaskIDs(ids...)
	}
	if ids := i.TaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
	if ids := i.WorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.ArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.DeletedProjectTaskIDs; len(ids) > 0 {
		m.AddDeletedProjectTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateProjectInput on the create builder.
func (c *ProjectCreate) SetInput(i CreateProjectInput) *ProjectCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectInput represents a mutation input for updating projects.
type UpdateProjectInput struct {
	ID                                 ulid.ID
	Name                               *string
	Description                        map[string]interface{}
	DescriptionTitle                   *string
	DueDate                            *time.Time
	ClearDueDate                       bool
	WorkspaceID                        *ulid.ID
	ClearWorkspace                     bool
	ProjectBaseColorID                 *ulid.ID
	ClearProjectBaseColor              bool
	ProjectLightColorID                *ulid.ID
	ClearProjectLightColor             bool
	ProjectIconID                      *ulid.ID
	ClearProjectIcon                   bool
	CreatedBy                          *ulid.ID
	ClearTeammate                      bool
	AddProjectTeammateIDs              []ulid.ID
	RemoveProjectTeammateIDs           []ulid.ID
	AddFavoriteProjectIDs              []ulid.ID
	RemoveFavoriteProjectIDs           []ulid.ID
	AddProjectTaskColumnIDs            []ulid.ID
	RemoveProjectTaskColumnIDs         []ulid.ID
	AddProjectTaskListStatuseIDs       []ulid.ID
	RemoveProjectTaskListStatuseIDs    []ulid.ID
	AddProjectTaskSectionIDs           []ulid.ID
	RemoveProjectTaskSectionIDs        []ulid.ID
	AddProjectTaskIDs                  []ulid.ID
	RemoveProjectTaskIDs               []ulid.ID
	AddTaskFileIDs                     []ulid.ID
	RemoveTaskFileIDs                  []ulid.ID
	AddWorkspaceActivityIDs            []ulid.ID
	RemoveWorkspaceActivityIDs         []ulid.ID
	AddArchivedWorkspaceActivityIDs    []ulid.ID
	RemoveArchivedWorkspaceActivityIDs []ulid.ID
	AddDeletedProjectTaskIDs           []ulid.ID
	RemoveDeletedProjectTaskIDs        []ulid.ID
	RequestID                          string
}

// Mutate applies the UpdateProjectInput on the ProjectMutation.
func (i *UpdateProjectInput) Mutate(m *ProjectMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(v)
	}
	if v := i.DescriptionTitle; v != nil {
		m.SetDescriptionTitle(*v)
	}
	if i.ClearDueDate {
		m.ClearDueDate()
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearProjectBaseColor {
		m.ClearProjectBaseColor()
	}
	if v := i.ProjectBaseColorID; v != nil {
		m.SetProjectBaseColorID(*v)
	}
	if i.ClearProjectLightColor {
		m.ClearProjectLightColor()
	}
	if v := i.ProjectLightColorID; v != nil {
		m.SetProjectLightColorID(*v)
	}
	if i.ClearProjectIcon {
		m.ClearProjectIcon()
	}
	if v := i.ProjectIconID; v != nil {
		m.SetProjectIconID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.CreatedBy; v != nil {
		m.SetTeammateID(*v)
	}
	if ids := i.AddProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.RemoveProjectTeammateIDs; len(ids) > 0 {
		m.RemoveProjectTeammateIDs(ids...)
	}
	if ids := i.AddFavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.RemoveFavoriteProjectIDs; len(ids) > 0 {
		m.RemoveFavoriteProjectIDs(ids...)
	}
	if ids := i.AddProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
	if ids := i.RemoveProjectTaskColumnIDs; len(ids) > 0 {
		m.RemoveProjectTaskColumnIDs(ids...)
	}
	if ids := i.AddProjectTaskListStatuseIDs; len(ids) > 0 {
		m.AddProjectTaskListStatuseIDs(ids...)
	}
	if ids := i.RemoveProjectTaskListStatuseIDs; len(ids) > 0 {
		m.RemoveProjectTaskListStatuseIDs(ids...)
	}
	if ids := i.AddProjectTaskSectionIDs; len(ids) > 0 {
		m.AddProjectTaskSectionIDs(ids...)
	}
	if ids := i.RemoveProjectTaskSectionIDs; len(ids) > 0 {
		m.RemoveProjectTaskSectionIDs(ids...)
	}
	if ids := i.AddProjectTaskIDs; len(ids) > 0 {
		m.AddProjectTaskIDs(ids...)
	}
	if ids := i.RemoveProjectTaskIDs; len(ids) > 0 {
		m.RemoveProjectTaskIDs(ids...)
	}
	if ids := i.AddTaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
	if ids := i.RemoveTaskFileIDs; len(ids) > 0 {
		m.RemoveTaskFileIDs(ids...)
	}
	if ids := i.AddWorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveWorkspaceActivityIDs(ids...)
	}
	if ids := i.AddArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.AddDeletedProjectTaskIDs; len(ids) > 0 {
		m.AddDeletedProjectTaskIDs(ids...)
	}
	if ids := i.RemoveDeletedProjectTaskIDs; len(ids) > 0 {
		m.RemoveDeletedProjectTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateProjectInput on the update builder.
func (u *ProjectUpdate) SetInput(i UpdateProjectInput) *ProjectUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectInput on the update-one builder.
func (u *ProjectUpdateOne) SetInput(i UpdateProjectInput) *ProjectUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectBaseColorInput represents a mutation input for creating projectbasecolors.
type CreateProjectBaseColorInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectIDs []ulid.ID
	ColorID    ulid.ID
	RequestID  string
}

// Mutate applies the CreateProjectBaseColorInput on the ProjectBaseColorCreate builder.
func (i *CreateProjectBaseColorInput) Mutate(m *ProjectBaseColorCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	m.SetColorID(i.ColorID)
}

// SetInput applies the change-set in the CreateProjectBaseColorInput on the create builder.
func (c *ProjectBaseColorCreate) SetInput(i CreateProjectBaseColorInput) *ProjectBaseColorCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectBaseColorInput represents a mutation input for updating projectbasecolors.
type UpdateProjectBaseColorInput struct {
	ID               ulid.ID
	AddProjectIDs    []ulid.ID
	RemoveProjectIDs []ulid.ID
	ColorID          *ulid.ID
	ClearColor       bool
	RequestID        string
}

// Mutate applies the UpdateProjectBaseColorInput on the ProjectBaseColorMutation.
func (i *UpdateProjectBaseColorInput) Mutate(m *ProjectBaseColorMutation) {
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if i.ClearColor {
		m.ClearColor()
	}
	if v := i.ColorID; v != nil {
		m.SetColorID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectBaseColorInput on the update builder.
func (u *ProjectBaseColorUpdate) SetInput(i UpdateProjectBaseColorInput) *ProjectBaseColorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectBaseColorInput on the update-one builder.
func (u *ProjectBaseColorUpdateOne) SetInput(i UpdateProjectBaseColorInput) *ProjectBaseColorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectIconInput represents a mutation input for creating projecticons.
type CreateProjectIconInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectIDs []ulid.ID
	IconID     ulid.ID
	RequestID  string
}

// Mutate applies the CreateProjectIconInput on the ProjectIconCreate builder.
func (i *CreateProjectIconInput) Mutate(m *ProjectIconCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	m.SetIconID(i.IconID)
}

// SetInput applies the change-set in the CreateProjectIconInput on the create builder.
func (c *ProjectIconCreate) SetInput(i CreateProjectIconInput) *ProjectIconCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectIconInput represents a mutation input for updating projecticons.
type UpdateProjectIconInput struct {
	ID               ulid.ID
	AddProjectIDs    []ulid.ID
	RemoveProjectIDs []ulid.ID
	IconID           *ulid.ID
	ClearIcon        bool
	RequestID        string
}

// Mutate applies the UpdateProjectIconInput on the ProjectIconMutation.
func (i *UpdateProjectIconInput) Mutate(m *ProjectIconMutation) {
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if i.ClearIcon {
		m.ClearIcon()
	}
	if v := i.IconID; v != nil {
		m.SetIconID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectIconInput on the update builder.
func (u *ProjectIconUpdate) SetInput(i UpdateProjectIconInput) *ProjectIconUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectIconInput on the update-one builder.
func (u *ProjectIconUpdateOne) SetInput(i UpdateProjectIconInput) *ProjectIconUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectLightColorInput represents a mutation input for creating projectlightcolors.
type CreateProjectLightColorInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectIDs []ulid.ID
	ColorID    ulid.ID
	RequestID  string
}

// Mutate applies the CreateProjectLightColorInput on the ProjectLightColorCreate builder.
func (i *CreateProjectLightColorInput) Mutate(m *ProjectLightColorCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	m.SetColorID(i.ColorID)
}

// SetInput applies the change-set in the CreateProjectLightColorInput on the create builder.
func (c *ProjectLightColorCreate) SetInput(i CreateProjectLightColorInput) *ProjectLightColorCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectLightColorInput represents a mutation input for updating projectlightcolors.
type UpdateProjectLightColorInput struct {
	ID               ulid.ID
	AddProjectIDs    []ulid.ID
	RemoveProjectIDs []ulid.ID
	ColorID          *ulid.ID
	ClearColor       bool
	RequestID        string
}

// Mutate applies the UpdateProjectLightColorInput on the ProjectLightColorMutation.
func (i *UpdateProjectLightColorInput) Mutate(m *ProjectLightColorMutation) {
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if i.ClearColor {
		m.ClearColor()
	}
	if v := i.ColorID; v != nil {
		m.SetColorID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectLightColorInput on the update builder.
func (u *ProjectLightColorUpdate) SetInput(i UpdateProjectLightColorInput) *ProjectLightColorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectLightColorInput on the update-one builder.
func (u *ProjectLightColorUpdateOne) SetInput(i UpdateProjectLightColorInput) *ProjectLightColorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTaskInput represents a mutation input for creating projecttasks.
type CreateProjectTaskInput struct {
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	ProjectID            ulid.ID
	TaskID               ulid.ID
	ProjectTaskSectionID ulid.ID
	CreatedBy            ulid.ID
	WorkspaceID          ulid.ID
	TaskParentID         *ulid.ID
	RequestID            string
}

// Mutate applies the CreateProjectTaskInput on the ProjectTaskCreate builder.
func (i *CreateProjectTaskInput) Mutate(m *ProjectTaskCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTaskID(i.TaskID)
	m.SetProjectTaskSectionID(i.ProjectTaskSectionID)
}

// SetInput applies the change-set in the CreateProjectTaskInput on the create builder.
func (c *ProjectTaskCreate) SetInput(i CreateProjectTaskInput) *ProjectTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTaskInput represents a mutation input for updating projecttasks.
type UpdateProjectTaskInput struct {
	ID                      ulid.ID
	ProjectID               *ulid.ID
	ClearProject            bool
	TaskID                  *ulid.ID
	ClearTask               bool
	ProjectTaskSectionID    *ulid.ID
	ClearProjectTaskSection bool
	WorkspaceID             ulid.ID
	RequestID               string
}

// Mutate applies the UpdateProjectTaskInput on the ProjectTaskMutation.
func (i *UpdateProjectTaskInput) Mutate(m *ProjectTaskMutation) {
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearProjectTaskSection {
		m.ClearProjectTaskSection()
	}
	if v := i.ProjectTaskSectionID; v != nil {
		m.SetProjectTaskSectionID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskInput on the update builder.
func (u *ProjectTaskUpdate) SetInput(i UpdateProjectTaskInput) *ProjectTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTaskInput on the update-one builder.
func (u *ProjectTaskUpdateOne) SetInput(i UpdateProjectTaskInput) *ProjectTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTaskColumnInput represents a mutation input for creating projecttaskcolumns.
type CreateProjectTaskColumnInput struct {
	Width        string
	Disabled     bool
	Customizable bool
	Order        int
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	ProjectID    ulid.ID
	TaskColumnID ulid.ID
	RequestID    string
}

// Mutate applies the CreateProjectTaskColumnInput on the ProjectTaskColumnCreate builder.
func (i *CreateProjectTaskColumnInput) Mutate(m *ProjectTaskColumnCreate) {
	m.SetWidth(i.Width)
	m.SetDisabled(i.Disabled)
	m.SetCustomizable(i.Customizable)
	m.SetOrder(i.Order)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTaskColumnID(i.TaskColumnID)
}

// SetInput applies the change-set in the CreateProjectTaskColumnInput on the create builder.
func (c *ProjectTaskColumnCreate) SetInput(i CreateProjectTaskColumnInput) *ProjectTaskColumnCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTaskColumnInput represents a mutation input for updating projecttaskcolumns.
type UpdateProjectTaskColumnInput struct {
	ID              ulid.ID
	Width           *string
	Disabled        *bool
	Customizable    *bool
	Order           *int
	ProjectID       *ulid.ID
	ClearProject    bool
	TaskColumnID    *ulid.ID
	ClearTaskColumn bool
	RequestID       string
}

// Mutate applies the UpdateProjectTaskColumnInput on the ProjectTaskColumnMutation.
func (i *UpdateProjectTaskColumnInput) Mutate(m *ProjectTaskColumnMutation) {
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.Customizable; v != nil {
		m.SetCustomizable(*v)
	}
	if v := i.Order; v != nil {
		m.SetOrder(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTaskColumn {
		m.ClearTaskColumn()
	}
	if v := i.TaskColumnID; v != nil {
		m.SetTaskColumnID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskColumnInput on the update builder.
func (u *ProjectTaskColumnUpdate) SetInput(i UpdateProjectTaskColumnInput) *ProjectTaskColumnUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTaskColumnInput on the update-one builder.
func (u *ProjectTaskColumnUpdateOne) SetInput(i UpdateProjectTaskColumnInput) *ProjectTaskColumnUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTaskListStatusInput represents a mutation input for creating projecttaskliststatusslice.
type CreateProjectTaskListStatusInput struct {
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	ProjectID                 ulid.ID
	TaskListCompletedStatusID ulid.ID
	TaskListSortStatusID      ulid.ID
	RequestID                 string
}

// Mutate applies the CreateProjectTaskListStatusInput on the ProjectTaskListStatusCreate builder.
func (i *CreateProjectTaskListStatusInput) Mutate(m *ProjectTaskListStatusCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTaskListCompletedStatusID(i.TaskListCompletedStatusID)
	m.SetTaskListSortStatusID(i.TaskListSortStatusID)
}

// SetInput applies the change-set in the CreateProjectTaskListStatusInput on the create builder.
func (c *ProjectTaskListStatusCreate) SetInput(i CreateProjectTaskListStatusInput) *ProjectTaskListStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTaskListStatusInput represents a mutation input for updating projecttaskliststatusslice.
type UpdateProjectTaskListStatusInput struct {
	ID                           ulid.ID
	ProjectID                    *ulid.ID
	ClearProject                 bool
	TaskListCompletedStatusID    *ulid.ID
	ClearTaskListCompletedStatus bool
	TaskListSortStatusID         *ulid.ID
	ClearTaskListSortStatus      bool
	RequestID                    string
}

// Mutate applies the UpdateProjectTaskListStatusInput on the ProjectTaskListStatusMutation.
func (i *UpdateProjectTaskListStatusInput) Mutate(m *ProjectTaskListStatusMutation) {
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTaskListCompletedStatus {
		m.ClearTaskListCompletedStatus()
	}
	if v := i.TaskListCompletedStatusID; v != nil {
		m.SetTaskListCompletedStatusID(*v)
	}
	if i.ClearTaskListSortStatus {
		m.ClearTaskListSortStatus()
	}
	if v := i.TaskListSortStatusID; v != nil {
		m.SetTaskListSortStatusID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskListStatusInput on the update builder.
func (u *ProjectTaskListStatusUpdate) SetInput(i UpdateProjectTaskListStatusInput) *ProjectTaskListStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTaskListStatusInput on the update-one builder.
func (u *ProjectTaskListStatusUpdateOne) SetInput(i UpdateProjectTaskListStatusInput) *ProjectTaskListStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTaskSectionInput represents a mutation input for creating projecttasksections.
type CreateProjectTaskSectionInput struct {
	Name           string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	ProjectID      ulid.ID
	ProjectTaskIDs []ulid.ID
	WorkspaceID    ulid.ID
	RequestID      string
}

// Mutate applies the CreateProjectTaskSectionInput on the ProjectTaskSectionCreate builder.
func (i *CreateProjectTaskSectionInput) Mutate(m *ProjectTaskSectionCreate) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	if ids := i.ProjectTaskIDs; len(ids) > 0 {
		m.AddProjectTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateProjectTaskSectionInput on the create builder.
func (c *ProjectTaskSectionCreate) SetInput(i CreateProjectTaskSectionInput) *ProjectTaskSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTaskSectionInput represents a mutation input for updating projecttasksections.
type UpdateProjectTaskSectionInput struct {
	ID                   ulid.ID
	Name                 *string
	ProjectID            *ulid.ID
	ClearProject         bool
	AddProjectTaskIDs    []ulid.ID
	RemoveProjectTaskIDs []ulid.ID
	WorkspaceID          ulid.ID
	RequestID            string
}

// Mutate applies the UpdateProjectTaskSectionInput on the ProjectTaskSectionMutation.
func (i *UpdateProjectTaskSectionInput) Mutate(m *ProjectTaskSectionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if ids := i.AddProjectTaskIDs; len(ids) > 0 {
		m.AddProjectTaskIDs(ids...)
	}
	if ids := i.RemoveProjectTaskIDs; len(ids) > 0 {
		m.RemoveProjectTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateProjectTaskSectionInput on the update builder.
func (u *ProjectTaskSectionUpdate) SetInput(i UpdateProjectTaskSectionInput) *ProjectTaskSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTaskSectionInput on the update-one builder.
func (u *ProjectTaskSectionUpdateOne) SetInput(i UpdateProjectTaskSectionInput) *ProjectTaskSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateProjectTeammateInput represents a mutation input for creating projectteammates.
type CreateProjectTeammateInput struct {
	Role        string
	IsOwner     bool
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	ProjectID   ulid.ID
	TeammateID  ulid.ID
	WorkspaceID ulid.ID
	RequestID   string
}

// Mutate applies the CreateProjectTeammateInput on the ProjectTeammateCreate builder.
func (i *CreateProjectTeammateInput) Mutate(m *ProjectTeammateCreate) {
	m.SetRole(i.Role)
	m.SetIsOwner(i.IsOwner)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateProjectTeammateInput on the create builder.
func (c *ProjectTeammateCreate) SetInput(i CreateProjectTeammateInput) *ProjectTeammateCreate {
	i.Mutate(c)
	return c
}

// UpdateProjectTeammateInput represents a mutation input for updating projectteammates.
type UpdateProjectTeammateInput struct {
	ID            ulid.ID
	Role          *string
	IsOwner       *bool
	ProjectID     *ulid.ID
	ClearProject  bool
	TeammateID    *ulid.ID
	ClearTeammate bool
	WorkspaceID   ulid.ID
	RequestID     string
}

// Mutate applies the UpdateProjectTeammateInput on the ProjectTeammateMutation.
func (i *UpdateProjectTeammateInput) Mutate(m *ProjectTeammateMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.IsOwner; v != nil {
		m.SetIsOwner(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateProjectTeammateInput on the update builder.
func (u *ProjectTeammateUpdate) SetInput(i UpdateProjectTeammateInput) *ProjectTeammateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateProjectTeammateInput on the update-one builder.
func (u *ProjectTeammateUpdateOne) SetInput(i UpdateProjectTeammateInput) *ProjectTeammateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTagInput represents a mutation input for creating tags.
type CreateTagInput struct {
	Name        string
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	WorkspaceID ulid.ID
	ColorID     ulid.ID
	TaskTagIDs  []ulid.ID
	RequestID   string
}

// Mutate applies the CreateTagInput on the TagCreate builder.
func (i *CreateTagInput) Mutate(m *TagCreate) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetColorID(i.ColorID)
	if ids := i.TaskTagIDs; len(ids) > 0 {
		m.AddTaskTagIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTagInput on the create builder.
func (c *TagCreate) SetInput(i CreateTagInput) *TagCreate {
	i.Mutate(c)
	return c
}

// UpdateTagInput represents a mutation input for updating tags.
type UpdateTagInput struct {
	ID               ulid.ID
	Name             *string
	WorkspaceID      *ulid.ID
	ClearWorkspace   bool
	ColorID          *ulid.ID
	ClearColor       bool
	AddTaskTagIDs    []ulid.ID
	RemoveTaskTagIDs []ulid.ID
	RequestID        string
}

// Mutate applies the UpdateTagInput on the TagMutation.
func (i *UpdateTagInput) Mutate(m *TagMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearColor {
		m.ClearColor()
	}
	if v := i.ColorID; v != nil {
		m.SetColorID(*v)
	}
	if ids := i.AddTaskTagIDs; len(ids) > 0 {
		m.AddTaskTagIDs(ids...)
	}
	if ids := i.RemoveTaskTagIDs; len(ids) > 0 {
		m.RemoveTaskTagIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTagInput on the update builder.
func (u *TagUpdate) SetInput(i UpdateTagInput) *TagUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTagInput on the update-one builder.
func (u *TagUpdateOne) SetInput(i UpdateTagInput) *TagUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskInput represents a mutation input for creating tasks.
type CreateTaskInput struct {
	CreatedBy                        ulid.ID
	Completed                        *bool
	CompletedAt                      *time.Time
	IsNew                            *bool
	Name                             string
	DueDate                          *time.Time
	DueTime                          *time.Time
	Description                      map[string]interface{}
	CreatedAt                        *time.Time
	UpdatedAt                        *time.Time
	AssigneeID                       *ulid.ID
	TaskPriorityID                   *ulid.ID
	SubTaskIDs                       []ulid.ID
	TaskParentID                     *ulid.ID
	TeammateTaskIDs                  []ulid.ID
	ProjectTaskIDs                   []ulid.ID
	TaskLikeIDs                      []ulid.ID
	TaskTagIDs                       []ulid.ID
	TaskCollaboratorIDs              []ulid.ID
	TaskFeedIDs                      []ulid.ID
	TaskFeedLikeIDs                  []ulid.ID
	TaskFileIDs                      []ulid.ID
	DeletedTasksRefIDs               []ulid.ID
	TaskActivityTaskIDs              []ulid.ID
	WorkspaceActivityTaskIDs         []ulid.ID
	ArchivedTaskActivityTaskIDs      []ulid.ID
	ArchivedWorkspaceActivityTaskIDs []ulid.ID
	DeletedTeammateTaskIDs           []ulid.ID
	DeletedProjectTaskIDs            []ulid.ID
	WorkspaceID                      ulid.ID
	RequestID                        string
}

// Mutate applies the CreateTaskInput on the TaskCreate builder.
func (i *CreateTaskInput) Mutate(m *TaskCreate) {
	m.SetCreatedBy(i.CreatedBy)
	if v := i.Completed; v != nil {
		m.SetCompleted(*v)
	}
	if v := i.CompletedAt; v != nil {
		m.SetCompletedAt(*v)
	}
	if v := i.IsNew; v != nil {
		m.SetIsNew(*v)
	}
	m.SetName(i.Name)
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.DueTime; v != nil {
		m.SetDueTime(*v)
	}
	m.SetDescription(i.Description)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AssigneeID; v != nil {
		m.SetTeammateID(*v)
	}
	if v := i.TaskPriorityID; v != nil {
		m.SetTaskPriorityID(*v)
	}
	if ids := i.SubTaskIDs; len(ids) > 0 {
		m.AddSubTaskIDs(ids...)
	}
	if v := i.TaskParentID; v != nil {
		m.SetParentTaskID(*v)
	}
	if ids := i.TeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
	if ids := i.ProjectTaskIDs; len(ids) > 0 {
		m.AddProjectTaskIDs(ids...)
	}
	if ids := i.TaskLikeIDs; len(ids) > 0 {
		m.AddTaskLikeIDs(ids...)
	}
	if ids := i.TaskTagIDs; len(ids) > 0 {
		m.AddTaskTagIDs(ids...)
	}
	if ids := i.TaskCollaboratorIDs; len(ids) > 0 {
		m.AddTaskCollaboratorIDs(ids...)
	}
	if ids := i.TaskFeedIDs; len(ids) > 0 {
		m.AddTaskFeedIDs(ids...)
	}
	if ids := i.TaskFeedLikeIDs; len(ids) > 0 {
		m.AddTaskFeedLikeIDs(ids...)
	}
	if ids := i.TaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
	if ids := i.DeletedTasksRefIDs; len(ids) > 0 {
		m.AddDeletedTasksRefIDs(ids...)
	}
	if ids := i.TaskActivityTaskIDs; len(ids) > 0 {
		m.AddTaskActivityTaskIDs(ids...)
	}
	if ids := i.WorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.ArchivedTaskActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityTaskIDs(ids...)
	}
	if ids := i.ArchivedWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.DeletedTeammateTaskIDs; len(ids) > 0 {
		m.AddDeletedTeammateTaskIDs(ids...)
	}
	if ids := i.DeletedProjectTaskIDs; len(ids) > 0 {
		m.AddDeletedProjectTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskInput on the create builder.
func (c *TaskCreate) SetInput(i CreateTaskInput) *TaskCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskInput represents a mutation input for updating tasks.
type UpdateTaskInput struct {
	ID                                     ulid.ID
	CreatedBy                              *ulid.ID
	Completed                              *bool
	CompletedAt                            *time.Time
	ClearCompletedAt                       bool
	IsNew                                  *bool
	Name                                   *string
	DueDate                                *time.Time
	ClearDueDate                           bool
	DueTime                                *time.Time
	ClearDueTime                           bool
	Description                            map[string]interface{}
	AssigneeID                             *ulid.ID
	ClearTeammate                          bool
	TaskPriorityID                         *ulid.ID
	ClearTaskPriority                      bool
	AddSubTaskIDs                          []ulid.ID
	RemoveSubTaskIDs                       []ulid.ID
	TaskParentID                           *ulid.ID
	ClearParentTask                        bool
	AddTeammateTaskIDs                     []ulid.ID
	RemoveTeammateTaskIDs                  []ulid.ID
	AddProjectTaskIDs                      []ulid.ID
	RemoveProjectTaskIDs                   []ulid.ID
	AddTaskLikeIDs                         []ulid.ID
	RemoveTaskLikeIDs                      []ulid.ID
	AddTaskTagIDs                          []ulid.ID
	RemoveTaskTagIDs                       []ulid.ID
	AddTaskCollaboratorIDs                 []ulid.ID
	RemoveTaskCollaboratorIDs              []ulid.ID
	AddTaskFeedIDs                         []ulid.ID
	RemoveTaskFeedIDs                      []ulid.ID
	AddTaskFeedLikeIDs                     []ulid.ID
	RemoveTaskFeedLikeIDs                  []ulid.ID
	AddTaskFileIDs                         []ulid.ID
	RemoveTaskFileIDs                      []ulid.ID
	AddDeletedTasksRefIDs                  []ulid.ID
	RemoveDeletedTasksRefIDs               []ulid.ID
	AddTaskActivityTaskIDs                 []ulid.ID
	RemoveTaskActivityTaskIDs              []ulid.ID
	AddWorkspaceActivityTaskIDs            []ulid.ID
	RemoveWorkspaceActivityTaskIDs         []ulid.ID
	AddArchivedTaskActivityTaskIDs         []ulid.ID
	RemoveArchivedTaskActivityTaskIDs      []ulid.ID
	AddArchivedWorkspaceActivityTaskIDs    []ulid.ID
	RemoveArchivedWorkspaceActivityTaskIDs []ulid.ID
	AddDeletedTeammateTaskIDs              []ulid.ID
	RemoveDeletedTeammateTaskIDs           []ulid.ID
	AddDeletedProjectTaskIDs               []ulid.ID
	RemoveDeletedProjectTaskIDs            []ulid.ID
	WorkspaceID                            ulid.ID
	RequestID                              string
}

// Mutate applies the UpdateTaskInput on the TaskMutation.
func (i *UpdateTaskInput) Mutate(m *TaskMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.Completed; v != nil {
		m.SetCompleted(*v)
	}
	if i.ClearCompletedAt {
		m.ClearCompletedAt()
	}
	if v := i.CompletedAt; v != nil {
		m.SetCompletedAt(*v)
	}
	if v := i.IsNew; v != nil {
		m.SetIsNew(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDueDate {
		m.ClearDueDate()
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearDueTime {
		m.ClearDueTime()
	}
	if v := i.DueTime; v != nil {
		m.SetDueTime(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.AssigneeID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearTaskPriority {
		m.ClearTaskPriority()
	}
	if v := i.TaskPriorityID; v != nil {
		m.SetTaskPriorityID(*v)
	}
	if ids := i.AddSubTaskIDs; len(ids) > 0 {
		m.AddSubTaskIDs(ids...)
	}
	if ids := i.RemoveSubTaskIDs; len(ids) > 0 {
		m.RemoveSubTaskIDs(ids...)
	}
	if i.ClearParentTask {
		m.ClearParentTask()
	}
	if v := i.TaskParentID; v != nil {
		m.SetParentTaskID(*v)
	}
	if ids := i.AddTeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskIDs; len(ids) > 0 {
		m.RemoveTeammateTaskIDs(ids...)
	}
	if ids := i.AddProjectTaskIDs; len(ids) > 0 {
		m.AddProjectTaskIDs(ids...)
	}
	if ids := i.RemoveProjectTaskIDs; len(ids) > 0 {
		m.RemoveProjectTaskIDs(ids...)
	}
	if ids := i.AddTaskLikeIDs; len(ids) > 0 {
		m.AddTaskLikeIDs(ids...)
	}
	if ids := i.RemoveTaskLikeIDs; len(ids) > 0 {
		m.RemoveTaskLikeIDs(ids...)
	}
	if ids := i.AddTaskTagIDs; len(ids) > 0 {
		m.AddTaskTagIDs(ids...)
	}
	if ids := i.RemoveTaskTagIDs; len(ids) > 0 {
		m.RemoveTaskTagIDs(ids...)
	}
	if ids := i.AddTaskCollaboratorIDs; len(ids) > 0 {
		m.AddTaskCollaboratorIDs(ids...)
	}
	if ids := i.RemoveTaskCollaboratorIDs; len(ids) > 0 {
		m.RemoveTaskCollaboratorIDs(ids...)
	}
	if ids := i.AddTaskFeedIDs; len(ids) > 0 {
		m.AddTaskFeedIDs(ids...)
	}
	if ids := i.RemoveTaskFeedIDs; len(ids) > 0 {
		m.RemoveTaskFeedIDs(ids...)
	}
	if ids := i.AddTaskFeedLikeIDs; len(ids) > 0 {
		m.AddTaskFeedLikeIDs(ids...)
	}
	if ids := i.RemoveTaskFeedLikeIDs; len(ids) > 0 {
		m.RemoveTaskFeedLikeIDs(ids...)
	}
	if ids := i.AddTaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
	if ids := i.RemoveTaskFileIDs; len(ids) > 0 {
		m.RemoveTaskFileIDs(ids...)
	}
	if ids := i.AddDeletedTasksRefIDs; len(ids) > 0 {
		m.AddDeletedTasksRefIDs(ids...)
	}
	if ids := i.RemoveDeletedTasksRefIDs; len(ids) > 0 {
		m.RemoveDeletedTasksRefIDs(ids...)
	}
	if ids := i.AddTaskActivityTaskIDs; len(ids) > 0 {
		m.AddTaskActivityTaskIDs(ids...)
	}
	if ids := i.RemoveTaskActivityTaskIDs; len(ids) > 0 {
		m.RemoveTaskActivityTaskIDs(ids...)
	}
	if ids := i.AddWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.RemoveWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.RemoveWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.AddArchivedTaskActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityTaskIDs(ids...)
	}
	if ids := i.RemoveArchivedTaskActivityTaskIDs; len(ids) > 0 {
		m.RemoveArchivedTaskActivityTaskIDs(ids...)
	}
	if ids := i.AddArchivedWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.RemoveArchivedWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.RemoveArchivedWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.AddDeletedTeammateTaskIDs; len(ids) > 0 {
		m.AddDeletedTeammateTaskIDs(ids...)
	}
	if ids := i.RemoveDeletedTeammateTaskIDs; len(ids) > 0 {
		m.RemoveDeletedTeammateTaskIDs(ids...)
	}
	if ids := i.AddDeletedProjectTaskIDs; len(ids) > 0 {
		m.AddDeletedProjectTaskIDs(ids...)
	}
	if ids := i.RemoveDeletedProjectTaskIDs; len(ids) > 0 {
		m.RemoveDeletedProjectTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskInput on the update builder.
func (u *TaskUpdate) SetInput(i UpdateTaskInput) *TaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskInput on the update-one builder.
func (u *TaskUpdateOne) SetInput(i UpdateTaskInput) *TaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskActivityInput represents a mutation input for creating taskactivities.
type CreateTaskActivityInput struct {
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	TeammateID          ulid.ID
	ActivityTypeID      ulid.ID
	WorkspaceID         ulid.ID
	TaskActivityTaskIDs []ulid.ID
	RequestID           string
}

// Mutate applies the CreateTaskActivityInput on the TaskActivityCreate builder.
func (i *CreateTaskActivityInput) Mutate(m *TaskActivityCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetActivityTypeID(i.ActivityTypeID)
	m.SetWorkspaceID(i.WorkspaceID)
	if ids := i.TaskActivityTaskIDs; len(ids) > 0 {
		m.AddTaskActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskActivityInput on the create builder.
func (c *TaskActivityCreate) SetInput(i CreateTaskActivityInput) *TaskActivityCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskActivityInput represents a mutation input for updating taskactivities.
type UpdateTaskActivityInput struct {
	ID                        ulid.ID
	TeammateID                *ulid.ID
	ClearTeammate             bool
	ActivityTypeID            *ulid.ID
	ClearActivityType         bool
	WorkspaceID               *ulid.ID
	ClearWorkspace            bool
	AddTaskActivityTaskIDs    []ulid.ID
	RemoveTaskActivityTaskIDs []ulid.ID
	RequestID                 string
}

// Mutate applies the UpdateTaskActivityInput on the TaskActivityMutation.
func (i *UpdateTaskActivityInput) Mutate(m *TaskActivityMutation) {
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearActivityType {
		m.ClearActivityType()
	}
	if v := i.ActivityTypeID; v != nil {
		m.SetActivityTypeID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if ids := i.AddTaskActivityTaskIDs; len(ids) > 0 {
		m.AddTaskActivityTaskIDs(ids...)
	}
	if ids := i.RemoveTaskActivityTaskIDs; len(ids) > 0 {
		m.RemoveTaskActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskActivityInput on the update builder.
func (u *TaskActivityUpdate) SetInput(i UpdateTaskActivityInput) *TaskActivityUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskActivityInput on the update-one builder.
func (u *TaskActivityUpdateOne) SetInput(i UpdateTaskActivityInput) *TaskActivityUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskActivityTaskInput represents a mutation input for creating taskactivitytasks.
type CreateTaskActivityTaskInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	TaskID         ulid.ID
	TaskActivityID ulid.ID
	RequestID      string
}

// Mutate applies the CreateTaskActivityTaskInput on the TaskActivityTaskCreate builder.
func (i *CreateTaskActivityTaskInput) Mutate(m *TaskActivityTaskCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetTaskActivityID(i.TaskActivityID)
}

// SetInput applies the change-set in the CreateTaskActivityTaskInput on the create builder.
func (c *TaskActivityTaskCreate) SetInput(i CreateTaskActivityTaskInput) *TaskActivityTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskActivityTaskInput represents a mutation input for updating taskactivitytasks.
type UpdateTaskActivityTaskInput struct {
	ID                ulid.ID
	TaskID            *ulid.ID
	ClearTask         bool
	TaskActivityID    *ulid.ID
	ClearTaskActivity bool
	RequestID         string
}

// Mutate applies the UpdateTaskActivityTaskInput on the TaskActivityTaskMutation.
func (i *UpdateTaskActivityTaskInput) Mutate(m *TaskActivityTaskMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTaskActivity {
		m.ClearTaskActivity()
	}
	if v := i.TaskActivityID; v != nil {
		m.SetTaskActivityID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskActivityTaskInput on the update builder.
func (u *TaskActivityTaskUpdate) SetInput(i UpdateTaskActivityTaskInput) *TaskActivityTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskActivityTaskInput on the update-one builder.
func (u *TaskActivityTaskUpdateOne) SetInput(i UpdateTaskActivityTaskInput) *TaskActivityTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskCollaboratorInput represents a mutation input for creating taskcollaborators.
type CreateTaskCollaboratorInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TaskID      ulid.ID
	TeammateID  ulid.ID
	WorkspaceID ulid.ID
	RequestID   string
}

// Mutate applies the CreateTaskCollaboratorInput on the TaskCollaboratorCreate builder.
func (i *CreateTaskCollaboratorInput) Mutate(m *TaskCollaboratorCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateTaskCollaboratorInput on the create builder.
func (c *TaskCollaboratorCreate) SetInput(i CreateTaskCollaboratorInput) *TaskCollaboratorCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskCollaboratorInput represents a mutation input for updating taskcollaborators.
type UpdateTaskCollaboratorInput struct {
	ID            ulid.ID
	TaskID        *ulid.ID
	ClearTask     bool
	TeammateID    *ulid.ID
	ClearTeammate bool
	WorkspaceID   ulid.ID
	RequestID     string
}

// Mutate applies the UpdateTaskCollaboratorInput on the TaskCollaboratorMutation.
func (i *UpdateTaskCollaboratorInput) Mutate(m *TaskCollaboratorMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskCollaboratorInput on the update builder.
func (u *TaskCollaboratorUpdate) SetInput(i UpdateTaskCollaboratorInput) *TaskCollaboratorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskCollaboratorInput on the update-one builder.
func (u *TaskCollaboratorUpdateOne) SetInput(i UpdateTaskCollaboratorInput) *TaskCollaboratorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskColumnInput represents a mutation input for creating taskcolumns.
type CreateTaskColumnInput struct {
	Name                  string
	Type                  taskcolumn.Type
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	TeammateTaskColumnIDs []ulid.ID
	ProjectTaskColumnIDs  []ulid.ID
	RequestID             string
}

// Mutate applies the CreateTaskColumnInput on the TaskColumnCreate builder.
func (i *CreateTaskColumnInput) Mutate(m *TaskColumnCreate) {
	m.SetName(i.Name)
	m.SetType(i.Type)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.ProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskColumnInput on the create builder.
func (c *TaskColumnCreate) SetInput(i CreateTaskColumnInput) *TaskColumnCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskColumnInput represents a mutation input for updating taskcolumns.
type UpdateTaskColumnInput struct {
	ID                          ulid.ID
	Name                        *string
	Type                        *taskcolumn.Type
	AddTeammateTaskColumnIDs    []ulid.ID
	RemoveTeammateTaskColumnIDs []ulid.ID
	AddProjectTaskColumnIDs     []ulid.ID
	RemoveProjectTaskColumnIDs  []ulid.ID
	RequestID                   string
}

// Mutate applies the UpdateTaskColumnInput on the TaskColumnMutation.
func (i *UpdateTaskColumnInput) Mutate(m *TaskColumnMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if ids := i.AddTeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskColumnIDs; len(ids) > 0 {
		m.RemoveTeammateTaskColumnIDs(ids...)
	}
	if ids := i.AddProjectTaskColumnIDs; len(ids) > 0 {
		m.AddProjectTaskColumnIDs(ids...)
	}
	if ids := i.RemoveProjectTaskColumnIDs; len(ids) > 0 {
		m.RemoveProjectTaskColumnIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskColumnInput on the update builder.
func (u *TaskColumnUpdate) SetInput(i UpdateTaskColumnInput) *TaskColumnUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskColumnInput on the update-one builder.
func (u *TaskColumnUpdateOne) SetInput(i UpdateTaskColumnInput) *TaskColumnUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskFeedInput represents a mutation input for creating taskfeeds.
type CreateTaskFeedInput struct {
	Description     map[string]interface{}
	IsFirst         *bool
	IsPinned        *bool
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	TaskID          ulid.ID
	TeammateID      ulid.ID
	TaskFeedLikeIDs []ulid.ID
	TaskFileIDs     []ulid.ID
	WorkspaceID     ulid.ID
	RequestID       string
}

// Mutate applies the CreateTaskFeedInput on the TaskFeedCreate builder.
func (i *CreateTaskFeedInput) Mutate(m *TaskFeedCreate) {
	m.SetDescription(i.Description)
	if v := i.IsFirst; v != nil {
		m.SetIsFirst(*v)
	}
	if v := i.IsPinned; v != nil {
		m.SetIsPinned(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetTeammateID(i.TeammateID)
	if ids := i.TaskFeedLikeIDs; len(ids) > 0 {
		m.AddTaskFeedLikeIDs(ids...)
	}
	if ids := i.TaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskFeedInput on the create builder.
func (c *TaskFeedCreate) SetInput(i CreateTaskFeedInput) *TaskFeedCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskFeedInput represents a mutation input for updating taskfeeds.
type UpdateTaskFeedInput struct {
	ID                    ulid.ID
	Description           map[string]interface{}
	IsFirst               *bool
	IsPinned              *bool
	TaskID                *ulid.ID
	ClearTask             bool
	TeammateID            *ulid.ID
	ClearTeammate         bool
	AddTaskFeedLikeIDs    []ulid.ID
	RemoveTaskFeedLikeIDs []ulid.ID
	AddTaskFileIDs        []ulid.ID
	RemoveTaskFileIDs     []ulid.ID
	WorkspaceID           ulid.ID
	RequestID             string
}

// Mutate applies the UpdateTaskFeedInput on the TaskFeedMutation.
func (i *UpdateTaskFeedInput) Mutate(m *TaskFeedMutation) {
	if v := i.Description; v != nil {
		m.SetDescription(v)
	}
	if v := i.IsFirst; v != nil {
		m.SetIsFirst(*v)
	}
	if v := i.IsPinned; v != nil {
		m.SetIsPinned(*v)
	}
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if ids := i.AddTaskFeedLikeIDs; len(ids) > 0 {
		m.AddTaskFeedLikeIDs(ids...)
	}
	if ids := i.RemoveTaskFeedLikeIDs; len(ids) > 0 {
		m.RemoveTaskFeedLikeIDs(ids...)
	}
	if ids := i.AddTaskFileIDs; len(ids) > 0 {
		m.AddTaskFileIDs(ids...)
	}
	if ids := i.RemoveTaskFileIDs; len(ids) > 0 {
		m.RemoveTaskFileIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskFeedInput on the update builder.
func (u *TaskFeedUpdate) SetInput(i UpdateTaskFeedInput) *TaskFeedUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskFeedInput on the update-one builder.
func (u *TaskFeedUpdateOne) SetInput(i UpdateTaskFeedInput) *TaskFeedUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskFeedLikeInput represents a mutation input for creating taskfeedlikes.
type CreateTaskFeedLikeInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TaskID      ulid.ID
	TeammateID  ulid.ID
	TaskFeedID  ulid.ID
	WorkspaceID ulid.ID
	RequestID   string
}

// Mutate applies the CreateTaskFeedLikeInput on the TaskFeedLikeCreate builder.
func (i *CreateTaskFeedLikeInput) Mutate(m *TaskFeedLikeCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetTeammateID(i.TeammateID)
	m.SetFeedID(i.TaskFeedID)
}

// SetInput applies the change-set in the CreateTaskFeedLikeInput on the create builder.
func (c *TaskFeedLikeCreate) SetInput(i CreateTaskFeedLikeInput) *TaskFeedLikeCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskFeedLikeInput represents a mutation input for updating taskfeedlikes.
type UpdateTaskFeedLikeInput struct {
	ID            ulid.ID
	TaskID        *ulid.ID
	ClearTask     bool
	TeammateID    *ulid.ID
	ClearTeammate bool
	TaskFeedID    *ulid.ID
	ClearFeed     bool
	WorkspaceID   ulid.ID
	RequestID     string
}

// Mutate applies the UpdateTaskFeedLikeInput on the TaskFeedLikeMutation.
func (i *UpdateTaskFeedLikeInput) Mutate(m *TaskFeedLikeMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearFeed {
		m.ClearFeed()
	}
	if v := i.TaskFeedID; v != nil {
		m.SetFeedID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskFeedLikeInput on the update builder.
func (u *TaskFeedLikeUpdate) SetInput(i UpdateTaskFeedLikeInput) *TaskFeedLikeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskFeedLikeInput on the update-one builder.
func (u *TaskFeedLikeUpdateOne) SetInput(i UpdateTaskFeedLikeInput) *TaskFeedLikeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskFileInput represents a mutation input for creating taskfiles.
type CreateTaskFileInput struct {
	Name       string
	Src        string
	Attached   *bool
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	ProjectID  ulid.ID
	TaskID     ulid.ID
	TaskFeedID ulid.ID
	FileTypeID ulid.ID
	RequestID  string
}

// Mutate applies the CreateTaskFileInput on the TaskFileCreate builder.
func (i *CreateTaskFileInput) Mutate(m *TaskFileCreate) {
	m.SetName(i.Name)
	m.SetSrc(i.Src)
	if v := i.Attached; v != nil {
		m.SetAttached(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetProjectID(i.ProjectID)
	m.SetTaskID(i.TaskID)
	m.SetTaskFeedID(i.TaskFeedID)
	m.SetFileTypeID(i.FileTypeID)
}

// SetInput applies the change-set in the CreateTaskFileInput on the create builder.
func (c *TaskFileCreate) SetInput(i CreateTaskFileInput) *TaskFileCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskFileInput represents a mutation input for updating taskfiles.
type UpdateTaskFileInput struct {
	ID            ulid.ID
	Name          *string
	Src           *string
	Attached      *bool
	ProjectID     *ulid.ID
	ClearProject  bool
	TaskID        *ulid.ID
	ClearTask     bool
	TaskFeedID    *ulid.ID
	ClearTaskFeed bool
	FileTypeID    *ulid.ID
	ClearFileType bool
	RequestID     string
}

// Mutate applies the UpdateTaskFileInput on the TaskFileMutation.
func (i *UpdateTaskFileInput) Mutate(m *TaskFileMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Src; v != nil {
		m.SetSrc(*v)
	}
	if v := i.Attached; v != nil {
		m.SetAttached(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTaskFeed {
		m.ClearTaskFeed()
	}
	if v := i.TaskFeedID; v != nil {
		m.SetTaskFeedID(*v)
	}
	if i.ClearFileType {
		m.ClearFileType()
	}
	if v := i.FileTypeID; v != nil {
		m.SetFileTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskFileInput on the update builder.
func (u *TaskFileUpdate) SetInput(i UpdateTaskFileInput) *TaskFileUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskFileInput on the update-one builder.
func (u *TaskFileUpdateOne) SetInput(i UpdateTaskFileInput) *TaskFileUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskLikeInput represents a mutation input for creating tasklikes.
type CreateTaskLikeInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TaskID      ulid.ID
	TeammateID  ulid.ID
	WorkspaceID ulid.ID
	RequestID   string
}

// Mutate applies the CreateTaskLikeInput on the TaskLikeCreate builder.
func (i *CreateTaskLikeInput) Mutate(m *TaskLikeCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetTeammateID(i.TeammateID)
	m.SetWorkspaceID(i.WorkspaceID)
}

// SetInput applies the change-set in the CreateTaskLikeInput on the create builder.
func (c *TaskLikeCreate) SetInput(i CreateTaskLikeInput) *TaskLikeCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskLikeInput represents a mutation input for updating tasklikes.
type UpdateTaskLikeInput struct {
	ID             ulid.ID
	TaskID         *ulid.ID
	ClearTask      bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	RequestID      string
}

// Mutate applies the UpdateTaskLikeInput on the TaskLikeMutation.
func (i *UpdateTaskLikeInput) Mutate(m *TaskLikeMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskLikeInput on the update builder.
func (u *TaskLikeUpdate) SetInput(i UpdateTaskLikeInput) *TaskLikeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskLikeInput on the update-one builder.
func (u *TaskLikeUpdateOne) SetInput(i UpdateTaskLikeInput) *TaskLikeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskListCompletedStatusInput represents a mutation input for creating tasklistcompletedstatusslice.
type CreateTaskListCompletedStatusInput struct {
	Name                       string
	StatusCode                 tasklistcompletedstatus.StatusCode
	CreatedAt                  *time.Time
	UpdatedAt                  *time.Time
	TeammateTaskListStatuseIDs []ulid.ID
	ProjectTaskListStatuseIDs  []ulid.ID
	RequestID                  string
}

// Mutate applies the CreateTaskListCompletedStatusInput on the TaskListCompletedStatusCreate builder.
func (i *CreateTaskListCompletedStatusInput) Mutate(m *TaskListCompletedStatusCreate) {
	m.SetName(i.Name)
	m.SetStatusCode(i.StatusCode)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.ProjectTaskListStatuseIDs; len(ids) > 0 {
		m.AddProjectTaskListStatuseIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskListCompletedStatusInput on the create builder.
func (c *TaskListCompletedStatusCreate) SetInput(i CreateTaskListCompletedStatusInput) *TaskListCompletedStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskListCompletedStatusInput represents a mutation input for updating tasklistcompletedstatusslice.
type UpdateTaskListCompletedStatusInput struct {
	ID                               ulid.ID
	Name                             *string
	StatusCode                       *tasklistcompletedstatus.StatusCode
	AddTeammateTaskListStatuseIDs    []ulid.ID
	RemoveTeammateTaskListStatuseIDs []ulid.ID
	AddProjectTaskListStatuseIDs     []ulid.ID
	RemoveProjectTaskListStatuseIDs  []ulid.ID
	RequestID                        string
}

// Mutate applies the UpdateTaskListCompletedStatusInput on the TaskListCompletedStatusMutation.
func (i *UpdateTaskListCompletedStatusInput) Mutate(m *TaskListCompletedStatusMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if ids := i.AddTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.AddProjectTaskListStatuseIDs; len(ids) > 0 {
		m.AddProjectTaskListStatuseIDs(ids...)
	}
	if ids := i.RemoveProjectTaskListStatuseIDs; len(ids) > 0 {
		m.RemoveProjectTaskListStatuseIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskListCompletedStatusInput on the update builder.
func (u *TaskListCompletedStatusUpdate) SetInput(i UpdateTaskListCompletedStatusInput) *TaskListCompletedStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskListCompletedStatusInput on the update-one builder.
func (u *TaskListCompletedStatusUpdateOne) SetInput(i UpdateTaskListCompletedStatusInput) *TaskListCompletedStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskListSortStatusInput represents a mutation input for creating tasklistsortstatusslice.
type CreateTaskListSortStatusInput struct {
	Name                       string
	StatusCode                 tasklistsortstatus.StatusCode
	CreatedAt                  *time.Time
	UpdatedAt                  *time.Time
	TeammateTaskListStatuseIDs []ulid.ID
	ProjectTaskListStatuseIDs  []ulid.ID
	RequestID                  string
}

// Mutate applies the CreateTaskListSortStatusInput on the TaskListSortStatusCreate builder.
func (i *CreateTaskListSortStatusInput) Mutate(m *TaskListSortStatusCreate) {
	m.SetName(i.Name)
	m.SetStatusCode(i.StatusCode)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.ProjectTaskListStatuseIDs; len(ids) > 0 {
		m.AddProjectTaskListStatuseIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskListSortStatusInput on the create builder.
func (c *TaskListSortStatusCreate) SetInput(i CreateTaskListSortStatusInput) *TaskListSortStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskListSortStatusInput represents a mutation input for updating tasklistsortstatusslice.
type UpdateTaskListSortStatusInput struct {
	ID                               ulid.ID
	Name                             *string
	StatusCode                       *tasklistsortstatus.StatusCode
	AddTeammateTaskListStatuseIDs    []ulid.ID
	RemoveTeammateTaskListStatuseIDs []ulid.ID
	AddProjectTaskListStatuseIDs     []ulid.ID
	RemoveProjectTaskListStatuseIDs  []ulid.ID
	RequestID                        string
}

// Mutate applies the UpdateTaskListSortStatusInput on the TaskListSortStatusMutation.
func (i *UpdateTaskListSortStatusInput) Mutate(m *TaskListSortStatusMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if ids := i.AddTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.AddProjectTaskListStatuseIDs; len(ids) > 0 {
		m.AddProjectTaskListStatuseIDs(ids...)
	}
	if ids := i.RemoveProjectTaskListStatuseIDs; len(ids) > 0 {
		m.RemoveProjectTaskListStatuseIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskListSortStatusInput on the update builder.
func (u *TaskListSortStatusUpdate) SetInput(i UpdateTaskListSortStatusInput) *TaskListSortStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskListSortStatusInput on the update-one builder.
func (u *TaskListSortStatusUpdateOne) SetInput(i UpdateTaskListSortStatusInput) *TaskListSortStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskPriorityInput represents a mutation input for creating taskpriorities.
type CreateTaskPriorityInput struct {
	Name         string
	PriorityType taskpriority.PriorityType
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	ColorID      ulid.ID
	TaskIDs      []ulid.ID
	RequestID    string
}

// Mutate applies the CreateTaskPriorityInput on the TaskPriorityCreate builder.
func (i *CreateTaskPriorityInput) Mutate(m *TaskPriorityCreate) {
	m.SetName(i.Name)
	m.SetPriorityType(i.PriorityType)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetColorID(i.ColorID)
	if ids := i.TaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTaskPriorityInput on the create builder.
func (c *TaskPriorityCreate) SetInput(i CreateTaskPriorityInput) *TaskPriorityCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskPriorityInput represents a mutation input for updating taskpriorities.
type UpdateTaskPriorityInput struct {
	ID            ulid.ID
	Name          *string
	PriorityType  *taskpriority.PriorityType
	ColorID       *ulid.ID
	ClearColor    bool
	AddTaskIDs    []ulid.ID
	RemoveTaskIDs []ulid.ID
	RequestID     string
}

// Mutate applies the UpdateTaskPriorityInput on the TaskPriorityMutation.
func (i *UpdateTaskPriorityInput) Mutate(m *TaskPriorityMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PriorityType; v != nil {
		m.SetPriorityType(*v)
	}
	if i.ClearColor {
		m.ClearColor()
	}
	if v := i.ColorID; v != nil {
		m.SetColorID(*v)
	}
	if ids := i.AddTaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
	if ids := i.RemoveTaskIDs; len(ids) > 0 {
		m.RemoveTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTaskPriorityInput on the update builder.
func (u *TaskPriorityUpdate) SetInput(i UpdateTaskPriorityInput) *TaskPriorityUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskPriorityInput on the update-one builder.
func (u *TaskPriorityUpdateOne) SetInput(i UpdateTaskPriorityInput) *TaskPriorityUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskSectionInput represents a mutation input for creating tasksections.
type CreateTaskSectionInput struct {
	Name      string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	RequestID string
}

// Mutate applies the CreateTaskSectionInput on the TaskSectionCreate builder.
func (i *CreateTaskSectionInput) Mutate(m *TaskSectionCreate) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateTaskSectionInput on the create builder.
func (c *TaskSectionCreate) SetInput(i CreateTaskSectionInput) *TaskSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskSectionInput represents a mutation input for updating tasksections.
type UpdateTaskSectionInput struct {
	ID        ulid.ID
	Name      *string
	RequestID string
}

// Mutate applies the UpdateTaskSectionInput on the TaskSectionMutation.
func (i *UpdateTaskSectionInput) Mutate(m *TaskSectionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskSectionInput on the update builder.
func (u *TaskSectionUpdate) SetInput(i UpdateTaskSectionInput) *TaskSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskSectionInput on the update-one builder.
func (u *TaskSectionUpdateOne) SetInput(i UpdateTaskSectionInput) *TaskSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTaskTagInput represents a mutation input for creating tasktags.
type CreateTaskTagInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TaskID      ulid.ID
	TagID       ulid.ID
	WorkspaceID ulid.ID
	RequestID   string
}

// Mutate applies the CreateTaskTagInput on the TaskTagCreate builder.
func (i *CreateTaskTagInput) Mutate(m *TaskTagCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetTagID(i.TagID)
}

// SetInput applies the change-set in the CreateTaskTagInput on the create builder.
func (c *TaskTagCreate) SetInput(i CreateTaskTagInput) *TaskTagCreate {
	i.Mutate(c)
	return c
}

// UpdateTaskTagInput represents a mutation input for updating tasktags.
type UpdateTaskTagInput struct {
	ID          ulid.ID
	TaskID      *ulid.ID
	ClearTask   bool
	TagID       *ulid.ID
	ClearTag    bool
	WorkspaceID ulid.ID
	RequestID   string
}

// Mutate applies the UpdateTaskTagInput on the TaskTagMutation.
func (i *UpdateTaskTagInput) Mutate(m *TaskTagMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTag {
		m.ClearTag()
	}
	if v := i.TagID; v != nil {
		m.SetTagID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskTagInput on the update builder.
func (u *TaskTagUpdate) SetInput(i UpdateTaskTagInput) *TaskTagUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTaskTagInput on the update-one builder.
func (u *TaskTagUpdateOne) SetInput(i UpdateTaskTagInput) *TaskTagUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateInput represents a mutation input for creating teammates.
type CreateTeammateInput struct {
	Name                         string
	Image                        string
	Email                        string
	CreatedAt                    *time.Time
	UpdatedAt                    *time.Time
	WorkspaceIDs                 []ulid.ID
	ProjectIDs                   []ulid.ID
	ProjectTeammateIDs           []ulid.ID
	WorkspaceTeammateIDs         []ulid.ID
	FavoriteProjectIDs           []ulid.ID
	FavoriteWorkspaceIDs         []ulid.ID
	TeammateTaskTabStatuseIDs    []ulid.ID
	TeammateTaskColumnIDs        []ulid.ID
	TeammateTaskListStatuseIDs   []ulid.ID
	TeammateTaskSectionIDs       []ulid.ID
	TaskIDs                      []ulid.ID
	TeammateTaskIDs              []ulid.ID
	TaskLikeIDs                  []ulid.ID
	TaskCollaboratorIDs          []ulid.ID
	TaskFeedIDs                  []ulid.ID
	TaskFeedLikeIDs              []ulid.ID
	TaskActivityIDs              []ulid.ID
	WorkspaceActivityIDs         []ulid.ID
	ArchivedTaskActivityIDs      []ulid.ID
	ArchivedWorkspaceActivityIDs []ulid.ID
	DeletedTeammateTaskIDs       []ulid.ID
	RequestID                    string
}

// Mutate applies the CreateTeammateInput on the TeammateCreate builder.
func (i *CreateTeammateInput) Mutate(m *TeammateCreate) {
	m.SetName(i.Name)
	m.SetImage(i.Image)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.WorkspaceIDs; len(ids) > 0 {
		m.AddWorkspaceIDs(ids...)
	}
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.ProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.WorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.FavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.FavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.TeammateTaskTabStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatuseIDs(ids...)
	}
	if ids := i.TeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.TeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.TeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
	if ids := i.TaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
	if ids := i.TeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
	if ids := i.TaskLikeIDs; len(ids) > 0 {
		m.AddTaskLikeIDs(ids...)
	}
	if ids := i.TaskCollaboratorIDs; len(ids) > 0 {
		m.AddTaskCollaboratorIDs(ids...)
	}
	if ids := i.TaskFeedIDs; len(ids) > 0 {
		m.AddTaskFeedIDs(ids...)
	}
	if ids := i.TaskFeedLikeIDs; len(ids) > 0 {
		m.AddTaskFeedLikeIDs(ids...)
	}
	if ids := i.TaskActivityIDs; len(ids) > 0 {
		m.AddTaskActivityIDs(ids...)
	}
	if ids := i.WorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.ArchivedTaskActivityIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityIDs(ids...)
	}
	if ids := i.ArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.DeletedTeammateTaskIDs; len(ids) > 0 {
		m.AddDeletedTeammateTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTeammateInput on the create builder.
func (c *TeammateCreate) SetInput(i CreateTeammateInput) *TeammateCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateInput represents a mutation input for updating teammates.
type UpdateTeammateInput struct {
	ID                                 ulid.ID
	Name                               *string
	Image                              *string
	Email                              *string
	AddWorkspaceIDs                    []ulid.ID
	RemoveWorkspaceIDs                 []ulid.ID
	AddProjectIDs                      []ulid.ID
	RemoveProjectIDs                   []ulid.ID
	AddProjectTeammateIDs              []ulid.ID
	RemoveProjectTeammateIDs           []ulid.ID
	AddWorkspaceTeammateIDs            []ulid.ID
	RemoveWorkspaceTeammateIDs         []ulid.ID
	AddFavoriteProjectIDs              []ulid.ID
	RemoveFavoriteProjectIDs           []ulid.ID
	AddFavoriteWorkspaceIDs            []ulid.ID
	RemoveFavoriteWorkspaceIDs         []ulid.ID
	AddTeammateTaskTabStatuseIDs       []ulid.ID
	RemoveTeammateTaskTabStatuseIDs    []ulid.ID
	AddTeammateTaskColumnIDs           []ulid.ID
	RemoveTeammateTaskColumnIDs        []ulid.ID
	AddTeammateTaskListStatuseIDs      []ulid.ID
	RemoveTeammateTaskListStatuseIDs   []ulid.ID
	AddTeammateTaskSectionIDs          []ulid.ID
	RemoveTeammateTaskSectionIDs       []ulid.ID
	AddTaskIDs                         []ulid.ID
	RemoveTaskIDs                      []ulid.ID
	AddTeammateTaskIDs                 []ulid.ID
	RemoveTeammateTaskIDs              []ulid.ID
	AddTaskLikeIDs                     []ulid.ID
	RemoveTaskLikeIDs                  []ulid.ID
	AddTaskCollaboratorIDs             []ulid.ID
	RemoveTaskCollaboratorIDs          []ulid.ID
	AddTaskFeedIDs                     []ulid.ID
	RemoveTaskFeedIDs                  []ulid.ID
	AddTaskFeedLikeIDs                 []ulid.ID
	RemoveTaskFeedLikeIDs              []ulid.ID
	AddTaskActivityIDs                 []ulid.ID
	RemoveTaskActivityIDs              []ulid.ID
	AddWorkspaceActivityIDs            []ulid.ID
	RemoveWorkspaceActivityIDs         []ulid.ID
	AddArchivedTaskActivityIDs         []ulid.ID
	RemoveArchivedTaskActivityIDs      []ulid.ID
	AddArchivedWorkspaceActivityIDs    []ulid.ID
	RemoveArchivedWorkspaceActivityIDs []ulid.ID
	AddDeletedTeammateTaskIDs          []ulid.ID
	RemoveDeletedTeammateTaskIDs       []ulid.ID
	RequestID                          string
}

// Mutate applies the UpdateTeammateInput on the TeammateMutation.
func (i *UpdateTeammateInput) Mutate(m *TeammateMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if ids := i.AddWorkspaceIDs; len(ids) > 0 {
		m.AddWorkspaceIDs(ids...)
	}
	if ids := i.RemoveWorkspaceIDs; len(ids) > 0 {
		m.RemoveWorkspaceIDs(ids...)
	}
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if ids := i.AddProjectTeammateIDs; len(ids) > 0 {
		m.AddProjectTeammateIDs(ids...)
	}
	if ids := i.RemoveProjectTeammateIDs; len(ids) > 0 {
		m.RemoveProjectTeammateIDs(ids...)
	}
	if ids := i.AddWorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.RemoveWorkspaceTeammateIDs; len(ids) > 0 {
		m.RemoveWorkspaceTeammateIDs(ids...)
	}
	if ids := i.AddFavoriteProjectIDs; len(ids) > 0 {
		m.AddFavoriteProjectIDs(ids...)
	}
	if ids := i.RemoveFavoriteProjectIDs; len(ids) > 0 {
		m.RemoveFavoriteProjectIDs(ids...)
	}
	if ids := i.AddFavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.RemoveFavoriteWorkspaceIDs; len(ids) > 0 {
		m.RemoveFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.AddTeammateTaskTabStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatuseIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskTabStatuseIDs; len(ids) > 0 {
		m.RemoveTeammateTaskTabStatuseIDs(ids...)
	}
	if ids := i.AddTeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskColumnIDs; len(ids) > 0 {
		m.RemoveTeammateTaskColumnIDs(ids...)
	}
	if ids := i.AddTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.AddTeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskSectionIDs; len(ids) > 0 {
		m.RemoveTeammateTaskSectionIDs(ids...)
	}
	if ids := i.AddTaskIDs; len(ids) > 0 {
		m.AddTaskIDs(ids...)
	}
	if ids := i.RemoveTaskIDs; len(ids) > 0 {
		m.RemoveTaskIDs(ids...)
	}
	if ids := i.AddTeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskIDs; len(ids) > 0 {
		m.RemoveTeammateTaskIDs(ids...)
	}
	if ids := i.AddTaskLikeIDs; len(ids) > 0 {
		m.AddTaskLikeIDs(ids...)
	}
	if ids := i.RemoveTaskLikeIDs; len(ids) > 0 {
		m.RemoveTaskLikeIDs(ids...)
	}
	if ids := i.AddTaskCollaboratorIDs; len(ids) > 0 {
		m.AddTaskCollaboratorIDs(ids...)
	}
	if ids := i.RemoveTaskCollaboratorIDs; len(ids) > 0 {
		m.RemoveTaskCollaboratorIDs(ids...)
	}
	if ids := i.AddTaskFeedIDs; len(ids) > 0 {
		m.AddTaskFeedIDs(ids...)
	}
	if ids := i.RemoveTaskFeedIDs; len(ids) > 0 {
		m.RemoveTaskFeedIDs(ids...)
	}
	if ids := i.AddTaskFeedLikeIDs; len(ids) > 0 {
		m.AddTaskFeedLikeIDs(ids...)
	}
	if ids := i.RemoveTaskFeedLikeIDs; len(ids) > 0 {
		m.RemoveTaskFeedLikeIDs(ids...)
	}
	if ids := i.AddTaskActivityIDs; len(ids) > 0 {
		m.AddTaskActivityIDs(ids...)
	}
	if ids := i.RemoveTaskActivityIDs; len(ids) > 0 {
		m.RemoveTaskActivityIDs(ids...)
	}
	if ids := i.AddWorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveWorkspaceActivityIDs(ids...)
	}
	if ids := i.AddArchivedTaskActivityIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityIDs(ids...)
	}
	if ids := i.RemoveArchivedTaskActivityIDs; len(ids) > 0 {
		m.RemoveArchivedTaskActivityIDs(ids...)
	}
	if ids := i.AddArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.AddDeletedTeammateTaskIDs; len(ids) > 0 {
		m.AddDeletedTeammateTaskIDs(ids...)
	}
	if ids := i.RemoveDeletedTeammateTaskIDs; len(ids) > 0 {
		m.RemoveDeletedTeammateTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTeammateInput on the update builder.
func (u *TeammateUpdate) SetInput(i UpdateTeammateInput) *TeammateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateInput on the update-one builder.
func (u *TeammateUpdateOne) SetInput(i UpdateTeammateInput) *TeammateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskInput represents a mutation input for creating teammatetasks.
type CreateTeammateTaskInput struct {
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	TeammateID            ulid.ID
	TaskID                ulid.ID
	TeammateTaskSectionID ulid.ID
	WorkspaceID           ulid.ID
	TaskParentID          *ulid.ID
	RequestID             string
}

// Mutate applies the CreateTeammateTaskInput on the TeammateTaskCreate builder.
func (i *CreateTeammateTaskInput) Mutate(m *TeammateTaskCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetTaskID(i.TaskID)
	m.SetTeammateTaskSectionID(i.TeammateTaskSectionID)
	m.SetWorkspaceID(i.WorkspaceID)
}

// SetInput applies the change-set in the CreateTeammateTaskInput on the create builder.
func (c *TeammateTaskCreate) SetInput(i CreateTeammateTaskInput) *TeammateTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskInput represents a mutation input for updating teammatetasks.
type UpdateTeammateTaskInput struct {
	ID                       ulid.ID
	TeammateID               *ulid.ID
	ClearTeammate            bool
	TaskID                   *ulid.ID
	ClearTask                bool
	TeammateTaskSectionID    *ulid.ID
	ClearTeammateTaskSection bool
	WorkspaceID              *ulid.ID
	ClearWorkspace           bool
	RequestID                string
}

// Mutate applies the UpdateTeammateTaskInput on the TeammateTaskMutation.
func (i *UpdateTeammateTaskInput) Mutate(m *TeammateTaskMutation) {
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearTeammateTaskSection {
		m.ClearTeammateTaskSection()
	}
	if v := i.TeammateTaskSectionID; v != nil {
		m.SetTeammateTaskSectionID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskInput on the update builder.
func (u *TeammateTaskUpdate) SetInput(i UpdateTeammateTaskInput) *TeammateTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskInput on the update-one builder.
func (u *TeammateTaskUpdateOne) SetInput(i UpdateTeammateTaskInput) *TeammateTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskColumnInput represents a mutation input for creating teammatetaskcolumns.
type CreateTeammateTaskColumnInput struct {
	Width        string
	Disabled     bool
	Customizable bool
	Order        int
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	TeammateID   ulid.ID
	WorkspaceID  ulid.ID
	TaskColumnID ulid.ID
	RequestID    string
}

// Mutate applies the CreateTeammateTaskColumnInput on the TeammateTaskColumnCreate builder.
func (i *CreateTeammateTaskColumnInput) Mutate(m *TeammateTaskColumnCreate) {
	m.SetWidth(i.Width)
	m.SetDisabled(i.Disabled)
	m.SetCustomizable(i.Customizable)
	m.SetOrder(i.Order)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTaskColumnID(i.TaskColumnID)
}

// SetInput applies the change-set in the CreateTeammateTaskColumnInput on the create builder.
func (c *TeammateTaskColumnCreate) SetInput(i CreateTeammateTaskColumnInput) *TeammateTaskColumnCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskColumnInput represents a mutation input for updating teammatetaskcolumns.
type UpdateTeammateTaskColumnInput struct {
	ID              ulid.ID
	Width           *string
	Disabled        *bool
	Customizable    *bool
	Order           *int
	TeammateID      *ulid.ID
	ClearTeammate   bool
	WorkspaceID     *ulid.ID
	ClearWorkspace  bool
	TaskColumnID    *ulid.ID
	ClearTaskColumn bool
	RequestID       string
}

// Mutate applies the UpdateTeammateTaskColumnInput on the TeammateTaskColumnMutation.
func (i *UpdateTeammateTaskColumnInput) Mutate(m *TeammateTaskColumnMutation) {
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if v := i.Customizable; v != nil {
		m.SetCustomizable(*v)
	}
	if v := i.Order; v != nil {
		m.SetOrder(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTaskColumn {
		m.ClearTaskColumn()
	}
	if v := i.TaskColumnID; v != nil {
		m.SetTaskColumnID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskColumnInput on the update builder.
func (u *TeammateTaskColumnUpdate) SetInput(i UpdateTeammateTaskColumnInput) *TeammateTaskColumnUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskColumnInput on the update-one builder.
func (u *TeammateTaskColumnUpdateOne) SetInput(i UpdateTeammateTaskColumnInput) *TeammateTaskColumnUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskListStatusInput represents a mutation input for creating teammatetaskliststatusslice.
type CreateTeammateTaskListStatusInput struct {
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	WorkspaceID               ulid.ID
	TeammateID                ulid.ID
	TaskListCompletedStatusID ulid.ID
	TaskListSortStatusID      ulid.ID
	RequestID                 string
}

// Mutate applies the CreateTeammateTaskListStatusInput on the TeammateTaskListStatusCreate builder.
func (i *CreateTeammateTaskListStatusInput) Mutate(m *TeammateTaskListStatusCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
	m.SetTaskListCompletedStatusID(i.TaskListCompletedStatusID)
	m.SetTaskListSortStatusID(i.TaskListSortStatusID)
}

// SetInput applies the change-set in the CreateTeammateTaskListStatusInput on the create builder.
func (c *TeammateTaskListStatusCreate) SetInput(i CreateTeammateTaskListStatusInput) *TeammateTaskListStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskListStatusInput represents a mutation input for updating teammatetaskliststatusslice.
type UpdateTeammateTaskListStatusInput struct {
	ID                           ulid.ID
	WorkspaceID                  *ulid.ID
	ClearWorkspace               bool
	TeammateID                   *ulid.ID
	ClearTeammate                bool
	TaskListCompletedStatusID    *ulid.ID
	ClearTaskListCompletedStatus bool
	TaskListSortStatusID         *ulid.ID
	ClearTaskListSortStatus      bool
	TaskListSortStatusCode       *tasklistsortstatus.StatusCode
	TaskListCompletedStatusCode  *tasklistcompletedstatus.StatusCode
	RequestID                    string
}

// Mutate applies the UpdateTeammateTaskListStatusInput on the TeammateTaskListStatusMutation.
func (i *UpdateTeammateTaskListStatusInput) Mutate(m *TeammateTaskListStatusMutation) {
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearTaskListCompletedStatus {
		m.ClearTaskListCompletedStatus()
	}
	if v := i.TaskListCompletedStatusID; v != nil {
		m.SetTaskListCompletedStatusID(*v)
	}
	if i.ClearTaskListSortStatus {
		m.ClearTaskListSortStatus()
	}
	if v := i.TaskListSortStatusID; v != nil {
		m.SetTaskListSortStatusID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskListStatusInput on the update builder.
func (u *TeammateTaskListStatusUpdate) SetInput(i UpdateTeammateTaskListStatusInput) *TeammateTaskListStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskListStatusInput on the update-one builder.
func (u *TeammateTaskListStatusUpdateOne) SetInput(i UpdateTeammateTaskListStatusInput) *TeammateTaskListStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskSectionInput represents a mutation input for creating teammatetasksections.
type CreateTeammateTaskSectionInput struct {
	Name            string
	Assigned        bool
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	TeammateID      ulid.ID
	WorkspaceID     ulid.ID
	TeammateTaskIDs []ulid.ID
	RequestID       string
}

// Mutate applies the CreateTeammateTaskSectionInput on the TeammateTaskSectionCreate builder.
func (i *CreateTeammateTaskSectionInput) Mutate(m *TeammateTaskSectionCreate) {
	m.SetName(i.Name)
	m.SetAssigned(i.Assigned)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.TeammateID)
	m.SetWorkspaceID(i.WorkspaceID)
	if ids := i.TeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTeammateTaskSectionInput on the create builder.
func (c *TeammateTaskSectionCreate) SetInput(i CreateTeammateTaskSectionInput) *TeammateTaskSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskSectionInput represents a mutation input for updating teammatetasksections.
type UpdateTeammateTaskSectionInput struct {
	ID                    ulid.ID
	Name                  *string
	Assigned              *bool
	TeammateID            *ulid.ID
	ClearTeammate         bool
	WorkspaceID           *ulid.ID
	ClearWorkspace        bool
	AddTeammateTaskIDs    []ulid.ID
	RemoveTeammateTaskIDs []ulid.ID
	RequestID             string
}

// Mutate applies the UpdateTeammateTaskSectionInput on the TeammateTaskSectionMutation.
func (i *UpdateTeammateTaskSectionInput) Mutate(m *TeammateTaskSectionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Assigned; v != nil {
		m.SetAssigned(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if ids := i.AddTeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskIDs; len(ids) > 0 {
		m.RemoveTeammateTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskSectionInput on the update builder.
func (u *TeammateTaskSectionUpdate) SetInput(i UpdateTeammateTaskSectionInput) *TeammateTaskSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskSectionInput on the update-one builder.
func (u *TeammateTaskSectionUpdateOne) SetInput(i UpdateTeammateTaskSectionInput) *TeammateTaskSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTeammateTaskTabStatusInput represents a mutation input for creating teammatetasktabstatusslice.
type CreateTeammateTaskTabStatusInput struct {
	StatusCode  *teammatetasktabstatus.StatusCode
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	WorkspaceID ulid.ID
	TeammateID  ulid.ID
	RequestID   string
}

// Mutate applies the CreateTeammateTaskTabStatusInput on the TeammateTaskTabStatusCreate builder.
func (i *CreateTeammateTaskTabStatusInput) Mutate(m *TeammateTaskTabStatusCreate) {
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateTeammateTaskTabStatusInput on the create builder.
func (c *TeammateTaskTabStatusCreate) SetInput(i CreateTeammateTaskTabStatusInput) *TeammateTaskTabStatusCreate {
	i.Mutate(c)
	return c
}

// UpdateTeammateTaskTabStatusInput represents a mutation input for updating teammatetasktabstatusslice.
type UpdateTeammateTaskTabStatusInput struct {
	ID             ulid.ID
	StatusCode     *teammatetasktabstatus.StatusCode
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
	RequestID      string
}

// Mutate applies the UpdateTeammateTaskTabStatusInput on the TeammateTaskTabStatusMutation.
func (i *UpdateTeammateTaskTabStatusInput) Mutate(m *TeammateTaskTabStatusMutation) {
	if v := i.StatusCode; v != nil {
		m.SetStatusCode(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateTeammateTaskTabStatusInput on the update builder.
func (u *TeammateTaskTabStatusUpdate) SetInput(i UpdateTeammateTaskTabStatusInput) *TeammateTaskTabStatusUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTeammateTaskTabStatusInput on the update-one builder.
func (u *TeammateTaskTabStatusUpdateOne) SetInput(i UpdateTeammateTaskTabStatusInput) *TeammateTaskTabStatusUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTestTodoInput represents a mutation input for creating testtodos.
type CreateTestTodoInput struct {
	CreatedBy    ulid.ID
	Name         *string
	Status       *testtodo.Status
	Priority     *int
	DueDate      *time.Time
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	TestUserID   *ulid.ID
	ParentTodoID *ulid.ID
	ChildIDs     []ulid.ID
	RequestID    string
}

// Mutate applies the CreateTestTodoInput on the TestTodoCreate builder.
func (i *CreateTestTodoInput) Mutate(m *TestTodoCreate) {
	m.SetCreatedBy(i.CreatedBy)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TestUserID; v != nil {
		m.SetTestUserID(*v)
	}
	if v := i.ParentTodoID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.ChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTestTodoInput on the create builder.
func (c *TestTodoCreate) SetInput(i CreateTestTodoInput) *TestTodoCreate {
	i.Mutate(c)
	return c
}

// UpdateTestTodoInput represents a mutation input for updating testtodos.
type UpdateTestTodoInput struct {
	ID             ulid.ID
	CreatedBy      *ulid.ID
	Name           *string
	Status         *testtodo.Status
	Priority       *int
	DueDate        *time.Time
	ClearDueDate   bool
	TestUserID     *ulid.ID
	ClearTestUser  bool
	ParentTodoID   *ulid.ID
	ClearParent    bool
	AddChildIDs    []ulid.ID
	RemoveChildIDs []ulid.ID
	RequestID      string
}

// Mutate applies the UpdateTestTodoInput on the TestTodoMutation.
func (i *UpdateTestTodoInput) Mutate(m *TestTodoMutation) {
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if i.ClearDueDate {
		m.ClearDueDate()
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearTestUser {
		m.ClearTestUser()
	}
	if v := i.TestUserID; v != nil {
		m.SetTestUserID(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentTodoID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTestTodoInput on the update builder.
func (u *TestTodoUpdate) SetInput(i UpdateTestTodoInput) *TestTodoUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTestTodoInput on the update-one builder.
func (u *TestTodoUpdateOne) SetInput(i UpdateTestTodoInput) *TestTodoUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTestUserInput represents a mutation input for creating testusers.
type CreateTestUserInput struct {
	Name        string
	Age         int
	Profile     testuserprofile.TestUserProfile
	Description map[string]interface{}
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TestTodoIDs []ulid.ID
	RequestID   string
}

// Mutate applies the CreateTestUserInput on the TestUserCreate builder.
func (i *CreateTestUserInput) Mutate(m *TestUserCreate) {
	m.SetName(i.Name)
	m.SetAge(i.Age)
	m.SetProfile(i.Profile)
	m.SetDescription(i.Description)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TestTodoIDs; len(ids) > 0 {
		m.AddTestTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTestUserInput on the create builder.
func (c *TestUserCreate) SetInput(i CreateTestUserInput) *TestUserCreate {
	i.Mutate(c)
	return c
}

// UpdateTestUserInput represents a mutation input for updating testusers.
type UpdateTestUserInput struct {
	ID                ulid.ID
	Name              *string
	Age               *int
	Profile           *testuserprofile.TestUserProfile
	Description       map[string]interface{}
	AddTestTodoIDs    []ulid.ID
	RemoveTestTodoIDs []ulid.ID
	RequestID         string
}

// Mutate applies the UpdateTestUserInput on the TestUserMutation.
func (i *UpdateTestUserInput) Mutate(m *TestUserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Age; v != nil {
		m.SetAge(*v)
	}
	if v := i.Profile; v != nil {
		m.SetProfile(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(v)
	}
	if ids := i.AddTestTodoIDs; len(ids) > 0 {
		m.AddTestTodoIDs(ids...)
	}
	if ids := i.RemoveTestTodoIDs; len(ids) > 0 {
		m.RemoveTestTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTestUserInput on the update builder.
func (u *TestUserUpdate) SetInput(i UpdateTestUserInput) *TestUserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTestUserInput on the update-one builder.
func (u *TestUserUpdateOne) SetInput(i UpdateTestUserInput) *TestUserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkspaceInput represents a mutation input for creating workspaces.
type CreateWorkspaceInput struct {
	Name                         string
	Description                  map[string]interface{}
	CreatedAt                    *time.Time
	UpdatedAt                    *time.Time
	CreatedBy                    ulid.ID
	ProjectIDs                   []ulid.ID
	WorkspaceTeammateIDs         []ulid.ID
	FavoriteWorkspaceIDs         []ulid.ID
	TeammateTaskTabStatuseIDs    []ulid.ID
	TeammateTaskListStatuseIDs   []ulid.ID
	TeammateTaskSectionIDs       []ulid.ID
	TaskLikeIDs                  []ulid.ID
	TagIDs                       []ulid.ID
	TeammateTaskColumnIDs        []ulid.ID
	TeammateTaskIDs              []ulid.ID
	DeletedTasksRefIDs           []ulid.ID
	WorkspaceActivityIDs         []ulid.ID
	TaskActivityIDs              []ulid.ID
	ArchivedTaskActivityIDs      []ulid.ID
	ArchivedWorkspaceActivityIDs []ulid.ID
	DeletedTeammateTaskIDs       []ulid.ID
	RequestID                    string
}

// Mutate applies the CreateWorkspaceInput on the WorkspaceCreate builder.
func (i *CreateWorkspaceInput) Mutate(m *WorkspaceCreate) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTeammateID(i.CreatedBy)
	if ids := i.ProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.WorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.FavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.TeammateTaskTabStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatuseIDs(ids...)
	}
	if ids := i.TeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.TeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
	if ids := i.TaskLikeIDs; len(ids) > 0 {
		m.AddTaskLikeIDs(ids...)
	}
	if ids := i.TagIDs; len(ids) > 0 {
		m.AddTagIDs(ids...)
	}
	if ids := i.TeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.TeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
	if ids := i.DeletedTasksRefIDs; len(ids) > 0 {
		m.AddDeletedTasksRefIDs(ids...)
	}
	if ids := i.WorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.TaskActivityIDs; len(ids) > 0 {
		m.AddTaskActivityIDs(ids...)
	}
	if ids := i.ArchivedTaskActivityIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityIDs(ids...)
	}
	if ids := i.ArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.DeletedTeammateTaskIDs; len(ids) > 0 {
		m.AddDeletedTeammateTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateWorkspaceInput on the create builder.
func (c *WorkspaceCreate) SetInput(i CreateWorkspaceInput) *WorkspaceCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkspaceInput represents a mutation input for updating workspaces.
type UpdateWorkspaceInput struct {
	ID                                 ulid.ID
	Name                               *string
	Description                        map[string]interface{}
	CreatedBy                          *ulid.ID
	ClearTeammate                      bool
	AddProjectIDs                      []ulid.ID
	RemoveProjectIDs                   []ulid.ID
	AddWorkspaceTeammateIDs            []ulid.ID
	RemoveWorkspaceTeammateIDs         []ulid.ID
	AddFavoriteWorkspaceIDs            []ulid.ID
	RemoveFavoriteWorkspaceIDs         []ulid.ID
	AddTeammateTaskTabStatuseIDs       []ulid.ID
	RemoveTeammateTaskTabStatuseIDs    []ulid.ID
	AddTeammateTaskListStatuseIDs      []ulid.ID
	RemoveTeammateTaskListStatuseIDs   []ulid.ID
	AddTeammateTaskSectionIDs          []ulid.ID
	RemoveTeammateTaskSectionIDs       []ulid.ID
	AddTaskLikeIDs                     []ulid.ID
	RemoveTaskLikeIDs                  []ulid.ID
	AddTagIDs                          []ulid.ID
	RemoveTagIDs                       []ulid.ID
	AddTeammateTaskColumnIDs           []ulid.ID
	RemoveTeammateTaskColumnIDs        []ulid.ID
	AddTeammateTaskIDs                 []ulid.ID
	RemoveTeammateTaskIDs              []ulid.ID
	AddDeletedTasksRefIDs              []ulid.ID
	RemoveDeletedTasksRefIDs           []ulid.ID
	AddWorkspaceActivityIDs            []ulid.ID
	RemoveWorkspaceActivityIDs         []ulid.ID
	AddTaskActivityIDs                 []ulid.ID
	RemoveTaskActivityIDs              []ulid.ID
	AddArchivedTaskActivityIDs         []ulid.ID
	RemoveArchivedTaskActivityIDs      []ulid.ID
	AddArchivedWorkspaceActivityIDs    []ulid.ID
	RemoveArchivedWorkspaceActivityIDs []ulid.ID
	AddDeletedTeammateTaskIDs          []ulid.ID
	RemoveDeletedTeammateTaskIDs       []ulid.ID
	RequestID                          string
}

// Mutate applies the UpdateWorkspaceInput on the WorkspaceMutation.
func (i *UpdateWorkspaceInput) Mutate(m *WorkspaceMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.CreatedBy; v != nil {
		m.SetTeammateID(*v)
	}
	if ids := i.AddProjectIDs; len(ids) > 0 {
		m.AddProjectIDs(ids...)
	}
	if ids := i.RemoveProjectIDs; len(ids) > 0 {
		m.RemoveProjectIDs(ids...)
	}
	if ids := i.AddWorkspaceTeammateIDs; len(ids) > 0 {
		m.AddWorkspaceTeammateIDs(ids...)
	}
	if ids := i.RemoveWorkspaceTeammateIDs; len(ids) > 0 {
		m.RemoveWorkspaceTeammateIDs(ids...)
	}
	if ids := i.AddFavoriteWorkspaceIDs; len(ids) > 0 {
		m.AddFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.RemoveFavoriteWorkspaceIDs; len(ids) > 0 {
		m.RemoveFavoriteWorkspaceIDs(ids...)
	}
	if ids := i.AddTeammateTaskTabStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskTabStatuseIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskTabStatuseIDs; len(ids) > 0 {
		m.RemoveTeammateTaskTabStatuseIDs(ids...)
	}
	if ids := i.AddTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.AddTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskListStatuseIDs; len(ids) > 0 {
		m.RemoveTeammateTaskListStatuseIDs(ids...)
	}
	if ids := i.AddTeammateTaskSectionIDs; len(ids) > 0 {
		m.AddTeammateTaskSectionIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskSectionIDs; len(ids) > 0 {
		m.RemoveTeammateTaskSectionIDs(ids...)
	}
	if ids := i.AddTaskLikeIDs; len(ids) > 0 {
		m.AddTaskLikeIDs(ids...)
	}
	if ids := i.RemoveTaskLikeIDs; len(ids) > 0 {
		m.RemoveTaskLikeIDs(ids...)
	}
	if ids := i.AddTagIDs; len(ids) > 0 {
		m.AddTagIDs(ids...)
	}
	if ids := i.RemoveTagIDs; len(ids) > 0 {
		m.RemoveTagIDs(ids...)
	}
	if ids := i.AddTeammateTaskColumnIDs; len(ids) > 0 {
		m.AddTeammateTaskColumnIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskColumnIDs; len(ids) > 0 {
		m.RemoveTeammateTaskColumnIDs(ids...)
	}
	if ids := i.AddTeammateTaskIDs; len(ids) > 0 {
		m.AddTeammateTaskIDs(ids...)
	}
	if ids := i.RemoveTeammateTaskIDs; len(ids) > 0 {
		m.RemoveTeammateTaskIDs(ids...)
	}
	if ids := i.AddDeletedTasksRefIDs; len(ids) > 0 {
		m.AddDeletedTasksRefIDs(ids...)
	}
	if ids := i.RemoveDeletedTasksRefIDs; len(ids) > 0 {
		m.RemoveDeletedTasksRefIDs(ids...)
	}
	if ids := i.AddWorkspaceActivityIDs; len(ids) > 0 {
		m.AddWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveWorkspaceActivityIDs(ids...)
	}
	if ids := i.AddTaskActivityIDs; len(ids) > 0 {
		m.AddTaskActivityIDs(ids...)
	}
	if ids := i.RemoveTaskActivityIDs; len(ids) > 0 {
		m.RemoveTaskActivityIDs(ids...)
	}
	if ids := i.AddArchivedTaskActivityIDs; len(ids) > 0 {
		m.AddArchivedTaskActivityIDs(ids...)
	}
	if ids := i.RemoveArchivedTaskActivityIDs; len(ids) > 0 {
		m.RemoveArchivedTaskActivityIDs(ids...)
	}
	if ids := i.AddArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.AddArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.RemoveArchivedWorkspaceActivityIDs; len(ids) > 0 {
		m.RemoveArchivedWorkspaceActivityIDs(ids...)
	}
	if ids := i.AddDeletedTeammateTaskIDs; len(ids) > 0 {
		m.AddDeletedTeammateTaskIDs(ids...)
	}
	if ids := i.RemoveDeletedTeammateTaskIDs; len(ids) > 0 {
		m.RemoveDeletedTeammateTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceInput on the update builder.
func (u *WorkspaceUpdate) SetInput(i UpdateWorkspaceInput) *WorkspaceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkspaceInput on the update-one builder.
func (u *WorkspaceUpdateOne) SetInput(i UpdateWorkspaceInput) *WorkspaceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkspaceActivityInput represents a mutation input for creating workspaceactivities.
type CreateWorkspaceActivityInput struct {
	CreatedAt                *time.Time
	UpdatedAt                *time.Time
	ActivityTypeID           ulid.ID
	WorkspaceID              ulid.ID
	ProjectID                ulid.ID
	TeammateID               ulid.ID
	WorkspaceActivityTaskIDs []ulid.ID
	RequestID                string
}

// Mutate applies the CreateWorkspaceActivityInput on the WorkspaceActivityCreate builder.
func (i *CreateWorkspaceActivityInput) Mutate(m *WorkspaceActivityCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetActivityTypeID(i.ActivityTypeID)
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetProjectID(i.ProjectID)
	m.SetTeammateID(i.TeammateID)
	if ids := i.WorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddWorkspaceActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateWorkspaceActivityInput on the create builder.
func (c *WorkspaceActivityCreate) SetInput(i CreateWorkspaceActivityInput) *WorkspaceActivityCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkspaceActivityInput represents a mutation input for updating workspaceactivities.
type UpdateWorkspaceActivityInput struct {
	ID                             ulid.ID
	ActivityTypeID                 *ulid.ID
	ClearActivityType              bool
	WorkspaceID                    *ulid.ID
	ClearWorkspace                 bool
	ProjectID                      *ulid.ID
	ClearProject                   bool
	TeammateID                     *ulid.ID
	ClearTeammate                  bool
	AddWorkspaceActivityTaskIDs    []ulid.ID
	RemoveWorkspaceActivityTaskIDs []ulid.ID
	RequestID                      string
}

// Mutate applies the UpdateWorkspaceActivityInput on the WorkspaceActivityMutation.
func (i *UpdateWorkspaceActivityInput) Mutate(m *WorkspaceActivityMutation) {
	if i.ClearActivityType {
		m.ClearActivityType()
	}
	if v := i.ActivityTypeID; v != nil {
		m.SetActivityTypeID(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearProject {
		m.ClearProject()
	}
	if v := i.ProjectID; v != nil {
		m.SetProjectID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
	if ids := i.AddWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.AddWorkspaceActivityTaskIDs(ids...)
	}
	if ids := i.RemoveWorkspaceActivityTaskIDs; len(ids) > 0 {
		m.RemoveWorkspaceActivityTaskIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceActivityInput on the update builder.
func (u *WorkspaceActivityUpdate) SetInput(i UpdateWorkspaceActivityInput) *WorkspaceActivityUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkspaceActivityInput on the update-one builder.
func (u *WorkspaceActivityUpdateOne) SetInput(i UpdateWorkspaceActivityInput) *WorkspaceActivityUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkspaceActivityTaskInput represents a mutation input for creating workspaceactivitytasks.
type CreateWorkspaceActivityTaskInput struct {
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	TaskID              ulid.ID
	WorkspaceActivityID ulid.ID
	RequestID           string
}

// Mutate applies the CreateWorkspaceActivityTaskInput on the WorkspaceActivityTaskCreate builder.
func (i *CreateWorkspaceActivityTaskInput) Mutate(m *WorkspaceActivityTaskCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTaskID(i.TaskID)
	m.SetWorkspaceActivityID(i.WorkspaceActivityID)
}

// SetInput applies the change-set in the CreateWorkspaceActivityTaskInput on the create builder.
func (c *WorkspaceActivityTaskCreate) SetInput(i CreateWorkspaceActivityTaskInput) *WorkspaceActivityTaskCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkspaceActivityTaskInput represents a mutation input for updating workspaceactivitytasks.
type UpdateWorkspaceActivityTaskInput struct {
	ID                     ulid.ID
	TaskID                 *ulid.ID
	ClearTask              bool
	WorkspaceActivityID    *ulid.ID
	ClearWorkspaceActivity bool
	RequestID              string
}

// Mutate applies the UpdateWorkspaceActivityTaskInput on the WorkspaceActivityTaskMutation.
func (i *UpdateWorkspaceActivityTaskInput) Mutate(m *WorkspaceActivityTaskMutation) {
	if i.ClearTask {
		m.ClearTask()
	}
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if i.ClearWorkspaceActivity {
		m.ClearWorkspaceActivity()
	}
	if v := i.WorkspaceActivityID; v != nil {
		m.SetWorkspaceActivityID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceActivityTaskInput on the update builder.
func (u *WorkspaceActivityTaskUpdate) SetInput(i UpdateWorkspaceActivityTaskInput) *WorkspaceActivityTaskUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkspaceActivityTaskInput on the update-one builder.
func (u *WorkspaceActivityTaskUpdateOne) SetInput(i UpdateWorkspaceActivityTaskInput) *WorkspaceActivityTaskUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkspaceTeammateInput represents a mutation input for creating workspaceteammates.
type CreateWorkspaceTeammateInput struct {
	Role        string
	IsOwner     bool
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	WorkspaceID ulid.ID
	TeammateID  ulid.ID
	RequestID   string
}

// Mutate applies the CreateWorkspaceTeammateInput on the WorkspaceTeammateCreate builder.
func (i *CreateWorkspaceTeammateInput) Mutate(m *WorkspaceTeammateCreate) {
	m.SetRole(i.Role)
	m.SetIsOwner(i.IsOwner)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetWorkspaceID(i.WorkspaceID)
	m.SetTeammateID(i.TeammateID)
}

// SetInput applies the change-set in the CreateWorkspaceTeammateInput on the create builder.
func (c *WorkspaceTeammateCreate) SetInput(i CreateWorkspaceTeammateInput) *WorkspaceTeammateCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkspaceTeammateInput represents a mutation input for updating workspaceteammates.
type UpdateWorkspaceTeammateInput struct {
	ID             ulid.ID
	Role           *string
	IsOwner        *bool
	WorkspaceID    *ulid.ID
	ClearWorkspace bool
	TeammateID     *ulid.ID
	ClearTeammate  bool
	RequestID      string
}

// Mutate applies the UpdateWorkspaceTeammateInput on the WorkspaceTeammateMutation.
func (i *UpdateWorkspaceTeammateInput) Mutate(m *WorkspaceTeammateMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.IsOwner; v != nil {
		m.SetIsOwner(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
	if i.ClearTeammate {
		m.ClearTeammate()
	}
	if v := i.TeammateID; v != nil {
		m.SetTeammateID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceTeammateInput on the update builder.
func (u *WorkspaceTeammateUpdate) SetInput(i UpdateWorkspaceTeammateInput) *WorkspaceTeammateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkspaceTeammateInput on the update-one builder.
func (u *WorkspaceTeammateUpdateOne) SetInput(i UpdateWorkspaceTeammateInput) *WorkspaceTeammateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
