// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateTestUserInput represents a mutation input for creating testusers.
type CreateTestUserInput struct {
	Name      *string
	Age       int
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the CreateTestUserInput on the TestUserCreate builder.
func (i *CreateTestUserInput) Mutate(m *TestUserCreate) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	m.SetAge(i.Age)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateTestUserInput on the create builder.
func (c *TestUserCreate) SetInput(i CreateTestUserInput) *TestUserCreate {
	i.Mutate(c)
	return c
}

// UpdateTestUserInput represents a mutation input for updating testusers.
type UpdateTestUserInput struct {
	Name      *string
	Age       *int
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the UpdateTestUserInput on the TestUserMutation.
func (i *UpdateTestUserInput) Mutate(m *TestUserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Age; v != nil {
		m.SetAge(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateTestUserInput on the update builder.
func (u *TestUserUpdate) SetInput(i UpdateTestUserInput) *TestUserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTestUserInput on the update-one builder.
func (u *TestUserUpdateOne) SetInput(i UpdateTestUserInput) *TestUserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
