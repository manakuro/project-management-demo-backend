// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/deletedtask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeletedTaskUpdate is the builder for updating DeletedTask entities.
type DeletedTaskUpdate struct {
	config
	hooks    []Hook
	mutation *DeletedTaskMutation
}

// Where appends a list predicates to the DeletedTaskUpdate builder.
func (dtu *DeletedTaskUpdate) Where(ps ...predicate.DeletedTask) *DeletedTaskUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetTaskID sets the "task_id" field.
func (dtu *DeletedTaskUpdate) SetTaskID(u ulid.ID) *DeletedTaskUpdate {
	dtu.mutation.SetTaskID(u)
	return dtu
}

// SetWorkspaceID sets the "workspace_id" field.
func (dtu *DeletedTaskUpdate) SetWorkspaceID(u ulid.ID) *DeletedTaskUpdate {
	dtu.mutation.SetWorkspaceID(u)
	return dtu
}

// SetTaskSectionID sets the "task_section_id" field.
func (dtu *DeletedTaskUpdate) SetTaskSectionID(u ulid.ID) *DeletedTaskUpdate {
	dtu.mutation.SetTaskSectionID(u)
	return dtu
}

// SetTaskJoinID sets the "task_join_id" field.
func (dtu *DeletedTaskUpdate) SetTaskJoinID(u ulid.ID) *DeletedTaskUpdate {
	dtu.mutation.SetTaskJoinID(u)
	return dtu
}

// SetTaskType sets the "task_type" field.
func (dtu *DeletedTaskUpdate) SetTaskType(dt deletedtask.TaskType) *DeletedTaskUpdate {
	dtu.mutation.SetTaskType(dt)
	return dtu
}

// SetTask sets the "task" edge to the Task entity.
func (dtu *DeletedTaskUpdate) SetTask(t *Task) *DeletedTaskUpdate {
	return dtu.SetTaskID(t.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (dtu *DeletedTaskUpdate) SetWorkspace(w *Workspace) *DeletedTaskUpdate {
	return dtu.SetWorkspaceID(w.ID)
}

// Mutation returns the DeletedTaskMutation object of the builder.
func (dtu *DeletedTaskUpdate) Mutation() *DeletedTaskMutation {
	return dtu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (dtu *DeletedTaskUpdate) ClearTask() *DeletedTaskUpdate {
	dtu.mutation.ClearTask()
	return dtu
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (dtu *DeletedTaskUpdate) ClearWorkspace() *DeletedTaskUpdate {
	dtu.mutation.ClearWorkspace()
	return dtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DeletedTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dtu.hooks) == 0 {
		if err = dtu.check(); err != nil {
			return 0, err
		}
		affected, err = dtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtu.check(); err != nil {
				return 0, err
			}
			dtu.mutation = mutation
			affected, err = dtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dtu.hooks) - 1; i >= 0; i-- {
			if dtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DeletedTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DeletedTaskUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DeletedTaskUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtu *DeletedTaskUpdate) check() error {
	if v, ok := dtu.mutation.TaskType(); ok {
		if err := deletedtask.TaskTypeValidator(v); err != nil {
			return &ValidationError{Name: "task_type", err: fmt.Errorf("ent: validator failed for field \"task_type\": %w", err)}
		}
	}
	if _, ok := dtu.mutation.TaskID(); dtu.mutation.TaskCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task\"")
	}
	if _, ok := dtu.mutation.WorkspaceID(); dtu.mutation.WorkspaceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workspace\"")
	}
	return nil
}

func (dtu *DeletedTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deletedtask.Table,
			Columns: deletedtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedtask.FieldID,
			},
		},
	}
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.TaskSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedtask.FieldTaskSectionID,
		})
	}
	if value, ok := dtu.mutation.TaskJoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedtask.FieldTaskJoinID,
		})
	}
	if value, ok := dtu.mutation.TaskType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: deletedtask.FieldTaskType,
		})
	}
	if dtu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.TaskTable,
			Columns: []string{deletedtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.TaskTable,
			Columns: []string{deletedtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtu.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.WorkspaceTable,
			Columns: []string{deletedtask.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.WorkspaceTable,
			Columns: []string{deletedtask.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletedtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeletedTaskUpdateOne is the builder for updating a single DeletedTask entity.
type DeletedTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeletedTaskMutation
}

// SetTaskID sets the "task_id" field.
func (dtuo *DeletedTaskUpdateOne) SetTaskID(u ulid.ID) *DeletedTaskUpdateOne {
	dtuo.mutation.SetTaskID(u)
	return dtuo
}

// SetWorkspaceID sets the "workspace_id" field.
func (dtuo *DeletedTaskUpdateOne) SetWorkspaceID(u ulid.ID) *DeletedTaskUpdateOne {
	dtuo.mutation.SetWorkspaceID(u)
	return dtuo
}

// SetTaskSectionID sets the "task_section_id" field.
func (dtuo *DeletedTaskUpdateOne) SetTaskSectionID(u ulid.ID) *DeletedTaskUpdateOne {
	dtuo.mutation.SetTaskSectionID(u)
	return dtuo
}

// SetTaskJoinID sets the "task_join_id" field.
func (dtuo *DeletedTaskUpdateOne) SetTaskJoinID(u ulid.ID) *DeletedTaskUpdateOne {
	dtuo.mutation.SetTaskJoinID(u)
	return dtuo
}

// SetTaskType sets the "task_type" field.
func (dtuo *DeletedTaskUpdateOne) SetTaskType(dt deletedtask.TaskType) *DeletedTaskUpdateOne {
	dtuo.mutation.SetTaskType(dt)
	return dtuo
}

// SetTask sets the "task" edge to the Task entity.
func (dtuo *DeletedTaskUpdateOne) SetTask(t *Task) *DeletedTaskUpdateOne {
	return dtuo.SetTaskID(t.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (dtuo *DeletedTaskUpdateOne) SetWorkspace(w *Workspace) *DeletedTaskUpdateOne {
	return dtuo.SetWorkspaceID(w.ID)
}

// Mutation returns the DeletedTaskMutation object of the builder.
func (dtuo *DeletedTaskUpdateOne) Mutation() *DeletedTaskMutation {
	return dtuo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (dtuo *DeletedTaskUpdateOne) ClearTask() *DeletedTaskUpdateOne {
	dtuo.mutation.ClearTask()
	return dtuo
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (dtuo *DeletedTaskUpdateOne) ClearWorkspace() *DeletedTaskUpdateOne {
	dtuo.mutation.ClearWorkspace()
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DeletedTaskUpdateOne) Select(field string, fields ...string) *DeletedTaskUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DeletedTask entity.
func (dtuo *DeletedTaskUpdateOne) Save(ctx context.Context) (*DeletedTask, error) {
	var (
		err  error
		node *DeletedTask
	)
	if len(dtuo.hooks) == 0 {
		if err = dtuo.check(); err != nil {
			return nil, err
		}
		node, err = dtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtuo.check(); err != nil {
				return nil, err
			}
			dtuo.mutation = mutation
			node, err = dtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dtuo.hooks) - 1; i >= 0; i-- {
			if dtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DeletedTaskUpdateOne) SaveX(ctx context.Context) *DeletedTask {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DeletedTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DeletedTaskUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtuo *DeletedTaskUpdateOne) check() error {
	if v, ok := dtuo.mutation.TaskType(); ok {
		if err := deletedtask.TaskTypeValidator(v); err != nil {
			return &ValidationError{Name: "task_type", err: fmt.Errorf("ent: validator failed for field \"task_type\": %w", err)}
		}
	}
	if _, ok := dtuo.mutation.TaskID(); dtuo.mutation.TaskCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"task\"")
	}
	if _, ok := dtuo.mutation.WorkspaceID(); dtuo.mutation.WorkspaceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workspace\"")
	}
	return nil
}

func (dtuo *DeletedTaskUpdateOne) sqlSave(ctx context.Context) (_node *DeletedTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deletedtask.Table,
			Columns: deletedtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedtask.FieldID,
			},
		},
	}
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeletedTask.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deletedtask.FieldID)
		for _, f := range fields {
			if !deletedtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deletedtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.TaskSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedtask.FieldTaskSectionID,
		})
	}
	if value, ok := dtuo.mutation.TaskJoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedtask.FieldTaskJoinID,
		})
	}
	if value, ok := dtuo.mutation.TaskType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: deletedtask.FieldTaskType,
		})
	}
	if dtuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.TaskTable,
			Columns: []string{deletedtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.TaskTable,
			Columns: []string{deletedtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtuo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.WorkspaceTable,
			Columns: []string{deletedtask.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtask.WorkspaceTable,
			Columns: []string{deletedtask.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeletedTask{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletedtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
