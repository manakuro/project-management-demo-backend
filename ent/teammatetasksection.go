// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/workspace"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TeammateTaskSection is the model entity for the TeammateTaskSection schema.
type TeammateTaskSection struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// TeammateID holds the value of the "teammate_id" field.
	TeammateID ulid.ID `json:"teammate_id,omitempty"`
	// WorkspaceID holds the value of the "workspace_id" field.
	WorkspaceID ulid.ID `json:"workspace_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Assigned holds the value of the "assigned" field.
	Assigned bool `json:"assigned,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeammateTaskSectionQuery when eager-loading is set.
	Edges TeammateTaskSectionEdges `json:"edges"`
}

// TeammateTaskSectionEdges holds the relations/edges for other nodes in the graph.
type TeammateTaskSectionEdges struct {
	// Teammate holds the value of the teammate edge.
	Teammate *Teammate `json:"teammate,omitempty"`
	// Workspace holds the value of the workspace edge.
	Workspace *Workspace `json:"workspace,omitempty"`
	// TeammateTasks holds the value of the teammateTasks edge.
	TeammateTasks []*TeammateTask `json:"teammateTasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TeammateOrErr returns the Teammate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskSectionEdges) TeammateOrErr() (*Teammate, error) {
	if e.loadedTypes[0] {
		if e.Teammate == nil {
			// The edge teammate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammate.Label}
		}
		return e.Teammate, nil
	}
	return nil, &NotLoadedError{edge: "teammate"}
}

// WorkspaceOrErr returns the Workspace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskSectionEdges) WorkspaceOrErr() (*Workspace, error) {
	if e.loadedTypes[1] {
		if e.Workspace == nil {
			// The edge workspace was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workspace.Label}
		}
		return e.Workspace, nil
	}
	return nil, &NotLoadedError{edge: "workspace"}
}

// TeammateTasksOrErr returns the TeammateTasks value or an error if the edge
// was not loaded in eager-loading.
func (e TeammateTaskSectionEdges) TeammateTasksOrErr() ([]*TeammateTask, error) {
	if e.loadedTypes[2] {
		return e.TeammateTasks, nil
	}
	return nil, &NotLoadedError{edge: "teammateTasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeammateTaskSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case teammatetasksection.FieldAssigned:
			values[i] = new(sql.NullBool)
		case teammatetasksection.FieldName:
			values[i] = new(sql.NullString)
		case teammatetasksection.FieldCreatedAt, teammatetasksection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case teammatetasksection.FieldID, teammatetasksection.FieldTeammateID, teammatetasksection.FieldWorkspaceID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TeammateTaskSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeammateTaskSection fields.
func (tts *TeammateTaskSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teammatetasksection.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tts.ID = *value
			}
		case teammatetasksection.FieldTeammateID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field teammate_id", values[i])
			} else if value != nil {
				tts.TeammateID = *value
			}
		case teammatetasksection.FieldWorkspaceID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value != nil {
				tts.WorkspaceID = *value
			}
		case teammatetasksection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tts.Name = value.String
			}
		case teammatetasksection.FieldAssigned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field assigned", values[i])
			} else if value.Valid {
				tts.Assigned = value.Bool
			}
		case teammatetasksection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tts.CreatedAt = value.Time
			}
		case teammatetasksection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tts.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTeammate queries the "teammate" edge of the TeammateTaskSection entity.
func (tts *TeammateTaskSection) QueryTeammate() *TeammateQuery {
	return (&TeammateTaskSectionClient{config: tts.config}).QueryTeammate(tts)
}

// QueryWorkspace queries the "workspace" edge of the TeammateTaskSection entity.
func (tts *TeammateTaskSection) QueryWorkspace() *WorkspaceQuery {
	return (&TeammateTaskSectionClient{config: tts.config}).QueryWorkspace(tts)
}

// QueryTeammateTasks queries the "teammateTasks" edge of the TeammateTaskSection entity.
func (tts *TeammateTaskSection) QueryTeammateTasks() *TeammateTaskQuery {
	return (&TeammateTaskSectionClient{config: tts.config}).QueryTeammateTasks(tts)
}

// Update returns a builder for updating this TeammateTaskSection.
// Note that you need to call TeammateTaskSection.Unwrap() before calling this method if this TeammateTaskSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (tts *TeammateTaskSection) Update() *TeammateTaskSectionUpdateOne {
	return (&TeammateTaskSectionClient{config: tts.config}).UpdateOne(tts)
}

// Unwrap unwraps the TeammateTaskSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tts *TeammateTaskSection) Unwrap() *TeammateTaskSection {
	tx, ok := tts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeammateTaskSection is not a transactional entity")
	}
	tts.config.driver = tx.drv
	return tts
}

// String implements the fmt.Stringer.
func (tts *TeammateTaskSection) String() string {
	var builder strings.Builder
	builder.WriteString("TeammateTaskSection(")
	builder.WriteString(fmt.Sprintf("id=%v", tts.ID))
	builder.WriteString(", teammate_id=")
	builder.WriteString(fmt.Sprintf("%v", tts.TeammateID))
	builder.WriteString(", workspace_id=")
	builder.WriteString(fmt.Sprintf("%v", tts.WorkspaceID))
	builder.WriteString(", name=")
	builder.WriteString(tts.Name)
	builder.WriteString(", assigned=")
	builder.WriteString(fmt.Sprintf("%v", tts.Assigned))
	builder.WriteString(", created_at=")
	builder.WriteString(tts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tts.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TeammateTaskSections is a parsable slice of TeammateTaskSection.
type TeammateTaskSections []*TeammateTaskSection

func (tts TeammateTaskSections) config(cfg config) {
	for _i := range tts {
		tts[_i].config = cfg
	}
}
