// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tasklistcompletedstatus"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskListCompletedStatusQuery is the builder for querying TaskListCompletedStatus entities.
type TaskListCompletedStatusQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TaskListCompletedStatus
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskListCompletedStatusQuery builder.
func (tlcsq *TaskListCompletedStatusQuery) Where(ps ...predicate.TaskListCompletedStatus) *TaskListCompletedStatusQuery {
	tlcsq.predicates = append(tlcsq.predicates, ps...)
	return tlcsq
}

// Limit adds a limit step to the query.
func (tlcsq *TaskListCompletedStatusQuery) Limit(limit int) *TaskListCompletedStatusQuery {
	tlcsq.limit = &limit
	return tlcsq
}

// Offset adds an offset step to the query.
func (tlcsq *TaskListCompletedStatusQuery) Offset(offset int) *TaskListCompletedStatusQuery {
	tlcsq.offset = &offset
	return tlcsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tlcsq *TaskListCompletedStatusQuery) Unique(unique bool) *TaskListCompletedStatusQuery {
	tlcsq.unique = &unique
	return tlcsq
}

// Order adds an order step to the query.
func (tlcsq *TaskListCompletedStatusQuery) Order(o ...OrderFunc) *TaskListCompletedStatusQuery {
	tlcsq.order = append(tlcsq.order, o...)
	return tlcsq
}

// First returns the first TaskListCompletedStatus entity from the query.
// Returns a *NotFoundError when no TaskListCompletedStatus was found.
func (tlcsq *TaskListCompletedStatusQuery) First(ctx context.Context) (*TaskListCompletedStatus, error) {
	nodes, err := tlcsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tasklistcompletedstatus.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) FirstX(ctx context.Context) *TaskListCompletedStatus {
	node, err := tlcsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TaskListCompletedStatus ID from the query.
// Returns a *NotFoundError when no TaskListCompletedStatus ID was found.
func (tlcsq *TaskListCompletedStatusQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tlcsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tasklistcompletedstatus.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := tlcsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TaskListCompletedStatus entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TaskListCompletedStatus entity is not found.
// Returns a *NotFoundError when no TaskListCompletedStatus entities are found.
func (tlcsq *TaskListCompletedStatusQuery) Only(ctx context.Context) (*TaskListCompletedStatus, error) {
	nodes, err := tlcsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tasklistcompletedstatus.Label}
	default:
		return nil, &NotSingularError{tasklistcompletedstatus.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) OnlyX(ctx context.Context) *TaskListCompletedStatus {
	node, err := tlcsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TaskListCompletedStatus ID in the query.
// Returns a *NotSingularError when exactly one TaskListCompletedStatus ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tlcsq *TaskListCompletedStatusQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tlcsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = &NotSingularError{tasklistcompletedstatus.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := tlcsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TaskListCompletedStatusSlice.
func (tlcsq *TaskListCompletedStatusQuery) All(ctx context.Context) ([]*TaskListCompletedStatus, error) {
	if err := tlcsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tlcsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) AllX(ctx context.Context) []*TaskListCompletedStatus {
	nodes, err := tlcsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TaskListCompletedStatus IDs.
func (tlcsq *TaskListCompletedStatusQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := tlcsq.Select(tasklistcompletedstatus.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := tlcsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tlcsq *TaskListCompletedStatusQuery) Count(ctx context.Context) (int, error) {
	if err := tlcsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tlcsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) CountX(ctx context.Context) int {
	count, err := tlcsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tlcsq *TaskListCompletedStatusQuery) Exist(ctx context.Context) (bool, error) {
	if err := tlcsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tlcsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tlcsq *TaskListCompletedStatusQuery) ExistX(ctx context.Context) bool {
	exist, err := tlcsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskListCompletedStatusQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tlcsq *TaskListCompletedStatusQuery) Clone() *TaskListCompletedStatusQuery {
	if tlcsq == nil {
		return nil
	}
	return &TaskListCompletedStatusQuery{
		config:     tlcsq.config,
		limit:      tlcsq.limit,
		offset:     tlcsq.offset,
		order:      append([]OrderFunc{}, tlcsq.order...),
		predicates: append([]predicate.TaskListCompletedStatus{}, tlcsq.predicates...),
		// clone intermediate query.
		sql:  tlcsq.sql.Clone(),
		path: tlcsq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TaskListCompletedStatus.Query().
//		GroupBy(tasklistcompletedstatus.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tlcsq *TaskListCompletedStatusQuery) GroupBy(field string, fields ...string) *TaskListCompletedStatusGroupBy {
	group := &TaskListCompletedStatusGroupBy{config: tlcsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tlcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tlcsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.TaskListCompletedStatus.Query().
//		Select(tasklistcompletedstatus.FieldName).
//		Scan(ctx, &v)
//
func (tlcsq *TaskListCompletedStatusQuery) Select(fields ...string) *TaskListCompletedStatusSelect {
	tlcsq.fields = append(tlcsq.fields, fields...)
	return &TaskListCompletedStatusSelect{TaskListCompletedStatusQuery: tlcsq}
}

func (tlcsq *TaskListCompletedStatusQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tlcsq.fields {
		if !tasklistcompletedstatus.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tlcsq.path != nil {
		prev, err := tlcsq.path(ctx)
		if err != nil {
			return err
		}
		tlcsq.sql = prev
	}
	return nil
}

func (tlcsq *TaskListCompletedStatusQuery) sqlAll(ctx context.Context) ([]*TaskListCompletedStatus, error) {
	var (
		nodes = []*TaskListCompletedStatus{}
		_spec = tlcsq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TaskListCompletedStatus{config: tlcsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tlcsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (tlcsq *TaskListCompletedStatusQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tlcsq.querySpec()
	return sqlgraph.CountNodes(ctx, tlcsq.driver, _spec)
}

func (tlcsq *TaskListCompletedStatusQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tlcsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tlcsq *TaskListCompletedStatusQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasklistcompletedstatus.Table,
			Columns: tasklistcompletedstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tasklistcompletedstatus.FieldID,
			},
		},
		From:   tlcsq.sql,
		Unique: true,
	}
	if unique := tlcsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tlcsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasklistcompletedstatus.FieldID)
		for i := range fields {
			if fields[i] != tasklistcompletedstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tlcsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tlcsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tlcsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tlcsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tlcsq *TaskListCompletedStatusQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tlcsq.driver.Dialect())
	t1 := builder.Table(tasklistcompletedstatus.Table)
	columns := tlcsq.fields
	if len(columns) == 0 {
		columns = tasklistcompletedstatus.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tlcsq.sql != nil {
		selector = tlcsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range tlcsq.predicates {
		p(selector)
	}
	for _, p := range tlcsq.order {
		p(selector)
	}
	if offset := tlcsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tlcsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskListCompletedStatusGroupBy is the group-by builder for TaskListCompletedStatus entities.
type TaskListCompletedStatusGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tlcsgb *TaskListCompletedStatusGroupBy) Aggregate(fns ...AggregateFunc) *TaskListCompletedStatusGroupBy {
	tlcsgb.fns = append(tlcsgb.fns, fns...)
	return tlcsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tlcsgb *TaskListCompletedStatusGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tlcsgb.path(ctx)
	if err != nil {
		return err
	}
	tlcsgb.sql = query
	return tlcsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tlcsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tlcsgb.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tlcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) StringsX(ctx context.Context) []string {
	v, err := tlcsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tlcsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) StringX(ctx context.Context) string {
	v, err := tlcsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tlcsgb.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tlcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) IntsX(ctx context.Context) []int {
	v, err := tlcsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tlcsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) IntX(ctx context.Context) int {
	v, err := tlcsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tlcsgb.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tlcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tlcsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tlcsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tlcsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tlcsgb.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tlcsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tlcsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tlcsgb *TaskListCompletedStatusGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tlcsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tlcsgb *TaskListCompletedStatusGroupBy) BoolX(ctx context.Context) bool {
	v, err := tlcsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tlcsgb *TaskListCompletedStatusGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tlcsgb.fields {
		if !tasklistcompletedstatus.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tlcsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tlcsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tlcsgb *TaskListCompletedStatusGroupBy) sqlQuery() *sql.Selector {
	selector := tlcsgb.sql.Select()
	aggregation := make([]string, 0, len(tlcsgb.fns))
	for _, fn := range tlcsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tlcsgb.fields)+len(tlcsgb.fns))
		for _, f := range tlcsgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tlcsgb.fields...)...)
}

// TaskListCompletedStatusSelect is the builder for selecting fields of TaskListCompletedStatus entities.
type TaskListCompletedStatusSelect struct {
	*TaskListCompletedStatusQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tlcss *TaskListCompletedStatusSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tlcss.prepareQuery(ctx); err != nil {
		return err
	}
	tlcss.sql = tlcss.TaskListCompletedStatusQuery.sqlQuery(ctx)
	return tlcss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tlcss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tlcss.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tlcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) StringsX(ctx context.Context) []string {
	v, err := tlcss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tlcss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) StringX(ctx context.Context) string {
	v, err := tlcss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tlcss.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tlcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) IntsX(ctx context.Context) []int {
	v, err := tlcss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tlcss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) IntX(ctx context.Context) int {
	v, err := tlcss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tlcss.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tlcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tlcss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tlcss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) Float64X(ctx context.Context) float64 {
	v, err := tlcss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tlcss.fields) > 1 {
		return nil, errors.New("ent: TaskListCompletedStatusSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tlcss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) BoolsX(ctx context.Context) []bool {
	v, err := tlcss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tlcss *TaskListCompletedStatusSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tlcss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tasklistcompletedstatus.Label}
	default:
		err = fmt.Errorf("ent: TaskListCompletedStatusSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tlcss *TaskListCompletedStatusSelect) BoolX(ctx context.Context) bool {
	v, err := tlcss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tlcss *TaskListCompletedStatusSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tlcss.sql.Query()
	if err := tlcss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
