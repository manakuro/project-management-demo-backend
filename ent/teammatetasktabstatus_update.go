// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateTaskTabStatusUpdate is the builder for updating TeammateTaskTabStatus entities.
type TeammateTaskTabStatusUpdate struct {
	config
	hooks    []Hook
	mutation *TeammateTaskTabStatusMutation
}

// Where appends a list predicates to the TeammateTaskTabStatusUpdate builder.
func (tttsu *TeammateTaskTabStatusUpdate) Where(ps ...predicate.TeammateTaskTabStatus) *TeammateTaskTabStatusUpdate {
	tttsu.mutation.Where(ps...)
	return tttsu
}

// SetWorkspaceID sets the "workspace_id" field.
func (tttsu *TeammateTaskTabStatusUpdate) SetWorkspaceID(u ulid.ID) *TeammateTaskTabStatusUpdate {
	tttsu.mutation.SetWorkspaceID(u)
	return tttsu
}

// SetTeammateID sets the "teammate_id" field.
func (tttsu *TeammateTaskTabStatusUpdate) SetTeammateID(u ulid.ID) *TeammateTaskTabStatusUpdate {
	tttsu.mutation.SetTeammateID(u)
	return tttsu
}

// SetStatusCode sets the "status_code" field.
func (tttsu *TeammateTaskTabStatusUpdate) SetStatusCode(tc teammatetasktabstatus.StatusCode) *TeammateTaskTabStatusUpdate {
	tttsu.mutation.SetStatusCode(tc)
	return tttsu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (tttsu *TeammateTaskTabStatusUpdate) SetNillableStatusCode(tc *teammatetasktabstatus.StatusCode) *TeammateTaskTabStatusUpdate {
	if tc != nil {
		tttsu.SetStatusCode(*tc)
	}
	return tttsu
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (tttsu *TeammateTaskTabStatusUpdate) SetWorkspace(w *Workspace) *TeammateTaskTabStatusUpdate {
	return tttsu.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tttsu *TeammateTaskTabStatusUpdate) SetTeammate(t *Teammate) *TeammateTaskTabStatusUpdate {
	return tttsu.SetTeammateID(t.ID)
}

// Mutation returns the TeammateTaskTabStatusMutation object of the builder.
func (tttsu *TeammateTaskTabStatusUpdate) Mutation() *TeammateTaskTabStatusMutation {
	return tttsu.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (tttsu *TeammateTaskTabStatusUpdate) ClearWorkspace() *TeammateTaskTabStatusUpdate {
	tttsu.mutation.ClearWorkspace()
	return tttsu
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tttsu *TeammateTaskTabStatusUpdate) ClearTeammate() *TeammateTaskTabStatusUpdate {
	tttsu.mutation.ClearTeammate()
	return tttsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tttsu *TeammateTaskTabStatusUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tttsu.hooks) == 0 {
		if err = tttsu.check(); err != nil {
			return 0, err
		}
		affected, err = tttsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskTabStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tttsu.check(); err != nil {
				return 0, err
			}
			tttsu.mutation = mutation
			affected, err = tttsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tttsu.hooks) - 1; i >= 0; i-- {
			if tttsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tttsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tttsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tttsu *TeammateTaskTabStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := tttsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tttsu *TeammateTaskTabStatusUpdate) Exec(ctx context.Context) error {
	_, err := tttsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tttsu *TeammateTaskTabStatusUpdate) ExecX(ctx context.Context) {
	if err := tttsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tttsu *TeammateTaskTabStatusUpdate) check() error {
	if v, ok := tttsu.mutation.StatusCode(); ok {
		if err := teammatetasktabstatus.StatusCodeValidator(v); err != nil {
			return &ValidationError{Name: "status_code", err: fmt.Errorf(`ent: validator failed for field "TeammateTaskTabStatus.status_code": %w`, err)}
		}
	}
	if _, ok := tttsu.mutation.WorkspaceID(); tttsu.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskTabStatus.workspace"`)
	}
	if _, ok := tttsu.mutation.TeammateID(); tttsu.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskTabStatus.teammate"`)
	}
	return nil
}

func (tttsu *TeammateTaskTabStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammatetasktabstatus.Table,
			Columns: teammatetasktabstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetasktabstatus.FieldID,
			},
		},
	}
	if ps := tttsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tttsu.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: teammatetasktabstatus.FieldStatusCode,
		})
	}
	if tttsu.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.WorkspaceTable,
			Columns: []string{teammatetasktabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tttsu.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.WorkspaceTable,
			Columns: []string{teammatetasktabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tttsu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.TeammateTable,
			Columns: []string{teammatetasktabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tttsu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.TeammateTable,
			Columns: []string{teammatetasktabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tttsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammatetasktabstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TeammateTaskTabStatusUpdateOne is the builder for updating a single TeammateTaskTabStatus entity.
type TeammateTaskTabStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeammateTaskTabStatusMutation
}

// SetWorkspaceID sets the "workspace_id" field.
func (tttsuo *TeammateTaskTabStatusUpdateOne) SetWorkspaceID(u ulid.ID) *TeammateTaskTabStatusUpdateOne {
	tttsuo.mutation.SetWorkspaceID(u)
	return tttsuo
}

// SetTeammateID sets the "teammate_id" field.
func (tttsuo *TeammateTaskTabStatusUpdateOne) SetTeammateID(u ulid.ID) *TeammateTaskTabStatusUpdateOne {
	tttsuo.mutation.SetTeammateID(u)
	return tttsuo
}

// SetStatusCode sets the "status_code" field.
func (tttsuo *TeammateTaskTabStatusUpdateOne) SetStatusCode(tc teammatetasktabstatus.StatusCode) *TeammateTaskTabStatusUpdateOne {
	tttsuo.mutation.SetStatusCode(tc)
	return tttsuo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (tttsuo *TeammateTaskTabStatusUpdateOne) SetNillableStatusCode(tc *teammatetasktabstatus.StatusCode) *TeammateTaskTabStatusUpdateOne {
	if tc != nil {
		tttsuo.SetStatusCode(*tc)
	}
	return tttsuo
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (tttsuo *TeammateTaskTabStatusUpdateOne) SetWorkspace(w *Workspace) *TeammateTaskTabStatusUpdateOne {
	return tttsuo.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tttsuo *TeammateTaskTabStatusUpdateOne) SetTeammate(t *Teammate) *TeammateTaskTabStatusUpdateOne {
	return tttsuo.SetTeammateID(t.ID)
}

// Mutation returns the TeammateTaskTabStatusMutation object of the builder.
func (tttsuo *TeammateTaskTabStatusUpdateOne) Mutation() *TeammateTaskTabStatusMutation {
	return tttsuo.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (tttsuo *TeammateTaskTabStatusUpdateOne) ClearWorkspace() *TeammateTaskTabStatusUpdateOne {
	tttsuo.mutation.ClearWorkspace()
	return tttsuo
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tttsuo *TeammateTaskTabStatusUpdateOne) ClearTeammate() *TeammateTaskTabStatusUpdateOne {
	tttsuo.mutation.ClearTeammate()
	return tttsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tttsuo *TeammateTaskTabStatusUpdateOne) Select(field string, fields ...string) *TeammateTaskTabStatusUpdateOne {
	tttsuo.fields = append([]string{field}, fields...)
	return tttsuo
}

// Save executes the query and returns the updated TeammateTaskTabStatus entity.
func (tttsuo *TeammateTaskTabStatusUpdateOne) Save(ctx context.Context) (*TeammateTaskTabStatus, error) {
	var (
		err  error
		node *TeammateTaskTabStatus
	)
	if len(tttsuo.hooks) == 0 {
		if err = tttsuo.check(); err != nil {
			return nil, err
		}
		node, err = tttsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskTabStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tttsuo.check(); err != nil {
				return nil, err
			}
			tttsuo.mutation = mutation
			node, err = tttsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tttsuo.hooks) - 1; i >= 0; i-- {
			if tttsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tttsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tttsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tttsuo *TeammateTaskTabStatusUpdateOne) SaveX(ctx context.Context) *TeammateTaskTabStatus {
	node, err := tttsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tttsuo *TeammateTaskTabStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := tttsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tttsuo *TeammateTaskTabStatusUpdateOne) ExecX(ctx context.Context) {
	if err := tttsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tttsuo *TeammateTaskTabStatusUpdateOne) check() error {
	if v, ok := tttsuo.mutation.StatusCode(); ok {
		if err := teammatetasktabstatus.StatusCodeValidator(v); err != nil {
			return &ValidationError{Name: "status_code", err: fmt.Errorf(`ent: validator failed for field "TeammateTaskTabStatus.status_code": %w`, err)}
		}
	}
	if _, ok := tttsuo.mutation.WorkspaceID(); tttsuo.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskTabStatus.workspace"`)
	}
	if _, ok := tttsuo.mutation.TeammateID(); tttsuo.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskTabStatus.teammate"`)
	}
	return nil
}

func (tttsuo *TeammateTaskTabStatusUpdateOne) sqlSave(ctx context.Context) (_node *TeammateTaskTabStatus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammatetasktabstatus.Table,
			Columns: teammatetasktabstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetasktabstatus.FieldID,
			},
		},
	}
	id, ok := tttsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeammateTaskTabStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tttsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammatetasktabstatus.FieldID)
		for _, f := range fields {
			if !teammatetasktabstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teammatetasktabstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tttsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tttsuo.mutation.StatusCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: teammatetasktabstatus.FieldStatusCode,
		})
	}
	if tttsuo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.WorkspaceTable,
			Columns: []string{teammatetasktabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tttsuo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.WorkspaceTable,
			Columns: []string{teammatetasktabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tttsuo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.TeammateTable,
			Columns: []string{teammatetasktabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tttsuo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetasktabstatus.TeammateTable,
			Columns: []string{teammatetasktabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeammateTaskTabStatus{config: tttsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tttsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammatetasktabstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
