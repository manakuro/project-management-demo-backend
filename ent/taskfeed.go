// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/teammate"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TaskFeed is the model entity for the TaskFeed schema.
type TaskFeed struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID ulid.ID `json:"task_id,omitempty"`
	// TeammateID holds the value of the "teammate_id" field.
	TeammateID ulid.ID `json:"teammate_id,omitempty"`
	// Description holds the value of the "description" field.
	Description map[string]interface{} `json:"description,omitempty"`
	// IsFirst holds the value of the "is_first" field.
	IsFirst bool `json:"is_first,omitempty"`
	// IsPinned holds the value of the "is_pinned" field.
	IsPinned bool `json:"is_pinned,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskFeedQuery when eager-loading is set.
	Edges TaskFeedEdges `json:"edges"`
}

// TaskFeedEdges holds the relations/edges for other nodes in the graph.
type TaskFeedEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// Teammate holds the value of the teammate edge.
	Teammate *Teammate `json:"teammate,omitempty"`
	// TaskFeedLikes holds the value of the taskFeedLikes edge.
	TaskFeedLikes []*TaskFeedLike `json:"taskFeedLikes,omitempty"`
	// TaskFiles holds the value of the taskFiles edge.
	TaskFiles []*TaskFile `json:"taskFiles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskFeedEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// The edge task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// TeammateOrErr returns the Teammate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskFeedEdges) TeammateOrErr() (*Teammate, error) {
	if e.loadedTypes[1] {
		if e.Teammate == nil {
			// The edge teammate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammate.Label}
		}
		return e.Teammate, nil
	}
	return nil, &NotLoadedError{edge: "teammate"}
}

// TaskFeedLikesOrErr returns the TaskFeedLikes value or an error if the edge
// was not loaded in eager-loading.
func (e TaskFeedEdges) TaskFeedLikesOrErr() ([]*TaskFeedLike, error) {
	if e.loadedTypes[2] {
		return e.TaskFeedLikes, nil
	}
	return nil, &NotLoadedError{edge: "taskFeedLikes"}
}

// TaskFilesOrErr returns the TaskFiles value or an error if the edge
// was not loaded in eager-loading.
func (e TaskFeedEdges) TaskFilesOrErr() ([]*TaskFile, error) {
	if e.loadedTypes[3] {
		return e.TaskFiles, nil
	}
	return nil, &NotLoadedError{edge: "taskFiles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskFeed) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskfeed.FieldDescription:
			values[i] = new([]byte)
		case taskfeed.FieldIsFirst, taskfeed.FieldIsPinned:
			values[i] = new(sql.NullBool)
		case taskfeed.FieldCreatedAt, taskfeed.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case taskfeed.FieldID, taskfeed.FieldTaskID, taskfeed.FieldTeammateID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskFeed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskFeed fields.
func (tf *TaskFeed) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskfeed.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tf.ID = *value
			}
		case taskfeed.FieldTaskID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				tf.TaskID = *value
			}
		case taskfeed.FieldTeammateID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field teammate_id", values[i])
			} else if value != nil {
				tf.TeammateID = *value
			}
		case taskfeed.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tf.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case taskfeed.FieldIsFirst:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_first", values[i])
			} else if value.Valid {
				tf.IsFirst = value.Bool
			}
		case taskfeed.FieldIsPinned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_pinned", values[i])
			} else if value.Valid {
				tf.IsPinned = value.Bool
			}
		case taskfeed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tf.CreatedAt = value.Time
			}
		case taskfeed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tf.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTask queries the "task" edge of the TaskFeed entity.
func (tf *TaskFeed) QueryTask() *TaskQuery {
	return (&TaskFeedClient{config: tf.config}).QueryTask(tf)
}

// QueryTeammate queries the "teammate" edge of the TaskFeed entity.
func (tf *TaskFeed) QueryTeammate() *TeammateQuery {
	return (&TaskFeedClient{config: tf.config}).QueryTeammate(tf)
}

// QueryTaskFeedLikes queries the "taskFeedLikes" edge of the TaskFeed entity.
func (tf *TaskFeed) QueryTaskFeedLikes() *TaskFeedLikeQuery {
	return (&TaskFeedClient{config: tf.config}).QueryTaskFeedLikes(tf)
}

// QueryTaskFiles queries the "taskFiles" edge of the TaskFeed entity.
func (tf *TaskFeed) QueryTaskFiles() *TaskFileQuery {
	return (&TaskFeedClient{config: tf.config}).QueryTaskFiles(tf)
}

// Update returns a builder for updating this TaskFeed.
// Note that you need to call TaskFeed.Unwrap() before calling this method if this TaskFeed
// was returned from a transaction, and the transaction was committed or rolled back.
func (tf *TaskFeed) Update() *TaskFeedUpdateOne {
	return (&TaskFeedClient{config: tf.config}).UpdateOne(tf)
}

// Unwrap unwraps the TaskFeed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tf *TaskFeed) Unwrap() *TaskFeed {
	tx, ok := tf.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskFeed is not a transactional entity")
	}
	tf.config.driver = tx.drv
	return tf
}

// String implements the fmt.Stringer.
func (tf *TaskFeed) String() string {
	var builder strings.Builder
	builder.WriteString("TaskFeed(")
	builder.WriteString(fmt.Sprintf("id=%v", tf.ID))
	builder.WriteString(", task_id=")
	builder.WriteString(fmt.Sprintf("%v", tf.TaskID))
	builder.WriteString(", teammate_id=")
	builder.WriteString(fmt.Sprintf("%v", tf.TeammateID))
	builder.WriteString(", description=")
	builder.WriteString(fmt.Sprintf("%v", tf.Description))
	builder.WriteString(", is_first=")
	builder.WriteString(fmt.Sprintf("%v", tf.IsFirst))
	builder.WriteString(", is_pinned=")
	builder.WriteString(fmt.Sprintf("%v", tf.IsPinned))
	builder.WriteString(", created_at=")
	builder.WriteString(tf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tf.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskFeeds is a parsable slice of TaskFeed.
type TaskFeeds []*TaskFeed

func (tf TaskFeeds) config(cfg config) {
	for _i := range tf {
		tf[_i].config = cfg
	}
}
