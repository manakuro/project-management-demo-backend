// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/testtodo"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TestTodo is the model entity for the TestTodo schema.
type TestTodo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status testtodo.Status `json:"status,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestTodo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case testtodo.FieldID, testtodo.FieldPriority:
			values[i] = new(sql.NullInt64)
		case testtodo.FieldName, testtodo.FieldStatus:
			values[i] = new(sql.NullString)
		case testtodo.FieldCreatedAt, testtodo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestTodo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestTodo fields.
func (tt *TestTodo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testtodo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case testtodo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case testtodo.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tt.Status = testtodo.Status(value.String)
			}
		case testtodo.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				tt.Priority = int(value.Int64)
			}
		case testtodo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tt.CreatedAt = value.Time
			}
		case testtodo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tt.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TestTodo.
// Note that you need to call TestTodo.Unwrap() before calling this method if this TestTodo
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TestTodo) Update() *TestTodoUpdateOne {
	return (&TestTodoClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TestTodo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TestTodo) Unwrap() *TestTodo {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestTodo is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TestTodo) String() string {
	var builder strings.Builder
	builder.WriteString("TestTodo(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", tt.Status))
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", tt.Priority))
	builder.WriteString(", created_at=")
	builder.WriteString(tt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TestTodos is a parsable slice of TestTodo.
type TestTodos []*TestTodo

func (tt TestTodos) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
