// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProjectTaskColumn is the model entity for the ProjectTaskColumn schema.
type ProjectTaskColumn struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID ulid.ID `json:"project_id,omitempty"`
	// TaskColumnID holds the value of the "task_column_id" field.
	TaskColumnID ulid.ID `json:"task_column_id,omitempty"`
	// Width holds the value of the "width" field.
	Width string `json:"width,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Customizable holds the value of the "customizable" field.
	Customizable bool `json:"customizable,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTaskColumnQuery when eager-loading is set.
	Edges ProjectTaskColumnEdges `json:"edges"`
}

// ProjectTaskColumnEdges holds the relations/edges for other nodes in the graph.
type ProjectTaskColumnEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// TaskColumn holds the value of the taskColumn edge.
	TaskColumn *TaskColumn `json:"taskColumn,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskColumnEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// TaskColumnOrErr returns the TaskColumn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskColumnEdges) TaskColumnOrErr() (*TaskColumn, error) {
	if e.loadedTypes[1] {
		if e.TaskColumn == nil {
			// The edge taskColumn was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: taskcolumn.Label}
		}
		return e.TaskColumn, nil
	}
	return nil, &NotLoadedError{edge: "taskColumn"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTaskColumn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttaskcolumn.FieldDisabled, projecttaskcolumn.FieldCustomizable:
			values[i] = new(sql.NullBool)
		case projecttaskcolumn.FieldOrder:
			values[i] = new(sql.NullInt64)
		case projecttaskcolumn.FieldWidth:
			values[i] = new(sql.NullString)
		case projecttaskcolumn.FieldCreatedAt, projecttaskcolumn.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projecttaskcolumn.FieldID, projecttaskcolumn.FieldProjectID, projecttaskcolumn.FieldTaskColumnID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectTaskColumn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTaskColumn fields.
func (ptc *ProjectTaskColumn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttaskcolumn.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ptc.ID = *value
			}
		case projecttaskcolumn.FieldProjectID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				ptc.ProjectID = *value
			}
		case projecttaskcolumn.FieldTaskColumnID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_column_id", values[i])
			} else if value != nil {
				ptc.TaskColumnID = *value
			}
		case projecttaskcolumn.FieldWidth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				ptc.Width = value.String
			}
		case projecttaskcolumn.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				ptc.Disabled = value.Bool
			}
		case projecttaskcolumn.FieldCustomizable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field customizable", values[i])
			} else if value.Valid {
				ptc.Customizable = value.Bool
			}
		case projecttaskcolumn.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ptc.Order = int(value.Int64)
			}
		case projecttaskcolumn.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ptc.CreatedAt = value.Time
			}
		case projecttaskcolumn.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ptc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the ProjectTaskColumn entity.
func (ptc *ProjectTaskColumn) QueryProject() *ProjectQuery {
	return (&ProjectTaskColumnClient{config: ptc.config}).QueryProject(ptc)
}

// QueryTaskColumn queries the "taskColumn" edge of the ProjectTaskColumn entity.
func (ptc *ProjectTaskColumn) QueryTaskColumn() *TaskColumnQuery {
	return (&ProjectTaskColumnClient{config: ptc.config}).QueryTaskColumn(ptc)
}

// Update returns a builder for updating this ProjectTaskColumn.
// Note that you need to call ProjectTaskColumn.Unwrap() before calling this method if this ProjectTaskColumn
// was returned from a transaction, and the transaction was committed or rolled back.
func (ptc *ProjectTaskColumn) Update() *ProjectTaskColumnUpdateOne {
	return (&ProjectTaskColumnClient{config: ptc.config}).UpdateOne(ptc)
}

// Unwrap unwraps the ProjectTaskColumn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ptc *ProjectTaskColumn) Unwrap() *ProjectTaskColumn {
	tx, ok := ptc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectTaskColumn is not a transactional entity")
	}
	ptc.config.driver = tx.drv
	return ptc
}

// String implements the fmt.Stringer.
func (ptc *ProjectTaskColumn) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTaskColumn(")
	builder.WriteString(fmt.Sprintf("id=%v", ptc.ID))
	builder.WriteString(", project_id=")
	builder.WriteString(fmt.Sprintf("%v", ptc.ProjectID))
	builder.WriteString(", task_column_id=")
	builder.WriteString(fmt.Sprintf("%v", ptc.TaskColumnID))
	builder.WriteString(", width=")
	builder.WriteString(ptc.Width)
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", ptc.Disabled))
	builder.WriteString(", customizable=")
	builder.WriteString(fmt.Sprintf("%v", ptc.Customizable))
	builder.WriteString(", order=")
	builder.WriteString(fmt.Sprintf("%v", ptc.Order))
	builder.WriteString(", created_at=")
	builder.WriteString(ptc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ptc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectTaskColumns is a parsable slice of ProjectTaskColumn.
type ProjectTaskColumns []*ProjectTaskColumn

func (ptc ProjectTaskColumns) config(cfg config) {
	for _i := range ptc {
		ptc[_i].config = cfg
	}
}
