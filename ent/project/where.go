// Code generated by entc, DO NOT EDIT.

package project

import (
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WorkspaceID applies equality check predicate on the "workspace_id" field. It's identical to WorkspaceIDEQ.
func WorkspaceID(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkspaceID), v))
	})
}

// ProjectBaseColorID applies equality check predicate on the "project_base_color_id" field. It's identical to ProjectBaseColorIDEQ.
func ProjectBaseColorID(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectBaseColorID), v))
	})
}

// ProjectLightColorID applies equality check predicate on the "project_light_color_id" field. It's identical to ProjectLightColorIDEQ.
func ProjectLightColorID(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectLightColorID), v))
	})
}

// ProjectIconID applies equality check predicate on the "project_icon_id" field. It's identical to ProjectIconIDEQ.
func ProjectIconID(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectIconID), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DescriptionTitle applies equality check predicate on the "description_title" field. It's identical to DescriptionTitleEQ.
func DescriptionTitle(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionTitle), v))
	})
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDueDate), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// WorkspaceIDEQ applies the EQ predicate on the "workspace_id" field.
func WorkspaceIDEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkspaceID), v))
	})
}

// WorkspaceIDNEQ applies the NEQ predicate on the "workspace_id" field.
func WorkspaceIDNEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkspaceID), v))
	})
}

// WorkspaceIDIn applies the In predicate on the "workspace_id" field.
func WorkspaceIDIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkspaceID), v...))
	})
}

// WorkspaceIDNotIn applies the NotIn predicate on the "workspace_id" field.
func WorkspaceIDNotIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkspaceID), v...))
	})
}

// WorkspaceIDGT applies the GT predicate on the "workspace_id" field.
func WorkspaceIDGT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkspaceID), v))
	})
}

// WorkspaceIDGTE applies the GTE predicate on the "workspace_id" field.
func WorkspaceIDGTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkspaceID), v))
	})
}

// WorkspaceIDLT applies the LT predicate on the "workspace_id" field.
func WorkspaceIDLT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkspaceID), v))
	})
}

// WorkspaceIDLTE applies the LTE predicate on the "workspace_id" field.
func WorkspaceIDLTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkspaceID), v))
	})
}

// WorkspaceIDContains applies the Contains predicate on the "workspace_id" field.
func WorkspaceIDContains(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWorkspaceID), vc))
	})
}

// WorkspaceIDHasPrefix applies the HasPrefix predicate on the "workspace_id" field.
func WorkspaceIDHasPrefix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWorkspaceID), vc))
	})
}

// WorkspaceIDHasSuffix applies the HasSuffix predicate on the "workspace_id" field.
func WorkspaceIDHasSuffix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWorkspaceID), vc))
	})
}

// WorkspaceIDEqualFold applies the EqualFold predicate on the "workspace_id" field.
func WorkspaceIDEqualFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWorkspaceID), vc))
	})
}

// WorkspaceIDContainsFold applies the ContainsFold predicate on the "workspace_id" field.
func WorkspaceIDContainsFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWorkspaceID), vc))
	})
}

// ProjectBaseColorIDEQ applies the EQ predicate on the "project_base_color_id" field.
func ProjectBaseColorIDEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectBaseColorID), v))
	})
}

// ProjectBaseColorIDNEQ applies the NEQ predicate on the "project_base_color_id" field.
func ProjectBaseColorIDNEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectBaseColorID), v))
	})
}

// ProjectBaseColorIDIn applies the In predicate on the "project_base_color_id" field.
func ProjectBaseColorIDIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectBaseColorID), v...))
	})
}

// ProjectBaseColorIDNotIn applies the NotIn predicate on the "project_base_color_id" field.
func ProjectBaseColorIDNotIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectBaseColorID), v...))
	})
}

// ProjectBaseColorIDGT applies the GT predicate on the "project_base_color_id" field.
func ProjectBaseColorIDGT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectBaseColorID), v))
	})
}

// ProjectBaseColorIDGTE applies the GTE predicate on the "project_base_color_id" field.
func ProjectBaseColorIDGTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectBaseColorID), v))
	})
}

// ProjectBaseColorIDLT applies the LT predicate on the "project_base_color_id" field.
func ProjectBaseColorIDLT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectBaseColorID), v))
	})
}

// ProjectBaseColorIDLTE applies the LTE predicate on the "project_base_color_id" field.
func ProjectBaseColorIDLTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectBaseColorID), v))
	})
}

// ProjectBaseColorIDContains applies the Contains predicate on the "project_base_color_id" field.
func ProjectBaseColorIDContains(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectBaseColorID), vc))
	})
}

// ProjectBaseColorIDHasPrefix applies the HasPrefix predicate on the "project_base_color_id" field.
func ProjectBaseColorIDHasPrefix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectBaseColorID), vc))
	})
}

// ProjectBaseColorIDHasSuffix applies the HasSuffix predicate on the "project_base_color_id" field.
func ProjectBaseColorIDHasSuffix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectBaseColorID), vc))
	})
}

// ProjectBaseColorIDEqualFold applies the EqualFold predicate on the "project_base_color_id" field.
func ProjectBaseColorIDEqualFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectBaseColorID), vc))
	})
}

// ProjectBaseColorIDContainsFold applies the ContainsFold predicate on the "project_base_color_id" field.
func ProjectBaseColorIDContainsFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectBaseColorID), vc))
	})
}

// ProjectLightColorIDEQ applies the EQ predicate on the "project_light_color_id" field.
func ProjectLightColorIDEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectLightColorID), v))
	})
}

// ProjectLightColorIDNEQ applies the NEQ predicate on the "project_light_color_id" field.
func ProjectLightColorIDNEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectLightColorID), v))
	})
}

// ProjectLightColorIDIn applies the In predicate on the "project_light_color_id" field.
func ProjectLightColorIDIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectLightColorID), v...))
	})
}

// ProjectLightColorIDNotIn applies the NotIn predicate on the "project_light_color_id" field.
func ProjectLightColorIDNotIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectLightColorID), v...))
	})
}

// ProjectLightColorIDGT applies the GT predicate on the "project_light_color_id" field.
func ProjectLightColorIDGT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectLightColorID), v))
	})
}

// ProjectLightColorIDGTE applies the GTE predicate on the "project_light_color_id" field.
func ProjectLightColorIDGTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectLightColorID), v))
	})
}

// ProjectLightColorIDLT applies the LT predicate on the "project_light_color_id" field.
func ProjectLightColorIDLT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectLightColorID), v))
	})
}

// ProjectLightColorIDLTE applies the LTE predicate on the "project_light_color_id" field.
func ProjectLightColorIDLTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectLightColorID), v))
	})
}

// ProjectLightColorIDContains applies the Contains predicate on the "project_light_color_id" field.
func ProjectLightColorIDContains(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectLightColorID), vc))
	})
}

// ProjectLightColorIDHasPrefix applies the HasPrefix predicate on the "project_light_color_id" field.
func ProjectLightColorIDHasPrefix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectLightColorID), vc))
	})
}

// ProjectLightColorIDHasSuffix applies the HasSuffix predicate on the "project_light_color_id" field.
func ProjectLightColorIDHasSuffix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectLightColorID), vc))
	})
}

// ProjectLightColorIDEqualFold applies the EqualFold predicate on the "project_light_color_id" field.
func ProjectLightColorIDEqualFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectLightColorID), vc))
	})
}

// ProjectLightColorIDContainsFold applies the ContainsFold predicate on the "project_light_color_id" field.
func ProjectLightColorIDContainsFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectLightColorID), vc))
	})
}

// ProjectIconIDEQ applies the EQ predicate on the "project_icon_id" field.
func ProjectIconIDEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectIconID), v))
	})
}

// ProjectIconIDNEQ applies the NEQ predicate on the "project_icon_id" field.
func ProjectIconIDNEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectIconID), v))
	})
}

// ProjectIconIDIn applies the In predicate on the "project_icon_id" field.
func ProjectIconIDIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectIconID), v...))
	})
}

// ProjectIconIDNotIn applies the NotIn predicate on the "project_icon_id" field.
func ProjectIconIDNotIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectIconID), v...))
	})
}

// ProjectIconIDGT applies the GT predicate on the "project_icon_id" field.
func ProjectIconIDGT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectIconID), v))
	})
}

// ProjectIconIDGTE applies the GTE predicate on the "project_icon_id" field.
func ProjectIconIDGTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectIconID), v))
	})
}

// ProjectIconIDLT applies the LT predicate on the "project_icon_id" field.
func ProjectIconIDLT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectIconID), v))
	})
}

// ProjectIconIDLTE applies the LTE predicate on the "project_icon_id" field.
func ProjectIconIDLTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectIconID), v))
	})
}

// ProjectIconIDContains applies the Contains predicate on the "project_icon_id" field.
func ProjectIconIDContains(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectIconID), vc))
	})
}

// ProjectIconIDHasPrefix applies the HasPrefix predicate on the "project_icon_id" field.
func ProjectIconIDHasPrefix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectIconID), vc))
	})
}

// ProjectIconIDHasSuffix applies the HasSuffix predicate on the "project_icon_id" field.
func ProjectIconIDHasSuffix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectIconID), vc))
	})
}

// ProjectIconIDEqualFold applies the EqualFold predicate on the "project_icon_id" field.
func ProjectIconIDEqualFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectIconID), vc))
	})
}

// ProjectIconIDContainsFold applies the ContainsFold predicate on the "project_icon_id" field.
func ProjectIconIDContainsFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectIconID), vc))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...ulid.ID) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v ulid.ID) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v ulid.ID) predicate.Project {
	vc := string(v)
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), vc))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionTitleEQ applies the EQ predicate on the "description_title" field.
func DescriptionTitleEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleNEQ applies the NEQ predicate on the "description_title" field.
func DescriptionTitleNEQ(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleIn applies the In predicate on the "description_title" field.
func DescriptionTitleIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescriptionTitle), v...))
	})
}

// DescriptionTitleNotIn applies the NotIn predicate on the "description_title" field.
func DescriptionTitleNotIn(vs ...string) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescriptionTitle), v...))
	})
}

// DescriptionTitleGT applies the GT predicate on the "description_title" field.
func DescriptionTitleGT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleGTE applies the GTE predicate on the "description_title" field.
func DescriptionTitleGTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleLT applies the LT predicate on the "description_title" field.
func DescriptionTitleLT(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleLTE applies the LTE predicate on the "description_title" field.
func DescriptionTitleLTE(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleContains applies the Contains predicate on the "description_title" field.
func DescriptionTitleContains(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleHasPrefix applies the HasPrefix predicate on the "description_title" field.
func DescriptionTitleHasPrefix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleHasSuffix applies the HasSuffix predicate on the "description_title" field.
func DescriptionTitleHasSuffix(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleEqualFold applies the EqualFold predicate on the "description_title" field.
func DescriptionTitleEqualFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescriptionTitle), v))
	})
}

// DescriptionTitleContainsFold applies the ContainsFold predicate on the "description_title" field.
func DescriptionTitleContainsFold(v string) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescriptionTitle), v))
	})
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDueDate), v))
	})
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDueDate), v))
	})
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDueDate), v...))
	})
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDueDate), v...))
	})
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDueDate), v))
	})
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDueDate), v))
	})
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDueDate), v))
	})
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDueDate), v))
	})
}

// DueDateIsNil applies the IsNil predicate on the "due_date" field.
func DueDateIsNil() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDueDate)))
	})
}

// DueDateNotNil applies the NotNil predicate on the "due_date" field.
func DueDateNotNil() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDueDate)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Project(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasWorkspace applies the HasEdge predicate on the "workspace" edge.
func HasWorkspace() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkspaceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkspaceTable, WorkspaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkspaceWith applies the HasEdge predicate on the "workspace" edge with a given conditions (other predicates).
func HasWorkspaceWith(preds ...predicate.Workspace) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkspaceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkspaceTable, WorkspaceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectBaseColor applies the HasEdge predicate on the "projectBaseColor" edge.
func HasProjectBaseColor() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectBaseColorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectBaseColorTable, ProjectBaseColorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectBaseColorWith applies the HasEdge predicate on the "projectBaseColor" edge with a given conditions (other predicates).
func HasProjectBaseColorWith(preds ...predicate.ProjectBaseColor) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectBaseColorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectBaseColorTable, ProjectBaseColorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectLightColor applies the HasEdge predicate on the "projectLightColor" edge.
func HasProjectLightColor() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectLightColorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectLightColorTable, ProjectLightColorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectLightColorWith applies the HasEdge predicate on the "projectLightColor" edge with a given conditions (other predicates).
func HasProjectLightColorWith(preds ...predicate.ProjectLightColor) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectLightColorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectLightColorTable, ProjectLightColorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectIcon applies the HasEdge predicate on the "projectIcon" edge.
func HasProjectIcon() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectIconTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectIconTable, ProjectIconColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectIconWith applies the HasEdge predicate on the "projectIcon" edge with a given conditions (other predicates).
func HasProjectIconWith(preds ...predicate.ProjectIcon) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectIconInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectIconTable, ProjectIconColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeammate applies the HasEdge predicate on the "teammate" edge.
func HasTeammate() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeammateTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeammateTable, TeammateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeammateWith applies the HasEdge predicate on the "teammate" edge with a given conditions (other predicates).
func HasTeammateWith(preds ...predicate.Teammate) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TeammateInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeammateTable, TeammateColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectTeammates applies the HasEdge predicate on the "projectTeammates" edge.
func HasProjectTeammates() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTeammatesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTeammatesTable, ProjectTeammatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectTeammatesWith applies the HasEdge predicate on the "projectTeammates" edge with a given conditions (other predicates).
func HasProjectTeammatesWith(preds ...predicate.ProjectTeammate) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTeammatesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTeammatesTable, ProjectTeammatesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFavoriteProjects applies the HasEdge predicate on the "favoriteProjects" edge.
func HasFavoriteProjects() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FavoriteProjectsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FavoriteProjectsTable, FavoriteProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavoriteProjectsWith applies the HasEdge predicate on the "favoriteProjects" edge with a given conditions (other predicates).
func HasFavoriteProjectsWith(preds ...predicate.FavoriteProject) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FavoriteProjectsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FavoriteProjectsTable, FavoriteProjectsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectTaskColumns applies the HasEdge predicate on the "projectTaskColumns" edge.
func HasProjectTaskColumns() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskColumnsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTaskColumnsTable, ProjectTaskColumnsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectTaskColumnsWith applies the HasEdge predicate on the "projectTaskColumns" edge with a given conditions (other predicates).
func HasProjectTaskColumnsWith(preds ...predicate.ProjectTaskColumn) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskColumnsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTaskColumnsTable, ProjectTaskColumnsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectTaskListStatuses applies the HasEdge predicate on the "projectTaskListStatuses" edge.
func HasProjectTaskListStatuses() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskListStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTaskListStatusesTable, ProjectTaskListStatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectTaskListStatusesWith applies the HasEdge predicate on the "projectTaskListStatuses" edge with a given conditions (other predicates).
func HasProjectTaskListStatusesWith(preds ...predicate.ProjectTaskListStatus) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskListStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTaskListStatusesTable, ProjectTaskListStatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectTaskSections applies the HasEdge predicate on the "projectTaskSections" edge.
func HasProjectTaskSections() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskSectionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTaskSectionsTable, ProjectTaskSectionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectTaskSectionsWith applies the HasEdge predicate on the "projectTaskSections" edge with a given conditions (other predicates).
func HasProjectTaskSectionsWith(preds ...predicate.ProjectTaskSection) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskSectionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTaskSectionsTable, ProjectTaskSectionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectTasks applies the HasEdge predicate on the "projectTasks" edge.
func HasProjectTasks() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTasksTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTasksTable, ProjectTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectTasksWith applies the HasEdge predicate on the "projectTasks" edge with a given conditions (other predicates).
func HasProjectTasksWith(preds ...predicate.ProjectTask) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTasksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTasksTable, ProjectTasksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskFiles applies the HasEdge predicate on the "taskFiles" edge.
func HasTaskFiles() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TaskFilesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskFilesTable, TaskFilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskFilesWith applies the HasEdge predicate on the "taskFiles" edge with a given conditions (other predicates).
func HasTaskFilesWith(preds ...predicate.TaskFile) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TaskFilesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TaskFilesTable, TaskFilesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkspaceActivities applies the HasEdge predicate on the "workspaceActivities" edge.
func HasWorkspaceActivities() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkspaceActivitiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkspaceActivitiesTable, WorkspaceActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkspaceActivitiesWith applies the HasEdge predicate on the "workspaceActivities" edge with a given conditions (other predicates).
func HasWorkspaceActivitiesWith(preds ...predicate.WorkspaceActivity) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkspaceActivitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkspaceActivitiesTable, WorkspaceActivitiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArchivedWorkspaceActivities applies the HasEdge predicate on the "archivedWorkspaceActivities" edge.
func HasArchivedWorkspaceActivities() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArchivedWorkspaceActivitiesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArchivedWorkspaceActivitiesTable, ArchivedWorkspaceActivitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArchivedWorkspaceActivitiesWith applies the HasEdge predicate on the "archivedWorkspaceActivities" edge with a given conditions (other predicates).
func HasArchivedWorkspaceActivitiesWith(preds ...predicate.ArchivedWorkspaceActivity) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ArchivedWorkspaceActivitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArchivedWorkspaceActivitiesTable, ArchivedWorkspaceActivitiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		p(s.Not())
	})
}
