// Code generated by entc, DO NOT EDIT.

package project

import (
	"project-management-demo-backend/ent/schema/ulid"
	"time"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWorkspaceID holds the string denoting the workspace_id field in the database.
	FieldWorkspaceID = "workspace_id"
	// FieldColorID holds the string denoting the color_id field in the database.
	FieldColorID = "color_id"
	// FieldIconID holds the string denoting the icon_id field in the database.
	FieldIconID = "icon_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDescriptionTitle holds the string denoting the description_title field in the database.
	FieldDescriptionTitle = "description_title"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeWorkspace holds the string denoting the workspace edge name in mutations.
	EdgeWorkspace = "workspace"
	// EdgeColor holds the string denoting the color edge name in mutations.
	EdgeColor = "color"
	// EdgeIcon holds the string denoting the icon edge name in mutations.
	EdgeIcon = "icon"
	// EdgeTeammate holds the string denoting the teammate edge name in mutations.
	EdgeTeammate = "teammate"
	// EdgeProjectTeammates holds the string denoting the project_teammates edge name in mutations.
	EdgeProjectTeammates = "project_teammates"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// WorkspaceTable is the table that holds the workspace relation/edge.
	WorkspaceTable = "projects"
	// WorkspaceInverseTable is the table name for the Workspace entity.
	// It exists in this package in order to avoid circular dependency with the "workspace" package.
	WorkspaceInverseTable = "workspaces"
	// WorkspaceColumn is the table column denoting the workspace relation/edge.
	WorkspaceColumn = "workspace_id"
	// ColorTable is the table that holds the color relation/edge.
	ColorTable = "projects"
	// ColorInverseTable is the table name for the Color entity.
	// It exists in this package in order to avoid circular dependency with the "color" package.
	ColorInverseTable = "colors"
	// ColorColumn is the table column denoting the color relation/edge.
	ColorColumn = "color_id"
	// IconTable is the table that holds the icon relation/edge.
	IconTable = "projects"
	// IconInverseTable is the table name for the Icon entity.
	// It exists in this package in order to avoid circular dependency with the "icon" package.
	IconInverseTable = "icons"
	// IconColumn is the table column denoting the icon relation/edge.
	IconColumn = "icon_id"
	// TeammateTable is the table that holds the teammate relation/edge.
	TeammateTable = "projects"
	// TeammateInverseTable is the table name for the Teammate entity.
	// It exists in this package in order to avoid circular dependency with the "teammate" package.
	TeammateInverseTable = "teammates"
	// TeammateColumn is the table column denoting the teammate relation/edge.
	TeammateColumn = "created_by"
	// ProjectTeammatesTable is the table that holds the project_teammates relation/edge.
	ProjectTeammatesTable = "project_teammates"
	// ProjectTeammatesInverseTable is the table name for the ProjectTeammate entity.
	// It exists in this package in order to avoid circular dependency with the "projectteammate" package.
	ProjectTeammatesInverseTable = "project_teammates"
	// ProjectTeammatesColumn is the table column denoting the project_teammates relation/edge.
	ProjectTeammatesColumn = "project_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldWorkspaceID,
	FieldColorID,
	FieldIconID,
	FieldCreatedBy,
	FieldName,
	FieldDescription,
	FieldDescriptionTitle,
	FieldDueDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionTitleValidator is a validator for the "description_title" field. It is called by the builders before save.
	DescriptionTitleValidator func(string) error
	// DefaultDueDate holds the default value on creation for the "due_date" field.
	DefaultDueDate func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ID
)
