// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/deletedtaskactivitytask"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeletedTaskActivityTaskCreate is the builder for creating a DeletedTaskActivityTask entity.
type DeletedTaskActivityTaskCreate struct {
	config
	mutation *DeletedTaskActivityTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTaskActivityID sets the "task_activity_id" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetTaskActivityID(u ulid.ID) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetTaskActivityID(u)
	return dtatc
}

// SetTaskID sets the "task_id" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetTaskID(u ulid.ID) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetTaskID(u)
	return dtatc
}

// SetTaskActivityTaskID sets the "task_activity_task_id" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetTaskActivityTaskID(u ulid.ID) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetTaskActivityTaskID(u)
	return dtatc
}

// SetTaskActivityTaskCreatedAt sets the "task_activity_task_created_at" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetTaskActivityTaskCreatedAt(t time.Time) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetTaskActivityTaskCreatedAt(t)
	return dtatc
}

// SetTaskActivityTaskUpdatedAt sets the "task_activity_task_updated_at" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetTaskActivityTaskUpdatedAt(t time.Time) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetTaskActivityTaskUpdatedAt(t)
	return dtatc
}

// SetCreatedAt sets the "created_at" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetCreatedAt(t time.Time) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetCreatedAt(t)
	return dtatc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtatc *DeletedTaskActivityTaskCreate) SetNillableCreatedAt(t *time.Time) *DeletedTaskActivityTaskCreate {
	if t != nil {
		dtatc.SetCreatedAt(*t)
	}
	return dtatc
}

// SetUpdatedAt sets the "updated_at" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetUpdatedAt(t time.Time) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetUpdatedAt(t)
	return dtatc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dtatc *DeletedTaskActivityTaskCreate) SetNillableUpdatedAt(t *time.Time) *DeletedTaskActivityTaskCreate {
	if t != nil {
		dtatc.SetUpdatedAt(*t)
	}
	return dtatc
}

// SetID sets the "id" field.
func (dtatc *DeletedTaskActivityTaskCreate) SetID(u ulid.ID) *DeletedTaskActivityTaskCreate {
	dtatc.mutation.SetID(u)
	return dtatc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dtatc *DeletedTaskActivityTaskCreate) SetNillableID(u *ulid.ID) *DeletedTaskActivityTaskCreate {
	if u != nil {
		dtatc.SetID(*u)
	}
	return dtatc
}

// SetTask sets the "task" edge to the Task entity.
func (dtatc *DeletedTaskActivityTaskCreate) SetTask(t *Task) *DeletedTaskActivityTaskCreate {
	return dtatc.SetTaskID(t.ID)
}

// Mutation returns the DeletedTaskActivityTaskMutation object of the builder.
func (dtatc *DeletedTaskActivityTaskCreate) Mutation() *DeletedTaskActivityTaskMutation {
	return dtatc.mutation
}

// Save creates the DeletedTaskActivityTask in the database.
func (dtatc *DeletedTaskActivityTaskCreate) Save(ctx context.Context) (*DeletedTaskActivityTask, error) {
	var (
		err  error
		node *DeletedTaskActivityTask
	)
	dtatc.defaults()
	if len(dtatc.hooks) == 0 {
		if err = dtatc.check(); err != nil {
			return nil, err
		}
		node, err = dtatc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedTaskActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtatc.check(); err != nil {
				return nil, err
			}
			dtatc.mutation = mutation
			if node, err = dtatc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dtatc.hooks) - 1; i >= 0; i-- {
			if dtatc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtatc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtatc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dtatc *DeletedTaskActivityTaskCreate) SaveX(ctx context.Context) *DeletedTaskActivityTask {
	v, err := dtatc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtatc *DeletedTaskActivityTaskCreate) Exec(ctx context.Context) error {
	_, err := dtatc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtatc *DeletedTaskActivityTaskCreate) ExecX(ctx context.Context) {
	if err := dtatc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtatc *DeletedTaskActivityTaskCreate) defaults() {
	if _, ok := dtatc.mutation.CreatedAt(); !ok {
		v := deletedtaskactivitytask.DefaultCreatedAt()
		dtatc.mutation.SetCreatedAt(v)
	}
	if _, ok := dtatc.mutation.UpdatedAt(); !ok {
		v := deletedtaskactivitytask.DefaultUpdatedAt()
		dtatc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dtatc.mutation.ID(); !ok {
		v := deletedtaskactivitytask.DefaultID()
		dtatc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtatc *DeletedTaskActivityTaskCreate) check() error {
	if _, ok := dtatc.mutation.TaskActivityID(); !ok {
		return &ValidationError{Name: "task_activity_id", err: errors.New(`ent: missing required field "DeletedTaskActivityTask.task_activity_id"`)}
	}
	if _, ok := dtatc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "DeletedTaskActivityTask.task_id"`)}
	}
	if _, ok := dtatc.mutation.TaskActivityTaskID(); !ok {
		return &ValidationError{Name: "task_activity_task_id", err: errors.New(`ent: missing required field "DeletedTaskActivityTask.task_activity_task_id"`)}
	}
	if _, ok := dtatc.mutation.TaskActivityTaskCreatedAt(); !ok {
		return &ValidationError{Name: "task_activity_task_created_at", err: errors.New(`ent: missing required field "DeletedTaskActivityTask.task_activity_task_created_at"`)}
	}
	if _, ok := dtatc.mutation.TaskActivityTaskUpdatedAt(); !ok {
		return &ValidationError{Name: "task_activity_task_updated_at", err: errors.New(`ent: missing required field "DeletedTaskActivityTask.task_activity_task_updated_at"`)}
	}
	if _, ok := dtatc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeletedTaskActivityTask.created_at"`)}
	}
	if _, ok := dtatc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeletedTaskActivityTask.updated_at"`)}
	}
	if _, ok := dtatc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "DeletedTaskActivityTask.task"`)}
	}
	return nil
}

func (dtatc *DeletedTaskActivityTaskCreate) sqlSave(ctx context.Context) (*DeletedTaskActivityTask, error) {
	_node, _spec := dtatc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtatc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dtatc *DeletedTaskActivityTaskCreate) createSpec() (*DeletedTaskActivityTask, *sqlgraph.CreateSpec) {
	var (
		_node = &DeletedTaskActivityTask{config: dtatc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deletedtaskactivitytask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedtaskactivitytask.FieldID,
			},
		}
	)
	_spec.OnConflict = dtatc.conflict
	if id, ok := dtatc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dtatc.mutation.TaskActivityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedtaskactivitytask.FieldTaskActivityID,
		})
		_node.TaskActivityID = value
	}
	if value, ok := dtatc.mutation.TaskActivityTaskID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedtaskactivitytask.FieldTaskActivityTaskID,
		})
		_node.TaskActivityTaskID = value
	}
	if value, ok := dtatc.mutation.TaskActivityTaskCreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedtaskactivitytask.FieldTaskActivityTaskCreatedAt,
		})
		_node.TaskActivityTaskCreatedAt = value
	}
	if value, ok := dtatc.mutation.TaskActivityTaskUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedtaskactivitytask.FieldTaskActivityTaskUpdatedAt,
		})
		_node.TaskActivityTaskUpdatedAt = value
	}
	if value, ok := dtatc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedtaskactivitytask.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dtatc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedtaskactivitytask.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := dtatc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedtaskactivitytask.TaskTable,
			Columns: []string{deletedtaskactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletedTaskActivityTask.Create().
//		SetTaskActivityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletedTaskActivityTaskUpsert) {
//			SetTaskActivityID(v+v).
//		}).
//		Exec(ctx)
//
func (dtatc *DeletedTaskActivityTaskCreate) OnConflict(opts ...sql.ConflictOption) *DeletedTaskActivityTaskUpsertOne {
	dtatc.conflict = opts
	return &DeletedTaskActivityTaskUpsertOne{
		create: dtatc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletedTaskActivityTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dtatc *DeletedTaskActivityTaskCreate) OnConflictColumns(columns ...string) *DeletedTaskActivityTaskUpsertOne {
	dtatc.conflict = append(dtatc.conflict, sql.ConflictColumns(columns...))
	return &DeletedTaskActivityTaskUpsertOne{
		create: dtatc,
	}
}

type (
	// DeletedTaskActivityTaskUpsertOne is the builder for "upsert"-ing
	//  one DeletedTaskActivityTask node.
	DeletedTaskActivityTaskUpsertOne struct {
		create *DeletedTaskActivityTaskCreate
	}

	// DeletedTaskActivityTaskUpsert is the "OnConflict" setter.
	DeletedTaskActivityTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetTaskActivityID sets the "task_activity_id" field.
func (u *DeletedTaskActivityTaskUpsert) SetTaskActivityID(v ulid.ID) *DeletedTaskActivityTaskUpsert {
	u.Set(deletedtaskactivitytask.FieldTaskActivityID, v)
	return u
}

// UpdateTaskActivityID sets the "task_activity_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsert) UpdateTaskActivityID() *DeletedTaskActivityTaskUpsert {
	u.SetExcluded(deletedtaskactivitytask.FieldTaskActivityID)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *DeletedTaskActivityTaskUpsert) SetTaskID(v ulid.ID) *DeletedTaskActivityTaskUpsert {
	u.Set(deletedtaskactivitytask.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsert) UpdateTaskID() *DeletedTaskActivityTaskUpsert {
	u.SetExcluded(deletedtaskactivitytask.FieldTaskID)
	return u
}

// SetTaskActivityTaskID sets the "task_activity_task_id" field.
func (u *DeletedTaskActivityTaskUpsert) SetTaskActivityTaskID(v ulid.ID) *DeletedTaskActivityTaskUpsert {
	u.Set(deletedtaskactivitytask.FieldTaskActivityTaskID, v)
	return u
}

// UpdateTaskActivityTaskID sets the "task_activity_task_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsert) UpdateTaskActivityTaskID() *DeletedTaskActivityTaskUpsert {
	u.SetExcluded(deletedtaskactivitytask.FieldTaskActivityTaskID)
	return u
}

// SetTaskActivityTaskCreatedAt sets the "task_activity_task_created_at" field.
func (u *DeletedTaskActivityTaskUpsert) SetTaskActivityTaskCreatedAt(v time.Time) *DeletedTaskActivityTaskUpsert {
	u.Set(deletedtaskactivitytask.FieldTaskActivityTaskCreatedAt, v)
	return u
}

// UpdateTaskActivityTaskCreatedAt sets the "task_activity_task_created_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsert) UpdateTaskActivityTaskCreatedAt() *DeletedTaskActivityTaskUpsert {
	u.SetExcluded(deletedtaskactivitytask.FieldTaskActivityTaskCreatedAt)
	return u
}

// SetTaskActivityTaskUpdatedAt sets the "task_activity_task_updated_at" field.
func (u *DeletedTaskActivityTaskUpsert) SetTaskActivityTaskUpdatedAt(v time.Time) *DeletedTaskActivityTaskUpsert {
	u.Set(deletedtaskactivitytask.FieldTaskActivityTaskUpdatedAt, v)
	return u
}

// UpdateTaskActivityTaskUpdatedAt sets the "task_activity_task_updated_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsert) UpdateTaskActivityTaskUpdatedAt() *DeletedTaskActivityTaskUpsert {
	u.SetExcluded(deletedtaskactivitytask.FieldTaskActivityTaskUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedTaskActivityTaskUpsert) SetCreatedAt(v time.Time) *DeletedTaskActivityTaskUpsert {
	u.Set(deletedtaskactivitytask.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsert) UpdateCreatedAt() *DeletedTaskActivityTaskUpsert {
	u.SetExcluded(deletedtaskactivitytask.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedTaskActivityTaskUpsert) SetUpdatedAt(v time.Time) *DeletedTaskActivityTaskUpsert {
	u.Set(deletedtaskactivitytask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsert) UpdateUpdatedAt() *DeletedTaskActivityTaskUpsert {
	u.SetExcluded(deletedtaskactivitytask.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeletedTaskActivityTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deletedtaskactivitytask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeletedTaskActivityTaskUpsertOne) UpdateNewValues() *DeletedTaskActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deletedtaskactivitytask.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(deletedtaskactivitytask.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(deletedtaskactivitytask.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DeletedTaskActivityTask.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DeletedTaskActivityTaskUpsertOne) Ignore() *DeletedTaskActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletedTaskActivityTaskUpsertOne) DoNothing() *DeletedTaskActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletedTaskActivityTaskCreate.OnConflict
// documentation for more info.
func (u *DeletedTaskActivityTaskUpsertOne) Update(set func(*DeletedTaskActivityTaskUpsert)) *DeletedTaskActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletedTaskActivityTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskActivityID sets the "task_activity_id" field.
func (u *DeletedTaskActivityTaskUpsertOne) SetTaskActivityID(v ulid.ID) *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityID(v)
	})
}

// UpdateTaskActivityID sets the "task_activity_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertOne) UpdateTaskActivityID() *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *DeletedTaskActivityTaskUpsertOne) SetTaskID(v ulid.ID) *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertOne) UpdateTaskID() *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetTaskActivityTaskID sets the "task_activity_task_id" field.
func (u *DeletedTaskActivityTaskUpsertOne) SetTaskActivityTaskID(v ulid.ID) *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityTaskID(v)
	})
}

// UpdateTaskActivityTaskID sets the "task_activity_task_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertOne) UpdateTaskActivityTaskID() *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityTaskID()
	})
}

// SetTaskActivityTaskCreatedAt sets the "task_activity_task_created_at" field.
func (u *DeletedTaskActivityTaskUpsertOne) SetTaskActivityTaskCreatedAt(v time.Time) *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityTaskCreatedAt(v)
	})
}

// UpdateTaskActivityTaskCreatedAt sets the "task_activity_task_created_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertOne) UpdateTaskActivityTaskCreatedAt() *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityTaskCreatedAt()
	})
}

// SetTaskActivityTaskUpdatedAt sets the "task_activity_task_updated_at" field.
func (u *DeletedTaskActivityTaskUpsertOne) SetTaskActivityTaskUpdatedAt(v time.Time) *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityTaskUpdatedAt(v)
	})
}

// UpdateTaskActivityTaskUpdatedAt sets the "task_activity_task_updated_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertOne) UpdateTaskActivityTaskUpdatedAt() *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityTaskUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedTaskActivityTaskUpsertOne) SetCreatedAt(v time.Time) *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertOne) UpdateCreatedAt() *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedTaskActivityTaskUpsertOne) SetUpdatedAt(v time.Time) *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertOne) UpdateUpdatedAt() *DeletedTaskActivityTaskUpsertOne {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeletedTaskActivityTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeletedTaskActivityTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletedTaskActivityTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeletedTaskActivityTaskUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeletedTaskActivityTaskUpsertOne.ID is not supported by MySQL driver. Use DeletedTaskActivityTaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeletedTaskActivityTaskUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeletedTaskActivityTaskCreateBulk is the builder for creating many DeletedTaskActivityTask entities in bulk.
type DeletedTaskActivityTaskCreateBulk struct {
	config
	builders []*DeletedTaskActivityTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the DeletedTaskActivityTask entities in the database.
func (dtatcb *DeletedTaskActivityTaskCreateBulk) Save(ctx context.Context) ([]*DeletedTaskActivityTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dtatcb.builders))
	nodes := make([]*DeletedTaskActivityTask, len(dtatcb.builders))
	mutators := make([]Mutator, len(dtatcb.builders))
	for i := range dtatcb.builders {
		func(i int, root context.Context) {
			builder := dtatcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeletedTaskActivityTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtatcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dtatcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtatcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtatcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtatcb *DeletedTaskActivityTaskCreateBulk) SaveX(ctx context.Context) []*DeletedTaskActivityTask {
	v, err := dtatcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtatcb *DeletedTaskActivityTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := dtatcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtatcb *DeletedTaskActivityTaskCreateBulk) ExecX(ctx context.Context) {
	if err := dtatcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletedTaskActivityTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletedTaskActivityTaskUpsert) {
//			SetTaskActivityID(v+v).
//		}).
//		Exec(ctx)
//
func (dtatcb *DeletedTaskActivityTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeletedTaskActivityTaskUpsertBulk {
	dtatcb.conflict = opts
	return &DeletedTaskActivityTaskUpsertBulk{
		create: dtatcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletedTaskActivityTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dtatcb *DeletedTaskActivityTaskCreateBulk) OnConflictColumns(columns ...string) *DeletedTaskActivityTaskUpsertBulk {
	dtatcb.conflict = append(dtatcb.conflict, sql.ConflictColumns(columns...))
	return &DeletedTaskActivityTaskUpsertBulk{
		create: dtatcb,
	}
}

// DeletedTaskActivityTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of DeletedTaskActivityTask nodes.
type DeletedTaskActivityTaskUpsertBulk struct {
	create *DeletedTaskActivityTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeletedTaskActivityTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deletedtaskactivitytask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateNewValues() *DeletedTaskActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deletedtaskactivitytask.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(deletedtaskactivitytask.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(deletedtaskactivitytask.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeletedTaskActivityTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DeletedTaskActivityTaskUpsertBulk) Ignore() *DeletedTaskActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletedTaskActivityTaskUpsertBulk) DoNothing() *DeletedTaskActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletedTaskActivityTaskCreateBulk.OnConflict
// documentation for more info.
func (u *DeletedTaskActivityTaskUpsertBulk) Update(set func(*DeletedTaskActivityTaskUpsert)) *DeletedTaskActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletedTaskActivityTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskActivityID sets the "task_activity_id" field.
func (u *DeletedTaskActivityTaskUpsertBulk) SetTaskActivityID(v ulid.ID) *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityID(v)
	})
}

// UpdateTaskActivityID sets the "task_activity_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateTaskActivityID() *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *DeletedTaskActivityTaskUpsertBulk) SetTaskID(v ulid.ID) *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateTaskID() *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetTaskActivityTaskID sets the "task_activity_task_id" field.
func (u *DeletedTaskActivityTaskUpsertBulk) SetTaskActivityTaskID(v ulid.ID) *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityTaskID(v)
	})
}

// UpdateTaskActivityTaskID sets the "task_activity_task_id" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateTaskActivityTaskID() *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityTaskID()
	})
}

// SetTaskActivityTaskCreatedAt sets the "task_activity_task_created_at" field.
func (u *DeletedTaskActivityTaskUpsertBulk) SetTaskActivityTaskCreatedAt(v time.Time) *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityTaskCreatedAt(v)
	})
}

// UpdateTaskActivityTaskCreatedAt sets the "task_activity_task_created_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateTaskActivityTaskCreatedAt() *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityTaskCreatedAt()
	})
}

// SetTaskActivityTaskUpdatedAt sets the "task_activity_task_updated_at" field.
func (u *DeletedTaskActivityTaskUpsertBulk) SetTaskActivityTaskUpdatedAt(v time.Time) *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetTaskActivityTaskUpdatedAt(v)
	})
}

// UpdateTaskActivityTaskUpdatedAt sets the "task_activity_task_updated_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateTaskActivityTaskUpdatedAt() *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateTaskActivityTaskUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedTaskActivityTaskUpsertBulk) SetCreatedAt(v time.Time) *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateCreatedAt() *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedTaskActivityTaskUpsertBulk) SetUpdatedAt(v time.Time) *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedTaskActivityTaskUpsertBulk) UpdateUpdatedAt() *DeletedTaskActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedTaskActivityTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeletedTaskActivityTaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeletedTaskActivityTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeletedTaskActivityTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletedTaskActivityTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
