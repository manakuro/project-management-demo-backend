// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/deletedteammatetask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateTaskSectionQuery is the builder for querying TeammateTaskSection entities.
type TeammateTaskSectionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TeammateTaskSection
	// eager-loading edges.
	withTeammate             *TeammateQuery
	withWorkspace            *WorkspaceQuery
	withTeammateTasks        *TeammateTaskQuery
	withDeletedTeammateTasks *DeletedTeammateTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TeammateTaskSectionQuery builder.
func (ttsq *TeammateTaskSectionQuery) Where(ps ...predicate.TeammateTaskSection) *TeammateTaskSectionQuery {
	ttsq.predicates = append(ttsq.predicates, ps...)
	return ttsq
}

// Limit adds a limit step to the query.
func (ttsq *TeammateTaskSectionQuery) Limit(limit int) *TeammateTaskSectionQuery {
	ttsq.limit = &limit
	return ttsq
}

// Offset adds an offset step to the query.
func (ttsq *TeammateTaskSectionQuery) Offset(offset int) *TeammateTaskSectionQuery {
	ttsq.offset = &offset
	return ttsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttsq *TeammateTaskSectionQuery) Unique(unique bool) *TeammateTaskSectionQuery {
	ttsq.unique = &unique
	return ttsq
}

// Order adds an order step to the query.
func (ttsq *TeammateTaskSectionQuery) Order(o ...OrderFunc) *TeammateTaskSectionQuery {
	ttsq.order = append(ttsq.order, o...)
	return ttsq
}

// QueryTeammate chains the current query on the "teammate" edge.
func (ttsq *TeammateTaskSectionQuery) QueryTeammate() *TeammateQuery {
	query := &TeammateQuery{config: ttsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasksection.Table, teammatetasksection.FieldID, selector),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetasksection.TeammateTable, teammatetasksection.TeammateColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspace chains the current query on the "workspace" edge.
func (ttsq *TeammateTaskSectionQuery) QueryWorkspace() *WorkspaceQuery {
	query := &WorkspaceQuery{config: ttsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasksection.Table, teammatetasksection.FieldID, selector),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, teammatetasksection.WorkspaceTable, teammatetasksection.WorkspaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammateTasks chains the current query on the "teammateTasks" edge.
func (ttsq *TeammateTaskSectionQuery) QueryTeammateTasks() *TeammateTaskQuery {
	query := &TeammateTaskQuery{config: ttsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasksection.Table, teammatetasksection.FieldID, selector),
			sqlgraph.To(teammatetask.Table, teammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammatetasksection.TeammateTasksTable, teammatetasksection.TeammateTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeletedTeammateTasks chains the current query on the "deletedTeammateTasks" edge.
func (ttsq *TeammateTaskSectionQuery) QueryDeletedTeammateTasks() *DeletedTeammateTaskQuery {
	query := &DeletedTeammateTaskQuery{config: ttsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammatetasksection.Table, teammatetasksection.FieldID, selector),
			sqlgraph.To(deletedteammatetask.Table, deletedteammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammatetasksection.DeletedTeammateTasksTable, teammatetasksection.DeletedTeammateTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TeammateTaskSection entity from the query.
// Returns a *NotFoundError when no TeammateTaskSection was found.
func (ttsq *TeammateTaskSectionQuery) First(ctx context.Context) (*TeammateTaskSection, error) {
	nodes, err := ttsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{teammatetasksection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) FirstX(ctx context.Context) *TeammateTaskSection {
	node, err := ttsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TeammateTaskSection ID from the query.
// Returns a *NotFoundError when no TeammateTaskSection ID was found.
func (ttsq *TeammateTaskSectionQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = ttsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{teammatetasksection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := ttsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TeammateTaskSection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TeammateTaskSection entity is found.
// Returns a *NotFoundError when no TeammateTaskSection entities are found.
func (ttsq *TeammateTaskSectionQuery) Only(ctx context.Context) (*TeammateTaskSection, error) {
	nodes, err := ttsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{teammatetasksection.Label}
	default:
		return nil, &NotSingularError{teammatetasksection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) OnlyX(ctx context.Context) *TeammateTaskSection {
	node, err := ttsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TeammateTaskSection ID in the query.
// Returns a *NotSingularError when more than one TeammateTaskSection ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttsq *TeammateTaskSectionQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = ttsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = &NotSingularError{teammatetasksection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := ttsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TeammateTaskSections.
func (ttsq *TeammateTaskSectionQuery) All(ctx context.Context) ([]*TeammateTaskSection, error) {
	if err := ttsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ttsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) AllX(ctx context.Context) []*TeammateTaskSection {
	nodes, err := ttsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TeammateTaskSection IDs.
func (ttsq *TeammateTaskSectionQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := ttsq.Select(teammatetasksection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := ttsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttsq *TeammateTaskSectionQuery) Count(ctx context.Context) (int, error) {
	if err := ttsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ttsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) CountX(ctx context.Context) int {
	count, err := ttsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttsq *TeammateTaskSectionQuery) Exist(ctx context.Context) (bool, error) {
	if err := ttsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ttsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ttsq *TeammateTaskSectionQuery) ExistX(ctx context.Context) bool {
	exist, err := ttsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TeammateTaskSectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttsq *TeammateTaskSectionQuery) Clone() *TeammateTaskSectionQuery {
	if ttsq == nil {
		return nil
	}
	return &TeammateTaskSectionQuery{
		config:                   ttsq.config,
		limit:                    ttsq.limit,
		offset:                   ttsq.offset,
		order:                    append([]OrderFunc{}, ttsq.order...),
		predicates:               append([]predicate.TeammateTaskSection{}, ttsq.predicates...),
		withTeammate:             ttsq.withTeammate.Clone(),
		withWorkspace:            ttsq.withWorkspace.Clone(),
		withTeammateTasks:        ttsq.withTeammateTasks.Clone(),
		withDeletedTeammateTasks: ttsq.withDeletedTeammateTasks.Clone(),
		// clone intermediate query.
		sql:    ttsq.sql.Clone(),
		path:   ttsq.path,
		unique: ttsq.unique,
	}
}

// WithTeammate tells the query-builder to eager-load the nodes that are connected to
// the "teammate" edge. The optional arguments are used to configure the query builder of the edge.
func (ttsq *TeammateTaskSectionQuery) WithTeammate(opts ...func(*TeammateQuery)) *TeammateTaskSectionQuery {
	query := &TeammateQuery{config: ttsq.config}
	for _, opt := range opts {
		opt(query)
	}
	ttsq.withTeammate = query
	return ttsq
}

// WithWorkspace tells the query-builder to eager-load the nodes that are connected to
// the "workspace" edge. The optional arguments are used to configure the query builder of the edge.
func (ttsq *TeammateTaskSectionQuery) WithWorkspace(opts ...func(*WorkspaceQuery)) *TeammateTaskSectionQuery {
	query := &WorkspaceQuery{config: ttsq.config}
	for _, opt := range opts {
		opt(query)
	}
	ttsq.withWorkspace = query
	return ttsq
}

// WithTeammateTasks tells the query-builder to eager-load the nodes that are connected to
// the "teammateTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (ttsq *TeammateTaskSectionQuery) WithTeammateTasks(opts ...func(*TeammateTaskQuery)) *TeammateTaskSectionQuery {
	query := &TeammateTaskQuery{config: ttsq.config}
	for _, opt := range opts {
		opt(query)
	}
	ttsq.withTeammateTasks = query
	return ttsq
}

// WithDeletedTeammateTasks tells the query-builder to eager-load the nodes that are connected to
// the "deletedTeammateTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (ttsq *TeammateTaskSectionQuery) WithDeletedTeammateTasks(opts ...func(*DeletedTeammateTaskQuery)) *TeammateTaskSectionQuery {
	query := &DeletedTeammateTaskQuery{config: ttsq.config}
	for _, opt := range opts {
		opt(query)
	}
	ttsq.withDeletedTeammateTasks = query
	return ttsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TeammateID ulid.ID `json:"teammate_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TeammateTaskSection.Query().
//		GroupBy(teammatetasksection.FieldTeammateID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ttsq *TeammateTaskSectionQuery) GroupBy(field string, fields ...string) *TeammateTaskSectionGroupBy {
	group := &TeammateTaskSectionGroupBy{config: ttsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ttsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ttsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TeammateID ulid.ID `json:"teammate_id,omitempty"`
//	}
//
//	client.TeammateTaskSection.Query().
//		Select(teammatetasksection.FieldTeammateID).
//		Scan(ctx, &v)
//
func (ttsq *TeammateTaskSectionQuery) Select(fields ...string) *TeammateTaskSectionSelect {
	ttsq.fields = append(ttsq.fields, fields...)
	return &TeammateTaskSectionSelect{TeammateTaskSectionQuery: ttsq}
}

func (ttsq *TeammateTaskSectionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ttsq.fields {
		if !teammatetasksection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttsq.path != nil {
		prev, err := ttsq.path(ctx)
		if err != nil {
			return err
		}
		ttsq.sql = prev
	}
	return nil
}

func (ttsq *TeammateTaskSectionQuery) sqlAll(ctx context.Context) ([]*TeammateTaskSection, error) {
	var (
		nodes       = []*TeammateTaskSection{}
		_spec       = ttsq.querySpec()
		loadedTypes = [4]bool{
			ttsq.withTeammate != nil,
			ttsq.withWorkspace != nil,
			ttsq.withTeammateTasks != nil,
			ttsq.withDeletedTeammateTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TeammateTaskSection{config: ttsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ttsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ttsq.withTeammate; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*TeammateTaskSection)
		for i := range nodes {
			fk := nodes[i].TeammateID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teammate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teammate = n
			}
		}
	}

	if query := ttsq.withWorkspace; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*TeammateTaskSection)
		for i := range nodes {
			fk := nodes[i].WorkspaceID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(workspace.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workspace_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Workspace = n
			}
		}
	}

	if query := ttsq.withTeammateTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*TeammateTaskSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeammateTasks = []*TeammateTask{}
		}
		query.Where(predicate.TeammateTask(func(s *sql.Selector) {
			s.Where(sql.InValues(teammatetasksection.TeammateTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateTaskSectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_task_section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeammateTasks = append(node.Edges.TeammateTasks, n)
		}
	}

	if query := ttsq.withDeletedTeammateTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*TeammateTaskSection)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.DeletedTeammateTasks = []*DeletedTeammateTask{}
		}
		query.Where(predicate.DeletedTeammateTask(func(s *sql.Selector) {
			s.Where(sql.InValues(teammatetasksection.DeletedTeammateTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateTaskSectionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_task_section_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.DeletedTeammateTasks = append(node.Edges.DeletedTeammateTasks, n)
		}
	}

	return nodes, nil
}

func (ttsq *TeammateTaskSectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttsq.querySpec()
	_spec.Node.Columns = ttsq.fields
	if len(ttsq.fields) > 0 {
		_spec.Unique = ttsq.unique != nil && *ttsq.unique
	}
	return sqlgraph.CountNodes(ctx, ttsq.driver, _spec)
}

func (ttsq *TeammateTaskSectionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ttsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ttsq *TeammateTaskSectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammatetasksection.Table,
			Columns: teammatetasksection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetasksection.FieldID,
			},
		},
		From:   ttsq.sql,
		Unique: true,
	}
	if unique := ttsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ttsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammatetasksection.FieldID)
		for i := range fields {
			if fields[i] != teammatetasksection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttsq *TeammateTaskSectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttsq.driver.Dialect())
	t1 := builder.Table(teammatetasksection.Table)
	columns := ttsq.fields
	if len(columns) == 0 {
		columns = teammatetasksection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttsq.sql != nil {
		selector = ttsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttsq.unique != nil && *ttsq.unique {
		selector.Distinct()
	}
	for _, p := range ttsq.predicates {
		p(selector)
	}
	for _, p := range ttsq.order {
		p(selector)
	}
	if offset := ttsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TeammateTaskSectionGroupBy is the group-by builder for TeammateTaskSection entities.
type TeammateTaskSectionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttsgb *TeammateTaskSectionGroupBy) Aggregate(fns ...AggregateFunc) *TeammateTaskSectionGroupBy {
	ttsgb.fns = append(ttsgb.fns, fns...)
	return ttsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ttsgb *TeammateTaskSectionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ttsgb.path(ctx)
	if err != nil {
		return err
	}
	ttsgb.sql = query
	return ttsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ttsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ttsgb.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ttsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) StringsX(ctx context.Context) []string {
	v, err := ttsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ttsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) StringX(ctx context.Context) string {
	v, err := ttsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ttsgb.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ttsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) IntsX(ctx context.Context) []int {
	v, err := ttsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ttsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) IntX(ctx context.Context) int {
	v, err := ttsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ttsgb.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ttsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ttsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ttsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ttsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ttsgb.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ttsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ttsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ttsgb *TeammateTaskSectionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ttsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ttsgb *TeammateTaskSectionGroupBy) BoolX(ctx context.Context) bool {
	v, err := ttsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ttsgb *TeammateTaskSectionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ttsgb.fields {
		if !teammatetasksection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ttsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ttsgb *TeammateTaskSectionGroupBy) sqlQuery() *sql.Selector {
	selector := ttsgb.sql.Select()
	aggregation := make([]string, 0, len(ttsgb.fns))
	for _, fn := range ttsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ttsgb.fields)+len(ttsgb.fns))
		for _, f := range ttsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ttsgb.fields...)...)
}

// TeammateTaskSectionSelect is the builder for selecting fields of TeammateTaskSection entities.
type TeammateTaskSectionSelect struct {
	*TeammateTaskSectionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ttss *TeammateTaskSectionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ttss.prepareQuery(ctx); err != nil {
		return err
	}
	ttss.sql = ttss.TeammateTaskSectionQuery.sqlQuery(ctx)
	return ttss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ttss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ttss.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ttss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) StringsX(ctx context.Context) []string {
	v, err := ttss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ttss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) StringX(ctx context.Context) string {
	v, err := ttss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ttss.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ttss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) IntsX(ctx context.Context) []int {
	v, err := ttss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ttss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) IntX(ctx context.Context) int {
	v, err := ttss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ttss.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ttss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ttss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ttss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) Float64X(ctx context.Context) float64 {
	v, err := ttss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ttss.fields) > 1 {
		return nil, errors.New("ent: TeammateTaskSectionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ttss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) BoolsX(ctx context.Context) []bool {
	v, err := ttss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ttss *TeammateTaskSectionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ttss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammatetasksection.Label}
	default:
		err = fmt.Errorf("ent: TeammateTaskSectionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ttss *TeammateTaskSectionSelect) BoolX(ctx context.Context) bool {
	v, err := ttss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ttss *TeammateTaskSectionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ttss.sql.Query()
	if err := ttss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
