// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/schema/ulid"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Icon is the model entity for the Icon schema.
type Icon struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IconQuery when eager-loading is set.
	Edges IconEdges `json:"edges"`
}

// IconEdges holds the relations/edges for other nodes in the graph.
type IconEdges struct {
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e IconEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[0] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Icon) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case icon.FieldName, icon.FieldIcon:
			values[i] = new(sql.NullString)
		case icon.FieldCreatedAt, icon.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case icon.FieldID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Icon", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Icon fields.
func (i *Icon) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case icon.FieldID:
			if value, ok := values[j].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case icon.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case icon.FieldIcon:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[j])
			} else if value.Valid {
				i.Icon = value.String
			}
		case icon.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case icon.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryProjects queries the "projects" edge of the Icon entity.
func (i *Icon) QueryProjects() *ProjectQuery {
	return (&IconClient{config: i.config}).QueryProjects(i)
}

// Update returns a builder for updating this Icon.
// Note that you need to call Icon.Unwrap() before calling this method if this Icon
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Icon) Update() *IconUpdateOne {
	return (&IconClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Icon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Icon) Unwrap() *Icon {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Icon is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Icon) String() string {
	var builder strings.Builder
	builder.WriteString("Icon(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", name=")
	builder.WriteString(i.Name)
	builder.WriteString(", icon=")
	builder.WriteString(i.Icon)
	builder.WriteString(", created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Icons is a parsable slice of Icon.
type Icons []*Icon

func (i Icons) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
