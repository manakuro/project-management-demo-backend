// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskLikeCreate is the builder for creating a TaskLike entity.
type TaskLikeCreate struct {
	config
	mutation *TaskLikeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTaskID sets the "task_id" field.
func (tlc *TaskLikeCreate) SetTaskID(u ulid.ID) *TaskLikeCreate {
	tlc.mutation.SetTaskID(u)
	return tlc
}

// SetTeammateID sets the "teammate_id" field.
func (tlc *TaskLikeCreate) SetTeammateID(u ulid.ID) *TaskLikeCreate {
	tlc.mutation.SetTeammateID(u)
	return tlc
}

// SetWorkspaceID sets the "workspace_id" field.
func (tlc *TaskLikeCreate) SetWorkspaceID(u ulid.ID) *TaskLikeCreate {
	tlc.mutation.SetWorkspaceID(u)
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TaskLikeCreate) SetCreatedAt(t time.Time) *TaskLikeCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TaskLikeCreate) SetNillableCreatedAt(t *time.Time) *TaskLikeCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetUpdatedAt sets the "updated_at" field.
func (tlc *TaskLikeCreate) SetUpdatedAt(t time.Time) *TaskLikeCreate {
	tlc.mutation.SetUpdatedAt(t)
	return tlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tlc *TaskLikeCreate) SetNillableUpdatedAt(t *time.Time) *TaskLikeCreate {
	if t != nil {
		tlc.SetUpdatedAt(*t)
	}
	return tlc
}

// SetID sets the "id" field.
func (tlc *TaskLikeCreate) SetID(u ulid.ID) *TaskLikeCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TaskLikeCreate) SetNillableID(u *ulid.ID) *TaskLikeCreate {
	if u != nil {
		tlc.SetID(*u)
	}
	return tlc
}

// SetTask sets the "task" edge to the Task entity.
func (tlc *TaskLikeCreate) SetTask(t *Task) *TaskLikeCreate {
	return tlc.SetTaskID(t.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tlc *TaskLikeCreate) SetTeammate(t *Teammate) *TaskLikeCreate {
	return tlc.SetTeammateID(t.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (tlc *TaskLikeCreate) SetWorkspace(w *Workspace) *TaskLikeCreate {
	return tlc.SetWorkspaceID(w.ID)
}

// Mutation returns the TaskLikeMutation object of the builder.
func (tlc *TaskLikeCreate) Mutation() *TaskLikeMutation {
	return tlc.mutation
}

// Save creates the TaskLike in the database.
func (tlc *TaskLikeCreate) Save(ctx context.Context) (*TaskLike, error) {
	var (
		err  error
		node *TaskLike
	)
	tlc.defaults()
	if len(tlc.hooks) == 0 {
		if err = tlc.check(); err != nil {
			return nil, err
		}
		node, err = tlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskLikeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlc.check(); err != nil {
				return nil, err
			}
			tlc.mutation = mutation
			if node, err = tlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tlc.hooks) - 1; i >= 0; i-- {
			if tlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TaskLikeCreate) SaveX(ctx context.Context) *TaskLike {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TaskLikeCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TaskLikeCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TaskLikeCreate) defaults() {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := tasklike.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		v := tasklike.DefaultUpdatedAt()
		tlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := tasklike.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TaskLikeCreate) check() error {
	if _, ok := tlc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "TaskLike.task_id"`)}
	}
	if _, ok := tlc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "TaskLike.teammate_id"`)}
	}
	if _, ok := tlc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "TaskLike.workspace_id"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskLike.created_at"`)}
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskLike.updated_at"`)}
	}
	if _, ok := tlc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "TaskLike.task"`)}
	}
	if _, ok := tlc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New(`ent: missing required edge "TaskLike.teammate"`)}
	}
	if _, ok := tlc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New(`ent: missing required edge "TaskLike.workspace"`)}
	}
	return nil
}

func (tlc *TaskLikeCreate) sqlSave(ctx context.Context) (*TaskLike, error) {
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tlc *TaskLikeCreate) createSpec() (*TaskLike, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskLike{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tasklike.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tasklike.FieldID,
			},
		}
	)
	_spec.OnConflict = tlc.conflict
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklike.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tlc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklike.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := tlc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklike.TaskTable,
			Columns: []string{tasklike.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklike.TeammateTable,
			Columns: []string{tasklike.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklike.WorkspaceTable,
			Columns: []string{tasklike.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskLike.Create().
//		SetTaskID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskLikeUpsert) {
//			SetTaskID(v+v).
//		}).
//		Exec(ctx)
//
func (tlc *TaskLikeCreate) OnConflict(opts ...sql.ConflictOption) *TaskLikeUpsertOne {
	tlc.conflict = opts
	return &TaskLikeUpsertOne{
		create: tlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskLike.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tlc *TaskLikeCreate) OnConflictColumns(columns ...string) *TaskLikeUpsertOne {
	tlc.conflict = append(tlc.conflict, sql.ConflictColumns(columns...))
	return &TaskLikeUpsertOne{
		create: tlc,
	}
}

type (
	// TaskLikeUpsertOne is the builder for "upsert"-ing
	//  one TaskLike node.
	TaskLikeUpsertOne struct {
		create *TaskLikeCreate
	}

	// TaskLikeUpsert is the "OnConflict" setter.
	TaskLikeUpsert struct {
		*sql.UpdateSet
	}
)

// SetTaskID sets the "task_id" field.
func (u *TaskLikeUpsert) SetTaskID(v ulid.ID) *TaskLikeUpsert {
	u.Set(tasklike.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskLikeUpsert) UpdateTaskID() *TaskLikeUpsert {
	u.SetExcluded(tasklike.FieldTaskID)
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *TaskLikeUpsert) SetTeammateID(v ulid.ID) *TaskLikeUpsert {
	u.Set(tasklike.FieldTeammateID, v)
	return u
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TaskLikeUpsert) UpdateTeammateID() *TaskLikeUpsert {
	u.SetExcluded(tasklike.FieldTeammateID)
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TaskLikeUpsert) SetWorkspaceID(v ulid.ID) *TaskLikeUpsert {
	u.Set(tasklike.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TaskLikeUpsert) UpdateWorkspaceID() *TaskLikeUpsert {
	u.SetExcluded(tasklike.FieldWorkspaceID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskLikeUpsert) SetCreatedAt(v time.Time) *TaskLikeUpsert {
	u.Set(tasklike.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskLikeUpsert) UpdateCreatedAt() *TaskLikeUpsert {
	u.SetExcluded(tasklike.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskLikeUpsert) SetUpdatedAt(v time.Time) *TaskLikeUpsert {
	u.Set(tasklike.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskLikeUpsert) UpdateUpdatedAt() *TaskLikeUpsert {
	u.SetExcluded(tasklike.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskLike.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tasklike.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskLikeUpsertOne) UpdateNewValues() *TaskLikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tasklike.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tasklike.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(tasklike.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TaskLike.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TaskLikeUpsertOne) Ignore() *TaskLikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskLikeUpsertOne) DoNothing() *TaskLikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskLikeCreate.OnConflict
// documentation for more info.
func (u *TaskLikeUpsertOne) Update(set func(*TaskLikeUpsert)) *TaskLikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskLikeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskID sets the "task_id" field.
func (u *TaskLikeUpsertOne) SetTaskID(v ulid.ID) *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskLikeUpsertOne) UpdateTaskID() *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateTaskID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *TaskLikeUpsertOne) SetTeammateID(v ulid.ID) *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TaskLikeUpsertOne) UpdateTeammateID() *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateTeammateID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TaskLikeUpsertOne) SetWorkspaceID(v ulid.ID) *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TaskLikeUpsertOne) UpdateWorkspaceID() *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskLikeUpsertOne) SetCreatedAt(v time.Time) *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskLikeUpsertOne) UpdateCreatedAt() *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskLikeUpsertOne) SetUpdatedAt(v time.Time) *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskLikeUpsertOne) UpdateUpdatedAt() *TaskLikeUpsertOne {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskLikeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskLikeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskLikeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskLikeUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TaskLikeUpsertOne.ID is not supported by MySQL driver. Use TaskLikeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskLikeUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskLikeCreateBulk is the builder for creating many TaskLike entities in bulk.
type TaskLikeCreateBulk struct {
	config
	builders []*TaskLikeCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskLike entities in the database.
func (tlcb *TaskLikeCreateBulk) Save(ctx context.Context) ([]*TaskLike, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TaskLike, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TaskLikeCreateBulk) SaveX(ctx context.Context) []*TaskLike {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TaskLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TaskLikeCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskLike.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskLikeUpsert) {
//			SetTaskID(v+v).
//		}).
//		Exec(ctx)
//
func (tlcb *TaskLikeCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskLikeUpsertBulk {
	tlcb.conflict = opts
	return &TaskLikeUpsertBulk{
		create: tlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskLike.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tlcb *TaskLikeCreateBulk) OnConflictColumns(columns ...string) *TaskLikeUpsertBulk {
	tlcb.conflict = append(tlcb.conflict, sql.ConflictColumns(columns...))
	return &TaskLikeUpsertBulk{
		create: tlcb,
	}
}

// TaskLikeUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskLike nodes.
type TaskLikeUpsertBulk struct {
	create *TaskLikeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskLike.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tasklike.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskLikeUpsertBulk) UpdateNewValues() *TaskLikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tasklike.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tasklike.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(tasklike.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskLike.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TaskLikeUpsertBulk) Ignore() *TaskLikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskLikeUpsertBulk) DoNothing() *TaskLikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskLikeCreateBulk.OnConflict
// documentation for more info.
func (u *TaskLikeUpsertBulk) Update(set func(*TaskLikeUpsert)) *TaskLikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskLikeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskID sets the "task_id" field.
func (u *TaskLikeUpsertBulk) SetTaskID(v ulid.ID) *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskLikeUpsertBulk) UpdateTaskID() *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateTaskID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *TaskLikeUpsertBulk) SetTeammateID(v ulid.ID) *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TaskLikeUpsertBulk) UpdateTeammateID() *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateTeammateID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TaskLikeUpsertBulk) SetWorkspaceID(v ulid.ID) *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TaskLikeUpsertBulk) UpdateWorkspaceID() *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskLikeUpsertBulk) SetCreatedAt(v time.Time) *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskLikeUpsertBulk) UpdateCreatedAt() *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskLikeUpsertBulk) SetUpdatedAt(v time.Time) *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskLikeUpsertBulk) UpdateUpdatedAt() *TaskLikeUpsertBulk {
	return u.Update(func(s *TaskLikeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskLikeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskLikeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskLikeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskLikeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
