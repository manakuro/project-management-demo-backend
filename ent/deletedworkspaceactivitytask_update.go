// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/deletedworkspaceactivitytask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeletedWorkspaceActivityTaskUpdate is the builder for updating DeletedWorkspaceActivityTask entities.
type DeletedWorkspaceActivityTaskUpdate struct {
	config
	hooks    []Hook
	mutation *DeletedWorkspaceActivityTaskMutation
}

// Where appends a list predicates to the DeletedWorkspaceActivityTaskUpdate builder.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) Where(ps ...predicate.DeletedWorkspaceActivityTask) *DeletedWorkspaceActivityTaskUpdate {
	dwatu.mutation.Where(ps...)
	return dwatu
}

// SetWorkspaceActivityID sets the "workspace_activity_id" field.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) SetWorkspaceActivityID(u ulid.ID) *DeletedWorkspaceActivityTaskUpdate {
	dwatu.mutation.SetWorkspaceActivityID(u)
	return dwatu
}

// SetTaskID sets the "task_id" field.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) SetTaskID(u ulid.ID) *DeletedWorkspaceActivityTaskUpdate {
	dwatu.mutation.SetTaskID(u)
	return dwatu
}

// SetWorkspaceActivityTaskID sets the "workspace_activity_task_id" field.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) SetWorkspaceActivityTaskID(u ulid.ID) *DeletedWorkspaceActivityTaskUpdate {
	dwatu.mutation.SetWorkspaceActivityTaskID(u)
	return dwatu
}

// SetWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) SetWorkspaceActivityTaskCreatedAt(t time.Time) *DeletedWorkspaceActivityTaskUpdate {
	dwatu.mutation.SetWorkspaceActivityTaskCreatedAt(t)
	return dwatu
}

// SetWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) SetWorkspaceActivityTaskUpdatedAt(t time.Time) *DeletedWorkspaceActivityTaskUpdate {
	dwatu.mutation.SetWorkspaceActivityTaskUpdatedAt(t)
	return dwatu
}

// SetTask sets the "task" edge to the Task entity.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) SetTask(t *Task) *DeletedWorkspaceActivityTaskUpdate {
	return dwatu.SetTaskID(t.ID)
}

// Mutation returns the DeletedWorkspaceActivityTaskMutation object of the builder.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) Mutation() *DeletedWorkspaceActivityTaskMutation {
	return dwatu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) ClearTask() *DeletedWorkspaceActivityTaskUpdate {
	dwatu.mutation.ClearTask()
	return dwatu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dwatu.hooks) == 0 {
		if err = dwatu.check(); err != nil {
			return 0, err
		}
		affected, err = dwatu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedWorkspaceActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dwatu.check(); err != nil {
				return 0, err
			}
			dwatu.mutation = mutation
			affected, err = dwatu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dwatu.hooks) - 1; i >= 0; i-- {
			if dwatu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dwatu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dwatu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := dwatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) Exec(ctx context.Context) error {
	_, err := dwatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) ExecX(ctx context.Context) {
	if err := dwatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dwatu *DeletedWorkspaceActivityTaskUpdate) check() error {
	if _, ok := dwatu.mutation.TaskID(); dwatu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeletedWorkspaceActivityTask.task"`)
	}
	return nil
}

func (dwatu *DeletedWorkspaceActivityTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deletedworkspaceactivitytask.Table,
			Columns: deletedworkspaceactivitytask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedworkspaceactivitytask.FieldID,
			},
		},
	}
	if ps := dwatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dwatu.mutation.WorkspaceActivityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityID,
		})
	}
	if value, ok := dwatu.mutation.WorkspaceActivityTaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskID,
		})
	}
	if value, ok := dwatu.mutation.WorkspaceActivityTaskCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskCreatedAt,
		})
	}
	if value, ok := dwatu.mutation.WorkspaceActivityTaskUpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskUpdatedAt,
		})
	}
	if dwatu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedworkspaceactivitytask.TaskTable,
			Columns: []string{deletedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dwatu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedworkspaceactivitytask.TaskTable,
			Columns: []string{deletedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dwatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletedworkspaceactivitytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeletedWorkspaceActivityTaskUpdateOne is the builder for updating a single DeletedWorkspaceActivityTask entity.
type DeletedWorkspaceActivityTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeletedWorkspaceActivityTaskMutation
}

// SetWorkspaceActivityID sets the "workspace_activity_id" field.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) SetWorkspaceActivityID(u ulid.ID) *DeletedWorkspaceActivityTaskUpdateOne {
	dwatuo.mutation.SetWorkspaceActivityID(u)
	return dwatuo
}

// SetTaskID sets the "task_id" field.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) SetTaskID(u ulid.ID) *DeletedWorkspaceActivityTaskUpdateOne {
	dwatuo.mutation.SetTaskID(u)
	return dwatuo
}

// SetWorkspaceActivityTaskID sets the "workspace_activity_task_id" field.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) SetWorkspaceActivityTaskID(u ulid.ID) *DeletedWorkspaceActivityTaskUpdateOne {
	dwatuo.mutation.SetWorkspaceActivityTaskID(u)
	return dwatuo
}

// SetWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) SetWorkspaceActivityTaskCreatedAt(t time.Time) *DeletedWorkspaceActivityTaskUpdateOne {
	dwatuo.mutation.SetWorkspaceActivityTaskCreatedAt(t)
	return dwatuo
}

// SetWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) SetWorkspaceActivityTaskUpdatedAt(t time.Time) *DeletedWorkspaceActivityTaskUpdateOne {
	dwatuo.mutation.SetWorkspaceActivityTaskUpdatedAt(t)
	return dwatuo
}

// SetTask sets the "task" edge to the Task entity.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) SetTask(t *Task) *DeletedWorkspaceActivityTaskUpdateOne {
	return dwatuo.SetTaskID(t.ID)
}

// Mutation returns the DeletedWorkspaceActivityTaskMutation object of the builder.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) Mutation() *DeletedWorkspaceActivityTaskMutation {
	return dwatuo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) ClearTask() *DeletedWorkspaceActivityTaskUpdateOne {
	dwatuo.mutation.ClearTask()
	return dwatuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) Select(field string, fields ...string) *DeletedWorkspaceActivityTaskUpdateOne {
	dwatuo.fields = append([]string{field}, fields...)
	return dwatuo
}

// Save executes the query and returns the updated DeletedWorkspaceActivityTask entity.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) Save(ctx context.Context) (*DeletedWorkspaceActivityTask, error) {
	var (
		err  error
		node *DeletedWorkspaceActivityTask
	)
	if len(dwatuo.hooks) == 0 {
		if err = dwatuo.check(); err != nil {
			return nil, err
		}
		node, err = dwatuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedWorkspaceActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dwatuo.check(); err != nil {
				return nil, err
			}
			dwatuo.mutation = mutation
			node, err = dwatuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dwatuo.hooks) - 1; i >= 0; i-- {
			if dwatuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dwatuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dwatuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) SaveX(ctx context.Context) *DeletedWorkspaceActivityTask {
	node, err := dwatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := dwatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) ExecX(ctx context.Context) {
	if err := dwatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) check() error {
	if _, ok := dwatuo.mutation.TaskID(); dwatuo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeletedWorkspaceActivityTask.task"`)
	}
	return nil
}

func (dwatuo *DeletedWorkspaceActivityTaskUpdateOne) sqlSave(ctx context.Context) (_node *DeletedWorkspaceActivityTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deletedworkspaceactivitytask.Table,
			Columns: deletedworkspaceactivitytask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedworkspaceactivitytask.FieldID,
			},
		},
	}
	id, ok := dwatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeletedWorkspaceActivityTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dwatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deletedworkspaceactivitytask.FieldID)
		for _, f := range fields {
			if !deletedworkspaceactivitytask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deletedworkspaceactivitytask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dwatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dwatuo.mutation.WorkspaceActivityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityID,
		})
	}
	if value, ok := dwatuo.mutation.WorkspaceActivityTaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskID,
		})
	}
	if value, ok := dwatuo.mutation.WorkspaceActivityTaskCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskCreatedAt,
		})
	}
	if value, ok := dwatuo.mutation.WorkspaceActivityTaskUpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskUpdatedAt,
		})
	}
	if dwatuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedworkspaceactivitytask.TaskTable,
			Columns: []string{deletedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dwatuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedworkspaceactivitytask.TaskTable,
			Columns: []string{deletedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeletedWorkspaceActivityTask{config: dwatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dwatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deletedworkspaceactivitytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
