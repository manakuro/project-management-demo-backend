// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/schema/editor"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/teammate"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskFeedCreate is the builder for creating a TaskFeed entity.
type TaskFeedCreate struct {
	config
	mutation *TaskFeedMutation
	hooks    []Hook
}

// SetTaskID sets the "task_id" field.
func (tfc *TaskFeedCreate) SetTaskID(u ulid.ID) *TaskFeedCreate {
	tfc.mutation.SetTaskID(u)
	return tfc
}

// SetTeammateID sets the "teammate_id" field.
func (tfc *TaskFeedCreate) SetTeammateID(u ulid.ID) *TaskFeedCreate {
	tfc.mutation.SetTeammateID(u)
	return tfc
}

// SetDescription sets the "description" field.
func (tfc *TaskFeedCreate) SetDescription(e editor.Description) *TaskFeedCreate {
	tfc.mutation.SetDescription(e)
	return tfc
}

// SetIsFirst sets the "is_first" field.
func (tfc *TaskFeedCreate) SetIsFirst(b bool) *TaskFeedCreate {
	tfc.mutation.SetIsFirst(b)
	return tfc
}

// SetNillableIsFirst sets the "is_first" field if the given value is not nil.
func (tfc *TaskFeedCreate) SetNillableIsFirst(b *bool) *TaskFeedCreate {
	if b != nil {
		tfc.SetIsFirst(*b)
	}
	return tfc
}

// SetIsPinned sets the "is_pinned" field.
func (tfc *TaskFeedCreate) SetIsPinned(b bool) *TaskFeedCreate {
	tfc.mutation.SetIsPinned(b)
	return tfc
}

// SetNillableIsPinned sets the "is_pinned" field if the given value is not nil.
func (tfc *TaskFeedCreate) SetNillableIsPinned(b *bool) *TaskFeedCreate {
	if b != nil {
		tfc.SetIsPinned(*b)
	}
	return tfc
}

// SetCreatedAt sets the "created_at" field.
func (tfc *TaskFeedCreate) SetCreatedAt(t time.Time) *TaskFeedCreate {
	tfc.mutation.SetCreatedAt(t)
	return tfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfc *TaskFeedCreate) SetNillableCreatedAt(t *time.Time) *TaskFeedCreate {
	if t != nil {
		tfc.SetCreatedAt(*t)
	}
	return tfc
}

// SetUpdatedAt sets the "updated_at" field.
func (tfc *TaskFeedCreate) SetUpdatedAt(t time.Time) *TaskFeedCreate {
	tfc.mutation.SetUpdatedAt(t)
	return tfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tfc *TaskFeedCreate) SetNillableUpdatedAt(t *time.Time) *TaskFeedCreate {
	if t != nil {
		tfc.SetUpdatedAt(*t)
	}
	return tfc
}

// SetID sets the "id" field.
func (tfc *TaskFeedCreate) SetID(u ulid.ID) *TaskFeedCreate {
	tfc.mutation.SetID(u)
	return tfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tfc *TaskFeedCreate) SetNillableID(u *ulid.ID) *TaskFeedCreate {
	if u != nil {
		tfc.SetID(*u)
	}
	return tfc
}

// SetTask sets the "task" edge to the Task entity.
func (tfc *TaskFeedCreate) SetTask(t *Task) *TaskFeedCreate {
	return tfc.SetTaskID(t.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tfc *TaskFeedCreate) SetTeammate(t *Teammate) *TaskFeedCreate {
	return tfc.SetTeammateID(t.ID)
}

// AddTaskFeedLikeIDs adds the "task_feed_likes" edge to the TaskFeedLike entity by IDs.
func (tfc *TaskFeedCreate) AddTaskFeedLikeIDs(ids ...ulid.ID) *TaskFeedCreate {
	tfc.mutation.AddTaskFeedLikeIDs(ids...)
	return tfc
}

// AddTaskFeedLikes adds the "task_feed_likes" edges to the TaskFeedLike entity.
func (tfc *TaskFeedCreate) AddTaskFeedLikes(t ...*TaskFeedLike) *TaskFeedCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tfc.AddTaskFeedLikeIDs(ids...)
}

// Mutation returns the TaskFeedMutation object of the builder.
func (tfc *TaskFeedCreate) Mutation() *TaskFeedMutation {
	return tfc.mutation
}

// Save creates the TaskFeed in the database.
func (tfc *TaskFeedCreate) Save(ctx context.Context) (*TaskFeed, error) {
	var (
		err  error
		node *TaskFeed
	)
	tfc.defaults()
	if len(tfc.hooks) == 0 {
		if err = tfc.check(); err != nil {
			return nil, err
		}
		node, err = tfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskFeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tfc.check(); err != nil {
				return nil, err
			}
			tfc.mutation = mutation
			if node, err = tfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tfc.hooks) - 1; i >= 0; i-- {
			if tfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tfc *TaskFeedCreate) SaveX(ctx context.Context) *TaskFeed {
	v, err := tfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfc *TaskFeedCreate) Exec(ctx context.Context) error {
	_, err := tfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfc *TaskFeedCreate) ExecX(ctx context.Context) {
	if err := tfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfc *TaskFeedCreate) defaults() {
	if _, ok := tfc.mutation.IsFirst(); !ok {
		v := taskfeed.DefaultIsFirst
		tfc.mutation.SetIsFirst(v)
	}
	if _, ok := tfc.mutation.IsPinned(); !ok {
		v := taskfeed.DefaultIsPinned
		tfc.mutation.SetIsPinned(v)
	}
	if _, ok := tfc.mutation.CreatedAt(); !ok {
		v := taskfeed.DefaultCreatedAt()
		tfc.mutation.SetCreatedAt(v)
	}
	if _, ok := tfc.mutation.UpdatedAt(); !ok {
		v := taskfeed.DefaultUpdatedAt()
		tfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tfc.mutation.ID(); !ok {
		v := taskfeed.DefaultID()
		tfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfc *TaskFeedCreate) check() error {
	if _, ok := tfc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "task_id"`)}
	}
	if _, ok := tfc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "teammate_id"`)}
	}
	if _, ok := tfc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "description"`)}
	}
	if _, ok := tfc.mutation.IsFirst(); !ok {
		return &ValidationError{Name: "is_first", err: errors.New(`ent: missing required field "is_first"`)}
	}
	if _, ok := tfc.mutation.IsPinned(); !ok {
		return &ValidationError{Name: "is_pinned", err: errors.New(`ent: missing required field "is_pinned"`)}
	}
	if _, ok := tfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := tfc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New("ent: missing required edge \"task\"")}
	}
	if _, ok := tfc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New("ent: missing required edge \"teammate\"")}
	}
	return nil
}

func (tfc *TaskFeedCreate) sqlSave(ctx context.Context) (*TaskFeed, error) {
	_node, _spec := tfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (tfc *TaskFeedCreate) createSpec() (*TaskFeed, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskFeed{config: tfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskfeed.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskfeed.FieldID,
			},
		}
	)
	if id, ok := tfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tfc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: taskfeed.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := tfc.mutation.IsFirst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskfeed.FieldIsFirst,
		})
		_node.IsFirst = value
	}
	if value, ok := tfc.mutation.IsPinned(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: taskfeed.FieldIsPinned,
		})
		_node.IsPinned = value
	}
	if value, ok := tfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskfeed.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tfc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskfeed.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := tfc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TaskTable,
			Columns: []string{taskfeed.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tfc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskfeed.TeammateTable,
			Columns: []string{taskfeed.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tfc.mutation.TaskFeedLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskfeed.TaskFeedLikesTable,
			Columns: []string{taskfeed.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskFeedCreateBulk is the builder for creating many TaskFeed entities in bulk.
type TaskFeedCreateBulk struct {
	config
	builders []*TaskFeedCreate
}

// Save creates the TaskFeed entities in the database.
func (tfcb *TaskFeedCreateBulk) Save(ctx context.Context) ([]*TaskFeed, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tfcb.builders))
	nodes := make([]*TaskFeed, len(tfcb.builders))
	mutators := make([]Mutator, len(tfcb.builders))
	for i := range tfcb.builders {
		func(i int, root context.Context) {
			builder := tfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskFeedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfcb *TaskFeedCreateBulk) SaveX(ctx context.Context) []*TaskFeed {
	v, err := tfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfcb *TaskFeedCreateBulk) Exec(ctx context.Context) error {
	_, err := tfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfcb *TaskFeedCreateBulk) ExecX(ctx context.Context) {
	if err := tfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
