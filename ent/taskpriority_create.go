// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskpriority"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskPriorityCreate is the builder for creating a TaskPriority entity.
type TaskPriorityCreate struct {
	config
	mutation *TaskPriorityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetColorID sets the "color_id" field.
func (tpc *TaskPriorityCreate) SetColorID(u ulid.ID) *TaskPriorityCreate {
	tpc.mutation.SetColorID(u)
	return tpc
}

// SetName sets the "name" field.
func (tpc *TaskPriorityCreate) SetName(s string) *TaskPriorityCreate {
	tpc.mutation.SetName(s)
	return tpc
}

// SetPriorityType sets the "priority_type" field.
func (tpc *TaskPriorityCreate) SetPriorityType(tt taskpriority.PriorityType) *TaskPriorityCreate {
	tpc.mutation.SetPriorityType(tt)
	return tpc
}

// SetCreatedAt sets the "created_at" field.
func (tpc *TaskPriorityCreate) SetCreatedAt(t time.Time) *TaskPriorityCreate {
	tpc.mutation.SetCreatedAt(t)
	return tpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpc *TaskPriorityCreate) SetNillableCreatedAt(t *time.Time) *TaskPriorityCreate {
	if t != nil {
		tpc.SetCreatedAt(*t)
	}
	return tpc
}

// SetUpdatedAt sets the "updated_at" field.
func (tpc *TaskPriorityCreate) SetUpdatedAt(t time.Time) *TaskPriorityCreate {
	tpc.mutation.SetUpdatedAt(t)
	return tpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tpc *TaskPriorityCreate) SetNillableUpdatedAt(t *time.Time) *TaskPriorityCreate {
	if t != nil {
		tpc.SetUpdatedAt(*t)
	}
	return tpc
}

// SetID sets the "id" field.
func (tpc *TaskPriorityCreate) SetID(u ulid.ID) *TaskPriorityCreate {
	tpc.mutation.SetID(u)
	return tpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tpc *TaskPriorityCreate) SetNillableID(u *ulid.ID) *TaskPriorityCreate {
	if u != nil {
		tpc.SetID(*u)
	}
	return tpc
}

// SetColor sets the "color" edge to the Color entity.
func (tpc *TaskPriorityCreate) SetColor(c *Color) *TaskPriorityCreate {
	return tpc.SetColorID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tpc *TaskPriorityCreate) AddTaskIDs(ids ...ulid.ID) *TaskPriorityCreate {
	tpc.mutation.AddTaskIDs(ids...)
	return tpc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tpc *TaskPriorityCreate) AddTasks(t ...*Task) *TaskPriorityCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpc.AddTaskIDs(ids...)
}

// Mutation returns the TaskPriorityMutation object of the builder.
func (tpc *TaskPriorityCreate) Mutation() *TaskPriorityMutation {
	return tpc.mutation
}

// Save creates the TaskPriority in the database.
func (tpc *TaskPriorityCreate) Save(ctx context.Context) (*TaskPriority, error) {
	var (
		err  error
		node *TaskPriority
	)
	tpc.defaults()
	if len(tpc.hooks) == 0 {
		if err = tpc.check(); err != nil {
			return nil, err
		}
		node, err = tpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskPriorityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpc.check(); err != nil {
				return nil, err
			}
			tpc.mutation = mutation
			if node, err = tpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tpc.hooks) - 1; i >= 0; i-- {
			if tpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TaskPriorityCreate) SaveX(ctx context.Context) *TaskPriority {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TaskPriorityCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TaskPriorityCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpc *TaskPriorityCreate) defaults() {
	if _, ok := tpc.mutation.CreatedAt(); !ok {
		v := taskpriority.DefaultCreatedAt()
		tpc.mutation.SetCreatedAt(v)
	}
	if _, ok := tpc.mutation.UpdatedAt(); !ok {
		v := taskpriority.DefaultUpdatedAt()
		tpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tpc.mutation.ID(); !ok {
		v := taskpriority.DefaultID()
		tpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TaskPriorityCreate) check() error {
	if _, ok := tpc.mutation.ColorID(); !ok {
		return &ValidationError{Name: "color_id", err: errors.New(`ent: missing required field "TaskPriority.color_id"`)}
	}
	if _, ok := tpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TaskPriority.name"`)}
	}
	if v, ok := tpc.mutation.Name(); ok {
		if err := taskpriority.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskPriority.name": %w`, err)}
		}
	}
	if _, ok := tpc.mutation.PriorityType(); !ok {
		return &ValidationError{Name: "priority_type", err: errors.New(`ent: missing required field "TaskPriority.priority_type"`)}
	}
	if v, ok := tpc.mutation.PriorityType(); ok {
		if err := taskpriority.PriorityTypeValidator(v); err != nil {
			return &ValidationError{Name: "priority_type", err: fmt.Errorf(`ent: validator failed for field "TaskPriority.priority_type": %w`, err)}
		}
	}
	if _, ok := tpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskPriority.created_at"`)}
	}
	if _, ok := tpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskPriority.updated_at"`)}
	}
	if _, ok := tpc.mutation.ColorID(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required edge "TaskPriority.color"`)}
	}
	return nil
}

func (tpc *TaskPriorityCreate) sqlSave(ctx context.Context) (*TaskPriority, error) {
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tpc *TaskPriorityCreate) createSpec() (*TaskPriority, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskPriority{config: tpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskpriority.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskpriority.FieldID,
			},
		}
	)
	_spec.OnConflict = tpc.conflict
	if id, ok := tpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskpriority.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tpc.mutation.PriorityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: taskpriority.FieldPriorityType,
		})
		_node.PriorityType = value
	}
	if value, ok := tpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskpriority.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskpriority.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := tpc.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskpriority.ColorTable,
			Columns: []string{taskpriority.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ColorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskpriority.TasksTable,
			Columns: []string{taskpriority.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskPriority.Create().
//		SetColorID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskPriorityUpsert) {
//			SetColorID(v+v).
//		}).
//		Exec(ctx)
//
func (tpc *TaskPriorityCreate) OnConflict(opts ...sql.ConflictOption) *TaskPriorityUpsertOne {
	tpc.conflict = opts
	return &TaskPriorityUpsertOne{
		create: tpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskPriority.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tpc *TaskPriorityCreate) OnConflictColumns(columns ...string) *TaskPriorityUpsertOne {
	tpc.conflict = append(tpc.conflict, sql.ConflictColumns(columns...))
	return &TaskPriorityUpsertOne{
		create: tpc,
	}
}

type (
	// TaskPriorityUpsertOne is the builder for "upsert"-ing
	//  one TaskPriority node.
	TaskPriorityUpsertOne struct {
		create *TaskPriorityCreate
	}

	// TaskPriorityUpsert is the "OnConflict" setter.
	TaskPriorityUpsert struct {
		*sql.UpdateSet
	}
)

// SetColorID sets the "color_id" field.
func (u *TaskPriorityUpsert) SetColorID(v ulid.ID) *TaskPriorityUpsert {
	u.Set(taskpriority.FieldColorID, v)
	return u
}

// UpdateColorID sets the "color_id" field to the value that was provided on create.
func (u *TaskPriorityUpsert) UpdateColorID() *TaskPriorityUpsert {
	u.SetExcluded(taskpriority.FieldColorID)
	return u
}

// SetName sets the "name" field.
func (u *TaskPriorityUpsert) SetName(v string) *TaskPriorityUpsert {
	u.Set(taskpriority.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskPriorityUpsert) UpdateName() *TaskPriorityUpsert {
	u.SetExcluded(taskpriority.FieldName)
	return u
}

// SetPriorityType sets the "priority_type" field.
func (u *TaskPriorityUpsert) SetPriorityType(v taskpriority.PriorityType) *TaskPriorityUpsert {
	u.Set(taskpriority.FieldPriorityType, v)
	return u
}

// UpdatePriorityType sets the "priority_type" field to the value that was provided on create.
func (u *TaskPriorityUpsert) UpdatePriorityType() *TaskPriorityUpsert {
	u.SetExcluded(taskpriority.FieldPriorityType)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskPriorityUpsert) SetCreatedAt(v time.Time) *TaskPriorityUpsert {
	u.Set(taskpriority.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskPriorityUpsert) UpdateCreatedAt() *TaskPriorityUpsert {
	u.SetExcluded(taskpriority.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskPriorityUpsert) SetUpdatedAt(v time.Time) *TaskPriorityUpsert {
	u.Set(taskpriority.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskPriorityUpsert) UpdateUpdatedAt() *TaskPriorityUpsert {
	u.SetExcluded(taskpriority.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TaskPriority.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskpriority.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskPriorityUpsertOne) UpdateNewValues() *TaskPriorityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(taskpriority.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(taskpriority.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(taskpriority.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TaskPriority.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TaskPriorityUpsertOne) Ignore() *TaskPriorityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskPriorityUpsertOne) DoNothing() *TaskPriorityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskPriorityCreate.OnConflict
// documentation for more info.
func (u *TaskPriorityUpsertOne) Update(set func(*TaskPriorityUpsert)) *TaskPriorityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskPriorityUpsert{UpdateSet: update})
	}))
	return u
}

// SetColorID sets the "color_id" field.
func (u *TaskPriorityUpsertOne) SetColorID(v ulid.ID) *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetColorID(v)
	})
}

// UpdateColorID sets the "color_id" field to the value that was provided on create.
func (u *TaskPriorityUpsertOne) UpdateColorID() *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateColorID()
	})
}

// SetName sets the "name" field.
func (u *TaskPriorityUpsertOne) SetName(v string) *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskPriorityUpsertOne) UpdateName() *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateName()
	})
}

// SetPriorityType sets the "priority_type" field.
func (u *TaskPriorityUpsertOne) SetPriorityType(v taskpriority.PriorityType) *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetPriorityType(v)
	})
}

// UpdatePriorityType sets the "priority_type" field to the value that was provided on create.
func (u *TaskPriorityUpsertOne) UpdatePriorityType() *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdatePriorityType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskPriorityUpsertOne) SetCreatedAt(v time.Time) *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskPriorityUpsertOne) UpdateCreatedAt() *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskPriorityUpsertOne) SetUpdatedAt(v time.Time) *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskPriorityUpsertOne) UpdateUpdatedAt() *TaskPriorityUpsertOne {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskPriorityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskPriorityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskPriorityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskPriorityUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TaskPriorityUpsertOne.ID is not supported by MySQL driver. Use TaskPriorityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskPriorityUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskPriorityCreateBulk is the builder for creating many TaskPriority entities in bulk.
type TaskPriorityCreateBulk struct {
	config
	builders []*TaskPriorityCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskPriority entities in the database.
func (tpcb *TaskPriorityCreateBulk) Save(ctx context.Context) ([]*TaskPriority, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TaskPriority, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskPriorityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TaskPriorityCreateBulk) SaveX(ctx context.Context) []*TaskPriority {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TaskPriorityCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TaskPriorityCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskPriority.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskPriorityUpsert) {
//			SetColorID(v+v).
//		}).
//		Exec(ctx)
//
func (tpcb *TaskPriorityCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskPriorityUpsertBulk {
	tpcb.conflict = opts
	return &TaskPriorityUpsertBulk{
		create: tpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskPriority.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tpcb *TaskPriorityCreateBulk) OnConflictColumns(columns ...string) *TaskPriorityUpsertBulk {
	tpcb.conflict = append(tpcb.conflict, sql.ConflictColumns(columns...))
	return &TaskPriorityUpsertBulk{
		create: tpcb,
	}
}

// TaskPriorityUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskPriority nodes.
type TaskPriorityUpsertBulk struct {
	create *TaskPriorityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskPriority.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(taskpriority.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskPriorityUpsertBulk) UpdateNewValues() *TaskPriorityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(taskpriority.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(taskpriority.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(taskpriority.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskPriority.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TaskPriorityUpsertBulk) Ignore() *TaskPriorityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskPriorityUpsertBulk) DoNothing() *TaskPriorityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskPriorityCreateBulk.OnConflict
// documentation for more info.
func (u *TaskPriorityUpsertBulk) Update(set func(*TaskPriorityUpsert)) *TaskPriorityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskPriorityUpsert{UpdateSet: update})
	}))
	return u
}

// SetColorID sets the "color_id" field.
func (u *TaskPriorityUpsertBulk) SetColorID(v ulid.ID) *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetColorID(v)
	})
}

// UpdateColorID sets the "color_id" field to the value that was provided on create.
func (u *TaskPriorityUpsertBulk) UpdateColorID() *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateColorID()
	})
}

// SetName sets the "name" field.
func (u *TaskPriorityUpsertBulk) SetName(v string) *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskPriorityUpsertBulk) UpdateName() *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateName()
	})
}

// SetPriorityType sets the "priority_type" field.
func (u *TaskPriorityUpsertBulk) SetPriorityType(v taskpriority.PriorityType) *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetPriorityType(v)
	})
}

// UpdatePriorityType sets the "priority_type" field to the value that was provided on create.
func (u *TaskPriorityUpsertBulk) UpdatePriorityType() *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdatePriorityType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskPriorityUpsertBulk) SetCreatedAt(v time.Time) *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskPriorityUpsertBulk) UpdateCreatedAt() *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskPriorityUpsertBulk) SetUpdatedAt(v time.Time) *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskPriorityUpsertBulk) UpdateUpdatedAt() *TaskPriorityUpsertBulk {
	return u.Update(func(s *TaskPriorityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskPriorityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskPriorityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskPriorityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskPriorityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
