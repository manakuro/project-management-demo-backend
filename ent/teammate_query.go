// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskactivity"
	"project-management-demo-backend/ent/taskcollaborator"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceteammate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateQuery is the builder for querying Teammate entities.
type TeammateQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Teammate
	// eager-loading edges.
	withWorkspaces               *WorkspaceQuery
	withProjects                 *ProjectQuery
	withProjectTeammates         *ProjectTeammateQuery
	withWorkspaceTeammates       *WorkspaceTeammateQuery
	withFavoriteProjects         *FavoriteProjectQuery
	withFavoriteWorkspaces       *FavoriteWorkspaceQuery
	withTeammateTaskTabStatuses  *TeammateTaskTabStatusQuery
	withTeammateTaskColumns      *TeammateTaskColumnQuery
	withTeammateTaskListStatuses *TeammateTaskListStatusQuery
	withTeammateTaskSections     *TeammateTaskSectionQuery
	withTasks                    *TaskQuery
	withTeammateTasks            *TeammateTaskQuery
	withTaskLikes                *TaskLikeQuery
	withTaskCollaborators        *TaskCollaboratorQuery
	withTaskFeeds                *TaskFeedQuery
	withTaskFeedLikes            *TaskFeedLikeQuery
	withTaskActivities           *TaskActivityQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TeammateQuery builder.
func (tq *TeammateQuery) Where(ps ...predicate.Teammate) *TeammateQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit adds a limit step to the query.
func (tq *TeammateQuery) Limit(limit int) *TeammateQuery {
	tq.limit = &limit
	return tq
}

// Offset adds an offset step to the query.
func (tq *TeammateQuery) Offset(offset int) *TeammateQuery {
	tq.offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TeammateQuery) Unique(unique bool) *TeammateQuery {
	tq.unique = &unique
	return tq
}

// Order adds an order step to the query.
func (tq *TeammateQuery) Order(o ...OrderFunc) *TeammateQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryWorkspaces chains the current query on the "workspaces" edge.
func (tq *TeammateQuery) QueryWorkspaces() *WorkspaceQuery {
	query := &WorkspaceQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.WorkspacesTable, teammate.WorkspacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjects chains the current query on the "projects" edge.
func (tq *TeammateQuery) QueryProjects() *ProjectQuery {
	query := &ProjectQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.ProjectsTable, teammate.ProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjectTeammates chains the current query on the "projectTeammates" edge.
func (tq *TeammateQuery) QueryProjectTeammates() *ProjectTeammateQuery {
	query := &ProjectTeammateQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(projectteammate.Table, projectteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.ProjectTeammatesTable, teammate.ProjectTeammatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspaceTeammates chains the current query on the "workspaceTeammates" edge.
func (tq *TeammateQuery) QueryWorkspaceTeammates() *WorkspaceTeammateQuery {
	query := &WorkspaceTeammateQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(workspaceteammate.Table, workspaceteammate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.WorkspaceTeammatesTable, teammate.WorkspaceTeammatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFavoriteProjects chains the current query on the "favoriteProjects" edge.
func (tq *TeammateQuery) QueryFavoriteProjects() *FavoriteProjectQuery {
	query := &FavoriteProjectQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(favoriteproject.Table, favoriteproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.FavoriteProjectsTable, teammate.FavoriteProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFavoriteWorkspaces chains the current query on the "favoriteWorkspaces" edge.
func (tq *TeammateQuery) QueryFavoriteWorkspaces() *FavoriteWorkspaceQuery {
	query := &FavoriteWorkspaceQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(favoriteworkspace.Table, favoriteworkspace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.FavoriteWorkspacesTable, teammate.FavoriteWorkspacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammateTaskTabStatuses chains the current query on the "teammateTaskTabStatuses" edge.
func (tq *TeammateQuery) QueryTeammateTaskTabStatuses() *TeammateTaskTabStatusQuery {
	query := &TeammateTaskTabStatusQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(teammatetasktabstatus.Table, teammatetasktabstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskTabStatusesTable, teammate.TeammateTaskTabStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammateTaskColumns chains the current query on the "teammateTaskColumns" edge.
func (tq *TeammateQuery) QueryTeammateTaskColumns() *TeammateTaskColumnQuery {
	query := &TeammateTaskColumnQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(teammatetaskcolumn.Table, teammatetaskcolumn.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskColumnsTable, teammate.TeammateTaskColumnsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammateTaskListStatuses chains the current query on the "teammateTaskListStatuses" edge.
func (tq *TeammateQuery) QueryTeammateTaskListStatuses() *TeammateTaskListStatusQuery {
	query := &TeammateTaskListStatusQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(teammatetaskliststatus.Table, teammatetaskliststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskListStatusesTable, teammate.TeammateTaskListStatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammateTaskSections chains the current query on the "teammateTaskSections" edge.
func (tq *TeammateQuery) QueryTeammateTaskSections() *TeammateTaskSectionQuery {
	query := &TeammateTaskSectionQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(teammatetasksection.Table, teammatetasksection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTaskSectionsTable, teammate.TeammateTaskSectionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (tq *TeammateQuery) QueryTasks() *TaskQuery {
	query := &TaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TasksTable, teammate.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammateTasks chains the current query on the "teammateTasks" edge.
func (tq *TeammateQuery) QueryTeammateTasks() *TeammateTaskQuery {
	query := &TeammateTaskQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(teammatetask.Table, teammatetask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TeammateTasksTable, teammate.TeammateTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskLikes chains the current query on the "taskLikes" edge.
func (tq *TeammateQuery) QueryTaskLikes() *TaskLikeQuery {
	query := &TaskLikeQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(tasklike.Table, tasklike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskLikesTable, teammate.TaskLikesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskCollaborators chains the current query on the "taskCollaborators" edge.
func (tq *TeammateQuery) QueryTaskCollaborators() *TaskCollaboratorQuery {
	query := &TaskCollaboratorQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(taskcollaborator.Table, taskcollaborator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskCollaboratorsTable, teammate.TaskCollaboratorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskFeeds chains the current query on the "taskFeeds" edge.
func (tq *TeammateQuery) QueryTaskFeeds() *TaskFeedQuery {
	query := &TaskFeedQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(taskfeed.Table, taskfeed.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskFeedsTable, teammate.TaskFeedsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskFeedLikes chains the current query on the "taskFeedLikes" edge.
func (tq *TeammateQuery) QueryTaskFeedLikes() *TaskFeedLikeQuery {
	query := &TaskFeedLikeQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(taskfeedlike.Table, taskfeedlike.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskFeedLikesTable, teammate.TaskFeedLikesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskActivities chains the current query on the "taskActivities" edge.
func (tq *TeammateQuery) QueryTaskActivities() *TaskActivityQuery {
	query := &TaskActivityQuery{config: tq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teammate.Table, teammate.FieldID, selector),
			sqlgraph.To(taskactivity.Table, taskactivity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teammate.TaskActivitiesTable, teammate.TaskActivitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Teammate entity from the query.
// Returns a *NotFoundError when no Teammate was found.
func (tq *TeammateQuery) First(ctx context.Context) (*Teammate, error) {
	nodes, err := tq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{teammate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TeammateQuery) FirstX(ctx context.Context) *Teammate {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Teammate ID from the query.
// Returns a *NotFoundError when no Teammate ID was found.
func (tq *TeammateQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{teammate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TeammateQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Teammate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Teammate entity is found.
// Returns a *NotFoundError when no Teammate entities are found.
func (tq *TeammateQuery) Only(ctx context.Context) (*Teammate, error) {
	nodes, err := tq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{teammate.Label}
	default:
		return nil, &NotSingularError{teammate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TeammateQuery) OnlyX(ctx context.Context) *Teammate {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Teammate ID in the query.
// Returns a *NotSingularError when more than one Teammate ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TeammateQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = tq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = &NotSingularError{teammate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TeammateQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Teammates.
func (tq *TeammateQuery) All(ctx context.Context) ([]*Teammate, error) {
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tq *TeammateQuery) AllX(ctx context.Context) []*Teammate {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Teammate IDs.
func (tq *TeammateQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := tq.Select(teammate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TeammateQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TeammateQuery) Count(ctx context.Context) (int, error) {
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TeammateQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TeammateQuery) Exist(ctx context.Context) (bool, error) {
	if err := tq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TeammateQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TeammateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TeammateQuery) Clone() *TeammateQuery {
	if tq == nil {
		return nil
	}
	return &TeammateQuery{
		config:                       tq.config,
		limit:                        tq.limit,
		offset:                       tq.offset,
		order:                        append([]OrderFunc{}, tq.order...),
		predicates:                   append([]predicate.Teammate{}, tq.predicates...),
		withWorkspaces:               tq.withWorkspaces.Clone(),
		withProjects:                 tq.withProjects.Clone(),
		withProjectTeammates:         tq.withProjectTeammates.Clone(),
		withWorkspaceTeammates:       tq.withWorkspaceTeammates.Clone(),
		withFavoriteProjects:         tq.withFavoriteProjects.Clone(),
		withFavoriteWorkspaces:       tq.withFavoriteWorkspaces.Clone(),
		withTeammateTaskTabStatuses:  tq.withTeammateTaskTabStatuses.Clone(),
		withTeammateTaskColumns:      tq.withTeammateTaskColumns.Clone(),
		withTeammateTaskListStatuses: tq.withTeammateTaskListStatuses.Clone(),
		withTeammateTaskSections:     tq.withTeammateTaskSections.Clone(),
		withTasks:                    tq.withTasks.Clone(),
		withTeammateTasks:            tq.withTeammateTasks.Clone(),
		withTaskLikes:                tq.withTaskLikes.Clone(),
		withTaskCollaborators:        tq.withTaskCollaborators.Clone(),
		withTaskFeeds:                tq.withTaskFeeds.Clone(),
		withTaskFeedLikes:            tq.withTaskFeedLikes.Clone(),
		withTaskActivities:           tq.withTaskActivities.Clone(),
		// clone intermediate query.
		sql:    tq.sql.Clone(),
		path:   tq.path,
		unique: tq.unique,
	}
}

// WithWorkspaces tells the query-builder to eager-load the nodes that are connected to
// the "workspaces" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithWorkspaces(opts ...func(*WorkspaceQuery)) *TeammateQuery {
	query := &WorkspaceQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withWorkspaces = query
	return tq
}

// WithProjects tells the query-builder to eager-load the nodes that are connected to
// the "projects" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithProjects(opts ...func(*ProjectQuery)) *TeammateQuery {
	query := &ProjectQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withProjects = query
	return tq
}

// WithProjectTeammates tells the query-builder to eager-load the nodes that are connected to
// the "projectTeammates" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithProjectTeammates(opts ...func(*ProjectTeammateQuery)) *TeammateQuery {
	query := &ProjectTeammateQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withProjectTeammates = query
	return tq
}

// WithWorkspaceTeammates tells the query-builder to eager-load the nodes that are connected to
// the "workspaceTeammates" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithWorkspaceTeammates(opts ...func(*WorkspaceTeammateQuery)) *TeammateQuery {
	query := &WorkspaceTeammateQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withWorkspaceTeammates = query
	return tq
}

// WithFavoriteProjects tells the query-builder to eager-load the nodes that are connected to
// the "favoriteProjects" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithFavoriteProjects(opts ...func(*FavoriteProjectQuery)) *TeammateQuery {
	query := &FavoriteProjectQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withFavoriteProjects = query
	return tq
}

// WithFavoriteWorkspaces tells the query-builder to eager-load the nodes that are connected to
// the "favoriteWorkspaces" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithFavoriteWorkspaces(opts ...func(*FavoriteWorkspaceQuery)) *TeammateQuery {
	query := &FavoriteWorkspaceQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withFavoriteWorkspaces = query
	return tq
}

// WithTeammateTaskTabStatuses tells the query-builder to eager-load the nodes that are connected to
// the "teammateTaskTabStatuses" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTeammateTaskTabStatuses(opts ...func(*TeammateTaskTabStatusQuery)) *TeammateQuery {
	query := &TeammateTaskTabStatusQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTeammateTaskTabStatuses = query
	return tq
}

// WithTeammateTaskColumns tells the query-builder to eager-load the nodes that are connected to
// the "teammateTaskColumns" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTeammateTaskColumns(opts ...func(*TeammateTaskColumnQuery)) *TeammateQuery {
	query := &TeammateTaskColumnQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTeammateTaskColumns = query
	return tq
}

// WithTeammateTaskListStatuses tells the query-builder to eager-load the nodes that are connected to
// the "teammateTaskListStatuses" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTeammateTaskListStatuses(opts ...func(*TeammateTaskListStatusQuery)) *TeammateQuery {
	query := &TeammateTaskListStatusQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTeammateTaskListStatuses = query
	return tq
}

// WithTeammateTaskSections tells the query-builder to eager-load the nodes that are connected to
// the "teammateTaskSections" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTeammateTaskSections(opts ...func(*TeammateTaskSectionQuery)) *TeammateQuery {
	query := &TeammateTaskSectionQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTeammateTaskSections = query
	return tq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTasks(opts ...func(*TaskQuery)) *TeammateQuery {
	query := &TaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTasks = query
	return tq
}

// WithTeammateTasks tells the query-builder to eager-load the nodes that are connected to
// the "teammateTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTeammateTasks(opts ...func(*TeammateTaskQuery)) *TeammateQuery {
	query := &TeammateTaskQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTeammateTasks = query
	return tq
}

// WithTaskLikes tells the query-builder to eager-load the nodes that are connected to
// the "taskLikes" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTaskLikes(opts ...func(*TaskLikeQuery)) *TeammateQuery {
	query := &TaskLikeQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskLikes = query
	return tq
}

// WithTaskCollaborators tells the query-builder to eager-load the nodes that are connected to
// the "taskCollaborators" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTaskCollaborators(opts ...func(*TaskCollaboratorQuery)) *TeammateQuery {
	query := &TaskCollaboratorQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskCollaborators = query
	return tq
}

// WithTaskFeeds tells the query-builder to eager-load the nodes that are connected to
// the "taskFeeds" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTaskFeeds(opts ...func(*TaskFeedQuery)) *TeammateQuery {
	query := &TaskFeedQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskFeeds = query
	return tq
}

// WithTaskFeedLikes tells the query-builder to eager-load the nodes that are connected to
// the "taskFeedLikes" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTaskFeedLikes(opts ...func(*TaskFeedLikeQuery)) *TeammateQuery {
	query := &TaskFeedLikeQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskFeedLikes = query
	return tq
}

// WithTaskActivities tells the query-builder to eager-load the nodes that are connected to
// the "taskActivities" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TeammateQuery) WithTaskActivities(opts ...func(*TaskActivityQuery)) *TeammateQuery {
	query := &TaskActivityQuery{config: tq.config}
	for _, opt := range opts {
		opt(query)
	}
	tq.withTaskActivities = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Teammate.Query().
//		GroupBy(teammate.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tq *TeammateQuery) GroupBy(field string, fields ...string) *TeammateGroupBy {
	group := &TeammateGroupBy{config: tq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Teammate.Query().
//		Select(teammate.FieldName).
//		Scan(ctx, &v)
//
func (tq *TeammateQuery) Select(fields ...string) *TeammateSelect {
	tq.fields = append(tq.fields, fields...)
	return &TeammateSelect{TeammateQuery: tq}
}

func (tq *TeammateQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tq.fields {
		if !teammate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TeammateQuery) sqlAll(ctx context.Context) ([]*Teammate, error) {
	var (
		nodes       = []*Teammate{}
		_spec       = tq.querySpec()
		loadedTypes = [17]bool{
			tq.withWorkspaces != nil,
			tq.withProjects != nil,
			tq.withProjectTeammates != nil,
			tq.withWorkspaceTeammates != nil,
			tq.withFavoriteProjects != nil,
			tq.withFavoriteWorkspaces != nil,
			tq.withTeammateTaskTabStatuses != nil,
			tq.withTeammateTaskColumns != nil,
			tq.withTeammateTaskListStatuses != nil,
			tq.withTeammateTaskSections != nil,
			tq.withTasks != nil,
			tq.withTeammateTasks != nil,
			tq.withTaskLikes != nil,
			tq.withTaskCollaborators != nil,
			tq.withTaskFeeds != nil,
			tq.withTaskFeedLikes != nil,
			tq.withTaskActivities != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Teammate{config: tq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tq.withWorkspaces; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Workspaces = []*Workspace{}
		}
		query.Where(predicate.Workspace(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.WorkspacesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CreatedBy
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "created_by" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Workspaces = append(node.Edges.Workspaces, n)
		}
	}

	if query := tq.withProjects; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Projects = []*Project{}
		}
		query.Where(predicate.Project(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.ProjectsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.CreatedBy
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "created_by" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Projects = append(node.Edges.Projects, n)
		}
	}

	if query := tq.withProjectTeammates; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProjectTeammates = []*ProjectTeammate{}
		}
		query.Where(predicate.ProjectTeammate(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.ProjectTeammatesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ProjectTeammates = append(node.Edges.ProjectTeammates, n)
		}
	}

	if query := tq.withWorkspaceTeammates; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkspaceTeammates = []*WorkspaceTeammate{}
		}
		query.Where(predicate.WorkspaceTeammate(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.WorkspaceTeammatesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.WorkspaceTeammates = append(node.Edges.WorkspaceTeammates, n)
		}
	}

	if query := tq.withFavoriteProjects; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FavoriteProjects = []*FavoriteProject{}
		}
		query.Where(predicate.FavoriteProject(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.FavoriteProjectsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.FavoriteProjects = append(node.Edges.FavoriteProjects, n)
		}
	}

	if query := tq.withFavoriteWorkspaces; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FavoriteWorkspaces = []*FavoriteWorkspace{}
		}
		query.Where(predicate.FavoriteWorkspace(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.FavoriteWorkspacesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.FavoriteWorkspaces = append(node.Edges.FavoriteWorkspaces, n)
		}
	}

	if query := tq.withTeammateTaskTabStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeammateTaskTabStatuses = []*TeammateTaskTabStatus{}
		}
		query.Where(predicate.TeammateTaskTabStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TeammateTaskTabStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeammateTaskTabStatuses = append(node.Edges.TeammateTaskTabStatuses, n)
		}
	}

	if query := tq.withTeammateTaskColumns; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeammateTaskColumns = []*TeammateTaskColumn{}
		}
		query.Where(predicate.TeammateTaskColumn(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TeammateTaskColumnsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeammateTaskColumns = append(node.Edges.TeammateTaskColumns, n)
		}
	}

	if query := tq.withTeammateTaskListStatuses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeammateTaskListStatuses = []*TeammateTaskListStatus{}
		}
		query.Where(predicate.TeammateTaskListStatus(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TeammateTaskListStatusesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeammateTaskListStatuses = append(node.Edges.TeammateTaskListStatuses, n)
		}
	}

	if query := tq.withTeammateTaskSections; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeammateTaskSections = []*TeammateTaskSection{}
		}
		query.Where(predicate.TeammateTaskSection(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TeammateTaskSectionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeammateTaskSections = append(node.Edges.TeammateTaskSections, n)
		}
	}

	if query := tq.withTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Tasks = []*Task{}
		}
		query.Where(predicate.Task(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AssigneeID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "assignee_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Tasks = append(node.Edges.Tasks, n)
		}
	}

	if query := tq.withTeammateTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TeammateTasks = []*TeammateTask{}
		}
		query.Where(predicate.TeammateTask(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TeammateTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TeammateTasks = append(node.Edges.TeammateTasks, n)
		}
	}

	if query := tq.withTaskLikes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskLikes = []*TaskLike{}
		}
		query.Where(predicate.TaskLike(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TaskLikesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskLikes = append(node.Edges.TaskLikes, n)
		}
	}

	if query := tq.withTaskCollaborators; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskCollaborators = []*TaskCollaborator{}
		}
		query.Where(predicate.TaskCollaborator(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TaskCollaboratorsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskCollaborators = append(node.Edges.TaskCollaborators, n)
		}
	}

	if query := tq.withTaskFeeds; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskFeeds = []*TaskFeed{}
		}
		query.Where(predicate.TaskFeed(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TaskFeedsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskFeeds = append(node.Edges.TaskFeeds, n)
		}
	}

	if query := tq.withTaskFeedLikes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskFeedLikes = []*TaskFeedLike{}
		}
		query.Where(predicate.TaskFeedLike(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TaskFeedLikesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskFeedLikes = append(node.Edges.TaskFeedLikes, n)
		}
	}

	if query := tq.withTaskActivities; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*Teammate)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskActivities = []*TaskActivity{}
		}
		query.Where(predicate.TaskActivity(func(s *sql.Selector) {
			s.Where(sql.InValues(teammate.TaskActivitiesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TeammateID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskActivities = append(node.Edges.TaskActivities, n)
		}
	}

	return nodes, nil
}

func (tq *TeammateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.fields
	if len(tq.fields) > 0 {
		_spec.Unique = tq.unique != nil && *tq.unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TeammateQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (tq *TeammateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammate.Table,
			Columns: teammate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammate.FieldID,
			},
		},
		From:   tq.sql,
		Unique: true,
	}
	if unique := tq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammate.FieldID)
		for i := range fields {
			if fields[i] != teammate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TeammateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(teammate.Table)
	columns := tq.fields
	if len(columns) == 0 {
		columns = teammate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.unique != nil && *tq.unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TeammateGroupBy is the group-by builder for Teammate entities.
type TeammateGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TeammateGroupBy) Aggregate(fns ...AggregateFunc) *TeammateGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tgb *TeammateGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tgb.path(ctx)
	if err != nil {
		return err
	}
	tgb.sql = query
	return tgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tgb *TeammateGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TeammateGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tgb *TeammateGroupBy) StringsX(ctx context.Context) []string {
	v, err := tgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tgb *TeammateGroupBy) StringX(ctx context.Context) string {
	v, err := tgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TeammateGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tgb *TeammateGroupBy) IntsX(ctx context.Context) []int {
	v, err := tgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tgb *TeammateGroupBy) IntX(ctx context.Context) int {
	v, err := tgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TeammateGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tgb *TeammateGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tgb *TeammateGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tgb.fields) > 1 {
		return nil, errors.New("ent: TeammateGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tgb *TeammateGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tgb *TeammateGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tgb *TeammateGroupBy) BoolX(ctx context.Context) bool {
	v, err := tgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tgb *TeammateGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tgb.fields {
		if !teammate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tgb *TeammateGroupBy) sqlQuery() *sql.Selector {
	selector := tgb.sql.Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tgb.fields)+len(tgb.fns))
		for _, f := range tgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tgb.fields...)...)
}

// TeammateSelect is the builder for selecting fields of Teammate entities.
type TeammateSelect struct {
	*TeammateQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TeammateSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	ts.sql = ts.TeammateQuery.sqlQuery(ctx)
	return ts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ts *TeammateSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TeammateSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ts *TeammateSelect) StringsX(ctx context.Context) []string {
	v, err := ts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ts *TeammateSelect) StringX(ctx context.Context) string {
	v, err := ts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TeammateSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ts *TeammateSelect) IntsX(ctx context.Context) []int {
	v, err := ts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ts *TeammateSelect) IntX(ctx context.Context) int {
	v, err := ts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TeammateSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ts *TeammateSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ts *TeammateSelect) Float64X(ctx context.Context) float64 {
	v, err := ts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ts.fields) > 1 {
		return nil, errors.New("ent: TeammateSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ts *TeammateSelect) BoolsX(ctx context.Context) []bool {
	v, err := ts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ts *TeammateSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{teammate.Label}
	default:
		err = fmt.Errorf("ent: TeammateSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ts *TeammateSelect) BoolX(ctx context.Context) bool {
	v, err := ts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ts *TeammateSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ts.sql.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
