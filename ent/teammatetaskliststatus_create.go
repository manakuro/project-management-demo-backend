// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/workspace"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateTaskListStatusCreate is the builder for creating a TeammateTaskListStatus entity.
type TeammateTaskListStatusCreate struct {
	config
	mutation *TeammateTaskListStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWorkspaceID sets the "workspace_id" field.
func (ttlsc *TeammateTaskListStatusCreate) SetWorkspaceID(u ulid.ID) *TeammateTaskListStatusCreate {
	ttlsc.mutation.SetWorkspaceID(u)
	return ttlsc
}

// SetTeammateID sets the "teammate_id" field.
func (ttlsc *TeammateTaskListStatusCreate) SetTeammateID(u ulid.ID) *TeammateTaskListStatusCreate {
	ttlsc.mutation.SetTeammateID(u)
	return ttlsc
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (ttlsc *TeammateTaskListStatusCreate) SetTaskListCompletedStatusID(u ulid.ID) *TeammateTaskListStatusCreate {
	ttlsc.mutation.SetTaskListCompletedStatusID(u)
	return ttlsc
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (ttlsc *TeammateTaskListStatusCreate) SetTaskListSortStatusID(u ulid.ID) *TeammateTaskListStatusCreate {
	ttlsc.mutation.SetTaskListSortStatusID(u)
	return ttlsc
}

// SetCreatedAt sets the "created_at" field.
func (ttlsc *TeammateTaskListStatusCreate) SetCreatedAt(t time.Time) *TeammateTaskListStatusCreate {
	ttlsc.mutation.SetCreatedAt(t)
	return ttlsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttlsc *TeammateTaskListStatusCreate) SetNillableCreatedAt(t *time.Time) *TeammateTaskListStatusCreate {
	if t != nil {
		ttlsc.SetCreatedAt(*t)
	}
	return ttlsc
}

// SetUpdatedAt sets the "updated_at" field.
func (ttlsc *TeammateTaskListStatusCreate) SetUpdatedAt(t time.Time) *TeammateTaskListStatusCreate {
	ttlsc.mutation.SetUpdatedAt(t)
	return ttlsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttlsc *TeammateTaskListStatusCreate) SetNillableUpdatedAt(t *time.Time) *TeammateTaskListStatusCreate {
	if t != nil {
		ttlsc.SetUpdatedAt(*t)
	}
	return ttlsc
}

// SetID sets the "id" field.
func (ttlsc *TeammateTaskListStatusCreate) SetID(u ulid.ID) *TeammateTaskListStatusCreate {
	ttlsc.mutation.SetID(u)
	return ttlsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttlsc *TeammateTaskListStatusCreate) SetNillableID(u *ulid.ID) *TeammateTaskListStatusCreate {
	if u != nil {
		ttlsc.SetID(*u)
	}
	return ttlsc
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (ttlsc *TeammateTaskListStatusCreate) SetWorkspace(w *Workspace) *TeammateTaskListStatusCreate {
	return ttlsc.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (ttlsc *TeammateTaskListStatusCreate) SetTeammate(t *Teammate) *TeammateTaskListStatusCreate {
	return ttlsc.SetTeammateID(t.ID)
}

// SetTaskListCompletedStatus sets the "taskListCompletedStatus" edge to the TaskListCompletedStatus entity.
func (ttlsc *TeammateTaskListStatusCreate) SetTaskListCompletedStatus(t *TaskListCompletedStatus) *TeammateTaskListStatusCreate {
	return ttlsc.SetTaskListCompletedStatusID(t.ID)
}

// SetTaskListSortStatus sets the "taskListSortStatus" edge to the TaskListSortStatus entity.
func (ttlsc *TeammateTaskListStatusCreate) SetTaskListSortStatus(t *TaskListSortStatus) *TeammateTaskListStatusCreate {
	return ttlsc.SetTaskListSortStatusID(t.ID)
}

// Mutation returns the TeammateTaskListStatusMutation object of the builder.
func (ttlsc *TeammateTaskListStatusCreate) Mutation() *TeammateTaskListStatusMutation {
	return ttlsc.mutation
}

// Save creates the TeammateTaskListStatus in the database.
func (ttlsc *TeammateTaskListStatusCreate) Save(ctx context.Context) (*TeammateTaskListStatus, error) {
	var (
		err  error
		node *TeammateTaskListStatus
	)
	ttlsc.defaults()
	if len(ttlsc.hooks) == 0 {
		if err = ttlsc.check(); err != nil {
			return nil, err
		}
		node, err = ttlsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskListStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttlsc.check(); err != nil {
				return nil, err
			}
			ttlsc.mutation = mutation
			if node, err = ttlsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttlsc.hooks) - 1; i >= 0; i-- {
			if ttlsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttlsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttlsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttlsc *TeammateTaskListStatusCreate) SaveX(ctx context.Context) *TeammateTaskListStatus {
	v, err := ttlsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttlsc *TeammateTaskListStatusCreate) Exec(ctx context.Context) error {
	_, err := ttlsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttlsc *TeammateTaskListStatusCreate) ExecX(ctx context.Context) {
	if err := ttlsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttlsc *TeammateTaskListStatusCreate) defaults() {
	if _, ok := ttlsc.mutation.CreatedAt(); !ok {
		v := teammatetaskliststatus.DefaultCreatedAt()
		ttlsc.mutation.SetCreatedAt(v)
	}
	if _, ok := ttlsc.mutation.UpdatedAt(); !ok {
		v := teammatetaskliststatus.DefaultUpdatedAt()
		ttlsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ttlsc.mutation.ID(); !ok {
		v := teammatetaskliststatus.DefaultID()
		ttlsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttlsc *TeammateTaskListStatusCreate) check() error {
	if _, ok := ttlsc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "TeammateTaskListStatus.workspace_id"`)}
	}
	if _, ok := ttlsc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "TeammateTaskListStatus.teammate_id"`)}
	}
	if _, ok := ttlsc.mutation.TaskListCompletedStatusID(); !ok {
		return &ValidationError{Name: "task_list_completed_status_id", err: errors.New(`ent: missing required field "TeammateTaskListStatus.task_list_completed_status_id"`)}
	}
	if _, ok := ttlsc.mutation.TaskListSortStatusID(); !ok {
		return &ValidationError{Name: "task_list_sort_status_id", err: errors.New(`ent: missing required field "TeammateTaskListStatus.task_list_sort_status_id"`)}
	}
	if _, ok := ttlsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TeammateTaskListStatus.created_at"`)}
	}
	if _, ok := ttlsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TeammateTaskListStatus.updated_at"`)}
	}
	if _, ok := ttlsc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New(`ent: missing required edge "TeammateTaskListStatus.workspace"`)}
	}
	if _, ok := ttlsc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New(`ent: missing required edge "TeammateTaskListStatus.teammate"`)}
	}
	if _, ok := ttlsc.mutation.TaskListCompletedStatusID(); !ok {
		return &ValidationError{Name: "taskListCompletedStatus", err: errors.New(`ent: missing required edge "TeammateTaskListStatus.taskListCompletedStatus"`)}
	}
	if _, ok := ttlsc.mutation.TaskListSortStatusID(); !ok {
		return &ValidationError{Name: "taskListSortStatus", err: errors.New(`ent: missing required edge "TeammateTaskListStatus.taskListSortStatus"`)}
	}
	return nil
}

func (ttlsc *TeammateTaskListStatusCreate) sqlSave(ctx context.Context) (*TeammateTaskListStatus, error) {
	_node, _spec := ttlsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttlsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ttlsc *TeammateTaskListStatusCreate) createSpec() (*TeammateTaskListStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &TeammateTaskListStatus{config: ttlsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teammatetaskliststatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetaskliststatus.FieldID,
			},
		}
	)
	_spec.OnConflict = ttlsc.conflict
	if id, ok := ttlsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttlsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teammatetaskliststatus.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ttlsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teammatetaskliststatus.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ttlsc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.WorkspaceTable,
			Columns: []string{teammatetaskliststatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttlsc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TeammateTable,
			Columns: []string{teammatetaskliststatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttlsc.mutation.TaskListCompletedStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListCompletedStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListCompletedStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistcompletedstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskListCompletedStatusID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttlsc.mutation.TaskListSortStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListSortStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListSortStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistsortstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskListSortStatusID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeammateTaskListStatus.Create().
//		SetWorkspaceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeammateTaskListStatusUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (ttlsc *TeammateTaskListStatusCreate) OnConflict(opts ...sql.ConflictOption) *TeammateTaskListStatusUpsertOne {
	ttlsc.conflict = opts
	return &TeammateTaskListStatusUpsertOne{
		create: ttlsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeammateTaskListStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ttlsc *TeammateTaskListStatusCreate) OnConflictColumns(columns ...string) *TeammateTaskListStatusUpsertOne {
	ttlsc.conflict = append(ttlsc.conflict, sql.ConflictColumns(columns...))
	return &TeammateTaskListStatusUpsertOne{
		create: ttlsc,
	}
}

type (
	// TeammateTaskListStatusUpsertOne is the builder for "upsert"-ing
	//  one TeammateTaskListStatus node.
	TeammateTaskListStatusUpsertOne struct {
		create *TeammateTaskListStatusCreate
	}

	// TeammateTaskListStatusUpsert is the "OnConflict" setter.
	TeammateTaskListStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetWorkspaceID sets the "workspace_id" field.
func (u *TeammateTaskListStatusUpsert) SetWorkspaceID(v ulid.ID) *TeammateTaskListStatusUpsert {
	u.Set(teammatetaskliststatus.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsert) UpdateWorkspaceID() *TeammateTaskListStatusUpsert {
	u.SetExcluded(teammatetaskliststatus.FieldWorkspaceID)
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *TeammateTaskListStatusUpsert) SetTeammateID(v ulid.ID) *TeammateTaskListStatusUpsert {
	u.Set(teammatetaskliststatus.FieldTeammateID, v)
	return u
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsert) UpdateTeammateID() *TeammateTaskListStatusUpsert {
	u.SetExcluded(teammatetaskliststatus.FieldTeammateID)
	return u
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (u *TeammateTaskListStatusUpsert) SetTaskListCompletedStatusID(v ulid.ID) *TeammateTaskListStatusUpsert {
	u.Set(teammatetaskliststatus.FieldTaskListCompletedStatusID, v)
	return u
}

// UpdateTaskListCompletedStatusID sets the "task_list_completed_status_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsert) UpdateTaskListCompletedStatusID() *TeammateTaskListStatusUpsert {
	u.SetExcluded(teammatetaskliststatus.FieldTaskListCompletedStatusID)
	return u
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (u *TeammateTaskListStatusUpsert) SetTaskListSortStatusID(v ulid.ID) *TeammateTaskListStatusUpsert {
	u.Set(teammatetaskliststatus.FieldTaskListSortStatusID, v)
	return u
}

// UpdateTaskListSortStatusID sets the "task_list_sort_status_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsert) UpdateTaskListSortStatusID() *TeammateTaskListStatusUpsert {
	u.SetExcluded(teammatetaskliststatus.FieldTaskListSortStatusID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateTaskListStatusUpsert) SetCreatedAt(v time.Time) *TeammateTaskListStatusUpsert {
	u.Set(teammatetaskliststatus.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsert) UpdateCreatedAt() *TeammateTaskListStatusUpsert {
	u.SetExcluded(teammatetaskliststatus.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateTaskListStatusUpsert) SetUpdatedAt(v time.Time) *TeammateTaskListStatusUpsert {
	u.Set(teammatetaskliststatus.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsert) UpdateUpdatedAt() *TeammateTaskListStatusUpsert {
	u.SetExcluded(teammatetaskliststatus.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TeammateTaskListStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teammatetaskliststatus.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeammateTaskListStatusUpsertOne) UpdateNewValues() *TeammateTaskListStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(teammatetaskliststatus.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(teammatetaskliststatus.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(teammatetaskliststatus.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TeammateTaskListStatus.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TeammateTaskListStatusUpsertOne) Ignore() *TeammateTaskListStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeammateTaskListStatusUpsertOne) DoNothing() *TeammateTaskListStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeammateTaskListStatusCreate.OnConflict
// documentation for more info.
func (u *TeammateTaskListStatusUpsertOne) Update(set func(*TeammateTaskListStatusUpsert)) *TeammateTaskListStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeammateTaskListStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TeammateTaskListStatusUpsertOne) SetWorkspaceID(v ulid.ID) *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertOne) UpdateWorkspaceID() *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *TeammateTaskListStatusUpsertOne) SetTeammateID(v ulid.ID) *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertOne) UpdateTeammateID() *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateTeammateID()
	})
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (u *TeammateTaskListStatusUpsertOne) SetTaskListCompletedStatusID(v ulid.ID) *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetTaskListCompletedStatusID(v)
	})
}

// UpdateTaskListCompletedStatusID sets the "task_list_completed_status_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertOne) UpdateTaskListCompletedStatusID() *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateTaskListCompletedStatusID()
	})
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (u *TeammateTaskListStatusUpsertOne) SetTaskListSortStatusID(v ulid.ID) *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetTaskListSortStatusID(v)
	})
}

// UpdateTaskListSortStatusID sets the "task_list_sort_status_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertOne) UpdateTaskListSortStatusID() *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateTaskListSortStatusID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateTaskListStatusUpsertOne) SetCreatedAt(v time.Time) *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertOne) UpdateCreatedAt() *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateTaskListStatusUpsertOne) SetUpdatedAt(v time.Time) *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertOne) UpdateUpdatedAt() *TeammateTaskListStatusUpsertOne {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeammateTaskListStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeammateTaskListStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeammateTaskListStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeammateTaskListStatusUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TeammateTaskListStatusUpsertOne.ID is not supported by MySQL driver. Use TeammateTaskListStatusUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeammateTaskListStatusUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeammateTaskListStatusCreateBulk is the builder for creating many TeammateTaskListStatus entities in bulk.
type TeammateTaskListStatusCreateBulk struct {
	config
	builders []*TeammateTaskListStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the TeammateTaskListStatus entities in the database.
func (ttlscb *TeammateTaskListStatusCreateBulk) Save(ctx context.Context) ([]*TeammateTaskListStatus, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttlscb.builders))
	nodes := make([]*TeammateTaskListStatus, len(ttlscb.builders))
	mutators := make([]Mutator, len(ttlscb.builders))
	for i := range ttlscb.builders {
		func(i int, root context.Context) {
			builder := ttlscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeammateTaskListStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttlscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttlscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttlscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttlscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttlscb *TeammateTaskListStatusCreateBulk) SaveX(ctx context.Context) []*TeammateTaskListStatus {
	v, err := ttlscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttlscb *TeammateTaskListStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := ttlscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttlscb *TeammateTaskListStatusCreateBulk) ExecX(ctx context.Context) {
	if err := ttlscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeammateTaskListStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeammateTaskListStatusUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (ttlscb *TeammateTaskListStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeammateTaskListStatusUpsertBulk {
	ttlscb.conflict = opts
	return &TeammateTaskListStatusUpsertBulk{
		create: ttlscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeammateTaskListStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ttlscb *TeammateTaskListStatusCreateBulk) OnConflictColumns(columns ...string) *TeammateTaskListStatusUpsertBulk {
	ttlscb.conflict = append(ttlscb.conflict, sql.ConflictColumns(columns...))
	return &TeammateTaskListStatusUpsertBulk{
		create: ttlscb,
	}
}

// TeammateTaskListStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of TeammateTaskListStatus nodes.
type TeammateTaskListStatusUpsertBulk struct {
	create *TeammateTaskListStatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeammateTaskListStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teammatetaskliststatus.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeammateTaskListStatusUpsertBulk) UpdateNewValues() *TeammateTaskListStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(teammatetaskliststatus.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(teammatetaskliststatus.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(teammatetaskliststatus.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeammateTaskListStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TeammateTaskListStatusUpsertBulk) Ignore() *TeammateTaskListStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeammateTaskListStatusUpsertBulk) DoNothing() *TeammateTaskListStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeammateTaskListStatusCreateBulk.OnConflict
// documentation for more info.
func (u *TeammateTaskListStatusUpsertBulk) Update(set func(*TeammateTaskListStatusUpsert)) *TeammateTaskListStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeammateTaskListStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TeammateTaskListStatusUpsertBulk) SetWorkspaceID(v ulid.ID) *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertBulk) UpdateWorkspaceID() *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *TeammateTaskListStatusUpsertBulk) SetTeammateID(v ulid.ID) *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertBulk) UpdateTeammateID() *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateTeammateID()
	})
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (u *TeammateTaskListStatusUpsertBulk) SetTaskListCompletedStatusID(v ulid.ID) *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetTaskListCompletedStatusID(v)
	})
}

// UpdateTaskListCompletedStatusID sets the "task_list_completed_status_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertBulk) UpdateTaskListCompletedStatusID() *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateTaskListCompletedStatusID()
	})
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (u *TeammateTaskListStatusUpsertBulk) SetTaskListSortStatusID(v ulid.ID) *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetTaskListSortStatusID(v)
	})
}

// UpdateTaskListSortStatusID sets the "task_list_sort_status_id" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertBulk) UpdateTaskListSortStatusID() *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateTaskListSortStatusID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateTaskListStatusUpsertBulk) SetCreatedAt(v time.Time) *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertBulk) UpdateCreatedAt() *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateTaskListStatusUpsertBulk) SetUpdatedAt(v time.Time) *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateTaskListStatusUpsertBulk) UpdateUpdatedAt() *TeammateTaskListStatusUpsertBulk {
	return u.Update(func(s *TeammateTaskListStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeammateTaskListStatusUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TeammateTaskListStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeammateTaskListStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeammateTaskListStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
