// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/deletedworkspaceactivitytask"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeletedWorkspaceActivityTaskCreate is the builder for creating a DeletedWorkspaceActivityTask entity.
type DeletedWorkspaceActivityTaskCreate struct {
	config
	mutation *DeletedWorkspaceActivityTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWorkspaceActivityID sets the "workspace_activity_id" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetWorkspaceActivityID(u ulid.ID) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetWorkspaceActivityID(u)
	return dwatc
}

// SetTaskID sets the "task_id" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetTaskID(u ulid.ID) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetTaskID(u)
	return dwatc
}

// SetWorkspaceActivityTaskID sets the "workspace_activity_task_id" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetWorkspaceActivityTaskID(u ulid.ID) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetWorkspaceActivityTaskID(u)
	return dwatc
}

// SetWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetWorkspaceActivityTaskCreatedAt(t time.Time) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetWorkspaceActivityTaskCreatedAt(t)
	return dwatc
}

// SetWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetWorkspaceActivityTaskUpdatedAt(t time.Time) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetWorkspaceActivityTaskUpdatedAt(t)
	return dwatc
}

// SetCreatedAt sets the "created_at" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetCreatedAt(t time.Time) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetCreatedAt(t)
	return dwatc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetNillableCreatedAt(t *time.Time) *DeletedWorkspaceActivityTaskCreate {
	if t != nil {
		dwatc.SetCreatedAt(*t)
	}
	return dwatc
}

// SetUpdatedAt sets the "updated_at" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetUpdatedAt(t time.Time) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetUpdatedAt(t)
	return dwatc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetNillableUpdatedAt(t *time.Time) *DeletedWorkspaceActivityTaskCreate {
	if t != nil {
		dwatc.SetUpdatedAt(*t)
	}
	return dwatc
}

// SetID sets the "id" field.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetID(u ulid.ID) *DeletedWorkspaceActivityTaskCreate {
	dwatc.mutation.SetID(u)
	return dwatc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetNillableID(u *ulid.ID) *DeletedWorkspaceActivityTaskCreate {
	if u != nil {
		dwatc.SetID(*u)
	}
	return dwatc
}

// SetTask sets the "task" edge to the Task entity.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SetTask(t *Task) *DeletedWorkspaceActivityTaskCreate {
	return dwatc.SetTaskID(t.ID)
}

// Mutation returns the DeletedWorkspaceActivityTaskMutation object of the builder.
func (dwatc *DeletedWorkspaceActivityTaskCreate) Mutation() *DeletedWorkspaceActivityTaskMutation {
	return dwatc.mutation
}

// Save creates the DeletedWorkspaceActivityTask in the database.
func (dwatc *DeletedWorkspaceActivityTaskCreate) Save(ctx context.Context) (*DeletedWorkspaceActivityTask, error) {
	var (
		err  error
		node *DeletedWorkspaceActivityTask
	)
	dwatc.defaults()
	if len(dwatc.hooks) == 0 {
		if err = dwatc.check(); err != nil {
			return nil, err
		}
		node, err = dwatc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedWorkspaceActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dwatc.check(); err != nil {
				return nil, err
			}
			dwatc.mutation = mutation
			if node, err = dwatc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dwatc.hooks) - 1; i >= 0; i-- {
			if dwatc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dwatc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dwatc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dwatc *DeletedWorkspaceActivityTaskCreate) SaveX(ctx context.Context) *DeletedWorkspaceActivityTask {
	v, err := dwatc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dwatc *DeletedWorkspaceActivityTaskCreate) Exec(ctx context.Context) error {
	_, err := dwatc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dwatc *DeletedWorkspaceActivityTaskCreate) ExecX(ctx context.Context) {
	if err := dwatc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dwatc *DeletedWorkspaceActivityTaskCreate) defaults() {
	if _, ok := dwatc.mutation.CreatedAt(); !ok {
		v := deletedworkspaceactivitytask.DefaultCreatedAt()
		dwatc.mutation.SetCreatedAt(v)
	}
	if _, ok := dwatc.mutation.UpdatedAt(); !ok {
		v := deletedworkspaceactivitytask.DefaultUpdatedAt()
		dwatc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dwatc.mutation.ID(); !ok {
		v := deletedworkspaceactivitytask.DefaultID()
		dwatc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dwatc *DeletedWorkspaceActivityTaskCreate) check() error {
	if _, ok := dwatc.mutation.WorkspaceActivityID(); !ok {
		return &ValidationError{Name: "workspace_activity_id", err: errors.New(`ent: missing required field "DeletedWorkspaceActivityTask.workspace_activity_id"`)}
	}
	if _, ok := dwatc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "DeletedWorkspaceActivityTask.task_id"`)}
	}
	if _, ok := dwatc.mutation.WorkspaceActivityTaskID(); !ok {
		return &ValidationError{Name: "workspace_activity_task_id", err: errors.New(`ent: missing required field "DeletedWorkspaceActivityTask.workspace_activity_task_id"`)}
	}
	if _, ok := dwatc.mutation.WorkspaceActivityTaskCreatedAt(); !ok {
		return &ValidationError{Name: "workspace_activity_task_created_at", err: errors.New(`ent: missing required field "DeletedWorkspaceActivityTask.workspace_activity_task_created_at"`)}
	}
	if _, ok := dwatc.mutation.WorkspaceActivityTaskUpdatedAt(); !ok {
		return &ValidationError{Name: "workspace_activity_task_updated_at", err: errors.New(`ent: missing required field "DeletedWorkspaceActivityTask.workspace_activity_task_updated_at"`)}
	}
	if _, ok := dwatc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeletedWorkspaceActivityTask.created_at"`)}
	}
	if _, ok := dwatc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeletedWorkspaceActivityTask.updated_at"`)}
	}
	if _, ok := dwatc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "DeletedWorkspaceActivityTask.task"`)}
	}
	return nil
}

func (dwatc *DeletedWorkspaceActivityTaskCreate) sqlSave(ctx context.Context) (*DeletedWorkspaceActivityTask, error) {
	_node, _spec := dwatc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dwatc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dwatc *DeletedWorkspaceActivityTaskCreate) createSpec() (*DeletedWorkspaceActivityTask, *sqlgraph.CreateSpec) {
	var (
		_node = &DeletedWorkspaceActivityTask{config: dwatc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deletedworkspaceactivitytask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedworkspaceactivitytask.FieldID,
			},
		}
	)
	_spec.OnConflict = dwatc.conflict
	if id, ok := dwatc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dwatc.mutation.WorkspaceActivityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityID,
		})
		_node.WorkspaceActivityID = value
	}
	if value, ok := dwatc.mutation.WorkspaceActivityTaskID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskID,
		})
		_node.WorkspaceActivityTaskID = value
	}
	if value, ok := dwatc.mutation.WorkspaceActivityTaskCreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskCreatedAt,
		})
		_node.WorkspaceActivityTaskCreatedAt = value
	}
	if value, ok := dwatc.mutation.WorkspaceActivityTaskUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldWorkspaceActivityTaskUpdatedAt,
		})
		_node.WorkspaceActivityTaskUpdatedAt = value
	}
	if value, ok := dwatc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dwatc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedworkspaceactivitytask.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := dwatc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedworkspaceactivitytask.TaskTable,
			Columns: []string{deletedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletedWorkspaceActivityTask.Create().
//		SetWorkspaceActivityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletedWorkspaceActivityTaskUpsert) {
//			SetWorkspaceActivityID(v+v).
//		}).
//		Exec(ctx)
//
func (dwatc *DeletedWorkspaceActivityTaskCreate) OnConflict(opts ...sql.ConflictOption) *DeletedWorkspaceActivityTaskUpsertOne {
	dwatc.conflict = opts
	return &DeletedWorkspaceActivityTaskUpsertOne{
		create: dwatc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletedWorkspaceActivityTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dwatc *DeletedWorkspaceActivityTaskCreate) OnConflictColumns(columns ...string) *DeletedWorkspaceActivityTaskUpsertOne {
	dwatc.conflict = append(dwatc.conflict, sql.ConflictColumns(columns...))
	return &DeletedWorkspaceActivityTaskUpsertOne{
		create: dwatc,
	}
}

type (
	// DeletedWorkspaceActivityTaskUpsertOne is the builder for "upsert"-ing
	//  one DeletedWorkspaceActivityTask node.
	DeletedWorkspaceActivityTaskUpsertOne struct {
		create *DeletedWorkspaceActivityTaskCreate
	}

	// DeletedWorkspaceActivityTaskUpsert is the "OnConflict" setter.
	DeletedWorkspaceActivityTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetWorkspaceActivityID sets the "workspace_activity_id" field.
func (u *DeletedWorkspaceActivityTaskUpsert) SetWorkspaceActivityID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsert {
	u.Set(deletedworkspaceactivitytask.FieldWorkspaceActivityID, v)
	return u
}

// UpdateWorkspaceActivityID sets the "workspace_activity_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsert) UpdateWorkspaceActivityID() *DeletedWorkspaceActivityTaskUpsert {
	u.SetExcluded(deletedworkspaceactivitytask.FieldWorkspaceActivityID)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *DeletedWorkspaceActivityTaskUpsert) SetTaskID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsert {
	u.Set(deletedworkspaceactivitytask.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsert) UpdateTaskID() *DeletedWorkspaceActivityTaskUpsert {
	u.SetExcluded(deletedworkspaceactivitytask.FieldTaskID)
	return u
}

// SetWorkspaceActivityTaskID sets the "workspace_activity_task_id" field.
func (u *DeletedWorkspaceActivityTaskUpsert) SetWorkspaceActivityTaskID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsert {
	u.Set(deletedworkspaceactivitytask.FieldWorkspaceActivityTaskID, v)
	return u
}

// UpdateWorkspaceActivityTaskID sets the "workspace_activity_task_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsert) UpdateWorkspaceActivityTaskID() *DeletedWorkspaceActivityTaskUpsert {
	u.SetExcluded(deletedworkspaceactivitytask.FieldWorkspaceActivityTaskID)
	return u
}

// SetWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field.
func (u *DeletedWorkspaceActivityTaskUpsert) SetWorkspaceActivityTaskCreatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsert {
	u.Set(deletedworkspaceactivitytask.FieldWorkspaceActivityTaskCreatedAt, v)
	return u
}

// UpdateWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsert) UpdateWorkspaceActivityTaskCreatedAt() *DeletedWorkspaceActivityTaskUpsert {
	u.SetExcluded(deletedworkspaceactivitytask.FieldWorkspaceActivityTaskCreatedAt)
	return u
}

// SetWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field.
func (u *DeletedWorkspaceActivityTaskUpsert) SetWorkspaceActivityTaskUpdatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsert {
	u.Set(deletedworkspaceactivitytask.FieldWorkspaceActivityTaskUpdatedAt, v)
	return u
}

// UpdateWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsert) UpdateWorkspaceActivityTaskUpdatedAt() *DeletedWorkspaceActivityTaskUpsert {
	u.SetExcluded(deletedworkspaceactivitytask.FieldWorkspaceActivityTaskUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedWorkspaceActivityTaskUpsert) SetCreatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsert {
	u.Set(deletedworkspaceactivitytask.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsert) UpdateCreatedAt() *DeletedWorkspaceActivityTaskUpsert {
	u.SetExcluded(deletedworkspaceactivitytask.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedWorkspaceActivityTaskUpsert) SetUpdatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsert {
	u.Set(deletedworkspaceactivitytask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsert) UpdateUpdatedAt() *DeletedWorkspaceActivityTaskUpsert {
	u.SetExcluded(deletedworkspaceactivitytask.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeletedWorkspaceActivityTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deletedworkspaceactivitytask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateNewValues() *DeletedWorkspaceActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deletedworkspaceactivitytask.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(deletedworkspaceactivitytask.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(deletedworkspaceactivitytask.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DeletedWorkspaceActivityTask.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DeletedWorkspaceActivityTaskUpsertOne) Ignore() *DeletedWorkspaceActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletedWorkspaceActivityTaskUpsertOne) DoNothing() *DeletedWorkspaceActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletedWorkspaceActivityTaskCreate.OnConflict
// documentation for more info.
func (u *DeletedWorkspaceActivityTaskUpsertOne) Update(set func(*DeletedWorkspaceActivityTaskUpsert)) *DeletedWorkspaceActivityTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletedWorkspaceActivityTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceActivityID sets the "workspace_activity_id" field.
func (u *DeletedWorkspaceActivityTaskUpsertOne) SetWorkspaceActivityID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityID(v)
	})
}

// UpdateWorkspaceActivityID sets the "workspace_activity_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateWorkspaceActivityID() *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *DeletedWorkspaceActivityTaskUpsertOne) SetTaskID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateTaskID() *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetWorkspaceActivityTaskID sets the "workspace_activity_task_id" field.
func (u *DeletedWorkspaceActivityTaskUpsertOne) SetWorkspaceActivityTaskID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityTaskID(v)
	})
}

// UpdateWorkspaceActivityTaskID sets the "workspace_activity_task_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateWorkspaceActivityTaskID() *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityTaskID()
	})
}

// SetWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertOne) SetWorkspaceActivityTaskCreatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityTaskCreatedAt(v)
	})
}

// UpdateWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateWorkspaceActivityTaskCreatedAt() *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityTaskCreatedAt()
	})
}

// SetWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertOne) SetWorkspaceActivityTaskUpdatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityTaskUpdatedAt(v)
	})
}

// UpdateWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateWorkspaceActivityTaskUpdatedAt() *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityTaskUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertOne) SetCreatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateCreatedAt() *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertOne) SetUpdatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertOne) UpdateUpdatedAt() *DeletedWorkspaceActivityTaskUpsertOne {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeletedWorkspaceActivityTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeletedWorkspaceActivityTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletedWorkspaceActivityTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeletedWorkspaceActivityTaskUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeletedWorkspaceActivityTaskUpsertOne.ID is not supported by MySQL driver. Use DeletedWorkspaceActivityTaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeletedWorkspaceActivityTaskUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeletedWorkspaceActivityTaskCreateBulk is the builder for creating many DeletedWorkspaceActivityTask entities in bulk.
type DeletedWorkspaceActivityTaskCreateBulk struct {
	config
	builders []*DeletedWorkspaceActivityTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the DeletedWorkspaceActivityTask entities in the database.
func (dwatcb *DeletedWorkspaceActivityTaskCreateBulk) Save(ctx context.Context) ([]*DeletedWorkspaceActivityTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dwatcb.builders))
	nodes := make([]*DeletedWorkspaceActivityTask, len(dwatcb.builders))
	mutators := make([]Mutator, len(dwatcb.builders))
	for i := range dwatcb.builders {
		func(i int, root context.Context) {
			builder := dwatcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeletedWorkspaceActivityTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dwatcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dwatcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dwatcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dwatcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dwatcb *DeletedWorkspaceActivityTaskCreateBulk) SaveX(ctx context.Context) []*DeletedWorkspaceActivityTask {
	v, err := dwatcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dwatcb *DeletedWorkspaceActivityTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := dwatcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dwatcb *DeletedWorkspaceActivityTaskCreateBulk) ExecX(ctx context.Context) {
	if err := dwatcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletedWorkspaceActivityTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletedWorkspaceActivityTaskUpsert) {
//			SetWorkspaceActivityID(v+v).
//		}).
//		Exec(ctx)
//
func (dwatcb *DeletedWorkspaceActivityTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeletedWorkspaceActivityTaskUpsertBulk {
	dwatcb.conflict = opts
	return &DeletedWorkspaceActivityTaskUpsertBulk{
		create: dwatcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletedWorkspaceActivityTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dwatcb *DeletedWorkspaceActivityTaskCreateBulk) OnConflictColumns(columns ...string) *DeletedWorkspaceActivityTaskUpsertBulk {
	dwatcb.conflict = append(dwatcb.conflict, sql.ConflictColumns(columns...))
	return &DeletedWorkspaceActivityTaskUpsertBulk{
		create: dwatcb,
	}
}

// DeletedWorkspaceActivityTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of DeletedWorkspaceActivityTask nodes.
type DeletedWorkspaceActivityTaskUpsertBulk struct {
	create *DeletedWorkspaceActivityTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeletedWorkspaceActivityTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deletedworkspaceactivitytask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateNewValues() *DeletedWorkspaceActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deletedworkspaceactivitytask.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(deletedworkspaceactivitytask.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(deletedworkspaceactivitytask.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeletedWorkspaceActivityTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DeletedWorkspaceActivityTaskUpsertBulk) Ignore() *DeletedWorkspaceActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) DoNothing() *DeletedWorkspaceActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletedWorkspaceActivityTaskCreateBulk.OnConflict
// documentation for more info.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) Update(set func(*DeletedWorkspaceActivityTaskUpsert)) *DeletedWorkspaceActivityTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletedWorkspaceActivityTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceActivityID sets the "workspace_activity_id" field.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) SetWorkspaceActivityID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityID(v)
	})
}

// UpdateWorkspaceActivityID sets the "workspace_activity_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateWorkspaceActivityID() *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) SetTaskID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateTaskID() *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetWorkspaceActivityTaskID sets the "workspace_activity_task_id" field.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) SetWorkspaceActivityTaskID(v ulid.ID) *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityTaskID(v)
	})
}

// UpdateWorkspaceActivityTaskID sets the "workspace_activity_task_id" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateWorkspaceActivityTaskID() *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityTaskID()
	})
}

// SetWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) SetWorkspaceActivityTaskCreatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityTaskCreatedAt(v)
	})
}

// UpdateWorkspaceActivityTaskCreatedAt sets the "workspace_activity_task_created_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateWorkspaceActivityTaskCreatedAt() *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityTaskCreatedAt()
	})
}

// SetWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) SetWorkspaceActivityTaskUpdatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetWorkspaceActivityTaskUpdatedAt(v)
	})
}

// UpdateWorkspaceActivityTaskUpdatedAt sets the "workspace_activity_task_updated_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateWorkspaceActivityTaskUpdatedAt() *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateWorkspaceActivityTaskUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) SetCreatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateCreatedAt() *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) SetUpdatedAt(v time.Time) *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) UpdateUpdatedAt() *DeletedWorkspaceActivityTaskUpsertBulk {
	return u.Update(func(s *DeletedWorkspaceActivityTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeletedWorkspaceActivityTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeletedWorkspaceActivityTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletedWorkspaceActivityTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
