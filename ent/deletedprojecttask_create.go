// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/deletedprojecttask"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeletedProjectTaskCreate is the builder for creating a DeletedProjectTask entity.
type DeletedProjectTaskCreate struct {
	config
	mutation *DeletedProjectTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProjectID sets the "project_id" field.
func (dptc *DeletedProjectTaskCreate) SetProjectID(u ulid.ID) *DeletedProjectTaskCreate {
	dptc.mutation.SetProjectID(u)
	return dptc
}

// SetTaskID sets the "task_id" field.
func (dptc *DeletedProjectTaskCreate) SetTaskID(u ulid.ID) *DeletedProjectTaskCreate {
	dptc.mutation.SetTaskID(u)
	return dptc
}

// SetProjectTaskSectionID sets the "project_task_section_id" field.
func (dptc *DeletedProjectTaskCreate) SetProjectTaskSectionID(u ulid.ID) *DeletedProjectTaskCreate {
	dptc.mutation.SetProjectTaskSectionID(u)
	return dptc
}

// SetProjectTaskCreatedAt sets the "project_task_created_at" field.
func (dptc *DeletedProjectTaskCreate) SetProjectTaskCreatedAt(t time.Time) *DeletedProjectTaskCreate {
	dptc.mutation.SetProjectTaskCreatedAt(t)
	return dptc
}

// SetProjectTaskUpdatedAt sets the "project_task_updated_at" field.
func (dptc *DeletedProjectTaskCreate) SetProjectTaskUpdatedAt(t time.Time) *DeletedProjectTaskCreate {
	dptc.mutation.SetProjectTaskUpdatedAt(t)
	return dptc
}

// SetCreatedAt sets the "created_at" field.
func (dptc *DeletedProjectTaskCreate) SetCreatedAt(t time.Time) *DeletedProjectTaskCreate {
	dptc.mutation.SetCreatedAt(t)
	return dptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dptc *DeletedProjectTaskCreate) SetNillableCreatedAt(t *time.Time) *DeletedProjectTaskCreate {
	if t != nil {
		dptc.SetCreatedAt(*t)
	}
	return dptc
}

// SetUpdatedAt sets the "updated_at" field.
func (dptc *DeletedProjectTaskCreate) SetUpdatedAt(t time.Time) *DeletedProjectTaskCreate {
	dptc.mutation.SetUpdatedAt(t)
	return dptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dptc *DeletedProjectTaskCreate) SetNillableUpdatedAt(t *time.Time) *DeletedProjectTaskCreate {
	if t != nil {
		dptc.SetUpdatedAt(*t)
	}
	return dptc
}

// SetID sets the "id" field.
func (dptc *DeletedProjectTaskCreate) SetID(u ulid.ID) *DeletedProjectTaskCreate {
	dptc.mutation.SetID(u)
	return dptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dptc *DeletedProjectTaskCreate) SetNillableID(u *ulid.ID) *DeletedProjectTaskCreate {
	if u != nil {
		dptc.SetID(*u)
	}
	return dptc
}

// SetProject sets the "project" edge to the Project entity.
func (dptc *DeletedProjectTaskCreate) SetProject(p *Project) *DeletedProjectTaskCreate {
	return dptc.SetProjectID(p.ID)
}

// SetTask sets the "task" edge to the Task entity.
func (dptc *DeletedProjectTaskCreate) SetTask(t *Task) *DeletedProjectTaskCreate {
	return dptc.SetTaskID(t.ID)
}

// SetProjectTaskSection sets the "projectTaskSection" edge to the ProjectTaskSection entity.
func (dptc *DeletedProjectTaskCreate) SetProjectTaskSection(p *ProjectTaskSection) *DeletedProjectTaskCreate {
	return dptc.SetProjectTaskSectionID(p.ID)
}

// Mutation returns the DeletedProjectTaskMutation object of the builder.
func (dptc *DeletedProjectTaskCreate) Mutation() *DeletedProjectTaskMutation {
	return dptc.mutation
}

// Save creates the DeletedProjectTask in the database.
func (dptc *DeletedProjectTaskCreate) Save(ctx context.Context) (*DeletedProjectTask, error) {
	var (
		err  error
		node *DeletedProjectTask
	)
	dptc.defaults()
	if len(dptc.hooks) == 0 {
		if err = dptc.check(); err != nil {
			return nil, err
		}
		node, err = dptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeletedProjectTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dptc.check(); err != nil {
				return nil, err
			}
			dptc.mutation = mutation
			if node, err = dptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dptc.hooks) - 1; i >= 0; i-- {
			if dptc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dptc *DeletedProjectTaskCreate) SaveX(ctx context.Context) *DeletedProjectTask {
	v, err := dptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dptc *DeletedProjectTaskCreate) Exec(ctx context.Context) error {
	_, err := dptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dptc *DeletedProjectTaskCreate) ExecX(ctx context.Context) {
	if err := dptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dptc *DeletedProjectTaskCreate) defaults() {
	if _, ok := dptc.mutation.CreatedAt(); !ok {
		v := deletedprojecttask.DefaultCreatedAt()
		dptc.mutation.SetCreatedAt(v)
	}
	if _, ok := dptc.mutation.UpdatedAt(); !ok {
		v := deletedprojecttask.DefaultUpdatedAt()
		dptc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dptc.mutation.ID(); !ok {
		v := deletedprojecttask.DefaultID()
		dptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dptc *DeletedProjectTaskCreate) check() error {
	if _, ok := dptc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "DeletedProjectTask.project_id"`)}
	}
	if _, ok := dptc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "DeletedProjectTask.task_id"`)}
	}
	if _, ok := dptc.mutation.ProjectTaskSectionID(); !ok {
		return &ValidationError{Name: "project_task_section_id", err: errors.New(`ent: missing required field "DeletedProjectTask.project_task_section_id"`)}
	}
	if _, ok := dptc.mutation.ProjectTaskCreatedAt(); !ok {
		return &ValidationError{Name: "project_task_created_at", err: errors.New(`ent: missing required field "DeletedProjectTask.project_task_created_at"`)}
	}
	if _, ok := dptc.mutation.ProjectTaskUpdatedAt(); !ok {
		return &ValidationError{Name: "project_task_updated_at", err: errors.New(`ent: missing required field "DeletedProjectTask.project_task_updated_at"`)}
	}
	if _, ok := dptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeletedProjectTask.created_at"`)}
	}
	if _, ok := dptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeletedProjectTask.updated_at"`)}
	}
	if _, ok := dptc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "DeletedProjectTask.project"`)}
	}
	if _, ok := dptc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "DeletedProjectTask.task"`)}
	}
	if _, ok := dptc.mutation.ProjectTaskSectionID(); !ok {
		return &ValidationError{Name: "projectTaskSection", err: errors.New(`ent: missing required edge "DeletedProjectTask.projectTaskSection"`)}
	}
	return nil
}

func (dptc *DeletedProjectTaskCreate) sqlSave(ctx context.Context) (*DeletedProjectTask, error) {
	_node, _spec := dptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dptc *DeletedProjectTaskCreate) createSpec() (*DeletedProjectTask, *sqlgraph.CreateSpec) {
	var (
		_node = &DeletedProjectTask{config: dptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deletedprojecttask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedprojecttask.FieldID,
			},
		}
	)
	_spec.OnConflict = dptc.conflict
	if id, ok := dptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dptc.mutation.ProjectTaskCreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskCreatedAt,
		})
		_node.ProjectTaskCreatedAt = value
	}
	if value, ok := dptc.mutation.ProjectTaskUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldProjectTaskUpdatedAt,
		})
		_node.ProjectTaskUpdatedAt = value
	}
	if value, ok := dptc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dptc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deletedprojecttask.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := dptc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.ProjectTable,
			Columns: []string{deletedprojecttask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dptc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.TaskTable,
			Columns: []string{deletedprojecttask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dptc.mutation.ProjectTaskSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deletedprojecttask.ProjectTaskSectionTable,
			Columns: []string{deletedprojecttask.ProjectTaskSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttasksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectTaskSectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletedProjectTask.Create().
//		SetProjectID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletedProjectTaskUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (dptc *DeletedProjectTaskCreate) OnConflict(opts ...sql.ConflictOption) *DeletedProjectTaskUpsertOne {
	dptc.conflict = opts
	return &DeletedProjectTaskUpsertOne{
		create: dptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletedProjectTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dptc *DeletedProjectTaskCreate) OnConflictColumns(columns ...string) *DeletedProjectTaskUpsertOne {
	dptc.conflict = append(dptc.conflict, sql.ConflictColumns(columns...))
	return &DeletedProjectTaskUpsertOne{
		create: dptc,
	}
}

type (
	// DeletedProjectTaskUpsertOne is the builder for "upsert"-ing
	//  one DeletedProjectTask node.
	DeletedProjectTaskUpsertOne struct {
		create *DeletedProjectTaskCreate
	}

	// DeletedProjectTaskUpsert is the "OnConflict" setter.
	DeletedProjectTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetProjectID sets the "project_id" field.
func (u *DeletedProjectTaskUpsert) SetProjectID(v ulid.ID) *DeletedProjectTaskUpsert {
	u.Set(deletedprojecttask.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsert) UpdateProjectID() *DeletedProjectTaskUpsert {
	u.SetExcluded(deletedprojecttask.FieldProjectID)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *DeletedProjectTaskUpsert) SetTaskID(v ulid.ID) *DeletedProjectTaskUpsert {
	u.Set(deletedprojecttask.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsert) UpdateTaskID() *DeletedProjectTaskUpsert {
	u.SetExcluded(deletedprojecttask.FieldTaskID)
	return u
}

// SetProjectTaskSectionID sets the "project_task_section_id" field.
func (u *DeletedProjectTaskUpsert) SetProjectTaskSectionID(v ulid.ID) *DeletedProjectTaskUpsert {
	u.Set(deletedprojecttask.FieldProjectTaskSectionID, v)
	return u
}

// UpdateProjectTaskSectionID sets the "project_task_section_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsert) UpdateProjectTaskSectionID() *DeletedProjectTaskUpsert {
	u.SetExcluded(deletedprojecttask.FieldProjectTaskSectionID)
	return u
}

// SetProjectTaskCreatedAt sets the "project_task_created_at" field.
func (u *DeletedProjectTaskUpsert) SetProjectTaskCreatedAt(v time.Time) *DeletedProjectTaskUpsert {
	u.Set(deletedprojecttask.FieldProjectTaskCreatedAt, v)
	return u
}

// UpdateProjectTaskCreatedAt sets the "project_task_created_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsert) UpdateProjectTaskCreatedAt() *DeletedProjectTaskUpsert {
	u.SetExcluded(deletedprojecttask.FieldProjectTaskCreatedAt)
	return u
}

// SetProjectTaskUpdatedAt sets the "project_task_updated_at" field.
func (u *DeletedProjectTaskUpsert) SetProjectTaskUpdatedAt(v time.Time) *DeletedProjectTaskUpsert {
	u.Set(deletedprojecttask.FieldProjectTaskUpdatedAt, v)
	return u
}

// UpdateProjectTaskUpdatedAt sets the "project_task_updated_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsert) UpdateProjectTaskUpdatedAt() *DeletedProjectTaskUpsert {
	u.SetExcluded(deletedprojecttask.FieldProjectTaskUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedProjectTaskUpsert) SetCreatedAt(v time.Time) *DeletedProjectTaskUpsert {
	u.Set(deletedprojecttask.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsert) UpdateCreatedAt() *DeletedProjectTaskUpsert {
	u.SetExcluded(deletedprojecttask.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedProjectTaskUpsert) SetUpdatedAt(v time.Time) *DeletedProjectTaskUpsert {
	u.Set(deletedprojecttask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsert) UpdateUpdatedAt() *DeletedProjectTaskUpsert {
	u.SetExcluded(deletedprojecttask.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeletedProjectTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deletedprojecttask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeletedProjectTaskUpsertOne) UpdateNewValues() *DeletedProjectTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deletedprojecttask.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(deletedprojecttask.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(deletedprojecttask.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DeletedProjectTask.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DeletedProjectTaskUpsertOne) Ignore() *DeletedProjectTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletedProjectTaskUpsertOne) DoNothing() *DeletedProjectTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletedProjectTaskCreate.OnConflict
// documentation for more info.
func (u *DeletedProjectTaskUpsertOne) Update(set func(*DeletedProjectTaskUpsert)) *DeletedProjectTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletedProjectTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *DeletedProjectTaskUpsertOne) SetProjectID(v ulid.ID) *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertOne) UpdateProjectID() *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *DeletedProjectTaskUpsertOne) SetTaskID(v ulid.ID) *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertOne) UpdateTaskID() *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetProjectTaskSectionID sets the "project_task_section_id" field.
func (u *DeletedProjectTaskUpsertOne) SetProjectTaskSectionID(v ulid.ID) *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectTaskSectionID(v)
	})
}

// UpdateProjectTaskSectionID sets the "project_task_section_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertOne) UpdateProjectTaskSectionID() *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectTaskSectionID()
	})
}

// SetProjectTaskCreatedAt sets the "project_task_created_at" field.
func (u *DeletedProjectTaskUpsertOne) SetProjectTaskCreatedAt(v time.Time) *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectTaskCreatedAt(v)
	})
}

// UpdateProjectTaskCreatedAt sets the "project_task_created_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertOne) UpdateProjectTaskCreatedAt() *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectTaskCreatedAt()
	})
}

// SetProjectTaskUpdatedAt sets the "project_task_updated_at" field.
func (u *DeletedProjectTaskUpsertOne) SetProjectTaskUpdatedAt(v time.Time) *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectTaskUpdatedAt(v)
	})
}

// UpdateProjectTaskUpdatedAt sets the "project_task_updated_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertOne) UpdateProjectTaskUpdatedAt() *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectTaskUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedProjectTaskUpsertOne) SetCreatedAt(v time.Time) *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertOne) UpdateCreatedAt() *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedProjectTaskUpsertOne) SetUpdatedAt(v time.Time) *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertOne) UpdateUpdatedAt() *DeletedProjectTaskUpsertOne {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeletedProjectTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeletedProjectTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletedProjectTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeletedProjectTaskUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeletedProjectTaskUpsertOne.ID is not supported by MySQL driver. Use DeletedProjectTaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeletedProjectTaskUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeletedProjectTaskCreateBulk is the builder for creating many DeletedProjectTask entities in bulk.
type DeletedProjectTaskCreateBulk struct {
	config
	builders []*DeletedProjectTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the DeletedProjectTask entities in the database.
func (dptcb *DeletedProjectTaskCreateBulk) Save(ctx context.Context) ([]*DeletedProjectTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dptcb.builders))
	nodes := make([]*DeletedProjectTask, len(dptcb.builders))
	mutators := make([]Mutator, len(dptcb.builders))
	for i := range dptcb.builders {
		func(i int, root context.Context) {
			builder := dptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeletedProjectTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dptcb *DeletedProjectTaskCreateBulk) SaveX(ctx context.Context) []*DeletedProjectTask {
	v, err := dptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dptcb *DeletedProjectTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := dptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dptcb *DeletedProjectTaskCreateBulk) ExecX(ctx context.Context) {
	if err := dptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeletedProjectTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeletedProjectTaskUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
//
func (dptcb *DeletedProjectTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeletedProjectTaskUpsertBulk {
	dptcb.conflict = opts
	return &DeletedProjectTaskUpsertBulk{
		create: dptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeletedProjectTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dptcb *DeletedProjectTaskCreateBulk) OnConflictColumns(columns ...string) *DeletedProjectTaskUpsertBulk {
	dptcb.conflict = append(dptcb.conflict, sql.ConflictColumns(columns...))
	return &DeletedProjectTaskUpsertBulk{
		create: dptcb,
	}
}

// DeletedProjectTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of DeletedProjectTask nodes.
type DeletedProjectTaskUpsertBulk struct {
	create *DeletedProjectTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeletedProjectTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deletedprojecttask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeletedProjectTaskUpsertBulk) UpdateNewValues() *DeletedProjectTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deletedprojecttask.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(deletedprojecttask.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(deletedprojecttask.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeletedProjectTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DeletedProjectTaskUpsertBulk) Ignore() *DeletedProjectTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeletedProjectTaskUpsertBulk) DoNothing() *DeletedProjectTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeletedProjectTaskCreateBulk.OnConflict
// documentation for more info.
func (u *DeletedProjectTaskUpsertBulk) Update(set func(*DeletedProjectTaskUpsert)) *DeletedProjectTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeletedProjectTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetProjectID sets the "project_id" field.
func (u *DeletedProjectTaskUpsertBulk) SetProjectID(v ulid.ID) *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertBulk) UpdateProjectID() *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *DeletedProjectTaskUpsertBulk) SetTaskID(v ulid.ID) *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertBulk) UpdateTaskID() *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetProjectTaskSectionID sets the "project_task_section_id" field.
func (u *DeletedProjectTaskUpsertBulk) SetProjectTaskSectionID(v ulid.ID) *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectTaskSectionID(v)
	})
}

// UpdateProjectTaskSectionID sets the "project_task_section_id" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertBulk) UpdateProjectTaskSectionID() *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectTaskSectionID()
	})
}

// SetProjectTaskCreatedAt sets the "project_task_created_at" field.
func (u *DeletedProjectTaskUpsertBulk) SetProjectTaskCreatedAt(v time.Time) *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectTaskCreatedAt(v)
	})
}

// UpdateProjectTaskCreatedAt sets the "project_task_created_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertBulk) UpdateProjectTaskCreatedAt() *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectTaskCreatedAt()
	})
}

// SetProjectTaskUpdatedAt sets the "project_task_updated_at" field.
func (u *DeletedProjectTaskUpsertBulk) SetProjectTaskUpdatedAt(v time.Time) *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetProjectTaskUpdatedAt(v)
	})
}

// UpdateProjectTaskUpdatedAt sets the "project_task_updated_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertBulk) UpdateProjectTaskUpdatedAt() *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateProjectTaskUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeletedProjectTaskUpsertBulk) SetCreatedAt(v time.Time) *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertBulk) UpdateCreatedAt() *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeletedProjectTaskUpsertBulk) SetUpdatedAt(v time.Time) *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeletedProjectTaskUpsertBulk) UpdateUpdatedAt() *DeletedProjectTaskUpsertBulk {
	return u.Update(func(s *DeletedProjectTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *DeletedProjectTaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeletedProjectTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeletedProjectTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeletedProjectTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
