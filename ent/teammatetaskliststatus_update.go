// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateTaskListStatusUpdate is the builder for updating TeammateTaskListStatus entities.
type TeammateTaskListStatusUpdate struct {
	config
	hooks    []Hook
	mutation *TeammateTaskListStatusMutation
}

// Where appends a list predicates to the TeammateTaskListStatusUpdate builder.
func (ttlsu *TeammateTaskListStatusUpdate) Where(ps ...predicate.TeammateTaskListStatus) *TeammateTaskListStatusUpdate {
	ttlsu.mutation.Where(ps...)
	return ttlsu
}

// SetWorkspaceID sets the "workspace_id" field.
func (ttlsu *TeammateTaskListStatusUpdate) SetWorkspaceID(u ulid.ID) *TeammateTaskListStatusUpdate {
	ttlsu.mutation.SetWorkspaceID(u)
	return ttlsu
}

// SetTeammateID sets the "teammate_id" field.
func (ttlsu *TeammateTaskListStatusUpdate) SetTeammateID(u ulid.ID) *TeammateTaskListStatusUpdate {
	ttlsu.mutation.SetTeammateID(u)
	return ttlsu
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (ttlsu *TeammateTaskListStatusUpdate) SetTaskListCompletedStatusID(u ulid.ID) *TeammateTaskListStatusUpdate {
	ttlsu.mutation.SetTaskListCompletedStatusID(u)
	return ttlsu
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (ttlsu *TeammateTaskListStatusUpdate) SetTaskListSortStatusID(u ulid.ID) *TeammateTaskListStatusUpdate {
	ttlsu.mutation.SetTaskListSortStatusID(u)
	return ttlsu
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (ttlsu *TeammateTaskListStatusUpdate) SetWorkspace(w *Workspace) *TeammateTaskListStatusUpdate {
	return ttlsu.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (ttlsu *TeammateTaskListStatusUpdate) SetTeammate(t *Teammate) *TeammateTaskListStatusUpdate {
	return ttlsu.SetTeammateID(t.ID)
}

// SetTaskListCompletedStatus sets the "taskListCompletedStatus" edge to the TaskListCompletedStatus entity.
func (ttlsu *TeammateTaskListStatusUpdate) SetTaskListCompletedStatus(t *TaskListCompletedStatus) *TeammateTaskListStatusUpdate {
	return ttlsu.SetTaskListCompletedStatusID(t.ID)
}

// SetTaskListSortStatus sets the "taskListSortStatus" edge to the TaskListSortStatus entity.
func (ttlsu *TeammateTaskListStatusUpdate) SetTaskListSortStatus(t *TaskListSortStatus) *TeammateTaskListStatusUpdate {
	return ttlsu.SetTaskListSortStatusID(t.ID)
}

// Mutation returns the TeammateTaskListStatusMutation object of the builder.
func (ttlsu *TeammateTaskListStatusUpdate) Mutation() *TeammateTaskListStatusMutation {
	return ttlsu.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (ttlsu *TeammateTaskListStatusUpdate) ClearWorkspace() *TeammateTaskListStatusUpdate {
	ttlsu.mutation.ClearWorkspace()
	return ttlsu
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (ttlsu *TeammateTaskListStatusUpdate) ClearTeammate() *TeammateTaskListStatusUpdate {
	ttlsu.mutation.ClearTeammate()
	return ttlsu
}

// ClearTaskListCompletedStatus clears the "taskListCompletedStatus" edge to the TaskListCompletedStatus entity.
func (ttlsu *TeammateTaskListStatusUpdate) ClearTaskListCompletedStatus() *TeammateTaskListStatusUpdate {
	ttlsu.mutation.ClearTaskListCompletedStatus()
	return ttlsu
}

// ClearTaskListSortStatus clears the "taskListSortStatus" edge to the TaskListSortStatus entity.
func (ttlsu *TeammateTaskListStatusUpdate) ClearTaskListSortStatus() *TeammateTaskListStatusUpdate {
	ttlsu.mutation.ClearTaskListSortStatus()
	return ttlsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttlsu *TeammateTaskListStatusUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttlsu.hooks) == 0 {
		if err = ttlsu.check(); err != nil {
			return 0, err
		}
		affected, err = ttlsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskListStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttlsu.check(); err != nil {
				return 0, err
			}
			ttlsu.mutation = mutation
			affected, err = ttlsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttlsu.hooks) - 1; i >= 0; i-- {
			if ttlsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttlsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttlsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttlsu *TeammateTaskListStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := ttlsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttlsu *TeammateTaskListStatusUpdate) Exec(ctx context.Context) error {
	_, err := ttlsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttlsu *TeammateTaskListStatusUpdate) ExecX(ctx context.Context) {
	if err := ttlsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttlsu *TeammateTaskListStatusUpdate) check() error {
	if _, ok := ttlsu.mutation.WorkspaceID(); ttlsu.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.workspace"`)
	}
	if _, ok := ttlsu.mutation.TeammateID(); ttlsu.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.teammate"`)
	}
	if _, ok := ttlsu.mutation.TaskListCompletedStatusID(); ttlsu.mutation.TaskListCompletedStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.taskListCompletedStatus"`)
	}
	if _, ok := ttlsu.mutation.TaskListSortStatusID(); ttlsu.mutation.TaskListSortStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.taskListSortStatus"`)
	}
	return nil
}

func (ttlsu *TeammateTaskListStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammatetaskliststatus.Table,
			Columns: teammatetaskliststatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetaskliststatus.FieldID,
			},
		},
	}
	if ps := ttlsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttlsu.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.WorkspaceTable,
			Columns: []string{teammatetaskliststatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsu.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.WorkspaceTable,
			Columns: []string{teammatetaskliststatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttlsu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TeammateTable,
			Columns: []string{teammatetaskliststatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TeammateTable,
			Columns: []string{teammatetaskliststatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttlsu.mutation.TaskListCompletedStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListCompletedStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListCompletedStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistcompletedstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsu.mutation.TaskListCompletedStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListCompletedStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListCompletedStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistcompletedstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttlsu.mutation.TaskListSortStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListSortStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListSortStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistsortstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsu.mutation.TaskListSortStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListSortStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListSortStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistsortstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttlsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammatetaskliststatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TeammateTaskListStatusUpdateOne is the builder for updating a single TeammateTaskListStatus entity.
type TeammateTaskListStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeammateTaskListStatusMutation
}

// SetWorkspaceID sets the "workspace_id" field.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetWorkspaceID(u ulid.ID) *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.SetWorkspaceID(u)
	return ttlsuo
}

// SetTeammateID sets the "teammate_id" field.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetTeammateID(u ulid.ID) *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.SetTeammateID(u)
	return ttlsuo
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetTaskListCompletedStatusID(u ulid.ID) *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.SetTaskListCompletedStatusID(u)
	return ttlsuo
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetTaskListSortStatusID(u ulid.ID) *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.SetTaskListSortStatusID(u)
	return ttlsuo
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetWorkspace(w *Workspace) *TeammateTaskListStatusUpdateOne {
	return ttlsuo.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetTeammate(t *Teammate) *TeammateTaskListStatusUpdateOne {
	return ttlsuo.SetTeammateID(t.ID)
}

// SetTaskListCompletedStatus sets the "taskListCompletedStatus" edge to the TaskListCompletedStatus entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetTaskListCompletedStatus(t *TaskListCompletedStatus) *TeammateTaskListStatusUpdateOne {
	return ttlsuo.SetTaskListCompletedStatusID(t.ID)
}

// SetTaskListSortStatus sets the "taskListSortStatus" edge to the TaskListSortStatus entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SetTaskListSortStatus(t *TaskListSortStatus) *TeammateTaskListStatusUpdateOne {
	return ttlsuo.SetTaskListSortStatusID(t.ID)
}

// Mutation returns the TeammateTaskListStatusMutation object of the builder.
func (ttlsuo *TeammateTaskListStatusUpdateOne) Mutation() *TeammateTaskListStatusMutation {
	return ttlsuo.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) ClearWorkspace() *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.ClearWorkspace()
	return ttlsuo
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) ClearTeammate() *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.ClearTeammate()
	return ttlsuo
}

// ClearTaskListCompletedStatus clears the "taskListCompletedStatus" edge to the TaskListCompletedStatus entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) ClearTaskListCompletedStatus() *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.ClearTaskListCompletedStatus()
	return ttlsuo
}

// ClearTaskListSortStatus clears the "taskListSortStatus" edge to the TaskListSortStatus entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) ClearTaskListSortStatus() *TeammateTaskListStatusUpdateOne {
	ttlsuo.mutation.ClearTaskListSortStatus()
	return ttlsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttlsuo *TeammateTaskListStatusUpdateOne) Select(field string, fields ...string) *TeammateTaskListStatusUpdateOne {
	ttlsuo.fields = append([]string{field}, fields...)
	return ttlsuo
}

// Save executes the query and returns the updated TeammateTaskListStatus entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) Save(ctx context.Context) (*TeammateTaskListStatus, error) {
	var (
		err  error
		node *TeammateTaskListStatus
	)
	if len(ttlsuo.hooks) == 0 {
		if err = ttlsuo.check(); err != nil {
			return nil, err
		}
		node, err = ttlsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskListStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttlsuo.check(); err != nil {
				return nil, err
			}
			ttlsuo.mutation = mutation
			node, err = ttlsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttlsuo.hooks) - 1; i >= 0; i-- {
			if ttlsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttlsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttlsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttlsuo *TeammateTaskListStatusUpdateOne) SaveX(ctx context.Context) *TeammateTaskListStatus {
	node, err := ttlsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttlsuo *TeammateTaskListStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := ttlsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttlsuo *TeammateTaskListStatusUpdateOne) ExecX(ctx context.Context) {
	if err := ttlsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttlsuo *TeammateTaskListStatusUpdateOne) check() error {
	if _, ok := ttlsuo.mutation.WorkspaceID(); ttlsuo.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.workspace"`)
	}
	if _, ok := ttlsuo.mutation.TeammateID(); ttlsuo.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.teammate"`)
	}
	if _, ok := ttlsuo.mutation.TaskListCompletedStatusID(); ttlsuo.mutation.TaskListCompletedStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.taskListCompletedStatus"`)
	}
	if _, ok := ttlsuo.mutation.TaskListSortStatusID(); ttlsuo.mutation.TaskListSortStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TeammateTaskListStatus.taskListSortStatus"`)
	}
	return nil
}

func (ttlsuo *TeammateTaskListStatusUpdateOne) sqlSave(ctx context.Context) (_node *TeammateTaskListStatus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teammatetaskliststatus.Table,
			Columns: teammatetaskliststatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetaskliststatus.FieldID,
			},
		},
	}
	id, ok := ttlsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeammateTaskListStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttlsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teammatetaskliststatus.FieldID)
		for _, f := range fields {
			if !teammatetaskliststatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teammatetaskliststatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttlsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttlsuo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.WorkspaceTable,
			Columns: []string{teammatetaskliststatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsuo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.WorkspaceTable,
			Columns: []string{teammatetaskliststatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttlsuo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TeammateTable,
			Columns: []string{teammatetaskliststatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsuo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TeammateTable,
			Columns: []string{teammatetaskliststatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttlsuo.mutation.TaskListCompletedStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListCompletedStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListCompletedStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistcompletedstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsuo.mutation.TaskListCompletedStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListCompletedStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListCompletedStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistcompletedstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttlsuo.mutation.TaskListSortStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListSortStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListSortStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistsortstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttlsuo.mutation.TaskListSortStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetaskliststatus.TaskListSortStatusTable,
			Columns: []string{teammatetaskliststatus.TaskListSortStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklistsortstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeammateTaskListStatus{config: ttlsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttlsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teammatetaskliststatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
