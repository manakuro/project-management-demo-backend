// Code generated by entc, DO NOT EDIT.

package workspace

import (
	"project-management-demo-backend/ent/schema/ulid"
	"time"
)

const (
	// Label holds the string label denoting the workspace type in the database.
	Label = "workspace"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTeammate holds the string denoting the teammate edge name in mutations.
	EdgeTeammate = "teammate"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeWorkspaceTeammates holds the string denoting the workspace_teammates edge name in mutations.
	EdgeWorkspaceTeammates = "workspace_teammates"
	// EdgeFavoriteWorkspaces holds the string denoting the favorite_workspaces edge name in mutations.
	EdgeFavoriteWorkspaces = "favorite_workspaces"
	// EdgeMyTasksTabStatuses holds the string denoting the my_tasks_tab_statuses edge name in mutations.
	EdgeMyTasksTabStatuses = "my_tasks_tab_statuses"
	// Table holds the table name of the workspace in the database.
	Table = "workspaces"
	// TeammateTable is the table that holds the teammate relation/edge.
	TeammateTable = "workspaces"
	// TeammateInverseTable is the table name for the Teammate entity.
	// It exists in this package in order to avoid circular dependency with the "teammate" package.
	TeammateInverseTable = "teammates"
	// TeammateColumn is the table column denoting the teammate relation/edge.
	TeammateColumn = "created_by"
	// ProjectsTable is the table that holds the projects relation/edge.
	ProjectsTable = "projects"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "projects"
	// ProjectsColumn is the table column denoting the projects relation/edge.
	ProjectsColumn = "workspace_id"
	// WorkspaceTeammatesTable is the table that holds the workspace_teammates relation/edge.
	WorkspaceTeammatesTable = "workspace_teammates"
	// WorkspaceTeammatesInverseTable is the table name for the WorkspaceTeammate entity.
	// It exists in this package in order to avoid circular dependency with the "workspaceteammate" package.
	WorkspaceTeammatesInverseTable = "workspace_teammates"
	// WorkspaceTeammatesColumn is the table column denoting the workspace_teammates relation/edge.
	WorkspaceTeammatesColumn = "workspace_id"
	// FavoriteWorkspacesTable is the table that holds the favorite_workspaces relation/edge.
	FavoriteWorkspacesTable = "favorite_workspaces"
	// FavoriteWorkspacesInverseTable is the table name for the FavoriteWorkspace entity.
	// It exists in this package in order to avoid circular dependency with the "favoriteworkspace" package.
	FavoriteWorkspacesInverseTable = "favorite_workspaces"
	// FavoriteWorkspacesColumn is the table column denoting the favorite_workspaces relation/edge.
	FavoriteWorkspacesColumn = "workspace_id"
	// MyTasksTabStatusesTable is the table that holds the my_tasks_tab_statuses relation/edge.
	MyTasksTabStatusesTable = "my_tasks_tab_status"
	// MyTasksTabStatusesInverseTable is the table name for the MyTasksTabStatus entity.
	// It exists in this package in order to avoid circular dependency with the "mytaskstabstatus" package.
	MyTasksTabStatusesInverseTable = "my_tasks_tab_status"
	// MyTasksTabStatusesColumn is the table column denoting the my_tasks_tab_statuses relation/edge.
	MyTasksTabStatusesColumn = "workspace_id"
)

// Columns holds all SQL columns for workspace fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldName,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ID
)
