// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/tasksection"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceteammate"
	"time"
)

// ColorWhereInput represents a where input for filtering Color queries.
type ColorWhereInput struct {
	Not *ColorWhereInput   `json:"not,omitempty"`
	Or  []*ColorWhereInput `json:"or,omitempty"`
	And []*ColorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "color" field predicates.
	Color             *string  `json:"color,omitempty"`
	ColorNEQ          *string  `json:"colorNEQ,omitempty"`
	ColorIn           []string `json:"colorIn,omitempty"`
	ColorNotIn        []string `json:"colorNotIn,omitempty"`
	ColorGT           *string  `json:"colorGT,omitempty"`
	ColorGTE          *string  `json:"colorGTE,omitempty"`
	ColorLT           *string  `json:"colorLT,omitempty"`
	ColorLTE          *string  `json:"colorLTE,omitempty"`
	ColorContains     *string  `json:"colorContains,omitempty"`
	ColorHasPrefix    *string  `json:"colorHasPrefix,omitempty"`
	ColorHasSuffix    *string  `json:"colorHasSuffix,omitempty"`
	ColorEqualFold    *string  `json:"colorEqualFold,omitempty"`
	ColorContainsFold *string  `json:"colorContainsFold,omitempty"`

	// "hex" field predicates.
	Hex             *string  `json:"hex,omitempty"`
	HexNEQ          *string  `json:"hexNEQ,omitempty"`
	HexIn           []string `json:"hexIn,omitempty"`
	HexNotIn        []string `json:"hexNotIn,omitempty"`
	HexGT           *string  `json:"hexGT,omitempty"`
	HexGTE          *string  `json:"hexGTE,omitempty"`
	HexLT           *string  `json:"hexLT,omitempty"`
	HexLTE          *string  `json:"hexLTE,omitempty"`
	HexContains     *string  `json:"hexContains,omitempty"`
	HexHasPrefix    *string  `json:"hexHasPrefix,omitempty"`
	HexHasSuffix    *string  `json:"hexHasSuffix,omitempty"`
	HexEqualFold    *string  `json:"hexEqualFold,omitempty"`
	HexContainsFold *string  `json:"hexContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project_base_colors" edge predicates.
	HasProjectBaseColors     *bool                         `json:"hasProjectBaseColors,omitempty"`
	HasProjectBaseColorsWith []*ProjectBaseColorWhereInput `json:"hasProjectBaseColorsWith,omitempty"`

	// "project_light_colors" edge predicates.
	HasProjectLightColors     *bool                          `json:"hasProjectLightColors,omitempty"`
	HasProjectLightColorsWith []*ProjectLightColorWhereInput `json:"hasProjectLightColorsWith,omitempty"`
}

// Filter applies the ColorWhereInput filter on the ColorQuery builder.
func (i *ColorWhereInput) Filter(q *ColorQuery) (*ColorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering colors.
// An error is returned if the input is empty or invalid.
func (i *ColorWhereInput) P() (predicate.Color, error) {
	var predicates []predicate.Color
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, color.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Color, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, color.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Color, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, color.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, color.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, color.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, color.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, color.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, color.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, color.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, color.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, color.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, color.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, color.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, color.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, color.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, color.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, color.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, color.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, color.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, color.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, color.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, color.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, color.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, color.NameContainsFold(*i.NameContainsFold))
	}
	if i.Color != nil {
		predicates = append(predicates, color.ColorEQ(*i.Color))
	}
	if i.ColorNEQ != nil {
		predicates = append(predicates, color.ColorNEQ(*i.ColorNEQ))
	}
	if len(i.ColorIn) > 0 {
		predicates = append(predicates, color.ColorIn(i.ColorIn...))
	}
	if len(i.ColorNotIn) > 0 {
		predicates = append(predicates, color.ColorNotIn(i.ColorNotIn...))
	}
	if i.ColorGT != nil {
		predicates = append(predicates, color.ColorGT(*i.ColorGT))
	}
	if i.ColorGTE != nil {
		predicates = append(predicates, color.ColorGTE(*i.ColorGTE))
	}
	if i.ColorLT != nil {
		predicates = append(predicates, color.ColorLT(*i.ColorLT))
	}
	if i.ColorLTE != nil {
		predicates = append(predicates, color.ColorLTE(*i.ColorLTE))
	}
	if i.ColorContains != nil {
		predicates = append(predicates, color.ColorContains(*i.ColorContains))
	}
	if i.ColorHasPrefix != nil {
		predicates = append(predicates, color.ColorHasPrefix(*i.ColorHasPrefix))
	}
	if i.ColorHasSuffix != nil {
		predicates = append(predicates, color.ColorHasSuffix(*i.ColorHasSuffix))
	}
	if i.ColorEqualFold != nil {
		predicates = append(predicates, color.ColorEqualFold(*i.ColorEqualFold))
	}
	if i.ColorContainsFold != nil {
		predicates = append(predicates, color.ColorContainsFold(*i.ColorContainsFold))
	}
	if i.Hex != nil {
		predicates = append(predicates, color.HexEQ(*i.Hex))
	}
	if i.HexNEQ != nil {
		predicates = append(predicates, color.HexNEQ(*i.HexNEQ))
	}
	if len(i.HexIn) > 0 {
		predicates = append(predicates, color.HexIn(i.HexIn...))
	}
	if len(i.HexNotIn) > 0 {
		predicates = append(predicates, color.HexNotIn(i.HexNotIn...))
	}
	if i.HexGT != nil {
		predicates = append(predicates, color.HexGT(*i.HexGT))
	}
	if i.HexGTE != nil {
		predicates = append(predicates, color.HexGTE(*i.HexGTE))
	}
	if i.HexLT != nil {
		predicates = append(predicates, color.HexLT(*i.HexLT))
	}
	if i.HexLTE != nil {
		predicates = append(predicates, color.HexLTE(*i.HexLTE))
	}
	if i.HexContains != nil {
		predicates = append(predicates, color.HexContains(*i.HexContains))
	}
	if i.HexHasPrefix != nil {
		predicates = append(predicates, color.HexHasPrefix(*i.HexHasPrefix))
	}
	if i.HexHasSuffix != nil {
		predicates = append(predicates, color.HexHasSuffix(*i.HexHasSuffix))
	}
	if i.HexEqualFold != nil {
		predicates = append(predicates, color.HexEqualFold(*i.HexEqualFold))
	}
	if i.HexContainsFold != nil {
		predicates = append(predicates, color.HexContainsFold(*i.HexContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, color.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, color.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, color.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, color.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, color.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, color.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, color.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, color.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, color.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, color.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, color.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, color.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, color.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, color.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, color.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, color.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjectBaseColors != nil {
		p := color.HasProjectBaseColors()
		if !*i.HasProjectBaseColors {
			p = color.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectBaseColorsWith) > 0 {
		with := make([]predicate.ProjectBaseColor, 0, len(i.HasProjectBaseColorsWith))
		for _, w := range i.HasProjectBaseColorsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, color.HasProjectBaseColorsWith(with...))
	}
	if i.HasProjectLightColors != nil {
		p := color.HasProjectLightColors()
		if !*i.HasProjectLightColors {
			p = color.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectLightColorsWith) > 0 {
		with := make([]predicate.ProjectLightColor, 0, len(i.HasProjectLightColorsWith))
		for _, w := range i.HasProjectLightColorsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, color.HasProjectLightColorsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ColorWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return color.And(predicates...), nil
	}
}

// FavoriteProjectWhereInput represents a where input for filtering FavoriteProject queries.
type FavoriteProjectWhereInput struct {
	Not *FavoriteProjectWhereInput   `json:"not,omitempty"`
	Or  []*FavoriteProjectWhereInput `json:"or,omitempty"`
	And []*FavoriteProjectWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the FavoriteProjectWhereInput filter on the FavoriteProjectQuery builder.
func (i *FavoriteProjectWhereInput) Filter(q *FavoriteProjectQuery) (*FavoriteProjectQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering favoriteprojects.
// An error is returned if the input is empty or invalid.
func (i *FavoriteProjectWhereInput) P() (predicate.FavoriteProject, error) {
	var predicates []predicate.FavoriteProject
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, favoriteproject.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FavoriteProject, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, favoriteproject.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FavoriteProject, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, favoriteproject.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, favoriteproject.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, favoriteproject.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, favoriteproject.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, favoriteproject.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, favoriteproject.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, favoriteproject.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, favoriteproject.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, favoriteproject.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, favoriteproject.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, favoriteproject.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, favoriteproject.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, favoriteproject.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, favoriteproject.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, favoriteproject.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, favoriteproject.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, favoriteproject.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, favoriteproject.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, favoriteproject.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, favoriteproject.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, favoriteproject.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, favoriteproject.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, favoriteproject.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, favoriteproject.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, favoriteproject.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, favoriteproject.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, favoriteproject.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, favoriteproject.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, favoriteproject.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, favoriteproject.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, favoriteproject.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, favoriteproject.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, favoriteproject.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, favoriteproject.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, favoriteproject.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, favoriteproject.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, favoriteproject.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, favoriteproject.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteproject.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, favoriteproject.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, favoriteproject.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, favoriteproject.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, favoriteproject.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, favoriteproject.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteproject.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := favoriteproject.HasProject()
		if !*i.HasProject {
			p = favoriteproject.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteproject.HasProjectWith(with...))
	}
	if i.HasTeammate != nil {
		p := favoriteproject.HasTeammate()
		if !*i.HasTeammate {
			p = favoriteproject.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteproject.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate FavoriteProjectWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return favoriteproject.And(predicates...), nil
	}
}

// FavoriteWorkspaceWhereInput represents a where input for filtering FavoriteWorkspace queries.
type FavoriteWorkspaceWhereInput struct {
	Not *FavoriteWorkspaceWhereInput   `json:"not,omitempty"`
	Or  []*FavoriteWorkspaceWhereInput `json:"or,omitempty"`
	And []*FavoriteWorkspaceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the FavoriteWorkspaceWhereInput filter on the FavoriteWorkspaceQuery builder.
func (i *FavoriteWorkspaceWhereInput) Filter(q *FavoriteWorkspaceQuery) (*FavoriteWorkspaceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering favoriteworkspaces.
// An error is returned if the input is empty or invalid.
func (i *FavoriteWorkspaceWhereInput) P() (predicate.FavoriteWorkspace, error) {
	var predicates []predicate.FavoriteWorkspace
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, favoriteworkspace.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FavoriteWorkspace, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, favoriteworkspace.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FavoriteWorkspace, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, favoriteworkspace.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, favoriteworkspace.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, favoriteworkspace.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, favoriteworkspace.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, favoriteworkspace.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, favoriteworkspace.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, favoriteworkspace.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, favoriteworkspace.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, favoriteworkspace.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, favoriteworkspace.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, favoriteworkspace.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := favoriteworkspace.HasWorkspace()
		if !*i.HasWorkspace {
			p = favoriteworkspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteworkspace.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := favoriteworkspace.HasTeammate()
		if !*i.HasTeammate {
			p = favoriteworkspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteworkspace.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate FavoriteWorkspaceWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return favoriteworkspace.And(predicates...), nil
	}
}

// IconWhereInput represents a where input for filtering Icon queries.
type IconWhereInput struct {
	Not *IconWhereInput   `json:"not,omitempty"`
	Or  []*IconWhereInput `json:"or,omitempty"`
	And []*IconWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "icon" field predicates.
	Icon             *string  `json:"icon,omitempty"`
	IconNEQ          *string  `json:"iconNEQ,omitempty"`
	IconIn           []string `json:"iconIn,omitempty"`
	IconNotIn        []string `json:"iconNotIn,omitempty"`
	IconGT           *string  `json:"iconGT,omitempty"`
	IconGTE          *string  `json:"iconGTE,omitempty"`
	IconLT           *string  `json:"iconLT,omitempty"`
	IconLTE          *string  `json:"iconLTE,omitempty"`
	IconContains     *string  `json:"iconContains,omitempty"`
	IconHasPrefix    *string  `json:"iconHasPrefix,omitempty"`
	IconHasSuffix    *string  `json:"iconHasSuffix,omitempty"`
	IconEqualFold    *string  `json:"iconEqualFold,omitempty"`
	IconContainsFold *string  `json:"iconContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project_icons" edge predicates.
	HasProjectIcons     *bool                    `json:"hasProjectIcons,omitempty"`
	HasProjectIconsWith []*ProjectIconWhereInput `json:"hasProjectIconsWith,omitempty"`
}

// Filter applies the IconWhereInput filter on the IconQuery builder.
func (i *IconWhereInput) Filter(q *IconQuery) (*IconQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering icons.
// An error is returned if the input is empty or invalid.
func (i *IconWhereInput) P() (predicate.Icon, error) {
	var predicates []predicate.Icon
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, icon.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Icon, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, icon.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Icon, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, icon.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, icon.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, icon.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, icon.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, icon.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, icon.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, icon.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, icon.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, icon.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, icon.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, icon.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, icon.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, icon.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, icon.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, icon.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, icon.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, icon.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, icon.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, icon.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, icon.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, icon.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, icon.NameContainsFold(*i.NameContainsFold))
	}
	if i.Icon != nil {
		predicates = append(predicates, icon.IconEQ(*i.Icon))
	}
	if i.IconNEQ != nil {
		predicates = append(predicates, icon.IconNEQ(*i.IconNEQ))
	}
	if len(i.IconIn) > 0 {
		predicates = append(predicates, icon.IconIn(i.IconIn...))
	}
	if len(i.IconNotIn) > 0 {
		predicates = append(predicates, icon.IconNotIn(i.IconNotIn...))
	}
	if i.IconGT != nil {
		predicates = append(predicates, icon.IconGT(*i.IconGT))
	}
	if i.IconGTE != nil {
		predicates = append(predicates, icon.IconGTE(*i.IconGTE))
	}
	if i.IconLT != nil {
		predicates = append(predicates, icon.IconLT(*i.IconLT))
	}
	if i.IconLTE != nil {
		predicates = append(predicates, icon.IconLTE(*i.IconLTE))
	}
	if i.IconContains != nil {
		predicates = append(predicates, icon.IconContains(*i.IconContains))
	}
	if i.IconHasPrefix != nil {
		predicates = append(predicates, icon.IconHasPrefix(*i.IconHasPrefix))
	}
	if i.IconHasSuffix != nil {
		predicates = append(predicates, icon.IconHasSuffix(*i.IconHasSuffix))
	}
	if i.IconEqualFold != nil {
		predicates = append(predicates, icon.IconEqualFold(*i.IconEqualFold))
	}
	if i.IconContainsFold != nil {
		predicates = append(predicates, icon.IconContainsFold(*i.IconContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, icon.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, icon.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, icon.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, icon.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, icon.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, icon.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, icon.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, icon.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, icon.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, icon.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, icon.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, icon.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, icon.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, icon.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, icon.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, icon.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjectIcons != nil {
		p := icon.HasProjectIcons()
		if !*i.HasProjectIcons {
			p = icon.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectIconsWith) > 0 {
		with := make([]predicate.ProjectIcon, 0, len(i.HasProjectIconsWith))
		for _, w := range i.HasProjectIconsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, icon.HasProjectIconsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate IconWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return icon.And(predicates...), nil
	}
}

// ProjectWhereInput represents a where input for filtering Project queries.
type ProjectWhereInput struct {
	Not *ProjectWhereInput   `json:"not,omitempty"`
	Or  []*ProjectWhereInput `json:"or,omitempty"`
	And []*ProjectWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "project_base_color_id" field predicates.
	ProjectBaseColorID             *ulid.ID  `json:"projectBaseColorID,omitempty"`
	ProjectBaseColorIDNEQ          *ulid.ID  `json:"projectBaseColorIDNEQ,omitempty"`
	ProjectBaseColorIDIn           []ulid.ID `json:"projectBaseColorIDIn,omitempty"`
	ProjectBaseColorIDNotIn        []ulid.ID `json:"projectBaseColorIDNotIn,omitempty"`
	ProjectBaseColorIDGT           *ulid.ID  `json:"projectBaseColorIDGT,omitempty"`
	ProjectBaseColorIDGTE          *ulid.ID  `json:"projectBaseColorIDGTE,omitempty"`
	ProjectBaseColorIDLT           *ulid.ID  `json:"projectBaseColorIDLT,omitempty"`
	ProjectBaseColorIDLTE          *ulid.ID  `json:"projectBaseColorIDLTE,omitempty"`
	ProjectBaseColorIDContains     *ulid.ID  `json:"projectBaseColorIDContains,omitempty"`
	ProjectBaseColorIDHasPrefix    *ulid.ID  `json:"projectBaseColorIDHasPrefix,omitempty"`
	ProjectBaseColorIDHasSuffix    *ulid.ID  `json:"projectBaseColorIDHasSuffix,omitempty"`
	ProjectBaseColorIDEqualFold    *ulid.ID  `json:"projectBaseColorIDEqualFold,omitempty"`
	ProjectBaseColorIDContainsFold *ulid.ID  `json:"projectBaseColorIDContainsFold,omitempty"`

	// "project_light_color_id" field predicates.
	ProjectLightColorID             *ulid.ID  `json:"projectLightColorID,omitempty"`
	ProjectLightColorIDNEQ          *ulid.ID  `json:"projectLightColorIDNEQ,omitempty"`
	ProjectLightColorIDIn           []ulid.ID `json:"projectLightColorIDIn,omitempty"`
	ProjectLightColorIDNotIn        []ulid.ID `json:"projectLightColorIDNotIn,omitempty"`
	ProjectLightColorIDGT           *ulid.ID  `json:"projectLightColorIDGT,omitempty"`
	ProjectLightColorIDGTE          *ulid.ID  `json:"projectLightColorIDGTE,omitempty"`
	ProjectLightColorIDLT           *ulid.ID  `json:"projectLightColorIDLT,omitempty"`
	ProjectLightColorIDLTE          *ulid.ID  `json:"projectLightColorIDLTE,omitempty"`
	ProjectLightColorIDContains     *ulid.ID  `json:"projectLightColorIDContains,omitempty"`
	ProjectLightColorIDHasPrefix    *ulid.ID  `json:"projectLightColorIDHasPrefix,omitempty"`
	ProjectLightColorIDHasSuffix    *ulid.ID  `json:"projectLightColorIDHasSuffix,omitempty"`
	ProjectLightColorIDEqualFold    *ulid.ID  `json:"projectLightColorIDEqualFold,omitempty"`
	ProjectLightColorIDContainsFold *ulid.ID  `json:"projectLightColorIDContainsFold,omitempty"`

	// "project_icon_id" field predicates.
	ProjectIconID             *ulid.ID  `json:"projectIconID,omitempty"`
	ProjectIconIDNEQ          *ulid.ID  `json:"projectIconIDNEQ,omitempty"`
	ProjectIconIDIn           []ulid.ID `json:"projectIconIDIn,omitempty"`
	ProjectIconIDNotIn        []ulid.ID `json:"projectIconIDNotIn,omitempty"`
	ProjectIconIDGT           *ulid.ID  `json:"projectIconIDGT,omitempty"`
	ProjectIconIDGTE          *ulid.ID  `json:"projectIconIDGTE,omitempty"`
	ProjectIconIDLT           *ulid.ID  `json:"projectIconIDLT,omitempty"`
	ProjectIconIDLTE          *ulid.ID  `json:"projectIconIDLTE,omitempty"`
	ProjectIconIDContains     *ulid.ID  `json:"projectIconIDContains,omitempty"`
	ProjectIconIDHasPrefix    *ulid.ID  `json:"projectIconIDHasPrefix,omitempty"`
	ProjectIconIDHasSuffix    *ulid.ID  `json:"projectIconIDHasSuffix,omitempty"`
	ProjectIconIDEqualFold    *ulid.ID  `json:"projectIconIDEqualFold,omitempty"`
	ProjectIconIDContainsFold *ulid.ID  `json:"projectIconIDContainsFold,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *ulid.ID  `json:"createdBy,omitempty"`
	CreatedByNEQ          *ulid.ID  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []ulid.ID `json:"createdByIn,omitempty"`
	CreatedByNotIn        []ulid.ID `json:"createdByNotIn,omitempty"`
	CreatedByGT           *ulid.ID  `json:"createdByGT,omitempty"`
	CreatedByGTE          *ulid.ID  `json:"createdByGTE,omitempty"`
	CreatedByLT           *ulid.ID  `json:"createdByLT,omitempty"`
	CreatedByLTE          *ulid.ID  `json:"createdByLTE,omitempty"`
	CreatedByContains     *ulid.ID  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *ulid.ID  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *ulid.ID  `json:"createdByHasSuffix,omitempty"`
	CreatedByEqualFold    *ulid.ID  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *ulid.ID  `json:"createdByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description_title" field predicates.
	DescriptionTitle             *string  `json:"descriptionTitle,omitempty"`
	DescriptionTitleNEQ          *string  `json:"descriptionTitleNEQ,omitempty"`
	DescriptionTitleIn           []string `json:"descriptionTitleIn,omitempty"`
	DescriptionTitleNotIn        []string `json:"descriptionTitleNotIn,omitempty"`
	DescriptionTitleGT           *string  `json:"descriptionTitleGT,omitempty"`
	DescriptionTitleGTE          *string  `json:"descriptionTitleGTE,omitempty"`
	DescriptionTitleLT           *string  `json:"descriptionTitleLT,omitempty"`
	DescriptionTitleLTE          *string  `json:"descriptionTitleLTE,omitempty"`
	DescriptionTitleContains     *string  `json:"descriptionTitleContains,omitempty"`
	DescriptionTitleHasPrefix    *string  `json:"descriptionTitleHasPrefix,omitempty"`
	DescriptionTitleHasSuffix    *string  `json:"descriptionTitleHasSuffix,omitempty"`
	DescriptionTitleEqualFold    *string  `json:"descriptionTitleEqualFold,omitempty"`
	DescriptionTitleContainsFold *string  `json:"descriptionTitleContainsFold,omitempty"`

	// "due_date" field predicates.
	DueDate      *time.Time  `json:"dueDate,omitempty"`
	DueDateNEQ   *time.Time  `json:"dueDateNEQ,omitempty"`
	DueDateIn    []time.Time `json:"dueDateIn,omitempty"`
	DueDateNotIn []time.Time `json:"dueDateNotIn,omitempty"`
	DueDateGT    *time.Time  `json:"dueDateGT,omitempty"`
	DueDateGTE   *time.Time  `json:"dueDateGTE,omitempty"`
	DueDateLT    *time.Time  `json:"dueDateLT,omitempty"`
	DueDateLTE   *time.Time  `json:"dueDateLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "project_base_color" edge predicates.
	HasProjectBaseColor     *bool                         `json:"hasProjectBaseColor,omitempty"`
	HasProjectBaseColorWith []*ProjectBaseColorWhereInput `json:"hasProjectBaseColorWith,omitempty"`

	// "project_light_color" edge predicates.
	HasProjectLightColor     *bool                          `json:"hasProjectLightColor,omitempty"`
	HasProjectLightColorWith []*ProjectLightColorWhereInput `json:"hasProjectLightColorWith,omitempty"`

	// "project_icon" edge predicates.
	HasProjectIcon     *bool                    `json:"hasProjectIcon,omitempty"`
	HasProjectIconWith []*ProjectIconWhereInput `json:"hasProjectIconWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "project_teammates" edge predicates.
	HasProjectTeammates     *bool                        `json:"hasProjectTeammates,omitempty"`
	HasProjectTeammatesWith []*ProjectTeammateWhereInput `json:"hasProjectTeammatesWith,omitempty"`

	// "favorite_projects" edge predicates.
	HasFavoriteProjects     *bool                        `json:"hasFavoriteProjects,omitempty"`
	HasFavoriteProjectsWith []*FavoriteProjectWhereInput `json:"hasFavoriteProjectsWith,omitempty"`

	// "project_task_columns" edge predicates.
	HasProjectTaskColumns     *bool                          `json:"hasProjectTaskColumns,omitempty"`
	HasProjectTaskColumnsWith []*ProjectTaskColumnWhereInput `json:"hasProjectTaskColumnsWith,omitempty"`

	// "project_task_list_statuses" edge predicates.
	HasProjectTaskListStatuses     *bool                              `json:"hasProjectTaskListStatuses,omitempty"`
	HasProjectTaskListStatusesWith []*ProjectTaskListStatusWhereInput `json:"hasProjectTaskListStatusesWith,omitempty"`
}

// Filter applies the ProjectWhereInput filter on the ProjectQuery builder.
func (i *ProjectWhereInput) Filter(q *ProjectQuery) (*ProjectQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projects.
// An error is returned if the input is empty or invalid.
func (i *ProjectWhereInput) P() (predicate.Project, error) {
	var predicates []predicate.Project
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, project.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Project, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, project.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Project, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, project.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, project.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, project.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, project.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, project.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, project.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, project.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, project.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, project.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, project.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, project.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, project.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, project.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, project.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, project.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, project.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, project.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, project.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, project.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, project.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, project.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, project.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.ProjectBaseColorID != nil {
		predicates = append(predicates, project.ProjectBaseColorIDEQ(*i.ProjectBaseColorID))
	}
	if i.ProjectBaseColorIDNEQ != nil {
		predicates = append(predicates, project.ProjectBaseColorIDNEQ(*i.ProjectBaseColorIDNEQ))
	}
	if len(i.ProjectBaseColorIDIn) > 0 {
		predicates = append(predicates, project.ProjectBaseColorIDIn(i.ProjectBaseColorIDIn...))
	}
	if len(i.ProjectBaseColorIDNotIn) > 0 {
		predicates = append(predicates, project.ProjectBaseColorIDNotIn(i.ProjectBaseColorIDNotIn...))
	}
	if i.ProjectBaseColorIDGT != nil {
		predicates = append(predicates, project.ProjectBaseColorIDGT(*i.ProjectBaseColorIDGT))
	}
	if i.ProjectBaseColorIDGTE != nil {
		predicates = append(predicates, project.ProjectBaseColorIDGTE(*i.ProjectBaseColorIDGTE))
	}
	if i.ProjectBaseColorIDLT != nil {
		predicates = append(predicates, project.ProjectBaseColorIDLT(*i.ProjectBaseColorIDLT))
	}
	if i.ProjectBaseColorIDLTE != nil {
		predicates = append(predicates, project.ProjectBaseColorIDLTE(*i.ProjectBaseColorIDLTE))
	}
	if i.ProjectBaseColorIDContains != nil {
		predicates = append(predicates, project.ProjectBaseColorIDContains(*i.ProjectBaseColorIDContains))
	}
	if i.ProjectBaseColorIDHasPrefix != nil {
		predicates = append(predicates, project.ProjectBaseColorIDHasPrefix(*i.ProjectBaseColorIDHasPrefix))
	}
	if i.ProjectBaseColorIDHasSuffix != nil {
		predicates = append(predicates, project.ProjectBaseColorIDHasSuffix(*i.ProjectBaseColorIDHasSuffix))
	}
	if i.ProjectBaseColorIDEqualFold != nil {
		predicates = append(predicates, project.ProjectBaseColorIDEqualFold(*i.ProjectBaseColorIDEqualFold))
	}
	if i.ProjectBaseColorIDContainsFold != nil {
		predicates = append(predicates, project.ProjectBaseColorIDContainsFold(*i.ProjectBaseColorIDContainsFold))
	}
	if i.ProjectLightColorID != nil {
		predicates = append(predicates, project.ProjectLightColorIDEQ(*i.ProjectLightColorID))
	}
	if i.ProjectLightColorIDNEQ != nil {
		predicates = append(predicates, project.ProjectLightColorIDNEQ(*i.ProjectLightColorIDNEQ))
	}
	if len(i.ProjectLightColorIDIn) > 0 {
		predicates = append(predicates, project.ProjectLightColorIDIn(i.ProjectLightColorIDIn...))
	}
	if len(i.ProjectLightColorIDNotIn) > 0 {
		predicates = append(predicates, project.ProjectLightColorIDNotIn(i.ProjectLightColorIDNotIn...))
	}
	if i.ProjectLightColorIDGT != nil {
		predicates = append(predicates, project.ProjectLightColorIDGT(*i.ProjectLightColorIDGT))
	}
	if i.ProjectLightColorIDGTE != nil {
		predicates = append(predicates, project.ProjectLightColorIDGTE(*i.ProjectLightColorIDGTE))
	}
	if i.ProjectLightColorIDLT != nil {
		predicates = append(predicates, project.ProjectLightColorIDLT(*i.ProjectLightColorIDLT))
	}
	if i.ProjectLightColorIDLTE != nil {
		predicates = append(predicates, project.ProjectLightColorIDLTE(*i.ProjectLightColorIDLTE))
	}
	if i.ProjectLightColorIDContains != nil {
		predicates = append(predicates, project.ProjectLightColorIDContains(*i.ProjectLightColorIDContains))
	}
	if i.ProjectLightColorIDHasPrefix != nil {
		predicates = append(predicates, project.ProjectLightColorIDHasPrefix(*i.ProjectLightColorIDHasPrefix))
	}
	if i.ProjectLightColorIDHasSuffix != nil {
		predicates = append(predicates, project.ProjectLightColorIDHasSuffix(*i.ProjectLightColorIDHasSuffix))
	}
	if i.ProjectLightColorIDEqualFold != nil {
		predicates = append(predicates, project.ProjectLightColorIDEqualFold(*i.ProjectLightColorIDEqualFold))
	}
	if i.ProjectLightColorIDContainsFold != nil {
		predicates = append(predicates, project.ProjectLightColorIDContainsFold(*i.ProjectLightColorIDContainsFold))
	}
	if i.ProjectIconID != nil {
		predicates = append(predicates, project.ProjectIconIDEQ(*i.ProjectIconID))
	}
	if i.ProjectIconIDNEQ != nil {
		predicates = append(predicates, project.ProjectIconIDNEQ(*i.ProjectIconIDNEQ))
	}
	if len(i.ProjectIconIDIn) > 0 {
		predicates = append(predicates, project.ProjectIconIDIn(i.ProjectIconIDIn...))
	}
	if len(i.ProjectIconIDNotIn) > 0 {
		predicates = append(predicates, project.ProjectIconIDNotIn(i.ProjectIconIDNotIn...))
	}
	if i.ProjectIconIDGT != nil {
		predicates = append(predicates, project.ProjectIconIDGT(*i.ProjectIconIDGT))
	}
	if i.ProjectIconIDGTE != nil {
		predicates = append(predicates, project.ProjectIconIDGTE(*i.ProjectIconIDGTE))
	}
	if i.ProjectIconIDLT != nil {
		predicates = append(predicates, project.ProjectIconIDLT(*i.ProjectIconIDLT))
	}
	if i.ProjectIconIDLTE != nil {
		predicates = append(predicates, project.ProjectIconIDLTE(*i.ProjectIconIDLTE))
	}
	if i.ProjectIconIDContains != nil {
		predicates = append(predicates, project.ProjectIconIDContains(*i.ProjectIconIDContains))
	}
	if i.ProjectIconIDHasPrefix != nil {
		predicates = append(predicates, project.ProjectIconIDHasPrefix(*i.ProjectIconIDHasPrefix))
	}
	if i.ProjectIconIDHasSuffix != nil {
		predicates = append(predicates, project.ProjectIconIDHasSuffix(*i.ProjectIconIDHasSuffix))
	}
	if i.ProjectIconIDEqualFold != nil {
		predicates = append(predicates, project.ProjectIconIDEqualFold(*i.ProjectIconIDEqualFold))
	}
	if i.ProjectIconIDContainsFold != nil {
		predicates = append(predicates, project.ProjectIconIDContainsFold(*i.ProjectIconIDContainsFold))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, project.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, project.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, project.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, project.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, project.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, project.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, project.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, project.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, project.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, project.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, project.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, project.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, project.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, project.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, project.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, project.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, project.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, project.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, project.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, project.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, project.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, project.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, project.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, project.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, project.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, project.NameContainsFold(*i.NameContainsFold))
	}
	if i.DescriptionTitle != nil {
		predicates = append(predicates, project.DescriptionTitleEQ(*i.DescriptionTitle))
	}
	if i.DescriptionTitleNEQ != nil {
		predicates = append(predicates, project.DescriptionTitleNEQ(*i.DescriptionTitleNEQ))
	}
	if len(i.DescriptionTitleIn) > 0 {
		predicates = append(predicates, project.DescriptionTitleIn(i.DescriptionTitleIn...))
	}
	if len(i.DescriptionTitleNotIn) > 0 {
		predicates = append(predicates, project.DescriptionTitleNotIn(i.DescriptionTitleNotIn...))
	}
	if i.DescriptionTitleGT != nil {
		predicates = append(predicates, project.DescriptionTitleGT(*i.DescriptionTitleGT))
	}
	if i.DescriptionTitleGTE != nil {
		predicates = append(predicates, project.DescriptionTitleGTE(*i.DescriptionTitleGTE))
	}
	if i.DescriptionTitleLT != nil {
		predicates = append(predicates, project.DescriptionTitleLT(*i.DescriptionTitleLT))
	}
	if i.DescriptionTitleLTE != nil {
		predicates = append(predicates, project.DescriptionTitleLTE(*i.DescriptionTitleLTE))
	}
	if i.DescriptionTitleContains != nil {
		predicates = append(predicates, project.DescriptionTitleContains(*i.DescriptionTitleContains))
	}
	if i.DescriptionTitleHasPrefix != nil {
		predicates = append(predicates, project.DescriptionTitleHasPrefix(*i.DescriptionTitleHasPrefix))
	}
	if i.DescriptionTitleHasSuffix != nil {
		predicates = append(predicates, project.DescriptionTitleHasSuffix(*i.DescriptionTitleHasSuffix))
	}
	if i.DescriptionTitleEqualFold != nil {
		predicates = append(predicates, project.DescriptionTitleEqualFold(*i.DescriptionTitleEqualFold))
	}
	if i.DescriptionTitleContainsFold != nil {
		predicates = append(predicates, project.DescriptionTitleContainsFold(*i.DescriptionTitleContainsFold))
	}
	if i.DueDate != nil {
		predicates = append(predicates, project.DueDateEQ(*i.DueDate))
	}
	if i.DueDateNEQ != nil {
		predicates = append(predicates, project.DueDateNEQ(*i.DueDateNEQ))
	}
	if len(i.DueDateIn) > 0 {
		predicates = append(predicates, project.DueDateIn(i.DueDateIn...))
	}
	if len(i.DueDateNotIn) > 0 {
		predicates = append(predicates, project.DueDateNotIn(i.DueDateNotIn...))
	}
	if i.DueDateGT != nil {
		predicates = append(predicates, project.DueDateGT(*i.DueDateGT))
	}
	if i.DueDateGTE != nil {
		predicates = append(predicates, project.DueDateGTE(*i.DueDateGTE))
	}
	if i.DueDateLT != nil {
		predicates = append(predicates, project.DueDateLT(*i.DueDateLT))
	}
	if i.DueDateLTE != nil {
		predicates = append(predicates, project.DueDateLTE(*i.DueDateLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, project.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, project.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, project.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, project.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, project.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, project.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, project.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, project.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, project.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, project.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, project.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, project.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, project.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, project.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, project.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, project.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := project.HasWorkspace()
		if !*i.HasWorkspace {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasWorkspaceWith(with...))
	}
	if i.HasProjectBaseColor != nil {
		p := project.HasProjectBaseColor()
		if !*i.HasProjectBaseColor {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectBaseColorWith) > 0 {
		with := make([]predicate.ProjectBaseColor, 0, len(i.HasProjectBaseColorWith))
		for _, w := range i.HasProjectBaseColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectBaseColorWith(with...))
	}
	if i.HasProjectLightColor != nil {
		p := project.HasProjectLightColor()
		if !*i.HasProjectLightColor {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectLightColorWith) > 0 {
		with := make([]predicate.ProjectLightColor, 0, len(i.HasProjectLightColorWith))
		for _, w := range i.HasProjectLightColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectLightColorWith(with...))
	}
	if i.HasProjectIcon != nil {
		p := project.HasProjectIcon()
		if !*i.HasProjectIcon {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectIconWith) > 0 {
		with := make([]predicate.ProjectIcon, 0, len(i.HasProjectIconWith))
		for _, w := range i.HasProjectIconWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectIconWith(with...))
	}
	if i.HasTeammate != nil {
		p := project.HasTeammate()
		if !*i.HasTeammate {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasTeammateWith(with...))
	}
	if i.HasProjectTeammates != nil {
		p := project.HasProjectTeammates()
		if !*i.HasProjectTeammates {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTeammatesWith) > 0 {
		with := make([]predicate.ProjectTeammate, 0, len(i.HasProjectTeammatesWith))
		for _, w := range i.HasProjectTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTeammatesWith(with...))
	}
	if i.HasFavoriteProjects != nil {
		p := project.HasFavoriteProjects()
		if !*i.HasFavoriteProjects {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteProjectsWith) > 0 {
		with := make([]predicate.FavoriteProject, 0, len(i.HasFavoriteProjectsWith))
		for _, w := range i.HasFavoriteProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasFavoriteProjectsWith(with...))
	}
	if i.HasProjectTaskColumns != nil {
		p := project.HasProjectTaskColumns()
		if !*i.HasProjectTaskColumns {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskColumnsWith) > 0 {
		with := make([]predicate.ProjectTaskColumn, 0, len(i.HasProjectTaskColumnsWith))
		for _, w := range i.HasProjectTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTaskColumnsWith(with...))
	}
	if i.HasProjectTaskListStatuses != nil {
		p := project.HasProjectTaskListStatuses()
		if !*i.HasProjectTaskListStatuses {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskListStatusesWith) > 0 {
		with := make([]predicate.ProjectTaskListStatus, 0, len(i.HasProjectTaskListStatusesWith))
		for _, w := range i.HasProjectTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTaskListStatusesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return project.And(predicates...), nil
	}
}

// ProjectBaseColorWhereInput represents a where input for filtering ProjectBaseColor queries.
type ProjectBaseColorWhereInput struct {
	Not *ProjectBaseColorWhereInput   `json:"not,omitempty"`
	Or  []*ProjectBaseColorWhereInput `json:"or,omitempty"`
	And []*ProjectBaseColorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "color_id" field predicates.
	ColorID             *ulid.ID  `json:"colorID,omitempty"`
	ColorIDNEQ          *ulid.ID  `json:"colorIDNEQ,omitempty"`
	ColorIDIn           []ulid.ID `json:"colorIDIn,omitempty"`
	ColorIDNotIn        []ulid.ID `json:"colorIDNotIn,omitempty"`
	ColorIDGT           *ulid.ID  `json:"colorIDGT,omitempty"`
	ColorIDGTE          *ulid.ID  `json:"colorIDGTE,omitempty"`
	ColorIDLT           *ulid.ID  `json:"colorIDLT,omitempty"`
	ColorIDLTE          *ulid.ID  `json:"colorIDLTE,omitempty"`
	ColorIDContains     *ulid.ID  `json:"colorIDContains,omitempty"`
	ColorIDHasPrefix    *ulid.ID  `json:"colorIDHasPrefix,omitempty"`
	ColorIDHasSuffix    *ulid.ID  `json:"colorIDHasSuffix,omitempty"`
	ColorIDEqualFold    *ulid.ID  `json:"colorIDEqualFold,omitempty"`
	ColorIDContainsFold *ulid.ID  `json:"colorIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "color" edge predicates.
	HasColor     *bool              `json:"hasColor,omitempty"`
	HasColorWith []*ColorWhereInput `json:"hasColorWith,omitempty"`
}

// Filter applies the ProjectBaseColorWhereInput filter on the ProjectBaseColorQuery builder.
func (i *ProjectBaseColorWhereInput) Filter(q *ProjectBaseColorQuery) (*ProjectBaseColorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projectbasecolors.
// An error is returned if the input is empty or invalid.
func (i *ProjectBaseColorWhereInput) P() (predicate.ProjectBaseColor, error) {
	var predicates []predicate.ProjectBaseColor
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projectbasecolor.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectBaseColor, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectbasecolor.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectBaseColor, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectbasecolor.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projectbasecolor.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectbasecolor.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectbasecolor.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectbasecolor.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectbasecolor.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectbasecolor.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectbasecolor.IDLTE(*i.IDLTE))
	}
	if i.ColorID != nil {
		predicates = append(predicates, projectbasecolor.ColorIDEQ(*i.ColorID))
	}
	if i.ColorIDNEQ != nil {
		predicates = append(predicates, projectbasecolor.ColorIDNEQ(*i.ColorIDNEQ))
	}
	if len(i.ColorIDIn) > 0 {
		predicates = append(predicates, projectbasecolor.ColorIDIn(i.ColorIDIn...))
	}
	if len(i.ColorIDNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.ColorIDNotIn(i.ColorIDNotIn...))
	}
	if i.ColorIDGT != nil {
		predicates = append(predicates, projectbasecolor.ColorIDGT(*i.ColorIDGT))
	}
	if i.ColorIDGTE != nil {
		predicates = append(predicates, projectbasecolor.ColorIDGTE(*i.ColorIDGTE))
	}
	if i.ColorIDLT != nil {
		predicates = append(predicates, projectbasecolor.ColorIDLT(*i.ColorIDLT))
	}
	if i.ColorIDLTE != nil {
		predicates = append(predicates, projectbasecolor.ColorIDLTE(*i.ColorIDLTE))
	}
	if i.ColorIDContains != nil {
		predicates = append(predicates, projectbasecolor.ColorIDContains(*i.ColorIDContains))
	}
	if i.ColorIDHasPrefix != nil {
		predicates = append(predicates, projectbasecolor.ColorIDHasPrefix(*i.ColorIDHasPrefix))
	}
	if i.ColorIDHasSuffix != nil {
		predicates = append(predicates, projectbasecolor.ColorIDHasSuffix(*i.ColorIDHasSuffix))
	}
	if i.ColorIDEqualFold != nil {
		predicates = append(predicates, projectbasecolor.ColorIDEqualFold(*i.ColorIDEqualFold))
	}
	if i.ColorIDContainsFold != nil {
		predicates = append(predicates, projectbasecolor.ColorIDContainsFold(*i.ColorIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectbasecolor.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectbasecolor.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjects != nil {
		p := projectbasecolor.HasProjects()
		if !*i.HasProjects {
			p = projectbasecolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectbasecolor.HasProjectsWith(with...))
	}
	if i.HasColor != nil {
		p := projectbasecolor.HasColor()
		if !*i.HasColor {
			p = projectbasecolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasColorWith) > 0 {
		with := make([]predicate.Color, 0, len(i.HasColorWith))
		for _, w := range i.HasColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectbasecolor.HasColorWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectBaseColorWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projectbasecolor.And(predicates...), nil
	}
}

// ProjectIconWhereInput represents a where input for filtering ProjectIcon queries.
type ProjectIconWhereInput struct {
	Not *ProjectIconWhereInput   `json:"not,omitempty"`
	Or  []*ProjectIconWhereInput `json:"or,omitempty"`
	And []*ProjectIconWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "icon_id" field predicates.
	IconID             *ulid.ID  `json:"iconID,omitempty"`
	IconIDNEQ          *ulid.ID  `json:"iconIDNEQ,omitempty"`
	IconIDIn           []ulid.ID `json:"iconIDIn,omitempty"`
	IconIDNotIn        []ulid.ID `json:"iconIDNotIn,omitempty"`
	IconIDGT           *ulid.ID  `json:"iconIDGT,omitempty"`
	IconIDGTE          *ulid.ID  `json:"iconIDGTE,omitempty"`
	IconIDLT           *ulid.ID  `json:"iconIDLT,omitempty"`
	IconIDLTE          *ulid.ID  `json:"iconIDLTE,omitempty"`
	IconIDContains     *ulid.ID  `json:"iconIDContains,omitempty"`
	IconIDHasPrefix    *ulid.ID  `json:"iconIDHasPrefix,omitempty"`
	IconIDHasSuffix    *ulid.ID  `json:"iconIDHasSuffix,omitempty"`
	IconIDEqualFold    *ulid.ID  `json:"iconIDEqualFold,omitempty"`
	IconIDContainsFold *ulid.ID  `json:"iconIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "icon" edge predicates.
	HasIcon     *bool             `json:"hasIcon,omitempty"`
	HasIconWith []*IconWhereInput `json:"hasIconWith,omitempty"`
}

// Filter applies the ProjectIconWhereInput filter on the ProjectIconQuery builder.
func (i *ProjectIconWhereInput) Filter(q *ProjectIconQuery) (*ProjectIconQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecticons.
// An error is returned if the input is empty or invalid.
func (i *ProjectIconWhereInput) P() (predicate.ProjectIcon, error) {
	var predicates []predicate.ProjectIcon
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecticon.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectIcon, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecticon.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectIcon, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecticon.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecticon.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecticon.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecticon.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecticon.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecticon.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecticon.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecticon.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecticon.IDLTE(*i.IDLTE))
	}
	if i.IconID != nil {
		predicates = append(predicates, projecticon.IconIDEQ(*i.IconID))
	}
	if i.IconIDNEQ != nil {
		predicates = append(predicates, projecticon.IconIDNEQ(*i.IconIDNEQ))
	}
	if len(i.IconIDIn) > 0 {
		predicates = append(predicates, projecticon.IconIDIn(i.IconIDIn...))
	}
	if len(i.IconIDNotIn) > 0 {
		predicates = append(predicates, projecticon.IconIDNotIn(i.IconIDNotIn...))
	}
	if i.IconIDGT != nil {
		predicates = append(predicates, projecticon.IconIDGT(*i.IconIDGT))
	}
	if i.IconIDGTE != nil {
		predicates = append(predicates, projecticon.IconIDGTE(*i.IconIDGTE))
	}
	if i.IconIDLT != nil {
		predicates = append(predicates, projecticon.IconIDLT(*i.IconIDLT))
	}
	if i.IconIDLTE != nil {
		predicates = append(predicates, projecticon.IconIDLTE(*i.IconIDLTE))
	}
	if i.IconIDContains != nil {
		predicates = append(predicates, projecticon.IconIDContains(*i.IconIDContains))
	}
	if i.IconIDHasPrefix != nil {
		predicates = append(predicates, projecticon.IconIDHasPrefix(*i.IconIDHasPrefix))
	}
	if i.IconIDHasSuffix != nil {
		predicates = append(predicates, projecticon.IconIDHasSuffix(*i.IconIDHasSuffix))
	}
	if i.IconIDEqualFold != nil {
		predicates = append(predicates, projecticon.IconIDEqualFold(*i.IconIDEqualFold))
	}
	if i.IconIDContainsFold != nil {
		predicates = append(predicates, projecticon.IconIDContainsFold(*i.IconIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecticon.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecticon.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecticon.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecticon.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecticon.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecticon.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecticon.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecticon.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecticon.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecticon.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecticon.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecticon.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecticon.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecticon.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecticon.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecticon.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjects != nil {
		p := projecticon.HasProjects()
		if !*i.HasProjects {
			p = projecticon.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecticon.HasProjectsWith(with...))
	}
	if i.HasIcon != nil {
		p := projecticon.HasIcon()
		if !*i.HasIcon {
			p = projecticon.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIconWith) > 0 {
		with := make([]predicate.Icon, 0, len(i.HasIconWith))
		for _, w := range i.HasIconWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecticon.HasIconWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectIconWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecticon.And(predicates...), nil
	}
}

// ProjectLightColorWhereInput represents a where input for filtering ProjectLightColor queries.
type ProjectLightColorWhereInput struct {
	Not *ProjectLightColorWhereInput   `json:"not,omitempty"`
	Or  []*ProjectLightColorWhereInput `json:"or,omitempty"`
	And []*ProjectLightColorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "color_id" field predicates.
	ColorID             *ulid.ID  `json:"colorID,omitempty"`
	ColorIDNEQ          *ulid.ID  `json:"colorIDNEQ,omitempty"`
	ColorIDIn           []ulid.ID `json:"colorIDIn,omitempty"`
	ColorIDNotIn        []ulid.ID `json:"colorIDNotIn,omitempty"`
	ColorIDGT           *ulid.ID  `json:"colorIDGT,omitempty"`
	ColorIDGTE          *ulid.ID  `json:"colorIDGTE,omitempty"`
	ColorIDLT           *ulid.ID  `json:"colorIDLT,omitempty"`
	ColorIDLTE          *ulid.ID  `json:"colorIDLTE,omitempty"`
	ColorIDContains     *ulid.ID  `json:"colorIDContains,omitempty"`
	ColorIDHasPrefix    *ulid.ID  `json:"colorIDHasPrefix,omitempty"`
	ColorIDHasSuffix    *ulid.ID  `json:"colorIDHasSuffix,omitempty"`
	ColorIDEqualFold    *ulid.ID  `json:"colorIDEqualFold,omitempty"`
	ColorIDContainsFold *ulid.ID  `json:"colorIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "color" edge predicates.
	HasColor     *bool              `json:"hasColor,omitempty"`
	HasColorWith []*ColorWhereInput `json:"hasColorWith,omitempty"`
}

// Filter applies the ProjectLightColorWhereInput filter on the ProjectLightColorQuery builder.
func (i *ProjectLightColorWhereInput) Filter(q *ProjectLightColorQuery) (*ProjectLightColorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projectlightcolors.
// An error is returned if the input is empty or invalid.
func (i *ProjectLightColorWhereInput) P() (predicate.ProjectLightColor, error) {
	var predicates []predicate.ProjectLightColor
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projectlightcolor.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectLightColor, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectlightcolor.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectLightColor, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectlightcolor.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projectlightcolor.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectlightcolor.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectlightcolor.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectlightcolor.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectlightcolor.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectlightcolor.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectlightcolor.IDLTE(*i.IDLTE))
	}
	if i.ColorID != nil {
		predicates = append(predicates, projectlightcolor.ColorIDEQ(*i.ColorID))
	}
	if i.ColorIDNEQ != nil {
		predicates = append(predicates, projectlightcolor.ColorIDNEQ(*i.ColorIDNEQ))
	}
	if len(i.ColorIDIn) > 0 {
		predicates = append(predicates, projectlightcolor.ColorIDIn(i.ColorIDIn...))
	}
	if len(i.ColorIDNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.ColorIDNotIn(i.ColorIDNotIn...))
	}
	if i.ColorIDGT != nil {
		predicates = append(predicates, projectlightcolor.ColorIDGT(*i.ColorIDGT))
	}
	if i.ColorIDGTE != nil {
		predicates = append(predicates, projectlightcolor.ColorIDGTE(*i.ColorIDGTE))
	}
	if i.ColorIDLT != nil {
		predicates = append(predicates, projectlightcolor.ColorIDLT(*i.ColorIDLT))
	}
	if i.ColorIDLTE != nil {
		predicates = append(predicates, projectlightcolor.ColorIDLTE(*i.ColorIDLTE))
	}
	if i.ColorIDContains != nil {
		predicates = append(predicates, projectlightcolor.ColorIDContains(*i.ColorIDContains))
	}
	if i.ColorIDHasPrefix != nil {
		predicates = append(predicates, projectlightcolor.ColorIDHasPrefix(*i.ColorIDHasPrefix))
	}
	if i.ColorIDHasSuffix != nil {
		predicates = append(predicates, projectlightcolor.ColorIDHasSuffix(*i.ColorIDHasSuffix))
	}
	if i.ColorIDEqualFold != nil {
		predicates = append(predicates, projectlightcolor.ColorIDEqualFold(*i.ColorIDEqualFold))
	}
	if i.ColorIDContainsFold != nil {
		predicates = append(predicates, projectlightcolor.ColorIDContainsFold(*i.ColorIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectlightcolor.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectlightcolor.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjects != nil {
		p := projectlightcolor.HasProjects()
		if !*i.HasProjects {
			p = projectlightcolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectlightcolor.HasProjectsWith(with...))
	}
	if i.HasColor != nil {
		p := projectlightcolor.HasColor()
		if !*i.HasColor {
			p = projectlightcolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasColorWith) > 0 {
		with := make([]predicate.Color, 0, len(i.HasColorWith))
		for _, w := range i.HasColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectlightcolor.HasColorWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectLightColorWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projectlightcolor.And(predicates...), nil
	}
}

// ProjectTaskColumnWhereInput represents a where input for filtering ProjectTaskColumn queries.
type ProjectTaskColumnWhereInput struct {
	Not *ProjectTaskColumnWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTaskColumnWhereInput `json:"or,omitempty"`
	And []*ProjectTaskColumnWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "task_column_id" field predicates.
	TaskColumnID             *ulid.ID  `json:"taskColumnID,omitempty"`
	TaskColumnIDNEQ          *ulid.ID  `json:"taskColumnIDNEQ,omitempty"`
	TaskColumnIDIn           []ulid.ID `json:"taskColumnIDIn,omitempty"`
	TaskColumnIDNotIn        []ulid.ID `json:"taskColumnIDNotIn,omitempty"`
	TaskColumnIDGT           *ulid.ID  `json:"taskColumnIDGT,omitempty"`
	TaskColumnIDGTE          *ulid.ID  `json:"taskColumnIDGTE,omitempty"`
	TaskColumnIDLT           *ulid.ID  `json:"taskColumnIDLT,omitempty"`
	TaskColumnIDLTE          *ulid.ID  `json:"taskColumnIDLTE,omitempty"`
	TaskColumnIDContains     *ulid.ID  `json:"taskColumnIDContains,omitempty"`
	TaskColumnIDHasPrefix    *ulid.ID  `json:"taskColumnIDHasPrefix,omitempty"`
	TaskColumnIDHasSuffix    *ulid.ID  `json:"taskColumnIDHasSuffix,omitempty"`
	TaskColumnIDEqualFold    *ulid.ID  `json:"taskColumnIDEqualFold,omitempty"`
	TaskColumnIDContainsFold *ulid.ID  `json:"taskColumnIDContainsFold,omitempty"`

	// "width" field predicates.
	Width             *string  `json:"width,omitempty"`
	WidthNEQ          *string  `json:"widthNEQ,omitempty"`
	WidthIn           []string `json:"widthIn,omitempty"`
	WidthNotIn        []string `json:"widthNotIn,omitempty"`
	WidthGT           *string  `json:"widthGT,omitempty"`
	WidthGTE          *string  `json:"widthGTE,omitempty"`
	WidthLT           *string  `json:"widthLT,omitempty"`
	WidthLTE          *string  `json:"widthLTE,omitempty"`
	WidthContains     *string  `json:"widthContains,omitempty"`
	WidthHasPrefix    *string  `json:"widthHasPrefix,omitempty"`
	WidthHasSuffix    *string  `json:"widthHasSuffix,omitempty"`
	WidthEqualFold    *string  `json:"widthEqualFold,omitempty"`
	WidthContainsFold *string  `json:"widthContainsFold,omitempty"`

	// "disabled" field predicates.
	Disabled    *bool `json:"disabled,omitempty"`
	DisabledNEQ *bool `json:"disabledNEQ,omitempty"`

	// "customizable" field predicates.
	Customizable    *bool `json:"customizable,omitempty"`
	CustomizableNEQ *bool `json:"customizableNEQ,omitempty"`

	// "order" field predicates.
	Order      *int  `json:"order,omitempty"`
	OrderNEQ   *int  `json:"orderNEQ,omitempty"`
	OrderIn    []int `json:"orderIn,omitempty"`
	OrderNotIn []int `json:"orderNotIn,omitempty"`
	OrderGT    *int  `json:"orderGT,omitempty"`
	OrderGTE   *int  `json:"orderGTE,omitempty"`
	OrderLT    *int  `json:"orderLT,omitempty"`
	OrderLTE   *int  `json:"orderLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "task_column" edge predicates.
	HasTaskColumn     *bool                   `json:"hasTaskColumn,omitempty"`
	HasTaskColumnWith []*TaskColumnWhereInput `json:"hasTaskColumnWith,omitempty"`
}

// Filter applies the ProjectTaskColumnWhereInput filter on the ProjectTaskColumnQuery builder.
func (i *ProjectTaskColumnWhereInput) Filter(q *ProjectTaskColumnQuery) (*ProjectTaskColumnQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecttaskcolumns.
// An error is returned if the input is empty or invalid.
func (i *ProjectTaskColumnWhereInput) P() (predicate.ProjectTaskColumn, error) {
	var predicates []predicate.ProjectTaskColumn
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecttaskcolumn.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTaskColumn, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecttaskcolumn.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTaskColumn, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecttaskcolumn.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecttaskcolumn.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecttaskcolumn.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecttaskcolumn.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecttaskcolumn.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecttaskcolumn.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TaskColumnID != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDEQ(*i.TaskColumnID))
	}
	if i.TaskColumnIDNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDNEQ(*i.TaskColumnIDNEQ))
	}
	if len(i.TaskColumnIDIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDIn(i.TaskColumnIDIn...))
	}
	if len(i.TaskColumnIDNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDNotIn(i.TaskColumnIDNotIn...))
	}
	if i.TaskColumnIDGT != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDGT(*i.TaskColumnIDGT))
	}
	if i.TaskColumnIDGTE != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDGTE(*i.TaskColumnIDGTE))
	}
	if i.TaskColumnIDLT != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDLT(*i.TaskColumnIDLT))
	}
	if i.TaskColumnIDLTE != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDLTE(*i.TaskColumnIDLTE))
	}
	if i.TaskColumnIDContains != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDContains(*i.TaskColumnIDContains))
	}
	if i.TaskColumnIDHasPrefix != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDHasPrefix(*i.TaskColumnIDHasPrefix))
	}
	if i.TaskColumnIDHasSuffix != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDHasSuffix(*i.TaskColumnIDHasSuffix))
	}
	if i.TaskColumnIDEqualFold != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDEqualFold(*i.TaskColumnIDEqualFold))
	}
	if i.TaskColumnIDContainsFold != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDContainsFold(*i.TaskColumnIDContainsFold))
	}
	if i.Width != nil {
		predicates = append(predicates, projecttaskcolumn.WidthEQ(*i.Width))
	}
	if i.WidthNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.WidthNEQ(*i.WidthNEQ))
	}
	if len(i.WidthIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.WidthIn(i.WidthIn...))
	}
	if len(i.WidthNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.WidthNotIn(i.WidthNotIn...))
	}
	if i.WidthGT != nil {
		predicates = append(predicates, projecttaskcolumn.WidthGT(*i.WidthGT))
	}
	if i.WidthGTE != nil {
		predicates = append(predicates, projecttaskcolumn.WidthGTE(*i.WidthGTE))
	}
	if i.WidthLT != nil {
		predicates = append(predicates, projecttaskcolumn.WidthLT(*i.WidthLT))
	}
	if i.WidthLTE != nil {
		predicates = append(predicates, projecttaskcolumn.WidthLTE(*i.WidthLTE))
	}
	if i.WidthContains != nil {
		predicates = append(predicates, projecttaskcolumn.WidthContains(*i.WidthContains))
	}
	if i.WidthHasPrefix != nil {
		predicates = append(predicates, projecttaskcolumn.WidthHasPrefix(*i.WidthHasPrefix))
	}
	if i.WidthHasSuffix != nil {
		predicates = append(predicates, projecttaskcolumn.WidthHasSuffix(*i.WidthHasSuffix))
	}
	if i.WidthEqualFold != nil {
		predicates = append(predicates, projecttaskcolumn.WidthEqualFold(*i.WidthEqualFold))
	}
	if i.WidthContainsFold != nil {
		predicates = append(predicates, projecttaskcolumn.WidthContainsFold(*i.WidthContainsFold))
	}
	if i.Disabled != nil {
		predicates = append(predicates, projecttaskcolumn.DisabledEQ(*i.Disabled))
	}
	if i.DisabledNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.DisabledNEQ(*i.DisabledNEQ))
	}
	if i.Customizable != nil {
		predicates = append(predicates, projecttaskcolumn.CustomizableEQ(*i.Customizable))
	}
	if i.CustomizableNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.CustomizableNEQ(*i.CustomizableNEQ))
	}
	if i.Order != nil {
		predicates = append(predicates, projecttaskcolumn.OrderEQ(*i.Order))
	}
	if i.OrderNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.OrderNEQ(*i.OrderNEQ))
	}
	if len(i.OrderIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.OrderIn(i.OrderIn...))
	}
	if len(i.OrderNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.OrderNotIn(i.OrderNotIn...))
	}
	if i.OrderGT != nil {
		predicates = append(predicates, projecttaskcolumn.OrderGT(*i.OrderGT))
	}
	if i.OrderGTE != nil {
		predicates = append(predicates, projecttaskcolumn.OrderGTE(*i.OrderGTE))
	}
	if i.OrderLT != nil {
		predicates = append(predicates, projecttaskcolumn.OrderLT(*i.OrderLT))
	}
	if i.OrderLTE != nil {
		predicates = append(predicates, projecttaskcolumn.OrderLTE(*i.OrderLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projecttaskcolumn.HasProject()
		if !*i.HasProject {
			p = projecttaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskcolumn.HasProjectWith(with...))
	}
	if i.HasTaskColumn != nil {
		p := projecttaskcolumn.HasTaskColumn()
		if !*i.HasTaskColumn {
			p = projecttaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskColumnWith) > 0 {
		with := make([]predicate.TaskColumn, 0, len(i.HasTaskColumnWith))
		for _, w := range i.HasTaskColumnWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskcolumn.HasTaskColumnWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTaskColumnWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecttaskcolumn.And(predicates...), nil
	}
}

// ProjectTaskListStatusWhereInput represents a where input for filtering ProjectTaskListStatus queries.
type ProjectTaskListStatusWhereInput struct {
	Not *ProjectTaskListStatusWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTaskListStatusWhereInput `json:"or,omitempty"`
	And []*ProjectTaskListStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "task_list_completed_status_id" field predicates.
	TaskListCompletedStatusID             *ulid.ID  `json:"taskListCompletedStatusID,omitempty"`
	TaskListCompletedStatusIDNEQ          *ulid.ID  `json:"taskListCompletedStatusIDNEQ,omitempty"`
	TaskListCompletedStatusIDIn           []ulid.ID `json:"taskListCompletedStatusIDIn,omitempty"`
	TaskListCompletedStatusIDNotIn        []ulid.ID `json:"taskListCompletedStatusIDNotIn,omitempty"`
	TaskListCompletedStatusIDGT           *ulid.ID  `json:"taskListCompletedStatusIDGT,omitempty"`
	TaskListCompletedStatusIDGTE          *ulid.ID  `json:"taskListCompletedStatusIDGTE,omitempty"`
	TaskListCompletedStatusIDLT           *ulid.ID  `json:"taskListCompletedStatusIDLT,omitempty"`
	TaskListCompletedStatusIDLTE          *ulid.ID  `json:"taskListCompletedStatusIDLTE,omitempty"`
	TaskListCompletedStatusIDContains     *ulid.ID  `json:"taskListCompletedStatusIDContains,omitempty"`
	TaskListCompletedStatusIDHasPrefix    *ulid.ID  `json:"taskListCompletedStatusIDHasPrefix,omitempty"`
	TaskListCompletedStatusIDHasSuffix    *ulid.ID  `json:"taskListCompletedStatusIDHasSuffix,omitempty"`
	TaskListCompletedStatusIDEqualFold    *ulid.ID  `json:"taskListCompletedStatusIDEqualFold,omitempty"`
	TaskListCompletedStatusIDContainsFold *ulid.ID  `json:"taskListCompletedStatusIDContainsFold,omitempty"`

	// "task_list_sort_status_id" field predicates.
	TaskListSortStatusID             *ulid.ID  `json:"taskListSortStatusID,omitempty"`
	TaskListSortStatusIDNEQ          *ulid.ID  `json:"taskListSortStatusIDNEQ,omitempty"`
	TaskListSortStatusIDIn           []ulid.ID `json:"taskListSortStatusIDIn,omitempty"`
	TaskListSortStatusIDNotIn        []ulid.ID `json:"taskListSortStatusIDNotIn,omitempty"`
	TaskListSortStatusIDGT           *ulid.ID  `json:"taskListSortStatusIDGT,omitempty"`
	TaskListSortStatusIDGTE          *ulid.ID  `json:"taskListSortStatusIDGTE,omitempty"`
	TaskListSortStatusIDLT           *ulid.ID  `json:"taskListSortStatusIDLT,omitempty"`
	TaskListSortStatusIDLTE          *ulid.ID  `json:"taskListSortStatusIDLTE,omitempty"`
	TaskListSortStatusIDContains     *ulid.ID  `json:"taskListSortStatusIDContains,omitempty"`
	TaskListSortStatusIDHasPrefix    *ulid.ID  `json:"taskListSortStatusIDHasPrefix,omitempty"`
	TaskListSortStatusIDHasSuffix    *ulid.ID  `json:"taskListSortStatusIDHasSuffix,omitempty"`
	TaskListSortStatusIDEqualFold    *ulid.ID  `json:"taskListSortStatusIDEqualFold,omitempty"`
	TaskListSortStatusIDContainsFold *ulid.ID  `json:"taskListSortStatusIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "task_list_completed_status" edge predicates.
	HasTaskListCompletedStatus     *bool                                `json:"hasTaskListCompletedStatus,omitempty"`
	HasTaskListCompletedStatusWith []*TaskListCompletedStatusWhereInput `json:"hasTaskListCompletedStatusWith,omitempty"`

	// "task_list_sort_status" edge predicates.
	HasTaskListSortStatus     *bool                           `json:"hasTaskListSortStatus,omitempty"`
	HasTaskListSortStatusWith []*TaskListSortStatusWhereInput `json:"hasTaskListSortStatusWith,omitempty"`
}

// Filter applies the ProjectTaskListStatusWhereInput filter on the ProjectTaskListStatusQuery builder.
func (i *ProjectTaskListStatusWhereInput) Filter(q *ProjectTaskListStatusQuery) (*ProjectTaskListStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecttaskliststatusslice.
// An error is returned if the input is empty or invalid.
func (i *ProjectTaskListStatusWhereInput) P() (predicate.ProjectTaskListStatus, error) {
	var predicates []predicate.ProjectTaskListStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecttaskliststatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTaskListStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecttaskliststatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTaskListStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecttaskliststatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecttaskliststatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecttaskliststatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecttaskliststatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TaskListCompletedStatusID != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDEQ(*i.TaskListCompletedStatusID))
	}
	if i.TaskListCompletedStatusIDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDNEQ(*i.TaskListCompletedStatusIDNEQ))
	}
	if len(i.TaskListCompletedStatusIDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDIn(i.TaskListCompletedStatusIDIn...))
	}
	if len(i.TaskListCompletedStatusIDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDNotIn(i.TaskListCompletedStatusIDNotIn...))
	}
	if i.TaskListCompletedStatusIDGT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDGT(*i.TaskListCompletedStatusIDGT))
	}
	if i.TaskListCompletedStatusIDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDGTE(*i.TaskListCompletedStatusIDGTE))
	}
	if i.TaskListCompletedStatusIDLT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDLT(*i.TaskListCompletedStatusIDLT))
	}
	if i.TaskListCompletedStatusIDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDLTE(*i.TaskListCompletedStatusIDLTE))
	}
	if i.TaskListCompletedStatusIDContains != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDContains(*i.TaskListCompletedStatusIDContains))
	}
	if i.TaskListCompletedStatusIDHasPrefix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDHasPrefix(*i.TaskListCompletedStatusIDHasPrefix))
	}
	if i.TaskListCompletedStatusIDHasSuffix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDHasSuffix(*i.TaskListCompletedStatusIDHasSuffix))
	}
	if i.TaskListCompletedStatusIDEqualFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDEqualFold(*i.TaskListCompletedStatusIDEqualFold))
	}
	if i.TaskListCompletedStatusIDContainsFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDContainsFold(*i.TaskListCompletedStatusIDContainsFold))
	}
	if i.TaskListSortStatusID != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDEQ(*i.TaskListSortStatusID))
	}
	if i.TaskListSortStatusIDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDNEQ(*i.TaskListSortStatusIDNEQ))
	}
	if len(i.TaskListSortStatusIDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDIn(i.TaskListSortStatusIDIn...))
	}
	if len(i.TaskListSortStatusIDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDNotIn(i.TaskListSortStatusIDNotIn...))
	}
	if i.TaskListSortStatusIDGT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDGT(*i.TaskListSortStatusIDGT))
	}
	if i.TaskListSortStatusIDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDGTE(*i.TaskListSortStatusIDGTE))
	}
	if i.TaskListSortStatusIDLT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDLT(*i.TaskListSortStatusIDLT))
	}
	if i.TaskListSortStatusIDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDLTE(*i.TaskListSortStatusIDLTE))
	}
	if i.TaskListSortStatusIDContains != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDContains(*i.TaskListSortStatusIDContains))
	}
	if i.TaskListSortStatusIDHasPrefix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDHasPrefix(*i.TaskListSortStatusIDHasPrefix))
	}
	if i.TaskListSortStatusIDHasSuffix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDHasSuffix(*i.TaskListSortStatusIDHasSuffix))
	}
	if i.TaskListSortStatusIDEqualFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDEqualFold(*i.TaskListSortStatusIDEqualFold))
	}
	if i.TaskListSortStatusIDContainsFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDContainsFold(*i.TaskListSortStatusIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projecttaskliststatus.HasProject()
		if !*i.HasProject {
			p = projecttaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskliststatus.HasProjectWith(with...))
	}
	if i.HasTaskListCompletedStatus != nil {
		p := projecttaskliststatus.HasTaskListCompletedStatus()
		if !*i.HasTaskListCompletedStatus {
			p = projecttaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListCompletedStatusWith) > 0 {
		with := make([]predicate.TaskListCompletedStatus, 0, len(i.HasTaskListCompletedStatusWith))
		for _, w := range i.HasTaskListCompletedStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskliststatus.HasTaskListCompletedStatusWith(with...))
	}
	if i.HasTaskListSortStatus != nil {
		p := projecttaskliststatus.HasTaskListSortStatus()
		if !*i.HasTaskListSortStatus {
			p = projecttaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListSortStatusWith) > 0 {
		with := make([]predicate.TaskListSortStatus, 0, len(i.HasTaskListSortStatusWith))
		for _, w := range i.HasTaskListSortStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskliststatus.HasTaskListSortStatusWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTaskListStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecttaskliststatus.And(predicates...), nil
	}
}

// ProjectTeammateWhereInput represents a where input for filtering ProjectTeammate queries.
type ProjectTeammateWhereInput struct {
	Not *ProjectTeammateWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTeammateWhereInput `json:"or,omitempty"`
	And []*ProjectTeammateWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "role" field predicates.
	Role             *string  `json:"role,omitempty"`
	RoleNEQ          *string  `json:"roleNEQ,omitempty"`
	RoleIn           []string `json:"roleIn,omitempty"`
	RoleNotIn        []string `json:"roleNotIn,omitempty"`
	RoleGT           *string  `json:"roleGT,omitempty"`
	RoleGTE          *string  `json:"roleGTE,omitempty"`
	RoleLT           *string  `json:"roleLT,omitempty"`
	RoleLTE          *string  `json:"roleLTE,omitempty"`
	RoleContains     *string  `json:"roleContains,omitempty"`
	RoleHasPrefix    *string  `json:"roleHasPrefix,omitempty"`
	RoleHasSuffix    *string  `json:"roleHasSuffix,omitempty"`
	RoleEqualFold    *string  `json:"roleEqualFold,omitempty"`
	RoleContainsFold *string  `json:"roleContainsFold,omitempty"`

	// "is_owner" field predicates.
	IsOwner    *bool `json:"isOwner,omitempty"`
	IsOwnerNEQ *bool `json:"isOwnerNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the ProjectTeammateWhereInput filter on the ProjectTeammateQuery builder.
func (i *ProjectTeammateWhereInput) Filter(q *ProjectTeammateQuery) (*ProjectTeammateQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projectteammates.
// An error is returned if the input is empty or invalid.
func (i *ProjectTeammateWhereInput) P() (predicate.ProjectTeammate, error) {
	var predicates []predicate.ProjectTeammate
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projectteammate.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTeammate, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectteammate.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTeammate, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectteammate.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projectteammate.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectteammate.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectteammate.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectteammate.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectteammate.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectteammate.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectteammate.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectteammate.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projectteammate.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projectteammate.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projectteammate.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projectteammate.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projectteammate.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projectteammate.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projectteammate.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projectteammate.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projectteammate.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projectteammate.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projectteammate.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projectteammate.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projectteammate.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, projectteammate.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, projectteammate.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, projectteammate.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, projectteammate.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, projectteammate.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, projectteammate.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, projectteammate.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, projectteammate.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, projectteammate.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, projectteammate.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, projectteammate.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, projectteammate.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, projectteammate.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, projectteammate.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, projectteammate.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, projectteammate.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, projectteammate.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, projectteammate.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, projectteammate.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, projectteammate.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, projectteammate.RoleLTE(*i.RoleLTE))
	}
	if i.RoleContains != nil {
		predicates = append(predicates, projectteammate.RoleContains(*i.RoleContains))
	}
	if i.RoleHasPrefix != nil {
		predicates = append(predicates, projectteammate.RoleHasPrefix(*i.RoleHasPrefix))
	}
	if i.RoleHasSuffix != nil {
		predicates = append(predicates, projectteammate.RoleHasSuffix(*i.RoleHasSuffix))
	}
	if i.RoleEqualFold != nil {
		predicates = append(predicates, projectteammate.RoleEqualFold(*i.RoleEqualFold))
	}
	if i.RoleContainsFold != nil {
		predicates = append(predicates, projectteammate.RoleContainsFold(*i.RoleContainsFold))
	}
	if i.IsOwner != nil {
		predicates = append(predicates, projectteammate.IsOwnerEQ(*i.IsOwner))
	}
	if i.IsOwnerNEQ != nil {
		predicates = append(predicates, projectteammate.IsOwnerNEQ(*i.IsOwnerNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectteammate.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectteammate.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectteammate.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectteammate.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectteammate.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectteammate.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectteammate.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectteammate.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectteammate.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectteammate.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectteammate.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectteammate.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectteammate.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectteammate.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectteammate.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectteammate.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projectteammate.HasProject()
		if !*i.HasProject {
			p = projectteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectteammate.HasProjectWith(with...))
	}
	if i.HasTeammate != nil {
		p := projectteammate.HasTeammate()
		if !*i.HasTeammate {
			p = projectteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectteammate.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTeammateWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projectteammate.And(predicates...), nil
	}
}

// TaskColumnWhereInput represents a where input for filtering TaskColumn queries.
type TaskColumnWhereInput struct {
	Not *TaskColumnWhereInput   `json:"not,omitempty"`
	Or  []*TaskColumnWhereInput `json:"or,omitempty"`
	And []*TaskColumnWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "type" field predicates.
	Type      *taskcolumn.Type  `json:"type,omitempty"`
	TypeNEQ   *taskcolumn.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []taskcolumn.Type `json:"typeIn,omitempty"`
	TypeNotIn []taskcolumn.Type `json:"typeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate_task_columns" edge predicates.
	HasTeammateTaskColumns     *bool                           `json:"hasTeammateTaskColumns,omitempty"`
	HasTeammateTaskColumnsWith []*TeammateTaskColumnWhereInput `json:"hasTeammateTaskColumnsWith,omitempty"`

	// "project_task_columns" edge predicates.
	HasProjectTaskColumns     *bool                          `json:"hasProjectTaskColumns,omitempty"`
	HasProjectTaskColumnsWith []*ProjectTaskColumnWhereInput `json:"hasProjectTaskColumnsWith,omitempty"`
}

// Filter applies the TaskColumnWhereInput filter on the TaskColumnQuery builder.
func (i *TaskColumnWhereInput) Filter(q *TaskColumnQuery) (*TaskColumnQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskcolumns.
// An error is returned if the input is empty or invalid.
func (i *TaskColumnWhereInput) P() (predicate.TaskColumn, error) {
	var predicates []predicate.TaskColumn
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskcolumn.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskColumn, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskcolumn.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskColumn, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskcolumn.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskcolumn.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskcolumn.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskcolumn.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskcolumn.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskcolumn.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskcolumn.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskcolumn.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskcolumn.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, taskcolumn.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, taskcolumn.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, taskcolumn.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, taskcolumn.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, taskcolumn.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, taskcolumn.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, taskcolumn.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, taskcolumn.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, taskcolumn.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, taskcolumn.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, taskcolumn.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, taskcolumn.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, taskcolumn.NameContainsFold(*i.NameContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, taskcolumn.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, taskcolumn.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, taskcolumn.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, taskcolumn.TypeNotIn(i.TypeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskcolumn.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskcolumn.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskcolumn.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskcolumn.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskcolumn.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskcolumn.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskcolumn.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskcolumn.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskcolumn.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskcolumn.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammateTaskColumns != nil {
		p := taskcolumn.HasTeammateTaskColumns()
		if !*i.HasTeammateTaskColumns {
			p = taskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskColumnsWith) > 0 {
		with := make([]predicate.TeammateTaskColumn, 0, len(i.HasTeammateTaskColumnsWith))
		for _, w := range i.HasTeammateTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskcolumn.HasTeammateTaskColumnsWith(with...))
	}
	if i.HasProjectTaskColumns != nil {
		p := taskcolumn.HasProjectTaskColumns()
		if !*i.HasProjectTaskColumns {
			p = taskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskColumnsWith) > 0 {
		with := make([]predicate.ProjectTaskColumn, 0, len(i.HasProjectTaskColumnsWith))
		for _, w := range i.HasProjectTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskcolumn.HasProjectTaskColumnsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskColumnWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskcolumn.And(predicates...), nil
	}
}

// TaskListCompletedStatusWhereInput represents a where input for filtering TaskListCompletedStatus queries.
type TaskListCompletedStatusWhereInput struct {
	Not *TaskListCompletedStatusWhereInput   `json:"not,omitempty"`
	Or  []*TaskListCompletedStatusWhereInput `json:"or,omitempty"`
	And []*TaskListCompletedStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "status_code" field predicates.
	StatusCode      *tasklistcompletedstatus.StatusCode  `json:"statusCode,omitempty"`
	StatusCodeNEQ   *tasklistcompletedstatus.StatusCode  `json:"statusCodeNEQ,omitempty"`
	StatusCodeIn    []tasklistcompletedstatus.StatusCode `json:"statusCodeIn,omitempty"`
	StatusCodeNotIn []tasklistcompletedstatus.StatusCode `json:"statusCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate_task_list_statuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`

	// "project_task_list_statuses" edge predicates.
	HasProjectTaskListStatuses     *bool                              `json:"hasProjectTaskListStatuses,omitempty"`
	HasProjectTaskListStatusesWith []*ProjectTaskListStatusWhereInput `json:"hasProjectTaskListStatusesWith,omitempty"`
}

// Filter applies the TaskListCompletedStatusWhereInput filter on the TaskListCompletedStatusQuery builder.
func (i *TaskListCompletedStatusWhereInput) Filter(q *TaskListCompletedStatusQuery) (*TaskListCompletedStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasklistcompletedstatusslice.
// An error is returned if the input is empty or invalid.
func (i *TaskListCompletedStatusWhereInput) P() (predicate.TaskListCompletedStatus, error) {
	var predicates []predicate.TaskListCompletedStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasklistcompletedstatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskListCompletedStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskListCompletedStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameContainsFold(*i.NameContainsFold))
	}
	if i.StatusCode != nil {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeEQ(*i.StatusCode))
	}
	if i.StatusCodeNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeNEQ(*i.StatusCodeNEQ))
	}
	if len(i.StatusCodeIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeIn(i.StatusCodeIn...))
	}
	if len(i.StatusCodeNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeNotIn(i.StatusCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammateTaskListStatuses != nil {
		p := tasklistcompletedstatus.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = tasklistcompletedstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.HasTeammateTaskListStatusesWith(with...))
	}
	if i.HasProjectTaskListStatuses != nil {
		p := tasklistcompletedstatus.HasProjectTaskListStatuses()
		if !*i.HasProjectTaskListStatuses {
			p = tasklistcompletedstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskListStatusesWith) > 0 {
		with := make([]predicate.ProjectTaskListStatus, 0, len(i.HasProjectTaskListStatusesWith))
		for _, w := range i.HasProjectTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.HasProjectTaskListStatusesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskListCompletedStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasklistcompletedstatus.And(predicates...), nil
	}
}

// TaskListSortStatusWhereInput represents a where input for filtering TaskListSortStatus queries.
type TaskListSortStatusWhereInput struct {
	Not *TaskListSortStatusWhereInput   `json:"not,omitempty"`
	Or  []*TaskListSortStatusWhereInput `json:"or,omitempty"`
	And []*TaskListSortStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "status_code" field predicates.
	StatusCode      *tasklistsortstatus.StatusCode  `json:"statusCode,omitempty"`
	StatusCodeNEQ   *tasklistsortstatus.StatusCode  `json:"statusCodeNEQ,omitempty"`
	StatusCodeIn    []tasklistsortstatus.StatusCode `json:"statusCodeIn,omitempty"`
	StatusCodeNotIn []tasklistsortstatus.StatusCode `json:"statusCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate_task_list_statuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`

	// "project_task_list_statuses" edge predicates.
	HasProjectTaskListStatuses     *bool                              `json:"hasProjectTaskListStatuses,omitempty"`
	HasProjectTaskListStatusesWith []*ProjectTaskListStatusWhereInput `json:"hasProjectTaskListStatusesWith,omitempty"`
}

// Filter applies the TaskListSortStatusWhereInput filter on the TaskListSortStatusQuery builder.
func (i *TaskListSortStatusWhereInput) Filter(q *TaskListSortStatusQuery) (*TaskListSortStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasklistsortstatusslice.
// An error is returned if the input is empty or invalid.
func (i *TaskListSortStatusWhereInput) P() (predicate.TaskListSortStatus, error) {
	var predicates []predicate.TaskListSortStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasklistsortstatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskListSortStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasklistsortstatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskListSortStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasklistsortstatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasklistsortstatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasklistsortstatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasklistsortstatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasklistsortstatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasklistsortstatus.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tasklistsortstatus.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tasklistsortstatus.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tasklistsortstatus.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tasklistsortstatus.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tasklistsortstatus.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tasklistsortstatus.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tasklistsortstatus.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tasklistsortstatus.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tasklistsortstatus.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tasklistsortstatus.NameContainsFold(*i.NameContainsFold))
	}
	if i.StatusCode != nil {
		predicates = append(predicates, tasklistsortstatus.StatusCodeEQ(*i.StatusCode))
	}
	if i.StatusCodeNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.StatusCodeNEQ(*i.StatusCodeNEQ))
	}
	if len(i.StatusCodeIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.StatusCodeIn(i.StatusCodeIn...))
	}
	if len(i.StatusCodeNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.StatusCodeNotIn(i.StatusCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammateTaskListStatuses != nil {
		p := tasklistsortstatus.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = tasklistsortstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistsortstatus.HasTeammateTaskListStatusesWith(with...))
	}
	if i.HasProjectTaskListStatuses != nil {
		p := tasklistsortstatus.HasProjectTaskListStatuses()
		if !*i.HasProjectTaskListStatuses {
			p = tasklistsortstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskListStatusesWith) > 0 {
		with := make([]predicate.ProjectTaskListStatus, 0, len(i.HasProjectTaskListStatusesWith))
		for _, w := range i.HasProjectTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistsortstatus.HasProjectTaskListStatusesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskListSortStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasklistsortstatus.And(predicates...), nil
	}
}

// TaskSectionWhereInput represents a where input for filtering TaskSection queries.
type TaskSectionWhereInput struct {
	Not *TaskSectionWhereInput   `json:"not,omitempty"`
	Or  []*TaskSectionWhereInput `json:"or,omitempty"`
	And []*TaskSectionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`
}

// Filter applies the TaskSectionWhereInput filter on the TaskSectionQuery builder.
func (i *TaskSectionWhereInput) Filter(q *TaskSectionQuery) (*TaskSectionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasksections.
// An error is returned if the input is empty or invalid.
func (i *TaskSectionWhereInput) P() (predicate.TaskSection, error) {
	var predicates []predicate.TaskSection
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasksection.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskSection, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasksection.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskSection, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasksection.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasksection.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasksection.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasksection.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasksection.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasksection.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasksection.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasksection.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasksection.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tasksection.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tasksection.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tasksection.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tasksection.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tasksection.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tasksection.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tasksection.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tasksection.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tasksection.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tasksection.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tasksection.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tasksection.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tasksection.NameContainsFold(*i.NameContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasksection.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasksection.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasksection.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasksection.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasksection.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasksection.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasksection.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasksection.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasksection.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasksection.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasksection.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasksection.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasksection.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasksection.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasksection.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasksection.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskSectionWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasksection.And(predicates...), nil
	}
}

// TeammateWhereInput represents a where input for filtering Teammate queries.
type TeammateWhereInput struct {
	Not *TeammateWhereInput   `json:"not,omitempty"`
	Or  []*TeammateWhereInput `json:"or,omitempty"`
	And []*TeammateWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "image" field predicates.
	Image             *string  `json:"image,omitempty"`
	ImageNEQ          *string  `json:"imageNEQ,omitempty"`
	ImageIn           []string `json:"imageIn,omitempty"`
	ImageNotIn        []string `json:"imageNotIn,omitempty"`
	ImageGT           *string  `json:"imageGT,omitempty"`
	ImageGTE          *string  `json:"imageGTE,omitempty"`
	ImageLT           *string  `json:"imageLT,omitempty"`
	ImageLTE          *string  `json:"imageLTE,omitempty"`
	ImageContains     *string  `json:"imageContains,omitempty"`
	ImageHasPrefix    *string  `json:"imageHasPrefix,omitempty"`
	ImageHasSuffix    *string  `json:"imageHasSuffix,omitempty"`
	ImageEqualFold    *string  `json:"imageEqualFold,omitempty"`
	ImageContainsFold *string  `json:"imageContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspaces" edge predicates.
	HasWorkspaces     *bool                  `json:"hasWorkspaces,omitempty"`
	HasWorkspacesWith []*WorkspaceWhereInput `json:"hasWorkspacesWith,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "project_teammates" edge predicates.
	HasProjectTeammates     *bool                        `json:"hasProjectTeammates,omitempty"`
	HasProjectTeammatesWith []*ProjectTeammateWhereInput `json:"hasProjectTeammatesWith,omitempty"`

	// "workspace_teammates" edge predicates.
	HasWorkspaceTeammates     *bool                          `json:"hasWorkspaceTeammates,omitempty"`
	HasWorkspaceTeammatesWith []*WorkspaceTeammateWhereInput `json:"hasWorkspaceTeammatesWith,omitempty"`

	// "favorite_projects" edge predicates.
	HasFavoriteProjects     *bool                        `json:"hasFavoriteProjects,omitempty"`
	HasFavoriteProjectsWith []*FavoriteProjectWhereInput `json:"hasFavoriteProjectsWith,omitempty"`

	// "favorite_workspaces" edge predicates.
	HasFavoriteWorkspaces     *bool                          `json:"hasFavoriteWorkspaces,omitempty"`
	HasFavoriteWorkspacesWith []*FavoriteWorkspaceWhereInput `json:"hasFavoriteWorkspacesWith,omitempty"`

	// "teammate_task_tab_statuses" edge predicates.
	HasTeammateTaskTabStatuses     *bool                              `json:"hasTeammateTaskTabStatuses,omitempty"`
	HasTeammateTaskTabStatusesWith []*TeammateTaskTabStatusWhereInput `json:"hasTeammateTaskTabStatusesWith,omitempty"`

	// "teammate_task_columns" edge predicates.
	HasTeammateTaskColumns     *bool                           `json:"hasTeammateTaskColumns,omitempty"`
	HasTeammateTaskColumnsWith []*TeammateTaskColumnWhereInput `json:"hasTeammateTaskColumnsWith,omitempty"`

	// "teammate_task_list_statuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`
}

// Filter applies the TeammateWhereInput filter on the TeammateQuery builder.
func (i *TeammateWhereInput) Filter(q *TeammateQuery) (*TeammateQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammates.
// An error is returned if the input is empty or invalid.
func (i *TeammateWhereInput) P() (predicate.Teammate, error) {
	var predicates []predicate.Teammate
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammate.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Teammate, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammate.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Teammate, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammate.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammate.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammate.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammate.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammate.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammate.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammate.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammate.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammate.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, teammate.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, teammate.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, teammate.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, teammate.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, teammate.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, teammate.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, teammate.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, teammate.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, teammate.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, teammate.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, teammate.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, teammate.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, teammate.NameContainsFold(*i.NameContainsFold))
	}
	if i.Image != nil {
		predicates = append(predicates, teammate.ImageEQ(*i.Image))
	}
	if i.ImageNEQ != nil {
		predicates = append(predicates, teammate.ImageNEQ(*i.ImageNEQ))
	}
	if len(i.ImageIn) > 0 {
		predicates = append(predicates, teammate.ImageIn(i.ImageIn...))
	}
	if len(i.ImageNotIn) > 0 {
		predicates = append(predicates, teammate.ImageNotIn(i.ImageNotIn...))
	}
	if i.ImageGT != nil {
		predicates = append(predicates, teammate.ImageGT(*i.ImageGT))
	}
	if i.ImageGTE != nil {
		predicates = append(predicates, teammate.ImageGTE(*i.ImageGTE))
	}
	if i.ImageLT != nil {
		predicates = append(predicates, teammate.ImageLT(*i.ImageLT))
	}
	if i.ImageLTE != nil {
		predicates = append(predicates, teammate.ImageLTE(*i.ImageLTE))
	}
	if i.ImageContains != nil {
		predicates = append(predicates, teammate.ImageContains(*i.ImageContains))
	}
	if i.ImageHasPrefix != nil {
		predicates = append(predicates, teammate.ImageHasPrefix(*i.ImageHasPrefix))
	}
	if i.ImageHasSuffix != nil {
		predicates = append(predicates, teammate.ImageHasSuffix(*i.ImageHasSuffix))
	}
	if i.ImageEqualFold != nil {
		predicates = append(predicates, teammate.ImageEqualFold(*i.ImageEqualFold))
	}
	if i.ImageContainsFold != nil {
		predicates = append(predicates, teammate.ImageContainsFold(*i.ImageContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, teammate.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, teammate.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, teammate.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, teammate.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, teammate.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, teammate.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, teammate.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, teammate.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, teammate.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, teammate.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, teammate.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, teammate.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, teammate.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammate.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammate.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammate.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammate.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammate.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammate.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammate.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammate.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammate.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammate.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammate.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammate.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammate.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammate.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammate.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammate.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspaces != nil {
		p := teammate.HasWorkspaces()
		if !*i.HasWorkspaces {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspacesWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspacesWith))
		for _, w := range i.HasWorkspacesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasWorkspacesWith(with...))
	}
	if i.HasProjects != nil {
		p := teammate.HasProjects()
		if !*i.HasProjects {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasProjectsWith(with...))
	}
	if i.HasProjectTeammates != nil {
		p := teammate.HasProjectTeammates()
		if !*i.HasProjectTeammates {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTeammatesWith) > 0 {
		with := make([]predicate.ProjectTeammate, 0, len(i.HasProjectTeammatesWith))
		for _, w := range i.HasProjectTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasProjectTeammatesWith(with...))
	}
	if i.HasWorkspaceTeammates != nil {
		p := teammate.HasWorkspaceTeammates()
		if !*i.HasWorkspaceTeammates {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceTeammatesWith) > 0 {
		with := make([]predicate.WorkspaceTeammate, 0, len(i.HasWorkspaceTeammatesWith))
		for _, w := range i.HasWorkspaceTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasWorkspaceTeammatesWith(with...))
	}
	if i.HasFavoriteProjects != nil {
		p := teammate.HasFavoriteProjects()
		if !*i.HasFavoriteProjects {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteProjectsWith) > 0 {
		with := make([]predicate.FavoriteProject, 0, len(i.HasFavoriteProjectsWith))
		for _, w := range i.HasFavoriteProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasFavoriteProjectsWith(with...))
	}
	if i.HasFavoriteWorkspaces != nil {
		p := teammate.HasFavoriteWorkspaces()
		if !*i.HasFavoriteWorkspaces {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteWorkspacesWith) > 0 {
		with := make([]predicate.FavoriteWorkspace, 0, len(i.HasFavoriteWorkspacesWith))
		for _, w := range i.HasFavoriteWorkspacesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasFavoriteWorkspacesWith(with...))
	}
	if i.HasTeammateTaskTabStatuses != nil {
		p := teammate.HasTeammateTaskTabStatuses()
		if !*i.HasTeammateTaskTabStatuses {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskTabStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskTabStatus, 0, len(i.HasTeammateTaskTabStatusesWith))
		for _, w := range i.HasTeammateTaskTabStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTaskTabStatusesWith(with...))
	}
	if i.HasTeammateTaskColumns != nil {
		p := teammate.HasTeammateTaskColumns()
		if !*i.HasTeammateTaskColumns {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskColumnsWith) > 0 {
		with := make([]predicate.TeammateTaskColumn, 0, len(i.HasTeammateTaskColumnsWith))
		for _, w := range i.HasTeammateTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTaskColumnsWith(with...))
	}
	if i.HasTeammateTaskListStatuses != nil {
		p := teammate.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTaskListStatusesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammate.And(predicates...), nil
	}
}

// TeammateTaskColumnWhereInput represents a where input for filtering TeammateTaskColumn queries.
type TeammateTaskColumnWhereInput struct {
	Not *TeammateTaskColumnWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskColumnWhereInput `json:"or,omitempty"`
	And []*TeammateTaskColumnWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "task_column_id" field predicates.
	TaskColumnID             *ulid.ID  `json:"taskColumnID,omitempty"`
	TaskColumnIDNEQ          *ulid.ID  `json:"taskColumnIDNEQ,omitempty"`
	TaskColumnIDIn           []ulid.ID `json:"taskColumnIDIn,omitempty"`
	TaskColumnIDNotIn        []ulid.ID `json:"taskColumnIDNotIn,omitempty"`
	TaskColumnIDGT           *ulid.ID  `json:"taskColumnIDGT,omitempty"`
	TaskColumnIDGTE          *ulid.ID  `json:"taskColumnIDGTE,omitempty"`
	TaskColumnIDLT           *ulid.ID  `json:"taskColumnIDLT,omitempty"`
	TaskColumnIDLTE          *ulid.ID  `json:"taskColumnIDLTE,omitempty"`
	TaskColumnIDContains     *ulid.ID  `json:"taskColumnIDContains,omitempty"`
	TaskColumnIDHasPrefix    *ulid.ID  `json:"taskColumnIDHasPrefix,omitempty"`
	TaskColumnIDHasSuffix    *ulid.ID  `json:"taskColumnIDHasSuffix,omitempty"`
	TaskColumnIDEqualFold    *ulid.ID  `json:"taskColumnIDEqualFold,omitempty"`
	TaskColumnIDContainsFold *ulid.ID  `json:"taskColumnIDContainsFold,omitempty"`

	// "width" field predicates.
	Width             *string  `json:"width,omitempty"`
	WidthNEQ          *string  `json:"widthNEQ,omitempty"`
	WidthIn           []string `json:"widthIn,omitempty"`
	WidthNotIn        []string `json:"widthNotIn,omitempty"`
	WidthGT           *string  `json:"widthGT,omitempty"`
	WidthGTE          *string  `json:"widthGTE,omitempty"`
	WidthLT           *string  `json:"widthLT,omitempty"`
	WidthLTE          *string  `json:"widthLTE,omitempty"`
	WidthContains     *string  `json:"widthContains,omitempty"`
	WidthHasPrefix    *string  `json:"widthHasPrefix,omitempty"`
	WidthHasSuffix    *string  `json:"widthHasSuffix,omitempty"`
	WidthEqualFold    *string  `json:"widthEqualFold,omitempty"`
	WidthContainsFold *string  `json:"widthContainsFold,omitempty"`

	// "disabled" field predicates.
	Disabled    *bool `json:"disabled,omitempty"`
	DisabledNEQ *bool `json:"disabledNEQ,omitempty"`

	// "customizable" field predicates.
	Customizable    *bool `json:"customizable,omitempty"`
	CustomizableNEQ *bool `json:"customizableNEQ,omitempty"`

	// "order" field predicates.
	Order      *int  `json:"order,omitempty"`
	OrderNEQ   *int  `json:"orderNEQ,omitempty"`
	OrderIn    []int `json:"orderIn,omitempty"`
	OrderNotIn []int `json:"orderNotIn,omitempty"`
	OrderGT    *int  `json:"orderGT,omitempty"`
	OrderGTE   *int  `json:"orderGTE,omitempty"`
	OrderLT    *int  `json:"orderLT,omitempty"`
	OrderLTE   *int  `json:"orderLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "task_column" edge predicates.
	HasTaskColumn     *bool                   `json:"hasTaskColumn,omitempty"`
	HasTaskColumnWith []*TaskColumnWhereInput `json:"hasTaskColumnWith,omitempty"`
}

// Filter applies the TeammateTaskColumnWhereInput filter on the TeammateTaskColumnQuery builder.
func (i *TeammateTaskColumnWhereInput) Filter(q *TeammateTaskColumnQuery) (*TeammateTaskColumnQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetaskcolumns.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskColumnWhereInput) P() (predicate.TeammateTaskColumn, error) {
	var predicates []predicate.TeammateTaskColumn
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetaskcolumn.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTaskColumn, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetaskcolumn.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTaskColumn, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetaskcolumn.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetaskcolumn.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetaskcolumn.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetaskcolumn.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.IDLTE(*i.IDLTE))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.TaskColumnID != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDEQ(*i.TaskColumnID))
	}
	if i.TaskColumnIDNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDNEQ(*i.TaskColumnIDNEQ))
	}
	if len(i.TaskColumnIDIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDIn(i.TaskColumnIDIn...))
	}
	if len(i.TaskColumnIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDNotIn(i.TaskColumnIDNotIn...))
	}
	if i.TaskColumnIDGT != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDGT(*i.TaskColumnIDGT))
	}
	if i.TaskColumnIDGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDGTE(*i.TaskColumnIDGTE))
	}
	if i.TaskColumnIDLT != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDLT(*i.TaskColumnIDLT))
	}
	if i.TaskColumnIDLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDLTE(*i.TaskColumnIDLTE))
	}
	if i.TaskColumnIDContains != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDContains(*i.TaskColumnIDContains))
	}
	if i.TaskColumnIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDHasPrefix(*i.TaskColumnIDHasPrefix))
	}
	if i.TaskColumnIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDHasSuffix(*i.TaskColumnIDHasSuffix))
	}
	if i.TaskColumnIDEqualFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDEqualFold(*i.TaskColumnIDEqualFold))
	}
	if i.TaskColumnIDContainsFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDContainsFold(*i.TaskColumnIDContainsFold))
	}
	if i.Width != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthEQ(*i.Width))
	}
	if i.WidthNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthNEQ(*i.WidthNEQ))
	}
	if len(i.WidthIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.WidthIn(i.WidthIn...))
	}
	if len(i.WidthNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.WidthNotIn(i.WidthNotIn...))
	}
	if i.WidthGT != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthGT(*i.WidthGT))
	}
	if i.WidthGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthGTE(*i.WidthGTE))
	}
	if i.WidthLT != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthLT(*i.WidthLT))
	}
	if i.WidthLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthLTE(*i.WidthLTE))
	}
	if i.WidthContains != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthContains(*i.WidthContains))
	}
	if i.WidthHasPrefix != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthHasPrefix(*i.WidthHasPrefix))
	}
	if i.WidthHasSuffix != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthHasSuffix(*i.WidthHasSuffix))
	}
	if i.WidthEqualFold != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthEqualFold(*i.WidthEqualFold))
	}
	if i.WidthContainsFold != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthContainsFold(*i.WidthContainsFold))
	}
	if i.Disabled != nil {
		predicates = append(predicates, teammatetaskcolumn.DisabledEQ(*i.Disabled))
	}
	if i.DisabledNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.DisabledNEQ(*i.DisabledNEQ))
	}
	if i.Customizable != nil {
		predicates = append(predicates, teammatetaskcolumn.CustomizableEQ(*i.Customizable))
	}
	if i.CustomizableNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.CustomizableNEQ(*i.CustomizableNEQ))
	}
	if i.Order != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderEQ(*i.Order))
	}
	if i.OrderNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderNEQ(*i.OrderNEQ))
	}
	if len(i.OrderIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.OrderIn(i.OrderIn...))
	}
	if len(i.OrderNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.OrderNotIn(i.OrderNotIn...))
	}
	if i.OrderGT != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderGT(*i.OrderGT))
	}
	if i.OrderGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderGTE(*i.OrderGTE))
	}
	if i.OrderLT != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderLT(*i.OrderLT))
	}
	if i.OrderLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderLTE(*i.OrderLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := teammatetaskcolumn.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskcolumn.HasTeammateWith(with...))
	}
	if i.HasTaskColumn != nil {
		p := teammatetaskcolumn.HasTaskColumn()
		if !*i.HasTaskColumn {
			p = teammatetaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskColumnWith) > 0 {
		with := make([]predicate.TaskColumn, 0, len(i.HasTaskColumnWith))
		for _, w := range i.HasTaskColumnWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskcolumn.HasTaskColumnWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskColumnWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetaskcolumn.And(predicates...), nil
	}
}

// TeammateTaskListStatusWhereInput represents a where input for filtering TeammateTaskListStatus queries.
type TeammateTaskListStatusWhereInput struct {
	Not *TeammateTaskListStatusWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskListStatusWhereInput `json:"or,omitempty"`
	And []*TeammateTaskListStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "task_list_completed_status_id" field predicates.
	TaskListCompletedStatusID             *ulid.ID  `json:"taskListCompletedStatusID,omitempty"`
	TaskListCompletedStatusIDNEQ          *ulid.ID  `json:"taskListCompletedStatusIDNEQ,omitempty"`
	TaskListCompletedStatusIDIn           []ulid.ID `json:"taskListCompletedStatusIDIn,omitempty"`
	TaskListCompletedStatusIDNotIn        []ulid.ID `json:"taskListCompletedStatusIDNotIn,omitempty"`
	TaskListCompletedStatusIDGT           *ulid.ID  `json:"taskListCompletedStatusIDGT,omitempty"`
	TaskListCompletedStatusIDGTE          *ulid.ID  `json:"taskListCompletedStatusIDGTE,omitempty"`
	TaskListCompletedStatusIDLT           *ulid.ID  `json:"taskListCompletedStatusIDLT,omitempty"`
	TaskListCompletedStatusIDLTE          *ulid.ID  `json:"taskListCompletedStatusIDLTE,omitempty"`
	TaskListCompletedStatusIDContains     *ulid.ID  `json:"taskListCompletedStatusIDContains,omitempty"`
	TaskListCompletedStatusIDHasPrefix    *ulid.ID  `json:"taskListCompletedStatusIDHasPrefix,omitempty"`
	TaskListCompletedStatusIDHasSuffix    *ulid.ID  `json:"taskListCompletedStatusIDHasSuffix,omitempty"`
	TaskListCompletedStatusIDEqualFold    *ulid.ID  `json:"taskListCompletedStatusIDEqualFold,omitempty"`
	TaskListCompletedStatusIDContainsFold *ulid.ID  `json:"taskListCompletedStatusIDContainsFold,omitempty"`

	// "task_list_sort_status_id" field predicates.
	TaskListSortStatusID             *ulid.ID  `json:"taskListSortStatusID,omitempty"`
	TaskListSortStatusIDNEQ          *ulid.ID  `json:"taskListSortStatusIDNEQ,omitempty"`
	TaskListSortStatusIDIn           []ulid.ID `json:"taskListSortStatusIDIn,omitempty"`
	TaskListSortStatusIDNotIn        []ulid.ID `json:"taskListSortStatusIDNotIn,omitempty"`
	TaskListSortStatusIDGT           *ulid.ID  `json:"taskListSortStatusIDGT,omitempty"`
	TaskListSortStatusIDGTE          *ulid.ID  `json:"taskListSortStatusIDGTE,omitempty"`
	TaskListSortStatusIDLT           *ulid.ID  `json:"taskListSortStatusIDLT,omitempty"`
	TaskListSortStatusIDLTE          *ulid.ID  `json:"taskListSortStatusIDLTE,omitempty"`
	TaskListSortStatusIDContains     *ulid.ID  `json:"taskListSortStatusIDContains,omitempty"`
	TaskListSortStatusIDHasPrefix    *ulid.ID  `json:"taskListSortStatusIDHasPrefix,omitempty"`
	TaskListSortStatusIDHasSuffix    *ulid.ID  `json:"taskListSortStatusIDHasSuffix,omitempty"`
	TaskListSortStatusIDEqualFold    *ulid.ID  `json:"taskListSortStatusIDEqualFold,omitempty"`
	TaskListSortStatusIDContainsFold *ulid.ID  `json:"taskListSortStatusIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "task_list_completed_status" edge predicates.
	HasTaskListCompletedStatus     *bool                                `json:"hasTaskListCompletedStatus,omitempty"`
	HasTaskListCompletedStatusWith []*TaskListCompletedStatusWhereInput `json:"hasTaskListCompletedStatusWith,omitempty"`

	// "task_list_sort_status" edge predicates.
	HasTaskListSortStatus     *bool                           `json:"hasTaskListSortStatus,omitempty"`
	HasTaskListSortStatusWith []*TaskListSortStatusWhereInput `json:"hasTaskListSortStatusWith,omitempty"`
}

// Filter applies the TeammateTaskListStatusWhereInput filter on the TeammateTaskListStatusQuery builder.
func (i *TeammateTaskListStatusWhereInput) Filter(q *TeammateTaskListStatusQuery) (*TeammateTaskListStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetaskliststatusslice.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskListStatusWhereInput) P() (predicate.TeammateTaskListStatus, error) {
	var predicates []predicate.TeammateTaskListStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetaskliststatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTaskListStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetaskliststatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTaskListStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetaskliststatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetaskliststatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.TaskListCompletedStatusID != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDEQ(*i.TaskListCompletedStatusID))
	}
	if i.TaskListCompletedStatusIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDNEQ(*i.TaskListCompletedStatusIDNEQ))
	}
	if len(i.TaskListCompletedStatusIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDIn(i.TaskListCompletedStatusIDIn...))
	}
	if len(i.TaskListCompletedStatusIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDNotIn(i.TaskListCompletedStatusIDNotIn...))
	}
	if i.TaskListCompletedStatusIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDGT(*i.TaskListCompletedStatusIDGT))
	}
	if i.TaskListCompletedStatusIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDGTE(*i.TaskListCompletedStatusIDGTE))
	}
	if i.TaskListCompletedStatusIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDLT(*i.TaskListCompletedStatusIDLT))
	}
	if i.TaskListCompletedStatusIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDLTE(*i.TaskListCompletedStatusIDLTE))
	}
	if i.TaskListCompletedStatusIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDContains(*i.TaskListCompletedStatusIDContains))
	}
	if i.TaskListCompletedStatusIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDHasPrefix(*i.TaskListCompletedStatusIDHasPrefix))
	}
	if i.TaskListCompletedStatusIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDHasSuffix(*i.TaskListCompletedStatusIDHasSuffix))
	}
	if i.TaskListCompletedStatusIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDEqualFold(*i.TaskListCompletedStatusIDEqualFold))
	}
	if i.TaskListCompletedStatusIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDContainsFold(*i.TaskListCompletedStatusIDContainsFold))
	}
	if i.TaskListSortStatusID != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDEQ(*i.TaskListSortStatusID))
	}
	if i.TaskListSortStatusIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDNEQ(*i.TaskListSortStatusIDNEQ))
	}
	if len(i.TaskListSortStatusIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDIn(i.TaskListSortStatusIDIn...))
	}
	if len(i.TaskListSortStatusIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDNotIn(i.TaskListSortStatusIDNotIn...))
	}
	if i.TaskListSortStatusIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDGT(*i.TaskListSortStatusIDGT))
	}
	if i.TaskListSortStatusIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDGTE(*i.TaskListSortStatusIDGTE))
	}
	if i.TaskListSortStatusIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDLT(*i.TaskListSortStatusIDLT))
	}
	if i.TaskListSortStatusIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDLTE(*i.TaskListSortStatusIDLTE))
	}
	if i.TaskListSortStatusIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDContains(*i.TaskListSortStatusIDContains))
	}
	if i.TaskListSortStatusIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDHasPrefix(*i.TaskListSortStatusIDHasPrefix))
	}
	if i.TaskListSortStatusIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDHasSuffix(*i.TaskListSortStatusIDHasSuffix))
	}
	if i.TaskListSortStatusIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDEqualFold(*i.TaskListSortStatusIDEqualFold))
	}
	if i.TaskListSortStatusIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDContainsFold(*i.TaskListSortStatusIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := teammatetaskliststatus.HasWorkspace()
		if !*i.HasWorkspace {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := teammatetaskliststatus.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasTeammateWith(with...))
	}
	if i.HasTaskListCompletedStatus != nil {
		p := teammatetaskliststatus.HasTaskListCompletedStatus()
		if !*i.HasTaskListCompletedStatus {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListCompletedStatusWith) > 0 {
		with := make([]predicate.TaskListCompletedStatus, 0, len(i.HasTaskListCompletedStatusWith))
		for _, w := range i.HasTaskListCompletedStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasTaskListCompletedStatusWith(with...))
	}
	if i.HasTaskListSortStatus != nil {
		p := teammatetaskliststatus.HasTaskListSortStatus()
		if !*i.HasTaskListSortStatus {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListSortStatusWith) > 0 {
		with := make([]predicate.TaskListSortStatus, 0, len(i.HasTaskListSortStatusWith))
		for _, w := range i.HasTaskListSortStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasTaskListSortStatusWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskListStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetaskliststatus.And(predicates...), nil
	}
}

// TeammateTaskTabStatusWhereInput represents a where input for filtering TeammateTaskTabStatus queries.
type TeammateTaskTabStatusWhereInput struct {
	Not *TeammateTaskTabStatusWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskTabStatusWhereInput `json:"or,omitempty"`
	And []*TeammateTaskTabStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "status_code" field predicates.
	StatusCode      *teammatetasktabstatus.StatusCode  `json:"statusCode,omitempty"`
	StatusCodeNEQ   *teammatetasktabstatus.StatusCode  `json:"statusCodeNEQ,omitempty"`
	StatusCodeIn    []teammatetasktabstatus.StatusCode `json:"statusCodeIn,omitempty"`
	StatusCodeNotIn []teammatetasktabstatus.StatusCode `json:"statusCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the TeammateTaskTabStatusWhereInput filter on the TeammateTaskTabStatusQuery builder.
func (i *TeammateTaskTabStatusWhereInput) Filter(q *TeammateTaskTabStatusQuery) (*TeammateTaskTabStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetasktabstatusslice.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskTabStatusWhereInput) P() (predicate.TeammateTaskTabStatus, error) {
	var predicates []predicate.TeammateTaskTabStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetasktabstatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTaskTabStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetasktabstatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTaskTabStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetasktabstatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetasktabstatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetasktabstatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetasktabstatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.StatusCode != nil {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeEQ(*i.StatusCode))
	}
	if i.StatusCodeNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeNEQ(*i.StatusCodeNEQ))
	}
	if len(i.StatusCodeIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeIn(i.StatusCodeIn...))
	}
	if len(i.StatusCodeNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeNotIn(i.StatusCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := teammatetasktabstatus.HasWorkspace()
		if !*i.HasWorkspace {
			p = teammatetasktabstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetasktabstatus.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := teammatetasktabstatus.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetasktabstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetasktabstatus.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskTabStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetasktabstatus.And(predicates...), nil
	}
}

// TestTodoWhereInput represents a where input for filtering TestTodo queries.
type TestTodoWhereInput struct {
	Not *TestTodoWhereInput   `json:"not,omitempty"`
	Or  []*TestTodoWhereInput `json:"or,omitempty"`
	And []*TestTodoWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "test_user_id" field predicates.
	TestUserID             *ulid.ID  `json:"testUserID,omitempty"`
	TestUserIDNEQ          *ulid.ID  `json:"testUserIDNEQ,omitempty"`
	TestUserIDIn           []ulid.ID `json:"testUserIDIn,omitempty"`
	TestUserIDNotIn        []ulid.ID `json:"testUserIDNotIn,omitempty"`
	TestUserIDGT           *ulid.ID  `json:"testUserIDGT,omitempty"`
	TestUserIDGTE          *ulid.ID  `json:"testUserIDGTE,omitempty"`
	TestUserIDLT           *ulid.ID  `json:"testUserIDLT,omitempty"`
	TestUserIDLTE          *ulid.ID  `json:"testUserIDLTE,omitempty"`
	TestUserIDContains     *ulid.ID  `json:"testUserIDContains,omitempty"`
	TestUserIDHasPrefix    *ulid.ID  `json:"testUserIDHasPrefix,omitempty"`
	TestUserIDHasSuffix    *ulid.ID  `json:"testUserIDHasSuffix,omitempty"`
	TestUserIDIsNil        bool      `json:"testUserIDIsNil,omitempty"`
	TestUserIDNotNil       bool      `json:"testUserIDNotNil,omitempty"`
	TestUserIDEqualFold    *ulid.ID  `json:"testUserIDEqualFold,omitempty"`
	TestUserIDContainsFold *ulid.ID  `json:"testUserIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "status" field predicates.
	Status      *testtodo.Status  `json:"status,omitempty"`
	StatusNEQ   *testtodo.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []testtodo.Status `json:"statusIn,omitempty"`
	StatusNotIn []testtodo.Status `json:"statusNotIn,omitempty"`

	// "priority" field predicates.
	Priority      *int  `json:"priority,omitempty"`
	PriorityNEQ   *int  `json:"priorityNEQ,omitempty"`
	PriorityIn    []int `json:"priorityIn,omitempty"`
	PriorityNotIn []int `json:"priorityNotIn,omitempty"`
	PriorityGT    *int  `json:"priorityGT,omitempty"`
	PriorityGTE   *int  `json:"priorityGTE,omitempty"`
	PriorityLT    *int  `json:"priorityLT,omitempty"`
	PriorityLTE   *int  `json:"priorityLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "test_user" edge predicates.
	HasTestUser     *bool                 `json:"hasTestUser,omitempty"`
	HasTestUserWith []*TestUserWhereInput `json:"hasTestUserWith,omitempty"`
}

// Filter applies the TestTodoWhereInput filter on the TestTodoQuery builder.
func (i *TestTodoWhereInput) Filter(q *TestTodoQuery) (*TestTodoQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering testtodos.
// An error is returned if the input is empty or invalid.
func (i *TestTodoWhereInput) P() (predicate.TestTodo, error) {
	var predicates []predicate.TestTodo
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, testtodo.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TestTodo, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, testtodo.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TestTodo, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, testtodo.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, testtodo.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, testtodo.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, testtodo.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, testtodo.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, testtodo.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, testtodo.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, testtodo.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, testtodo.IDLTE(*i.IDLTE))
	}
	if i.TestUserID != nil {
		predicates = append(predicates, testtodo.TestUserIDEQ(*i.TestUserID))
	}
	if i.TestUserIDNEQ != nil {
		predicates = append(predicates, testtodo.TestUserIDNEQ(*i.TestUserIDNEQ))
	}
	if len(i.TestUserIDIn) > 0 {
		predicates = append(predicates, testtodo.TestUserIDIn(i.TestUserIDIn...))
	}
	if len(i.TestUserIDNotIn) > 0 {
		predicates = append(predicates, testtodo.TestUserIDNotIn(i.TestUserIDNotIn...))
	}
	if i.TestUserIDGT != nil {
		predicates = append(predicates, testtodo.TestUserIDGT(*i.TestUserIDGT))
	}
	if i.TestUserIDGTE != nil {
		predicates = append(predicates, testtodo.TestUserIDGTE(*i.TestUserIDGTE))
	}
	if i.TestUserIDLT != nil {
		predicates = append(predicates, testtodo.TestUserIDLT(*i.TestUserIDLT))
	}
	if i.TestUserIDLTE != nil {
		predicates = append(predicates, testtodo.TestUserIDLTE(*i.TestUserIDLTE))
	}
	if i.TestUserIDContains != nil {
		predicates = append(predicates, testtodo.TestUserIDContains(*i.TestUserIDContains))
	}
	if i.TestUserIDHasPrefix != nil {
		predicates = append(predicates, testtodo.TestUserIDHasPrefix(*i.TestUserIDHasPrefix))
	}
	if i.TestUserIDHasSuffix != nil {
		predicates = append(predicates, testtodo.TestUserIDHasSuffix(*i.TestUserIDHasSuffix))
	}
	if i.TestUserIDIsNil {
		predicates = append(predicates, testtodo.TestUserIDIsNil())
	}
	if i.TestUserIDNotNil {
		predicates = append(predicates, testtodo.TestUserIDNotNil())
	}
	if i.TestUserIDEqualFold != nil {
		predicates = append(predicates, testtodo.TestUserIDEqualFold(*i.TestUserIDEqualFold))
	}
	if i.TestUserIDContainsFold != nil {
		predicates = append(predicates, testtodo.TestUserIDContainsFold(*i.TestUserIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, testtodo.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, testtodo.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, testtodo.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, testtodo.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, testtodo.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, testtodo.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, testtodo.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, testtodo.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, testtodo.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, testtodo.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, testtodo.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, testtodo.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, testtodo.NameContainsFold(*i.NameContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, testtodo.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, testtodo.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, testtodo.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, testtodo.StatusNotIn(i.StatusNotIn...))
	}
	if i.Priority != nil {
		predicates = append(predicates, testtodo.PriorityEQ(*i.Priority))
	}
	if i.PriorityNEQ != nil {
		predicates = append(predicates, testtodo.PriorityNEQ(*i.PriorityNEQ))
	}
	if len(i.PriorityIn) > 0 {
		predicates = append(predicates, testtodo.PriorityIn(i.PriorityIn...))
	}
	if len(i.PriorityNotIn) > 0 {
		predicates = append(predicates, testtodo.PriorityNotIn(i.PriorityNotIn...))
	}
	if i.PriorityGT != nil {
		predicates = append(predicates, testtodo.PriorityGT(*i.PriorityGT))
	}
	if i.PriorityGTE != nil {
		predicates = append(predicates, testtodo.PriorityGTE(*i.PriorityGTE))
	}
	if i.PriorityLT != nil {
		predicates = append(predicates, testtodo.PriorityLT(*i.PriorityLT))
	}
	if i.PriorityLTE != nil {
		predicates = append(predicates, testtodo.PriorityLTE(*i.PriorityLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, testtodo.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, testtodo.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, testtodo.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, testtodo.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, testtodo.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, testtodo.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, testtodo.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, testtodo.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, testtodo.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, testtodo.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, testtodo.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, testtodo.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, testtodo.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, testtodo.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, testtodo.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, testtodo.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTestUser != nil {
		p := testtodo.HasTestUser()
		if !*i.HasTestUser {
			p = testtodo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTestUserWith) > 0 {
		with := make([]predicate.TestUser, 0, len(i.HasTestUserWith))
		for _, w := range i.HasTestUserWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, testtodo.HasTestUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TestTodoWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return testtodo.And(predicates...), nil
	}
}

// TestUserWhereInput represents a where input for filtering TestUser queries.
type TestUserWhereInput struct {
	Not *TestUserWhereInput   `json:"not,omitempty"`
	Or  []*TestUserWhereInput `json:"or,omitempty"`
	And []*TestUserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "age" field predicates.
	Age      *int  `json:"age,omitempty"`
	AgeNEQ   *int  `json:"ageNEQ,omitempty"`
	AgeIn    []int `json:"ageIn,omitempty"`
	AgeNotIn []int `json:"ageNotIn,omitempty"`
	AgeGT    *int  `json:"ageGT,omitempty"`
	AgeGTE   *int  `json:"ageGTE,omitempty"`
	AgeLT    *int  `json:"ageLT,omitempty"`
	AgeLTE   *int  `json:"ageLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "test_todos" edge predicates.
	HasTestTodos     *bool                 `json:"hasTestTodos,omitempty"`
	HasTestTodosWith []*TestTodoWhereInput `json:"hasTestTodosWith,omitempty"`
}

// Filter applies the TestUserWhereInput filter on the TestUserQuery builder.
func (i *TestUserWhereInput) Filter(q *TestUserQuery) (*TestUserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering testusers.
// An error is returned if the input is empty or invalid.
func (i *TestUserWhereInput) P() (predicate.TestUser, error) {
	var predicates []predicate.TestUser
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, testuser.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TestUser, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, testuser.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TestUser, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, testuser.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, testuser.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, testuser.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, testuser.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, testuser.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, testuser.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, testuser.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, testuser.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, testuser.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, testuser.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, testuser.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, testuser.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, testuser.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, testuser.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, testuser.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, testuser.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, testuser.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, testuser.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, testuser.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, testuser.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, testuser.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, testuser.NameContainsFold(*i.NameContainsFold))
	}
	if i.Age != nil {
		predicates = append(predicates, testuser.AgeEQ(*i.Age))
	}
	if i.AgeNEQ != nil {
		predicates = append(predicates, testuser.AgeNEQ(*i.AgeNEQ))
	}
	if len(i.AgeIn) > 0 {
		predicates = append(predicates, testuser.AgeIn(i.AgeIn...))
	}
	if len(i.AgeNotIn) > 0 {
		predicates = append(predicates, testuser.AgeNotIn(i.AgeNotIn...))
	}
	if i.AgeGT != nil {
		predicates = append(predicates, testuser.AgeGT(*i.AgeGT))
	}
	if i.AgeGTE != nil {
		predicates = append(predicates, testuser.AgeGTE(*i.AgeGTE))
	}
	if i.AgeLT != nil {
		predicates = append(predicates, testuser.AgeLT(*i.AgeLT))
	}
	if i.AgeLTE != nil {
		predicates = append(predicates, testuser.AgeLTE(*i.AgeLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, testuser.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, testuser.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, testuser.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, testuser.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, testuser.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, testuser.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, testuser.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, testuser.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, testuser.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, testuser.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, testuser.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, testuser.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, testuser.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, testuser.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, testuser.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, testuser.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTestTodos != nil {
		p := testuser.HasTestTodos()
		if !*i.HasTestTodos {
			p = testuser.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTestTodosWith) > 0 {
		with := make([]predicate.TestTodo, 0, len(i.HasTestTodosWith))
		for _, w := range i.HasTestTodosWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, testuser.HasTestTodosWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TestUserWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return testuser.And(predicates...), nil
	}
}

// WorkspaceWhereInput represents a where input for filtering Workspace queries.
type WorkspaceWhereInput struct {
	Not *WorkspaceWhereInput   `json:"not,omitempty"`
	Or  []*WorkspaceWhereInput `json:"or,omitempty"`
	And []*WorkspaceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *ulid.ID  `json:"createdBy,omitempty"`
	CreatedByNEQ          *ulid.ID  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []ulid.ID `json:"createdByIn,omitempty"`
	CreatedByNotIn        []ulid.ID `json:"createdByNotIn,omitempty"`
	CreatedByGT           *ulid.ID  `json:"createdByGT,omitempty"`
	CreatedByGTE          *ulid.ID  `json:"createdByGTE,omitempty"`
	CreatedByLT           *ulid.ID  `json:"createdByLT,omitempty"`
	CreatedByLTE          *ulid.ID  `json:"createdByLTE,omitempty"`
	CreatedByContains     *ulid.ID  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *ulid.ID  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *ulid.ID  `json:"createdByHasSuffix,omitempty"`
	CreatedByEqualFold    *ulid.ID  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *ulid.ID  `json:"createdByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "workspace_teammates" edge predicates.
	HasWorkspaceTeammates     *bool                          `json:"hasWorkspaceTeammates,omitempty"`
	HasWorkspaceTeammatesWith []*WorkspaceTeammateWhereInput `json:"hasWorkspaceTeammatesWith,omitempty"`

	// "favorite_workspaces" edge predicates.
	HasFavoriteWorkspaces     *bool                          `json:"hasFavoriteWorkspaces,omitempty"`
	HasFavoriteWorkspacesWith []*FavoriteWorkspaceWhereInput `json:"hasFavoriteWorkspacesWith,omitempty"`

	// "teammate_task_tab_statuses" edge predicates.
	HasTeammateTaskTabStatuses     *bool                              `json:"hasTeammateTaskTabStatuses,omitempty"`
	HasTeammateTaskTabStatusesWith []*TeammateTaskTabStatusWhereInput `json:"hasTeammateTaskTabStatusesWith,omitempty"`

	// "teammate_task_list_statuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`
}

// Filter applies the WorkspaceWhereInput filter on the WorkspaceQuery builder.
func (i *WorkspaceWhereInput) Filter(q *WorkspaceQuery) (*WorkspaceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering workspaces.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceWhereInput) P() (predicate.Workspace, error) {
	var predicates []predicate.Workspace
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, workspace.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Workspace, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspace.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Workspace, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspace.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, workspace.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspace.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspace.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspace.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspace.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspace.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspace.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspace.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, workspace.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, workspace.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, workspace.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, workspace.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, workspace.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, workspace.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, workspace.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, workspace.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, workspace.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, workspace.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, workspace.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, workspace.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, workspace.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, workspace.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, workspace.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, workspace.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, workspace.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, workspace.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, workspace.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, workspace.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, workspace.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, workspace.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, workspace.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, workspace.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, workspace.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, workspace.NameContainsFold(*i.NameContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspace.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspace.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspace.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspace.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspace.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspace.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspace.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspace.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspace.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspace.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspace.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspace.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspace.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspace.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspace.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspace.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := workspace.HasTeammate()
		if !*i.HasTeammate {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateWith(with...))
	}
	if i.HasProjects != nil {
		p := workspace.HasProjects()
		if !*i.HasProjects {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasProjectsWith(with...))
	}
	if i.HasWorkspaceTeammates != nil {
		p := workspace.HasWorkspaceTeammates()
		if !*i.HasWorkspaceTeammates {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceTeammatesWith) > 0 {
		with := make([]predicate.WorkspaceTeammate, 0, len(i.HasWorkspaceTeammatesWith))
		for _, w := range i.HasWorkspaceTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasWorkspaceTeammatesWith(with...))
	}
	if i.HasFavoriteWorkspaces != nil {
		p := workspace.HasFavoriteWorkspaces()
		if !*i.HasFavoriteWorkspaces {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteWorkspacesWith) > 0 {
		with := make([]predicate.FavoriteWorkspace, 0, len(i.HasFavoriteWorkspacesWith))
		for _, w := range i.HasFavoriteWorkspacesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasFavoriteWorkspacesWith(with...))
	}
	if i.HasTeammateTaskTabStatuses != nil {
		p := workspace.HasTeammateTaskTabStatuses()
		if !*i.HasTeammateTaskTabStatuses {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskTabStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskTabStatus, 0, len(i.HasTeammateTaskTabStatusesWith))
		for _, w := range i.HasTeammateTaskTabStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateTaskTabStatusesWith(with...))
	}
	if i.HasTeammateTaskListStatuses != nil {
		p := workspace.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateTaskListStatusesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate WorkspaceWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return workspace.And(predicates...), nil
	}
}

// WorkspaceTeammateWhereInput represents a where input for filtering WorkspaceTeammate queries.
type WorkspaceTeammateWhereInput struct {
	Not *WorkspaceTeammateWhereInput   `json:"not,omitempty"`
	Or  []*WorkspaceTeammateWhereInput `json:"or,omitempty"`
	And []*WorkspaceTeammateWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "role" field predicates.
	Role             *string  `json:"role,omitempty"`
	RoleNEQ          *string  `json:"roleNEQ,omitempty"`
	RoleIn           []string `json:"roleIn,omitempty"`
	RoleNotIn        []string `json:"roleNotIn,omitempty"`
	RoleGT           *string  `json:"roleGT,omitempty"`
	RoleGTE          *string  `json:"roleGTE,omitempty"`
	RoleLT           *string  `json:"roleLT,omitempty"`
	RoleLTE          *string  `json:"roleLTE,omitempty"`
	RoleContains     *string  `json:"roleContains,omitempty"`
	RoleHasPrefix    *string  `json:"roleHasPrefix,omitempty"`
	RoleHasSuffix    *string  `json:"roleHasSuffix,omitempty"`
	RoleEqualFold    *string  `json:"roleEqualFold,omitempty"`
	RoleContainsFold *string  `json:"roleContainsFold,omitempty"`

	// "is_owner" field predicates.
	IsOwner    *bool `json:"isOwner,omitempty"`
	IsOwnerNEQ *bool `json:"isOwnerNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the WorkspaceTeammateWhereInput filter on the WorkspaceTeammateQuery builder.
func (i *WorkspaceTeammateWhereInput) Filter(q *WorkspaceTeammateQuery) (*WorkspaceTeammateQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering workspaceteammates.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceTeammateWhereInput) P() (predicate.WorkspaceTeammate, error) {
	var predicates []predicate.WorkspaceTeammate
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, workspaceteammate.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.WorkspaceTeammate, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspaceteammate.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.WorkspaceTeammate, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspaceteammate.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, workspaceteammate.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspaceteammate.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspaceteammate.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspaceteammate.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspaceteammate.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspaceteammate.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspaceteammate.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, workspaceteammate.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, workspaceteammate.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, workspaceteammate.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, workspaceteammate.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, workspaceteammate.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, workspaceteammate.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, workspaceteammate.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, workspaceteammate.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, workspaceteammate.RoleLTE(*i.RoleLTE))
	}
	if i.RoleContains != nil {
		predicates = append(predicates, workspaceteammate.RoleContains(*i.RoleContains))
	}
	if i.RoleHasPrefix != nil {
		predicates = append(predicates, workspaceteammate.RoleHasPrefix(*i.RoleHasPrefix))
	}
	if i.RoleHasSuffix != nil {
		predicates = append(predicates, workspaceteammate.RoleHasSuffix(*i.RoleHasSuffix))
	}
	if i.RoleEqualFold != nil {
		predicates = append(predicates, workspaceteammate.RoleEqualFold(*i.RoleEqualFold))
	}
	if i.RoleContainsFold != nil {
		predicates = append(predicates, workspaceteammate.RoleContainsFold(*i.RoleContainsFold))
	}
	if i.IsOwner != nil {
		predicates = append(predicates, workspaceteammate.IsOwnerEQ(*i.IsOwner))
	}
	if i.IsOwnerNEQ != nil {
		predicates = append(predicates, workspaceteammate.IsOwnerNEQ(*i.IsOwnerNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspaceteammate.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspaceteammate.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := workspaceteammate.HasWorkspace()
		if !*i.HasWorkspace {
			p = workspaceteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceteammate.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := workspaceteammate.HasTeammate()
		if !*i.HasTeammate {
			p = workspaceteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceteammate.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate WorkspaceTeammateWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return workspaceteammate.And(predicates...), nil
	}
}
