// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/archivedtaskactivity"
	"project-management-demo-backend/ent/archivedtaskactivitytask"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/deletedtask"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/filetype"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/projecttask"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tag"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskactivity"
	"project-management-demo-backend/ent/taskactivitytask"
	"project-management-demo-backend/ent/taskcollaborator"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/tasksection"
	"project-management-demo-backend/ent/tasktag"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceactivity"
	"project-management-demo-backend/ent/workspaceactivitytask"
	"project-management-demo-backend/ent/workspaceteammate"
	"time"
)

// ActivityTypeWhereInput represents a where input for filtering ActivityType queries.
type ActivityTypeWhereInput struct {
	Not *ActivityTypeWhereInput   `json:"not,omitempty"`
	Or  []*ActivityTypeWhereInput `json:"or,omitempty"`
	And []*ActivityTypeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "type_code" field predicates.
	TypeCode      *activitytype.TypeCode  `json:"typeCode,omitempty"`
	TypeCodeNEQ   *activitytype.TypeCode  `json:"typeCodeNEQ,omitempty"`
	TypeCodeIn    []activitytype.TypeCode `json:"typeCodeIn,omitempty"`
	TypeCodeNotIn []activitytype.TypeCode `json:"typeCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "taskActivities" edge predicates.
	HasTaskActivities     *bool                     `json:"hasTaskActivities,omitempty"`
	HasTaskActivitiesWith []*TaskActivityWhereInput `json:"hasTaskActivitiesWith,omitempty"`

	// "workspaceActivities" edge predicates.
	HasWorkspaceActivities     *bool                          `json:"hasWorkspaceActivities,omitempty"`
	HasWorkspaceActivitiesWith []*WorkspaceActivityWhereInput `json:"hasWorkspaceActivitiesWith,omitempty"`

	// "archivedTaskActivities" edge predicates.
	HasArchivedTaskActivities     *bool                             `json:"hasArchivedTaskActivities,omitempty"`
	HasArchivedTaskActivitiesWith []*ArchivedTaskActivityWhereInput `json:"hasArchivedTaskActivitiesWith,omitempty"`
}

// Filter applies the ActivityTypeWhereInput filter on the ActivityTypeQuery builder.
func (i *ActivityTypeWhereInput) Filter(q *ActivityTypeQuery) (*ActivityTypeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering activitytypes.
// An error is returned if the input is empty or invalid.
func (i *ActivityTypeWhereInput) P() (predicate.ActivityType, error) {
	var predicates []predicate.ActivityType
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, activitytype.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ActivityType, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, activitytype.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ActivityType, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, activitytype.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, activitytype.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, activitytype.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, activitytype.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, activitytype.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, activitytype.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, activitytype.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, activitytype.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, activitytype.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, activitytype.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, activitytype.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, activitytype.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, activitytype.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, activitytype.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, activitytype.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, activitytype.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, activitytype.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, activitytype.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, activitytype.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, activitytype.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, activitytype.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, activitytype.NameContainsFold(*i.NameContainsFold))
	}
	if i.TypeCode != nil {
		predicates = append(predicates, activitytype.TypeCodeEQ(*i.TypeCode))
	}
	if i.TypeCodeNEQ != nil {
		predicates = append(predicates, activitytype.TypeCodeNEQ(*i.TypeCodeNEQ))
	}
	if len(i.TypeCodeIn) > 0 {
		predicates = append(predicates, activitytype.TypeCodeIn(i.TypeCodeIn...))
	}
	if len(i.TypeCodeNotIn) > 0 {
		predicates = append(predicates, activitytype.TypeCodeNotIn(i.TypeCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, activitytype.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, activitytype.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, activitytype.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, activitytype.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, activitytype.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, activitytype.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, activitytype.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, activitytype.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, activitytype.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, activitytype.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, activitytype.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, activitytype.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, activitytype.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, activitytype.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, activitytype.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, activitytype.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTaskActivities != nil {
		p := activitytype.HasTaskActivities()
		if !*i.HasTaskActivities {
			p = activitytype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskActivitiesWith) > 0 {
		with := make([]predicate.TaskActivity, 0, len(i.HasTaskActivitiesWith))
		for _, w := range i.HasTaskActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, activitytype.HasTaskActivitiesWith(with...))
	}
	if i.HasWorkspaceActivities != nil {
		p := activitytype.HasWorkspaceActivities()
		if !*i.HasWorkspaceActivities {
			p = activitytype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceActivitiesWith) > 0 {
		with := make([]predicate.WorkspaceActivity, 0, len(i.HasWorkspaceActivitiesWith))
		for _, w := range i.HasWorkspaceActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, activitytype.HasWorkspaceActivitiesWith(with...))
	}
	if i.HasArchivedTaskActivities != nil {
		p := activitytype.HasArchivedTaskActivities()
		if !*i.HasArchivedTaskActivities {
			p = activitytype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasArchivedTaskActivitiesWith) > 0 {
		with := make([]predicate.ArchivedTaskActivity, 0, len(i.HasArchivedTaskActivitiesWith))
		for _, w := range i.HasArchivedTaskActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, activitytype.HasArchivedTaskActivitiesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ActivityTypeWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return activitytype.And(predicates...), nil
	}
}

// ArchivedTaskActivityWhereInput represents a where input for filtering ArchivedTaskActivity queries.
type ArchivedTaskActivityWhereInput struct {
	Not *ArchivedTaskActivityWhereInput   `json:"not,omitempty"`
	Or  []*ArchivedTaskActivityWhereInput `json:"or,omitempty"`
	And []*ArchivedTaskActivityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "activity_type_id" field predicates.
	ActivityTypeID             *ulid.ID  `json:"activityTypeID,omitempty"`
	ActivityTypeIDNEQ          *ulid.ID  `json:"activityTypeIDNEQ,omitempty"`
	ActivityTypeIDIn           []ulid.ID `json:"activityTypeIDIn,omitempty"`
	ActivityTypeIDNotIn        []ulid.ID `json:"activityTypeIDNotIn,omitempty"`
	ActivityTypeIDGT           *ulid.ID  `json:"activityTypeIDGT,omitempty"`
	ActivityTypeIDGTE          *ulid.ID  `json:"activityTypeIDGTE,omitempty"`
	ActivityTypeIDLT           *ulid.ID  `json:"activityTypeIDLT,omitempty"`
	ActivityTypeIDLTE          *ulid.ID  `json:"activityTypeIDLTE,omitempty"`
	ActivityTypeIDContains     *ulid.ID  `json:"activityTypeIDContains,omitempty"`
	ActivityTypeIDHasPrefix    *ulid.ID  `json:"activityTypeIDHasPrefix,omitempty"`
	ActivityTypeIDHasSuffix    *ulid.ID  `json:"activityTypeIDHasSuffix,omitempty"`
	ActivityTypeIDEqualFold    *ulid.ID  `json:"activityTypeIDEqualFold,omitempty"`
	ActivityTypeIDContainsFold *ulid.ID  `json:"activityTypeIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "activityType" edge predicates.
	HasActivityType     *bool                     `json:"hasActivityType,omitempty"`
	HasActivityTypeWith []*ActivityTypeWhereInput `json:"hasActivityTypeWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`
}

// Filter applies the ArchivedTaskActivityWhereInput filter on the ArchivedTaskActivityQuery builder.
func (i *ArchivedTaskActivityWhereInput) Filter(q *ArchivedTaskActivityQuery) (*ArchivedTaskActivityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering archivedtaskactivities.
// An error is returned if the input is empty or invalid.
func (i *ArchivedTaskActivityWhereInput) P() (predicate.ArchivedTaskActivity, error) {
	var predicates []predicate.ArchivedTaskActivity
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, archivedtaskactivity.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ArchivedTaskActivity, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, archivedtaskactivity.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ArchivedTaskActivity, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, archivedtaskactivity.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, archivedtaskactivity.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, archivedtaskactivity.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, archivedtaskactivity.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, archivedtaskactivity.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, archivedtaskactivity.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, archivedtaskactivity.IDLTE(*i.IDLTE))
	}
	if i.ActivityTypeID != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDEQ(*i.ActivityTypeID))
	}
	if i.ActivityTypeIDNEQ != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDNEQ(*i.ActivityTypeIDNEQ))
	}
	if len(i.ActivityTypeIDIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDIn(i.ActivityTypeIDIn...))
	}
	if len(i.ActivityTypeIDNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDNotIn(i.ActivityTypeIDNotIn...))
	}
	if i.ActivityTypeIDGT != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDGT(*i.ActivityTypeIDGT))
	}
	if i.ActivityTypeIDGTE != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDGTE(*i.ActivityTypeIDGTE))
	}
	if i.ActivityTypeIDLT != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDLT(*i.ActivityTypeIDLT))
	}
	if i.ActivityTypeIDLTE != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDLTE(*i.ActivityTypeIDLTE))
	}
	if i.ActivityTypeIDContains != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDContains(*i.ActivityTypeIDContains))
	}
	if i.ActivityTypeIDHasPrefix != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDHasPrefix(*i.ActivityTypeIDHasPrefix))
	}
	if i.ActivityTypeIDHasSuffix != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDHasSuffix(*i.ActivityTypeIDHasSuffix))
	}
	if i.ActivityTypeIDEqualFold != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDEqualFold(*i.ActivityTypeIDEqualFold))
	}
	if i.ActivityTypeIDContainsFold != nil {
		predicates = append(predicates, archivedtaskactivity.ActivityTypeIDContainsFold(*i.ActivityTypeIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, archivedtaskactivity.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, archivedtaskactivity.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, archivedtaskactivity.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, archivedtaskactivity.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, archivedtaskactivity.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, archivedtaskactivity.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, archivedtaskactivity.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, archivedtaskactivity.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, archivedtaskactivity.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := archivedtaskactivity.HasTeammate()
		if !*i.HasTeammate {
			p = archivedtaskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, archivedtaskactivity.HasTeammateWith(with...))
	}
	if i.HasActivityType != nil {
		p := archivedtaskactivity.HasActivityType()
		if !*i.HasActivityType {
			p = archivedtaskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasActivityTypeWith) > 0 {
		with := make([]predicate.ActivityType, 0, len(i.HasActivityTypeWith))
		for _, w := range i.HasActivityTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, archivedtaskactivity.HasActivityTypeWith(with...))
	}
	if i.HasWorkspace != nil {
		p := archivedtaskactivity.HasWorkspace()
		if !*i.HasWorkspace {
			p = archivedtaskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, archivedtaskactivity.HasWorkspaceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ArchivedTaskActivityWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return archivedtaskactivity.And(predicates...), nil
	}
}

// ArchivedTaskActivityTaskWhereInput represents a where input for filtering ArchivedTaskActivityTask queries.
type ArchivedTaskActivityTaskWhereInput struct {
	Not *ArchivedTaskActivityTaskWhereInput   `json:"not,omitempty"`
	Or  []*ArchivedTaskActivityTaskWhereInput `json:"or,omitempty"`
	And []*ArchivedTaskActivityTaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_activity_id" field predicates.
	TaskActivityID             *ulid.ID  `json:"taskActivityID,omitempty"`
	TaskActivityIDNEQ          *ulid.ID  `json:"taskActivityIDNEQ,omitempty"`
	TaskActivityIDIn           []ulid.ID `json:"taskActivityIDIn,omitempty"`
	TaskActivityIDNotIn        []ulid.ID `json:"taskActivityIDNotIn,omitempty"`
	TaskActivityIDGT           *ulid.ID  `json:"taskActivityIDGT,omitempty"`
	TaskActivityIDGTE          *ulid.ID  `json:"taskActivityIDGTE,omitempty"`
	TaskActivityIDLT           *ulid.ID  `json:"taskActivityIDLT,omitempty"`
	TaskActivityIDLTE          *ulid.ID  `json:"taskActivityIDLTE,omitempty"`
	TaskActivityIDContains     *ulid.ID  `json:"taskActivityIDContains,omitempty"`
	TaskActivityIDHasPrefix    *ulid.ID  `json:"taskActivityIDHasPrefix,omitempty"`
	TaskActivityIDHasSuffix    *ulid.ID  `json:"taskActivityIDHasSuffix,omitempty"`
	TaskActivityIDEqualFold    *ulid.ID  `json:"taskActivityIDEqualFold,omitempty"`
	TaskActivityIDContainsFold *ulid.ID  `json:"taskActivityIDContainsFold,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "taskActivity" edge predicates.
	HasTaskActivity     *bool                     `json:"hasTaskActivity,omitempty"`
	HasTaskActivityWith []*TaskActivityWhereInput `json:"hasTaskActivityWith,omitempty"`
}

// Filter applies the ArchivedTaskActivityTaskWhereInput filter on the ArchivedTaskActivityTaskQuery builder.
func (i *ArchivedTaskActivityTaskWhereInput) Filter(q *ArchivedTaskActivityTaskQuery) (*ArchivedTaskActivityTaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering archivedtaskactivitytasks.
// An error is returned if the input is empty or invalid.
func (i *ArchivedTaskActivityTaskWhereInput) P() (predicate.ArchivedTaskActivityTask, error) {
	var predicates []predicate.ArchivedTaskActivityTask
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, archivedtaskactivitytask.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ArchivedTaskActivityTask, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, archivedtaskactivitytask.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ArchivedTaskActivityTask, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, archivedtaskactivitytask.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, archivedtaskactivitytask.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, archivedtaskactivitytask.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, archivedtaskactivitytask.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, archivedtaskactivitytask.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.IDLTE(*i.IDLTE))
	}
	if i.TaskActivityID != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDEQ(*i.TaskActivityID))
	}
	if i.TaskActivityIDNEQ != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDNEQ(*i.TaskActivityIDNEQ))
	}
	if len(i.TaskActivityIDIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDIn(i.TaskActivityIDIn...))
	}
	if len(i.TaskActivityIDNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDNotIn(i.TaskActivityIDNotIn...))
	}
	if i.TaskActivityIDGT != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDGT(*i.TaskActivityIDGT))
	}
	if i.TaskActivityIDGTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDGTE(*i.TaskActivityIDGTE))
	}
	if i.TaskActivityIDLT != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDLT(*i.TaskActivityIDLT))
	}
	if i.TaskActivityIDLTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDLTE(*i.TaskActivityIDLTE))
	}
	if i.TaskActivityIDContains != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDContains(*i.TaskActivityIDContains))
	}
	if i.TaskActivityIDHasPrefix != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDHasPrefix(*i.TaskActivityIDHasPrefix))
	}
	if i.TaskActivityIDHasSuffix != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDHasSuffix(*i.TaskActivityIDHasSuffix))
	}
	if i.TaskActivityIDEqualFold != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDEqualFold(*i.TaskActivityIDEqualFold))
	}
	if i.TaskActivityIDContainsFold != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskActivityIDContainsFold(*i.TaskActivityIDContainsFold))
	}
	if i.TaskID != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, archivedtaskactivitytask.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, archivedtaskactivitytask.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := archivedtaskactivitytask.HasTask()
		if !*i.HasTask {
			p = archivedtaskactivitytask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, archivedtaskactivitytask.HasTaskWith(with...))
	}
	if i.HasTaskActivity != nil {
		p := archivedtaskactivitytask.HasTaskActivity()
		if !*i.HasTaskActivity {
			p = archivedtaskactivitytask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskActivityWith) > 0 {
		with := make([]predicate.TaskActivity, 0, len(i.HasTaskActivityWith))
		for _, w := range i.HasTaskActivityWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, archivedtaskactivitytask.HasTaskActivityWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ArchivedTaskActivityTaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return archivedtaskactivitytask.And(predicates...), nil
	}
}

// ColorWhereInput represents a where input for filtering Color queries.
type ColorWhereInput struct {
	Not *ColorWhereInput   `json:"not,omitempty"`
	Or  []*ColorWhereInput `json:"or,omitempty"`
	And []*ColorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "color" field predicates.
	Color             *string  `json:"color,omitempty"`
	ColorNEQ          *string  `json:"colorNEQ,omitempty"`
	ColorIn           []string `json:"colorIn,omitempty"`
	ColorNotIn        []string `json:"colorNotIn,omitempty"`
	ColorGT           *string  `json:"colorGT,omitempty"`
	ColorGTE          *string  `json:"colorGTE,omitempty"`
	ColorLT           *string  `json:"colorLT,omitempty"`
	ColorLTE          *string  `json:"colorLTE,omitempty"`
	ColorContains     *string  `json:"colorContains,omitempty"`
	ColorHasPrefix    *string  `json:"colorHasPrefix,omitempty"`
	ColorHasSuffix    *string  `json:"colorHasSuffix,omitempty"`
	ColorEqualFold    *string  `json:"colorEqualFold,omitempty"`
	ColorContainsFold *string  `json:"colorContainsFold,omitempty"`

	// "hex" field predicates.
	Hex             *string  `json:"hex,omitempty"`
	HexNEQ          *string  `json:"hexNEQ,omitempty"`
	HexIn           []string `json:"hexIn,omitempty"`
	HexNotIn        []string `json:"hexNotIn,omitempty"`
	HexGT           *string  `json:"hexGT,omitempty"`
	HexGTE          *string  `json:"hexGTE,omitempty"`
	HexLT           *string  `json:"hexLT,omitempty"`
	HexLTE          *string  `json:"hexLTE,omitempty"`
	HexContains     *string  `json:"hexContains,omitempty"`
	HexHasPrefix    *string  `json:"hexHasPrefix,omitempty"`
	HexHasSuffix    *string  `json:"hexHasSuffix,omitempty"`
	HexEqualFold    *string  `json:"hexEqualFold,omitempty"`
	HexContainsFold *string  `json:"hexContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projectBaseColors" edge predicates.
	HasProjectBaseColors     *bool                         `json:"hasProjectBaseColors,omitempty"`
	HasProjectBaseColorsWith []*ProjectBaseColorWhereInput `json:"hasProjectBaseColorsWith,omitempty"`

	// "projectLightColors" edge predicates.
	HasProjectLightColors     *bool                          `json:"hasProjectLightColors,omitempty"`
	HasProjectLightColorsWith []*ProjectLightColorWhereInput `json:"hasProjectLightColorsWith,omitempty"`

	// "taskPriorities" edge predicates.
	HasTaskPriorities     *bool                     `json:"hasTaskPriorities,omitempty"`
	HasTaskPrioritiesWith []*TaskPriorityWhereInput `json:"hasTaskPrioritiesWith,omitempty"`

	// "tags" edge predicates.
	HasTags     *bool            `json:"hasTags,omitempty"`
	HasTagsWith []*TagWhereInput `json:"hasTagsWith,omitempty"`
}

// Filter applies the ColorWhereInput filter on the ColorQuery builder.
func (i *ColorWhereInput) Filter(q *ColorQuery) (*ColorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering colors.
// An error is returned if the input is empty or invalid.
func (i *ColorWhereInput) P() (predicate.Color, error) {
	var predicates []predicate.Color
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, color.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Color, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, color.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Color, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, color.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, color.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, color.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, color.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, color.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, color.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, color.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, color.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, color.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, color.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, color.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, color.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, color.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, color.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, color.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, color.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, color.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, color.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, color.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, color.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, color.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, color.NameContainsFold(*i.NameContainsFold))
	}
	if i.Color != nil {
		predicates = append(predicates, color.ColorEQ(*i.Color))
	}
	if i.ColorNEQ != nil {
		predicates = append(predicates, color.ColorNEQ(*i.ColorNEQ))
	}
	if len(i.ColorIn) > 0 {
		predicates = append(predicates, color.ColorIn(i.ColorIn...))
	}
	if len(i.ColorNotIn) > 0 {
		predicates = append(predicates, color.ColorNotIn(i.ColorNotIn...))
	}
	if i.ColorGT != nil {
		predicates = append(predicates, color.ColorGT(*i.ColorGT))
	}
	if i.ColorGTE != nil {
		predicates = append(predicates, color.ColorGTE(*i.ColorGTE))
	}
	if i.ColorLT != nil {
		predicates = append(predicates, color.ColorLT(*i.ColorLT))
	}
	if i.ColorLTE != nil {
		predicates = append(predicates, color.ColorLTE(*i.ColorLTE))
	}
	if i.ColorContains != nil {
		predicates = append(predicates, color.ColorContains(*i.ColorContains))
	}
	if i.ColorHasPrefix != nil {
		predicates = append(predicates, color.ColorHasPrefix(*i.ColorHasPrefix))
	}
	if i.ColorHasSuffix != nil {
		predicates = append(predicates, color.ColorHasSuffix(*i.ColorHasSuffix))
	}
	if i.ColorEqualFold != nil {
		predicates = append(predicates, color.ColorEqualFold(*i.ColorEqualFold))
	}
	if i.ColorContainsFold != nil {
		predicates = append(predicates, color.ColorContainsFold(*i.ColorContainsFold))
	}
	if i.Hex != nil {
		predicates = append(predicates, color.HexEQ(*i.Hex))
	}
	if i.HexNEQ != nil {
		predicates = append(predicates, color.HexNEQ(*i.HexNEQ))
	}
	if len(i.HexIn) > 0 {
		predicates = append(predicates, color.HexIn(i.HexIn...))
	}
	if len(i.HexNotIn) > 0 {
		predicates = append(predicates, color.HexNotIn(i.HexNotIn...))
	}
	if i.HexGT != nil {
		predicates = append(predicates, color.HexGT(*i.HexGT))
	}
	if i.HexGTE != nil {
		predicates = append(predicates, color.HexGTE(*i.HexGTE))
	}
	if i.HexLT != nil {
		predicates = append(predicates, color.HexLT(*i.HexLT))
	}
	if i.HexLTE != nil {
		predicates = append(predicates, color.HexLTE(*i.HexLTE))
	}
	if i.HexContains != nil {
		predicates = append(predicates, color.HexContains(*i.HexContains))
	}
	if i.HexHasPrefix != nil {
		predicates = append(predicates, color.HexHasPrefix(*i.HexHasPrefix))
	}
	if i.HexHasSuffix != nil {
		predicates = append(predicates, color.HexHasSuffix(*i.HexHasSuffix))
	}
	if i.HexEqualFold != nil {
		predicates = append(predicates, color.HexEqualFold(*i.HexEqualFold))
	}
	if i.HexContainsFold != nil {
		predicates = append(predicates, color.HexContainsFold(*i.HexContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, color.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, color.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, color.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, color.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, color.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, color.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, color.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, color.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, color.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, color.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, color.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, color.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, color.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, color.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, color.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, color.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjectBaseColors != nil {
		p := color.HasProjectBaseColors()
		if !*i.HasProjectBaseColors {
			p = color.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectBaseColorsWith) > 0 {
		with := make([]predicate.ProjectBaseColor, 0, len(i.HasProjectBaseColorsWith))
		for _, w := range i.HasProjectBaseColorsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, color.HasProjectBaseColorsWith(with...))
	}
	if i.HasProjectLightColors != nil {
		p := color.HasProjectLightColors()
		if !*i.HasProjectLightColors {
			p = color.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectLightColorsWith) > 0 {
		with := make([]predicate.ProjectLightColor, 0, len(i.HasProjectLightColorsWith))
		for _, w := range i.HasProjectLightColorsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, color.HasProjectLightColorsWith(with...))
	}
	if i.HasTaskPriorities != nil {
		p := color.HasTaskPriorities()
		if !*i.HasTaskPriorities {
			p = color.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskPrioritiesWith) > 0 {
		with := make([]predicate.TaskPriority, 0, len(i.HasTaskPrioritiesWith))
		for _, w := range i.HasTaskPrioritiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, color.HasTaskPrioritiesWith(with...))
	}
	if i.HasTags != nil {
		p := color.HasTags()
		if !*i.HasTags {
			p = color.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTagsWith))
		for _, w := range i.HasTagsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, color.HasTagsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ColorWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return color.And(predicates...), nil
	}
}

// DeletedTaskWhereInput represents a where input for filtering DeletedTask queries.
type DeletedTaskWhereInput struct {
	Not *DeletedTaskWhereInput   `json:"not,omitempty"`
	Or  []*DeletedTaskWhereInput `json:"or,omitempty"`
	And []*DeletedTaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "task_section_id" field predicates.
	TaskSectionID             *ulid.ID  `json:"taskSectionID,omitempty"`
	TaskSectionIDNEQ          *ulid.ID  `json:"taskSectionIDNEQ,omitempty"`
	TaskSectionIDIn           []ulid.ID `json:"taskSectionIDIn,omitempty"`
	TaskSectionIDNotIn        []ulid.ID `json:"taskSectionIDNotIn,omitempty"`
	TaskSectionIDGT           *ulid.ID  `json:"taskSectionIDGT,omitempty"`
	TaskSectionIDGTE          *ulid.ID  `json:"taskSectionIDGTE,omitempty"`
	TaskSectionIDLT           *ulid.ID  `json:"taskSectionIDLT,omitempty"`
	TaskSectionIDLTE          *ulid.ID  `json:"taskSectionIDLTE,omitempty"`
	TaskSectionIDContains     *ulid.ID  `json:"taskSectionIDContains,omitempty"`
	TaskSectionIDHasPrefix    *ulid.ID  `json:"taskSectionIDHasPrefix,omitempty"`
	TaskSectionIDHasSuffix    *ulid.ID  `json:"taskSectionIDHasSuffix,omitempty"`
	TaskSectionIDEqualFold    *ulid.ID  `json:"taskSectionIDEqualFold,omitempty"`
	TaskSectionIDContainsFold *ulid.ID  `json:"taskSectionIDContainsFold,omitempty"`

	// "task_join_id" field predicates.
	TaskJoinID             *ulid.ID  `json:"taskJoinID,omitempty"`
	TaskJoinIDNEQ          *ulid.ID  `json:"taskJoinIDNEQ,omitempty"`
	TaskJoinIDIn           []ulid.ID `json:"taskJoinIDIn,omitempty"`
	TaskJoinIDNotIn        []ulid.ID `json:"taskJoinIDNotIn,omitempty"`
	TaskJoinIDGT           *ulid.ID  `json:"taskJoinIDGT,omitempty"`
	TaskJoinIDGTE          *ulid.ID  `json:"taskJoinIDGTE,omitempty"`
	TaskJoinIDLT           *ulid.ID  `json:"taskJoinIDLT,omitempty"`
	TaskJoinIDLTE          *ulid.ID  `json:"taskJoinIDLTE,omitempty"`
	TaskJoinIDContains     *ulid.ID  `json:"taskJoinIDContains,omitempty"`
	TaskJoinIDHasPrefix    *ulid.ID  `json:"taskJoinIDHasPrefix,omitempty"`
	TaskJoinIDHasSuffix    *ulid.ID  `json:"taskJoinIDHasSuffix,omitempty"`
	TaskJoinIDEqualFold    *ulid.ID  `json:"taskJoinIDEqualFold,omitempty"`
	TaskJoinIDContainsFold *ulid.ID  `json:"taskJoinIDContainsFold,omitempty"`

	// "task_type" field predicates.
	TaskType      *deletedtask.TaskType  `json:"taskType,omitempty"`
	TaskTypeNEQ   *deletedtask.TaskType  `json:"taskTypeNEQ,omitempty"`
	TaskTypeIn    []deletedtask.TaskType `json:"taskTypeIn,omitempty"`
	TaskTypeNotIn []deletedtask.TaskType `json:"taskTypeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`
}

// Filter applies the DeletedTaskWhereInput filter on the DeletedTaskQuery builder.
func (i *DeletedTaskWhereInput) Filter(q *DeletedTaskQuery) (*DeletedTaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering deletedtasks.
// An error is returned if the input is empty or invalid.
func (i *DeletedTaskWhereInput) P() (predicate.DeletedTask, error) {
	var predicates []predicate.DeletedTask
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, deletedtask.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.DeletedTask, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, deletedtask.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.DeletedTask, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, deletedtask.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, deletedtask.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, deletedtask.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, deletedtask.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, deletedtask.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, deletedtask.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, deletedtask.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, deletedtask.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, deletedtask.IDLTE(*i.IDLTE))
	}
	if i.TaskID != nil {
		predicates = append(predicates, deletedtask.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, deletedtask.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, deletedtask.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, deletedtask.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, deletedtask.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, deletedtask.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, deletedtask.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, deletedtask.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, deletedtask.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, deletedtask.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, deletedtask.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, deletedtask.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, deletedtask.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, deletedtask.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, deletedtask.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, deletedtask.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TaskSectionID != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDEQ(*i.TaskSectionID))
	}
	if i.TaskSectionIDNEQ != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDNEQ(*i.TaskSectionIDNEQ))
	}
	if len(i.TaskSectionIDIn) > 0 {
		predicates = append(predicates, deletedtask.TaskSectionIDIn(i.TaskSectionIDIn...))
	}
	if len(i.TaskSectionIDNotIn) > 0 {
		predicates = append(predicates, deletedtask.TaskSectionIDNotIn(i.TaskSectionIDNotIn...))
	}
	if i.TaskSectionIDGT != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDGT(*i.TaskSectionIDGT))
	}
	if i.TaskSectionIDGTE != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDGTE(*i.TaskSectionIDGTE))
	}
	if i.TaskSectionIDLT != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDLT(*i.TaskSectionIDLT))
	}
	if i.TaskSectionIDLTE != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDLTE(*i.TaskSectionIDLTE))
	}
	if i.TaskSectionIDContains != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDContains(*i.TaskSectionIDContains))
	}
	if i.TaskSectionIDHasPrefix != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDHasPrefix(*i.TaskSectionIDHasPrefix))
	}
	if i.TaskSectionIDHasSuffix != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDHasSuffix(*i.TaskSectionIDHasSuffix))
	}
	if i.TaskSectionIDEqualFold != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDEqualFold(*i.TaskSectionIDEqualFold))
	}
	if i.TaskSectionIDContainsFold != nil {
		predicates = append(predicates, deletedtask.TaskSectionIDContainsFold(*i.TaskSectionIDContainsFold))
	}
	if i.TaskJoinID != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDEQ(*i.TaskJoinID))
	}
	if i.TaskJoinIDNEQ != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDNEQ(*i.TaskJoinIDNEQ))
	}
	if len(i.TaskJoinIDIn) > 0 {
		predicates = append(predicates, deletedtask.TaskJoinIDIn(i.TaskJoinIDIn...))
	}
	if len(i.TaskJoinIDNotIn) > 0 {
		predicates = append(predicates, deletedtask.TaskJoinIDNotIn(i.TaskJoinIDNotIn...))
	}
	if i.TaskJoinIDGT != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDGT(*i.TaskJoinIDGT))
	}
	if i.TaskJoinIDGTE != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDGTE(*i.TaskJoinIDGTE))
	}
	if i.TaskJoinIDLT != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDLT(*i.TaskJoinIDLT))
	}
	if i.TaskJoinIDLTE != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDLTE(*i.TaskJoinIDLTE))
	}
	if i.TaskJoinIDContains != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDContains(*i.TaskJoinIDContains))
	}
	if i.TaskJoinIDHasPrefix != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDHasPrefix(*i.TaskJoinIDHasPrefix))
	}
	if i.TaskJoinIDHasSuffix != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDHasSuffix(*i.TaskJoinIDHasSuffix))
	}
	if i.TaskJoinIDEqualFold != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDEqualFold(*i.TaskJoinIDEqualFold))
	}
	if i.TaskJoinIDContainsFold != nil {
		predicates = append(predicates, deletedtask.TaskJoinIDContainsFold(*i.TaskJoinIDContainsFold))
	}
	if i.TaskType != nil {
		predicates = append(predicates, deletedtask.TaskTypeEQ(*i.TaskType))
	}
	if i.TaskTypeNEQ != nil {
		predicates = append(predicates, deletedtask.TaskTypeNEQ(*i.TaskTypeNEQ))
	}
	if len(i.TaskTypeIn) > 0 {
		predicates = append(predicates, deletedtask.TaskTypeIn(i.TaskTypeIn...))
	}
	if len(i.TaskTypeNotIn) > 0 {
		predicates = append(predicates, deletedtask.TaskTypeNotIn(i.TaskTypeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, deletedtask.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, deletedtask.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, deletedtask.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, deletedtask.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, deletedtask.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, deletedtask.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, deletedtask.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, deletedtask.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, deletedtask.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, deletedtask.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, deletedtask.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, deletedtask.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, deletedtask.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, deletedtask.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, deletedtask.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, deletedtask.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := deletedtask.HasTask()
		if !*i.HasTask {
			p = deletedtask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, deletedtask.HasTaskWith(with...))
	}
	if i.HasWorkspace != nil {
		p := deletedtask.HasWorkspace()
		if !*i.HasWorkspace {
			p = deletedtask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, deletedtask.HasWorkspaceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate DeletedTaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return deletedtask.And(predicates...), nil
	}
}

// FavoriteProjectWhereInput represents a where input for filtering FavoriteProject queries.
type FavoriteProjectWhereInput struct {
	Not *FavoriteProjectWhereInput   `json:"not,omitempty"`
	Or  []*FavoriteProjectWhereInput `json:"or,omitempty"`
	And []*FavoriteProjectWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the FavoriteProjectWhereInput filter on the FavoriteProjectQuery builder.
func (i *FavoriteProjectWhereInput) Filter(q *FavoriteProjectQuery) (*FavoriteProjectQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering favoriteprojects.
// An error is returned if the input is empty or invalid.
func (i *FavoriteProjectWhereInput) P() (predicate.FavoriteProject, error) {
	var predicates []predicate.FavoriteProject
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, favoriteproject.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FavoriteProject, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, favoriteproject.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FavoriteProject, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, favoriteproject.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, favoriteproject.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, favoriteproject.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, favoriteproject.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, favoriteproject.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, favoriteproject.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, favoriteproject.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, favoriteproject.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, favoriteproject.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, favoriteproject.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, favoriteproject.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, favoriteproject.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, favoriteproject.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, favoriteproject.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, favoriteproject.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, favoriteproject.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, favoriteproject.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, favoriteproject.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, favoriteproject.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, favoriteproject.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, favoriteproject.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, favoriteproject.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, favoriteproject.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, favoriteproject.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, favoriteproject.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, favoriteproject.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, favoriteproject.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, favoriteproject.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, favoriteproject.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, favoriteproject.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, favoriteproject.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, favoriteproject.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, favoriteproject.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, favoriteproject.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, favoriteproject.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, favoriteproject.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, favoriteproject.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, favoriteproject.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteproject.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, favoriteproject.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, favoriteproject.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, favoriteproject.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, favoriteproject.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, favoriteproject.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteproject.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, favoriteproject.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := favoriteproject.HasProject()
		if !*i.HasProject {
			p = favoriteproject.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteproject.HasProjectWith(with...))
	}
	if i.HasTeammate != nil {
		p := favoriteproject.HasTeammate()
		if !*i.HasTeammate {
			p = favoriteproject.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteproject.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate FavoriteProjectWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return favoriteproject.And(predicates...), nil
	}
}

// FavoriteWorkspaceWhereInput represents a where input for filtering FavoriteWorkspace queries.
type FavoriteWorkspaceWhereInput struct {
	Not *FavoriteWorkspaceWhereInput   `json:"not,omitempty"`
	Or  []*FavoriteWorkspaceWhereInput `json:"or,omitempty"`
	And []*FavoriteWorkspaceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the FavoriteWorkspaceWhereInput filter on the FavoriteWorkspaceQuery builder.
func (i *FavoriteWorkspaceWhereInput) Filter(q *FavoriteWorkspaceQuery) (*FavoriteWorkspaceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering favoriteworkspaces.
// An error is returned if the input is empty or invalid.
func (i *FavoriteWorkspaceWhereInput) P() (predicate.FavoriteWorkspace, error) {
	var predicates []predicate.FavoriteWorkspace
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, favoriteworkspace.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FavoriteWorkspace, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, favoriteworkspace.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FavoriteWorkspace, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, favoriteworkspace.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, favoriteworkspace.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, favoriteworkspace.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, favoriteworkspace.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, favoriteworkspace.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, favoriteworkspace.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, favoriteworkspace.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, favoriteworkspace.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, favoriteworkspace.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, favoriteworkspace.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, favoriteworkspace.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, favoriteworkspace.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, favoriteworkspace.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, favoriteworkspace.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, favoriteworkspace.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, favoriteworkspace.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := favoriteworkspace.HasWorkspace()
		if !*i.HasWorkspace {
			p = favoriteworkspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteworkspace.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := favoriteworkspace.HasTeammate()
		if !*i.HasTeammate {
			p = favoriteworkspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, favoriteworkspace.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate FavoriteWorkspaceWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return favoriteworkspace.And(predicates...), nil
	}
}

// FileTypeWhereInput represents a where input for filtering FileType queries.
type FileTypeWhereInput struct {
	Not *FileTypeWhereInput   `json:"not,omitempty"`
	Or  []*FileTypeWhereInput `json:"or,omitempty"`
	And []*FileTypeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "type_code" field predicates.
	TypeCode      *filetype.TypeCode  `json:"typeCode,omitempty"`
	TypeCodeNEQ   *filetype.TypeCode  `json:"typeCodeNEQ,omitempty"`
	TypeCodeIn    []filetype.TypeCode `json:"typeCodeIn,omitempty"`
	TypeCodeNotIn []filetype.TypeCode `json:"typeCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "taskFiles" edge predicates.
	HasTaskFiles     *bool                 `json:"hasTaskFiles,omitempty"`
	HasTaskFilesWith []*TaskFileWhereInput `json:"hasTaskFilesWith,omitempty"`
}

// Filter applies the FileTypeWhereInput filter on the FileTypeQuery builder.
func (i *FileTypeWhereInput) Filter(q *FileTypeQuery) (*FileTypeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering filetypes.
// An error is returned if the input is empty or invalid.
func (i *FileTypeWhereInput) P() (predicate.FileType, error) {
	var predicates []predicate.FileType
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, filetype.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FileType, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, filetype.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FileType, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, filetype.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, filetype.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, filetype.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, filetype.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, filetype.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, filetype.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, filetype.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, filetype.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, filetype.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, filetype.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, filetype.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, filetype.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, filetype.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, filetype.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, filetype.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, filetype.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, filetype.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, filetype.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, filetype.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, filetype.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, filetype.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, filetype.NameContainsFold(*i.NameContainsFold))
	}
	if i.TypeCode != nil {
		predicates = append(predicates, filetype.TypeCodeEQ(*i.TypeCode))
	}
	if i.TypeCodeNEQ != nil {
		predicates = append(predicates, filetype.TypeCodeNEQ(*i.TypeCodeNEQ))
	}
	if len(i.TypeCodeIn) > 0 {
		predicates = append(predicates, filetype.TypeCodeIn(i.TypeCodeIn...))
	}
	if len(i.TypeCodeNotIn) > 0 {
		predicates = append(predicates, filetype.TypeCodeNotIn(i.TypeCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, filetype.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, filetype.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, filetype.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, filetype.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, filetype.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, filetype.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, filetype.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, filetype.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, filetype.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, filetype.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, filetype.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, filetype.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, filetype.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, filetype.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, filetype.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, filetype.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTaskFiles != nil {
		p := filetype.HasTaskFiles()
		if !*i.HasTaskFiles {
			p = filetype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFilesWith) > 0 {
		with := make([]predicate.TaskFile, 0, len(i.HasTaskFilesWith))
		for _, w := range i.HasTaskFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, filetype.HasTaskFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate FileTypeWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return filetype.And(predicates...), nil
	}
}

// IconWhereInput represents a where input for filtering Icon queries.
type IconWhereInput struct {
	Not *IconWhereInput   `json:"not,omitempty"`
	Or  []*IconWhereInput `json:"or,omitempty"`
	And []*IconWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "icon" field predicates.
	Icon             *string  `json:"icon,omitempty"`
	IconNEQ          *string  `json:"iconNEQ,omitempty"`
	IconIn           []string `json:"iconIn,omitempty"`
	IconNotIn        []string `json:"iconNotIn,omitempty"`
	IconGT           *string  `json:"iconGT,omitempty"`
	IconGTE          *string  `json:"iconGTE,omitempty"`
	IconLT           *string  `json:"iconLT,omitempty"`
	IconLTE          *string  `json:"iconLTE,omitempty"`
	IconContains     *string  `json:"iconContains,omitempty"`
	IconHasPrefix    *string  `json:"iconHasPrefix,omitempty"`
	IconHasSuffix    *string  `json:"iconHasSuffix,omitempty"`
	IconEqualFold    *string  `json:"iconEqualFold,omitempty"`
	IconContainsFold *string  `json:"iconContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projectIcons" edge predicates.
	HasProjectIcons     *bool                    `json:"hasProjectIcons,omitempty"`
	HasProjectIconsWith []*ProjectIconWhereInput `json:"hasProjectIconsWith,omitempty"`
}

// Filter applies the IconWhereInput filter on the IconQuery builder.
func (i *IconWhereInput) Filter(q *IconQuery) (*IconQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering icons.
// An error is returned if the input is empty or invalid.
func (i *IconWhereInput) P() (predicate.Icon, error) {
	var predicates []predicate.Icon
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, icon.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Icon, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, icon.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Icon, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, icon.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, icon.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, icon.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, icon.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, icon.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, icon.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, icon.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, icon.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, icon.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, icon.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, icon.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, icon.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, icon.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, icon.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, icon.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, icon.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, icon.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, icon.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, icon.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, icon.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, icon.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, icon.NameContainsFold(*i.NameContainsFold))
	}
	if i.Icon != nil {
		predicates = append(predicates, icon.IconEQ(*i.Icon))
	}
	if i.IconNEQ != nil {
		predicates = append(predicates, icon.IconNEQ(*i.IconNEQ))
	}
	if len(i.IconIn) > 0 {
		predicates = append(predicates, icon.IconIn(i.IconIn...))
	}
	if len(i.IconNotIn) > 0 {
		predicates = append(predicates, icon.IconNotIn(i.IconNotIn...))
	}
	if i.IconGT != nil {
		predicates = append(predicates, icon.IconGT(*i.IconGT))
	}
	if i.IconGTE != nil {
		predicates = append(predicates, icon.IconGTE(*i.IconGTE))
	}
	if i.IconLT != nil {
		predicates = append(predicates, icon.IconLT(*i.IconLT))
	}
	if i.IconLTE != nil {
		predicates = append(predicates, icon.IconLTE(*i.IconLTE))
	}
	if i.IconContains != nil {
		predicates = append(predicates, icon.IconContains(*i.IconContains))
	}
	if i.IconHasPrefix != nil {
		predicates = append(predicates, icon.IconHasPrefix(*i.IconHasPrefix))
	}
	if i.IconHasSuffix != nil {
		predicates = append(predicates, icon.IconHasSuffix(*i.IconHasSuffix))
	}
	if i.IconEqualFold != nil {
		predicates = append(predicates, icon.IconEqualFold(*i.IconEqualFold))
	}
	if i.IconContainsFold != nil {
		predicates = append(predicates, icon.IconContainsFold(*i.IconContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, icon.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, icon.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, icon.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, icon.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, icon.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, icon.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, icon.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, icon.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, icon.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, icon.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, icon.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, icon.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, icon.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, icon.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, icon.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, icon.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjectIcons != nil {
		p := icon.HasProjectIcons()
		if !*i.HasProjectIcons {
			p = icon.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectIconsWith) > 0 {
		with := make([]predicate.ProjectIcon, 0, len(i.HasProjectIconsWith))
		for _, w := range i.HasProjectIconsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, icon.HasProjectIconsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate IconWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return icon.And(predicates...), nil
	}
}

// ProjectWhereInput represents a where input for filtering Project queries.
type ProjectWhereInput struct {
	Not *ProjectWhereInput   `json:"not,omitempty"`
	Or  []*ProjectWhereInput `json:"or,omitempty"`
	And []*ProjectWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "project_base_color_id" field predicates.
	ProjectBaseColorID             *ulid.ID  `json:"projectBaseColorID,omitempty"`
	ProjectBaseColorIDNEQ          *ulid.ID  `json:"projectBaseColorIDNEQ,omitempty"`
	ProjectBaseColorIDIn           []ulid.ID `json:"projectBaseColorIDIn,omitempty"`
	ProjectBaseColorIDNotIn        []ulid.ID `json:"projectBaseColorIDNotIn,omitempty"`
	ProjectBaseColorIDGT           *ulid.ID  `json:"projectBaseColorIDGT,omitempty"`
	ProjectBaseColorIDGTE          *ulid.ID  `json:"projectBaseColorIDGTE,omitempty"`
	ProjectBaseColorIDLT           *ulid.ID  `json:"projectBaseColorIDLT,omitempty"`
	ProjectBaseColorIDLTE          *ulid.ID  `json:"projectBaseColorIDLTE,omitempty"`
	ProjectBaseColorIDContains     *ulid.ID  `json:"projectBaseColorIDContains,omitempty"`
	ProjectBaseColorIDHasPrefix    *ulid.ID  `json:"projectBaseColorIDHasPrefix,omitempty"`
	ProjectBaseColorIDHasSuffix    *ulid.ID  `json:"projectBaseColorIDHasSuffix,omitempty"`
	ProjectBaseColorIDEqualFold    *ulid.ID  `json:"projectBaseColorIDEqualFold,omitempty"`
	ProjectBaseColorIDContainsFold *ulid.ID  `json:"projectBaseColorIDContainsFold,omitempty"`

	// "project_light_color_id" field predicates.
	ProjectLightColorID             *ulid.ID  `json:"projectLightColorID,omitempty"`
	ProjectLightColorIDNEQ          *ulid.ID  `json:"projectLightColorIDNEQ,omitempty"`
	ProjectLightColorIDIn           []ulid.ID `json:"projectLightColorIDIn,omitempty"`
	ProjectLightColorIDNotIn        []ulid.ID `json:"projectLightColorIDNotIn,omitempty"`
	ProjectLightColorIDGT           *ulid.ID  `json:"projectLightColorIDGT,omitempty"`
	ProjectLightColorIDGTE          *ulid.ID  `json:"projectLightColorIDGTE,omitempty"`
	ProjectLightColorIDLT           *ulid.ID  `json:"projectLightColorIDLT,omitempty"`
	ProjectLightColorIDLTE          *ulid.ID  `json:"projectLightColorIDLTE,omitempty"`
	ProjectLightColorIDContains     *ulid.ID  `json:"projectLightColorIDContains,omitempty"`
	ProjectLightColorIDHasPrefix    *ulid.ID  `json:"projectLightColorIDHasPrefix,omitempty"`
	ProjectLightColorIDHasSuffix    *ulid.ID  `json:"projectLightColorIDHasSuffix,omitempty"`
	ProjectLightColorIDEqualFold    *ulid.ID  `json:"projectLightColorIDEqualFold,omitempty"`
	ProjectLightColorIDContainsFold *ulid.ID  `json:"projectLightColorIDContainsFold,omitempty"`

	// "project_icon_id" field predicates.
	ProjectIconID             *ulid.ID  `json:"projectIconID,omitempty"`
	ProjectIconIDNEQ          *ulid.ID  `json:"projectIconIDNEQ,omitempty"`
	ProjectIconIDIn           []ulid.ID `json:"projectIconIDIn,omitempty"`
	ProjectIconIDNotIn        []ulid.ID `json:"projectIconIDNotIn,omitempty"`
	ProjectIconIDGT           *ulid.ID  `json:"projectIconIDGT,omitempty"`
	ProjectIconIDGTE          *ulid.ID  `json:"projectIconIDGTE,omitempty"`
	ProjectIconIDLT           *ulid.ID  `json:"projectIconIDLT,omitempty"`
	ProjectIconIDLTE          *ulid.ID  `json:"projectIconIDLTE,omitempty"`
	ProjectIconIDContains     *ulid.ID  `json:"projectIconIDContains,omitempty"`
	ProjectIconIDHasPrefix    *ulid.ID  `json:"projectIconIDHasPrefix,omitempty"`
	ProjectIconIDHasSuffix    *ulid.ID  `json:"projectIconIDHasSuffix,omitempty"`
	ProjectIconIDEqualFold    *ulid.ID  `json:"projectIconIDEqualFold,omitempty"`
	ProjectIconIDContainsFold *ulid.ID  `json:"projectIconIDContainsFold,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *ulid.ID  `json:"createdBy,omitempty"`
	CreatedByNEQ          *ulid.ID  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []ulid.ID `json:"createdByIn,omitempty"`
	CreatedByNotIn        []ulid.ID `json:"createdByNotIn,omitempty"`
	CreatedByGT           *ulid.ID  `json:"createdByGT,omitempty"`
	CreatedByGTE          *ulid.ID  `json:"createdByGTE,omitempty"`
	CreatedByLT           *ulid.ID  `json:"createdByLT,omitempty"`
	CreatedByLTE          *ulid.ID  `json:"createdByLTE,omitempty"`
	CreatedByContains     *ulid.ID  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *ulid.ID  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *ulid.ID  `json:"createdByHasSuffix,omitempty"`
	CreatedByEqualFold    *ulid.ID  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *ulid.ID  `json:"createdByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description_title" field predicates.
	DescriptionTitle             *string  `json:"descriptionTitle,omitempty"`
	DescriptionTitleNEQ          *string  `json:"descriptionTitleNEQ,omitempty"`
	DescriptionTitleIn           []string `json:"descriptionTitleIn,omitempty"`
	DescriptionTitleNotIn        []string `json:"descriptionTitleNotIn,omitempty"`
	DescriptionTitleGT           *string  `json:"descriptionTitleGT,omitempty"`
	DescriptionTitleGTE          *string  `json:"descriptionTitleGTE,omitempty"`
	DescriptionTitleLT           *string  `json:"descriptionTitleLT,omitempty"`
	DescriptionTitleLTE          *string  `json:"descriptionTitleLTE,omitempty"`
	DescriptionTitleContains     *string  `json:"descriptionTitleContains,omitempty"`
	DescriptionTitleHasPrefix    *string  `json:"descriptionTitleHasPrefix,omitempty"`
	DescriptionTitleHasSuffix    *string  `json:"descriptionTitleHasSuffix,omitempty"`
	DescriptionTitleEqualFold    *string  `json:"descriptionTitleEqualFold,omitempty"`
	DescriptionTitleContainsFold *string  `json:"descriptionTitleContainsFold,omitempty"`

	// "due_date" field predicates.
	DueDate       *time.Time  `json:"dueDate,omitempty"`
	DueDateNEQ    *time.Time  `json:"dueDateNEQ,omitempty"`
	DueDateIn     []time.Time `json:"dueDateIn,omitempty"`
	DueDateNotIn  []time.Time `json:"dueDateNotIn,omitempty"`
	DueDateGT     *time.Time  `json:"dueDateGT,omitempty"`
	DueDateGTE    *time.Time  `json:"dueDateGTE,omitempty"`
	DueDateLT     *time.Time  `json:"dueDateLT,omitempty"`
	DueDateLTE    *time.Time  `json:"dueDateLTE,omitempty"`
	DueDateIsNil  bool        `json:"dueDateIsNil,omitempty"`
	DueDateNotNil bool        `json:"dueDateNotNil,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "projectBaseColor" edge predicates.
	HasProjectBaseColor     *bool                         `json:"hasProjectBaseColor,omitempty"`
	HasProjectBaseColorWith []*ProjectBaseColorWhereInput `json:"hasProjectBaseColorWith,omitempty"`

	// "projectLightColor" edge predicates.
	HasProjectLightColor     *bool                          `json:"hasProjectLightColor,omitempty"`
	HasProjectLightColorWith []*ProjectLightColorWhereInput `json:"hasProjectLightColorWith,omitempty"`

	// "projectIcon" edge predicates.
	HasProjectIcon     *bool                    `json:"hasProjectIcon,omitempty"`
	HasProjectIconWith []*ProjectIconWhereInput `json:"hasProjectIconWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "projectTeammates" edge predicates.
	HasProjectTeammates     *bool                        `json:"hasProjectTeammates,omitempty"`
	HasProjectTeammatesWith []*ProjectTeammateWhereInput `json:"hasProjectTeammatesWith,omitempty"`

	// "favoriteProjects" edge predicates.
	HasFavoriteProjects     *bool                        `json:"hasFavoriteProjects,omitempty"`
	HasFavoriteProjectsWith []*FavoriteProjectWhereInput `json:"hasFavoriteProjectsWith,omitempty"`

	// "projectTaskColumns" edge predicates.
	HasProjectTaskColumns     *bool                          `json:"hasProjectTaskColumns,omitempty"`
	HasProjectTaskColumnsWith []*ProjectTaskColumnWhereInput `json:"hasProjectTaskColumnsWith,omitempty"`

	// "projectTaskListStatuses" edge predicates.
	HasProjectTaskListStatuses     *bool                              `json:"hasProjectTaskListStatuses,omitempty"`
	HasProjectTaskListStatusesWith []*ProjectTaskListStatusWhereInput `json:"hasProjectTaskListStatusesWith,omitempty"`

	// "projectTaskSections" edge predicates.
	HasProjectTaskSections     *bool                           `json:"hasProjectTaskSections,omitempty"`
	HasProjectTaskSectionsWith []*ProjectTaskSectionWhereInput `json:"hasProjectTaskSectionsWith,omitempty"`

	// "projectTasks" edge predicates.
	HasProjectTasks     *bool                    `json:"hasProjectTasks,omitempty"`
	HasProjectTasksWith []*ProjectTaskWhereInput `json:"hasProjectTasksWith,omitempty"`

	// "taskFiles" edge predicates.
	HasTaskFiles     *bool                 `json:"hasTaskFiles,omitempty"`
	HasTaskFilesWith []*TaskFileWhereInput `json:"hasTaskFilesWith,omitempty"`

	// "workspaceActivities" edge predicates.
	HasWorkspaceActivities     *bool                          `json:"hasWorkspaceActivities,omitempty"`
	HasWorkspaceActivitiesWith []*WorkspaceActivityWhereInput `json:"hasWorkspaceActivitiesWith,omitempty"`
}

// Filter applies the ProjectWhereInput filter on the ProjectQuery builder.
func (i *ProjectWhereInput) Filter(q *ProjectQuery) (*ProjectQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projects.
// An error is returned if the input is empty or invalid.
func (i *ProjectWhereInput) P() (predicate.Project, error) {
	var predicates []predicate.Project
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, project.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Project, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, project.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Project, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, project.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, project.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, project.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, project.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, project.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, project.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, project.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, project.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, project.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, project.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, project.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, project.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, project.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, project.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, project.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, project.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, project.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, project.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, project.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, project.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, project.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, project.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.ProjectBaseColorID != nil {
		predicates = append(predicates, project.ProjectBaseColorIDEQ(*i.ProjectBaseColorID))
	}
	if i.ProjectBaseColorIDNEQ != nil {
		predicates = append(predicates, project.ProjectBaseColorIDNEQ(*i.ProjectBaseColorIDNEQ))
	}
	if len(i.ProjectBaseColorIDIn) > 0 {
		predicates = append(predicates, project.ProjectBaseColorIDIn(i.ProjectBaseColorIDIn...))
	}
	if len(i.ProjectBaseColorIDNotIn) > 0 {
		predicates = append(predicates, project.ProjectBaseColorIDNotIn(i.ProjectBaseColorIDNotIn...))
	}
	if i.ProjectBaseColorIDGT != nil {
		predicates = append(predicates, project.ProjectBaseColorIDGT(*i.ProjectBaseColorIDGT))
	}
	if i.ProjectBaseColorIDGTE != nil {
		predicates = append(predicates, project.ProjectBaseColorIDGTE(*i.ProjectBaseColorIDGTE))
	}
	if i.ProjectBaseColorIDLT != nil {
		predicates = append(predicates, project.ProjectBaseColorIDLT(*i.ProjectBaseColorIDLT))
	}
	if i.ProjectBaseColorIDLTE != nil {
		predicates = append(predicates, project.ProjectBaseColorIDLTE(*i.ProjectBaseColorIDLTE))
	}
	if i.ProjectBaseColorIDContains != nil {
		predicates = append(predicates, project.ProjectBaseColorIDContains(*i.ProjectBaseColorIDContains))
	}
	if i.ProjectBaseColorIDHasPrefix != nil {
		predicates = append(predicates, project.ProjectBaseColorIDHasPrefix(*i.ProjectBaseColorIDHasPrefix))
	}
	if i.ProjectBaseColorIDHasSuffix != nil {
		predicates = append(predicates, project.ProjectBaseColorIDHasSuffix(*i.ProjectBaseColorIDHasSuffix))
	}
	if i.ProjectBaseColorIDEqualFold != nil {
		predicates = append(predicates, project.ProjectBaseColorIDEqualFold(*i.ProjectBaseColorIDEqualFold))
	}
	if i.ProjectBaseColorIDContainsFold != nil {
		predicates = append(predicates, project.ProjectBaseColorIDContainsFold(*i.ProjectBaseColorIDContainsFold))
	}
	if i.ProjectLightColorID != nil {
		predicates = append(predicates, project.ProjectLightColorIDEQ(*i.ProjectLightColorID))
	}
	if i.ProjectLightColorIDNEQ != nil {
		predicates = append(predicates, project.ProjectLightColorIDNEQ(*i.ProjectLightColorIDNEQ))
	}
	if len(i.ProjectLightColorIDIn) > 0 {
		predicates = append(predicates, project.ProjectLightColorIDIn(i.ProjectLightColorIDIn...))
	}
	if len(i.ProjectLightColorIDNotIn) > 0 {
		predicates = append(predicates, project.ProjectLightColorIDNotIn(i.ProjectLightColorIDNotIn...))
	}
	if i.ProjectLightColorIDGT != nil {
		predicates = append(predicates, project.ProjectLightColorIDGT(*i.ProjectLightColorIDGT))
	}
	if i.ProjectLightColorIDGTE != nil {
		predicates = append(predicates, project.ProjectLightColorIDGTE(*i.ProjectLightColorIDGTE))
	}
	if i.ProjectLightColorIDLT != nil {
		predicates = append(predicates, project.ProjectLightColorIDLT(*i.ProjectLightColorIDLT))
	}
	if i.ProjectLightColorIDLTE != nil {
		predicates = append(predicates, project.ProjectLightColorIDLTE(*i.ProjectLightColorIDLTE))
	}
	if i.ProjectLightColorIDContains != nil {
		predicates = append(predicates, project.ProjectLightColorIDContains(*i.ProjectLightColorIDContains))
	}
	if i.ProjectLightColorIDHasPrefix != nil {
		predicates = append(predicates, project.ProjectLightColorIDHasPrefix(*i.ProjectLightColorIDHasPrefix))
	}
	if i.ProjectLightColorIDHasSuffix != nil {
		predicates = append(predicates, project.ProjectLightColorIDHasSuffix(*i.ProjectLightColorIDHasSuffix))
	}
	if i.ProjectLightColorIDEqualFold != nil {
		predicates = append(predicates, project.ProjectLightColorIDEqualFold(*i.ProjectLightColorIDEqualFold))
	}
	if i.ProjectLightColorIDContainsFold != nil {
		predicates = append(predicates, project.ProjectLightColorIDContainsFold(*i.ProjectLightColorIDContainsFold))
	}
	if i.ProjectIconID != nil {
		predicates = append(predicates, project.ProjectIconIDEQ(*i.ProjectIconID))
	}
	if i.ProjectIconIDNEQ != nil {
		predicates = append(predicates, project.ProjectIconIDNEQ(*i.ProjectIconIDNEQ))
	}
	if len(i.ProjectIconIDIn) > 0 {
		predicates = append(predicates, project.ProjectIconIDIn(i.ProjectIconIDIn...))
	}
	if len(i.ProjectIconIDNotIn) > 0 {
		predicates = append(predicates, project.ProjectIconIDNotIn(i.ProjectIconIDNotIn...))
	}
	if i.ProjectIconIDGT != nil {
		predicates = append(predicates, project.ProjectIconIDGT(*i.ProjectIconIDGT))
	}
	if i.ProjectIconIDGTE != nil {
		predicates = append(predicates, project.ProjectIconIDGTE(*i.ProjectIconIDGTE))
	}
	if i.ProjectIconIDLT != nil {
		predicates = append(predicates, project.ProjectIconIDLT(*i.ProjectIconIDLT))
	}
	if i.ProjectIconIDLTE != nil {
		predicates = append(predicates, project.ProjectIconIDLTE(*i.ProjectIconIDLTE))
	}
	if i.ProjectIconIDContains != nil {
		predicates = append(predicates, project.ProjectIconIDContains(*i.ProjectIconIDContains))
	}
	if i.ProjectIconIDHasPrefix != nil {
		predicates = append(predicates, project.ProjectIconIDHasPrefix(*i.ProjectIconIDHasPrefix))
	}
	if i.ProjectIconIDHasSuffix != nil {
		predicates = append(predicates, project.ProjectIconIDHasSuffix(*i.ProjectIconIDHasSuffix))
	}
	if i.ProjectIconIDEqualFold != nil {
		predicates = append(predicates, project.ProjectIconIDEqualFold(*i.ProjectIconIDEqualFold))
	}
	if i.ProjectIconIDContainsFold != nil {
		predicates = append(predicates, project.ProjectIconIDContainsFold(*i.ProjectIconIDContainsFold))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, project.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, project.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, project.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, project.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, project.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, project.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, project.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, project.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, project.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, project.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, project.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, project.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, project.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, project.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, project.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, project.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, project.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, project.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, project.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, project.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, project.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, project.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, project.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, project.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, project.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, project.NameContainsFold(*i.NameContainsFold))
	}
	if i.DescriptionTitle != nil {
		predicates = append(predicates, project.DescriptionTitleEQ(*i.DescriptionTitle))
	}
	if i.DescriptionTitleNEQ != nil {
		predicates = append(predicates, project.DescriptionTitleNEQ(*i.DescriptionTitleNEQ))
	}
	if len(i.DescriptionTitleIn) > 0 {
		predicates = append(predicates, project.DescriptionTitleIn(i.DescriptionTitleIn...))
	}
	if len(i.DescriptionTitleNotIn) > 0 {
		predicates = append(predicates, project.DescriptionTitleNotIn(i.DescriptionTitleNotIn...))
	}
	if i.DescriptionTitleGT != nil {
		predicates = append(predicates, project.DescriptionTitleGT(*i.DescriptionTitleGT))
	}
	if i.DescriptionTitleGTE != nil {
		predicates = append(predicates, project.DescriptionTitleGTE(*i.DescriptionTitleGTE))
	}
	if i.DescriptionTitleLT != nil {
		predicates = append(predicates, project.DescriptionTitleLT(*i.DescriptionTitleLT))
	}
	if i.DescriptionTitleLTE != nil {
		predicates = append(predicates, project.DescriptionTitleLTE(*i.DescriptionTitleLTE))
	}
	if i.DescriptionTitleContains != nil {
		predicates = append(predicates, project.DescriptionTitleContains(*i.DescriptionTitleContains))
	}
	if i.DescriptionTitleHasPrefix != nil {
		predicates = append(predicates, project.DescriptionTitleHasPrefix(*i.DescriptionTitleHasPrefix))
	}
	if i.DescriptionTitleHasSuffix != nil {
		predicates = append(predicates, project.DescriptionTitleHasSuffix(*i.DescriptionTitleHasSuffix))
	}
	if i.DescriptionTitleEqualFold != nil {
		predicates = append(predicates, project.DescriptionTitleEqualFold(*i.DescriptionTitleEqualFold))
	}
	if i.DescriptionTitleContainsFold != nil {
		predicates = append(predicates, project.DescriptionTitleContainsFold(*i.DescriptionTitleContainsFold))
	}
	if i.DueDate != nil {
		predicates = append(predicates, project.DueDateEQ(*i.DueDate))
	}
	if i.DueDateNEQ != nil {
		predicates = append(predicates, project.DueDateNEQ(*i.DueDateNEQ))
	}
	if len(i.DueDateIn) > 0 {
		predicates = append(predicates, project.DueDateIn(i.DueDateIn...))
	}
	if len(i.DueDateNotIn) > 0 {
		predicates = append(predicates, project.DueDateNotIn(i.DueDateNotIn...))
	}
	if i.DueDateGT != nil {
		predicates = append(predicates, project.DueDateGT(*i.DueDateGT))
	}
	if i.DueDateGTE != nil {
		predicates = append(predicates, project.DueDateGTE(*i.DueDateGTE))
	}
	if i.DueDateLT != nil {
		predicates = append(predicates, project.DueDateLT(*i.DueDateLT))
	}
	if i.DueDateLTE != nil {
		predicates = append(predicates, project.DueDateLTE(*i.DueDateLTE))
	}
	if i.DueDateIsNil {
		predicates = append(predicates, project.DueDateIsNil())
	}
	if i.DueDateNotNil {
		predicates = append(predicates, project.DueDateNotNil())
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, project.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, project.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, project.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, project.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, project.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, project.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, project.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, project.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, project.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, project.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, project.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, project.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, project.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, project.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, project.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, project.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := project.HasWorkspace()
		if !*i.HasWorkspace {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasWorkspaceWith(with...))
	}
	if i.HasProjectBaseColor != nil {
		p := project.HasProjectBaseColor()
		if !*i.HasProjectBaseColor {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectBaseColorWith) > 0 {
		with := make([]predicate.ProjectBaseColor, 0, len(i.HasProjectBaseColorWith))
		for _, w := range i.HasProjectBaseColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectBaseColorWith(with...))
	}
	if i.HasProjectLightColor != nil {
		p := project.HasProjectLightColor()
		if !*i.HasProjectLightColor {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectLightColorWith) > 0 {
		with := make([]predicate.ProjectLightColor, 0, len(i.HasProjectLightColorWith))
		for _, w := range i.HasProjectLightColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectLightColorWith(with...))
	}
	if i.HasProjectIcon != nil {
		p := project.HasProjectIcon()
		if !*i.HasProjectIcon {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectIconWith) > 0 {
		with := make([]predicate.ProjectIcon, 0, len(i.HasProjectIconWith))
		for _, w := range i.HasProjectIconWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectIconWith(with...))
	}
	if i.HasTeammate != nil {
		p := project.HasTeammate()
		if !*i.HasTeammate {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasTeammateWith(with...))
	}
	if i.HasProjectTeammates != nil {
		p := project.HasProjectTeammates()
		if !*i.HasProjectTeammates {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTeammatesWith) > 0 {
		with := make([]predicate.ProjectTeammate, 0, len(i.HasProjectTeammatesWith))
		for _, w := range i.HasProjectTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTeammatesWith(with...))
	}
	if i.HasFavoriteProjects != nil {
		p := project.HasFavoriteProjects()
		if !*i.HasFavoriteProjects {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteProjectsWith) > 0 {
		with := make([]predicate.FavoriteProject, 0, len(i.HasFavoriteProjectsWith))
		for _, w := range i.HasFavoriteProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasFavoriteProjectsWith(with...))
	}
	if i.HasProjectTaskColumns != nil {
		p := project.HasProjectTaskColumns()
		if !*i.HasProjectTaskColumns {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskColumnsWith) > 0 {
		with := make([]predicate.ProjectTaskColumn, 0, len(i.HasProjectTaskColumnsWith))
		for _, w := range i.HasProjectTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTaskColumnsWith(with...))
	}
	if i.HasProjectTaskListStatuses != nil {
		p := project.HasProjectTaskListStatuses()
		if !*i.HasProjectTaskListStatuses {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskListStatusesWith) > 0 {
		with := make([]predicate.ProjectTaskListStatus, 0, len(i.HasProjectTaskListStatusesWith))
		for _, w := range i.HasProjectTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTaskListStatusesWith(with...))
	}
	if i.HasProjectTaskSections != nil {
		p := project.HasProjectTaskSections()
		if !*i.HasProjectTaskSections {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskSectionsWith) > 0 {
		with := make([]predicate.ProjectTaskSection, 0, len(i.HasProjectTaskSectionsWith))
		for _, w := range i.HasProjectTaskSectionsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTaskSectionsWith(with...))
	}
	if i.HasProjectTasks != nil {
		p := project.HasProjectTasks()
		if !*i.HasProjectTasks {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTasksWith) > 0 {
		with := make([]predicate.ProjectTask, 0, len(i.HasProjectTasksWith))
		for _, w := range i.HasProjectTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasProjectTasksWith(with...))
	}
	if i.HasTaskFiles != nil {
		p := project.HasTaskFiles()
		if !*i.HasTaskFiles {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFilesWith) > 0 {
		with := make([]predicate.TaskFile, 0, len(i.HasTaskFilesWith))
		for _, w := range i.HasTaskFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasTaskFilesWith(with...))
	}
	if i.HasWorkspaceActivities != nil {
		p := project.HasWorkspaceActivities()
		if !*i.HasWorkspaceActivities {
			p = project.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceActivitiesWith) > 0 {
		with := make([]predicate.WorkspaceActivity, 0, len(i.HasWorkspaceActivitiesWith))
		for _, w := range i.HasWorkspaceActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, project.HasWorkspaceActivitiesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return project.And(predicates...), nil
	}
}

// ProjectBaseColorWhereInput represents a where input for filtering ProjectBaseColor queries.
type ProjectBaseColorWhereInput struct {
	Not *ProjectBaseColorWhereInput   `json:"not,omitempty"`
	Or  []*ProjectBaseColorWhereInput `json:"or,omitempty"`
	And []*ProjectBaseColorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "color_id" field predicates.
	ColorID             *ulid.ID  `json:"colorID,omitempty"`
	ColorIDNEQ          *ulid.ID  `json:"colorIDNEQ,omitempty"`
	ColorIDIn           []ulid.ID `json:"colorIDIn,omitempty"`
	ColorIDNotIn        []ulid.ID `json:"colorIDNotIn,omitempty"`
	ColorIDGT           *ulid.ID  `json:"colorIDGT,omitempty"`
	ColorIDGTE          *ulid.ID  `json:"colorIDGTE,omitempty"`
	ColorIDLT           *ulid.ID  `json:"colorIDLT,omitempty"`
	ColorIDLTE          *ulid.ID  `json:"colorIDLTE,omitempty"`
	ColorIDContains     *ulid.ID  `json:"colorIDContains,omitempty"`
	ColorIDHasPrefix    *ulid.ID  `json:"colorIDHasPrefix,omitempty"`
	ColorIDHasSuffix    *ulid.ID  `json:"colorIDHasSuffix,omitempty"`
	ColorIDEqualFold    *ulid.ID  `json:"colorIDEqualFold,omitempty"`
	ColorIDContainsFold *ulid.ID  `json:"colorIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "color" edge predicates.
	HasColor     *bool              `json:"hasColor,omitempty"`
	HasColorWith []*ColorWhereInput `json:"hasColorWith,omitempty"`
}

// Filter applies the ProjectBaseColorWhereInput filter on the ProjectBaseColorQuery builder.
func (i *ProjectBaseColorWhereInput) Filter(q *ProjectBaseColorQuery) (*ProjectBaseColorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projectbasecolors.
// An error is returned if the input is empty or invalid.
func (i *ProjectBaseColorWhereInput) P() (predicate.ProjectBaseColor, error) {
	var predicates []predicate.ProjectBaseColor
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projectbasecolor.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectBaseColor, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectbasecolor.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectBaseColor, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectbasecolor.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projectbasecolor.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectbasecolor.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectbasecolor.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectbasecolor.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectbasecolor.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectbasecolor.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectbasecolor.IDLTE(*i.IDLTE))
	}
	if i.ColorID != nil {
		predicates = append(predicates, projectbasecolor.ColorIDEQ(*i.ColorID))
	}
	if i.ColorIDNEQ != nil {
		predicates = append(predicates, projectbasecolor.ColorIDNEQ(*i.ColorIDNEQ))
	}
	if len(i.ColorIDIn) > 0 {
		predicates = append(predicates, projectbasecolor.ColorIDIn(i.ColorIDIn...))
	}
	if len(i.ColorIDNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.ColorIDNotIn(i.ColorIDNotIn...))
	}
	if i.ColorIDGT != nil {
		predicates = append(predicates, projectbasecolor.ColorIDGT(*i.ColorIDGT))
	}
	if i.ColorIDGTE != nil {
		predicates = append(predicates, projectbasecolor.ColorIDGTE(*i.ColorIDGTE))
	}
	if i.ColorIDLT != nil {
		predicates = append(predicates, projectbasecolor.ColorIDLT(*i.ColorIDLT))
	}
	if i.ColorIDLTE != nil {
		predicates = append(predicates, projectbasecolor.ColorIDLTE(*i.ColorIDLTE))
	}
	if i.ColorIDContains != nil {
		predicates = append(predicates, projectbasecolor.ColorIDContains(*i.ColorIDContains))
	}
	if i.ColorIDHasPrefix != nil {
		predicates = append(predicates, projectbasecolor.ColorIDHasPrefix(*i.ColorIDHasPrefix))
	}
	if i.ColorIDHasSuffix != nil {
		predicates = append(predicates, projectbasecolor.ColorIDHasSuffix(*i.ColorIDHasSuffix))
	}
	if i.ColorIDEqualFold != nil {
		predicates = append(predicates, projectbasecolor.ColorIDEqualFold(*i.ColorIDEqualFold))
	}
	if i.ColorIDContainsFold != nil {
		predicates = append(predicates, projectbasecolor.ColorIDContainsFold(*i.ColorIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectbasecolor.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectbasecolor.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectbasecolor.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectbasecolor.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectbasecolor.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjects != nil {
		p := projectbasecolor.HasProjects()
		if !*i.HasProjects {
			p = projectbasecolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectbasecolor.HasProjectsWith(with...))
	}
	if i.HasColor != nil {
		p := projectbasecolor.HasColor()
		if !*i.HasColor {
			p = projectbasecolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasColorWith) > 0 {
		with := make([]predicate.Color, 0, len(i.HasColorWith))
		for _, w := range i.HasColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectbasecolor.HasColorWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectBaseColorWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projectbasecolor.And(predicates...), nil
	}
}

// ProjectIconWhereInput represents a where input for filtering ProjectIcon queries.
type ProjectIconWhereInput struct {
	Not *ProjectIconWhereInput   `json:"not,omitempty"`
	Or  []*ProjectIconWhereInput `json:"or,omitempty"`
	And []*ProjectIconWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "icon_id" field predicates.
	IconID             *ulid.ID  `json:"iconID,omitempty"`
	IconIDNEQ          *ulid.ID  `json:"iconIDNEQ,omitempty"`
	IconIDIn           []ulid.ID `json:"iconIDIn,omitempty"`
	IconIDNotIn        []ulid.ID `json:"iconIDNotIn,omitempty"`
	IconIDGT           *ulid.ID  `json:"iconIDGT,omitempty"`
	IconIDGTE          *ulid.ID  `json:"iconIDGTE,omitempty"`
	IconIDLT           *ulid.ID  `json:"iconIDLT,omitempty"`
	IconIDLTE          *ulid.ID  `json:"iconIDLTE,omitempty"`
	IconIDContains     *ulid.ID  `json:"iconIDContains,omitempty"`
	IconIDHasPrefix    *ulid.ID  `json:"iconIDHasPrefix,omitempty"`
	IconIDHasSuffix    *ulid.ID  `json:"iconIDHasSuffix,omitempty"`
	IconIDEqualFold    *ulid.ID  `json:"iconIDEqualFold,omitempty"`
	IconIDContainsFold *ulid.ID  `json:"iconIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "icon" edge predicates.
	HasIcon     *bool             `json:"hasIcon,omitempty"`
	HasIconWith []*IconWhereInput `json:"hasIconWith,omitempty"`
}

// Filter applies the ProjectIconWhereInput filter on the ProjectIconQuery builder.
func (i *ProjectIconWhereInput) Filter(q *ProjectIconQuery) (*ProjectIconQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecticons.
// An error is returned if the input is empty or invalid.
func (i *ProjectIconWhereInput) P() (predicate.ProjectIcon, error) {
	var predicates []predicate.ProjectIcon
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecticon.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectIcon, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecticon.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectIcon, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecticon.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecticon.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecticon.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecticon.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecticon.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecticon.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecticon.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecticon.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecticon.IDLTE(*i.IDLTE))
	}
	if i.IconID != nil {
		predicates = append(predicates, projecticon.IconIDEQ(*i.IconID))
	}
	if i.IconIDNEQ != nil {
		predicates = append(predicates, projecticon.IconIDNEQ(*i.IconIDNEQ))
	}
	if len(i.IconIDIn) > 0 {
		predicates = append(predicates, projecticon.IconIDIn(i.IconIDIn...))
	}
	if len(i.IconIDNotIn) > 0 {
		predicates = append(predicates, projecticon.IconIDNotIn(i.IconIDNotIn...))
	}
	if i.IconIDGT != nil {
		predicates = append(predicates, projecticon.IconIDGT(*i.IconIDGT))
	}
	if i.IconIDGTE != nil {
		predicates = append(predicates, projecticon.IconIDGTE(*i.IconIDGTE))
	}
	if i.IconIDLT != nil {
		predicates = append(predicates, projecticon.IconIDLT(*i.IconIDLT))
	}
	if i.IconIDLTE != nil {
		predicates = append(predicates, projecticon.IconIDLTE(*i.IconIDLTE))
	}
	if i.IconIDContains != nil {
		predicates = append(predicates, projecticon.IconIDContains(*i.IconIDContains))
	}
	if i.IconIDHasPrefix != nil {
		predicates = append(predicates, projecticon.IconIDHasPrefix(*i.IconIDHasPrefix))
	}
	if i.IconIDHasSuffix != nil {
		predicates = append(predicates, projecticon.IconIDHasSuffix(*i.IconIDHasSuffix))
	}
	if i.IconIDEqualFold != nil {
		predicates = append(predicates, projecticon.IconIDEqualFold(*i.IconIDEqualFold))
	}
	if i.IconIDContainsFold != nil {
		predicates = append(predicates, projecticon.IconIDContainsFold(*i.IconIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecticon.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecticon.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecticon.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecticon.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecticon.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecticon.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecticon.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecticon.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecticon.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecticon.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecticon.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecticon.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecticon.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecticon.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecticon.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecticon.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjects != nil {
		p := projecticon.HasProjects()
		if !*i.HasProjects {
			p = projecticon.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecticon.HasProjectsWith(with...))
	}
	if i.HasIcon != nil {
		p := projecticon.HasIcon()
		if !*i.HasIcon {
			p = projecticon.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIconWith) > 0 {
		with := make([]predicate.Icon, 0, len(i.HasIconWith))
		for _, w := range i.HasIconWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecticon.HasIconWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectIconWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecticon.And(predicates...), nil
	}
}

// ProjectLightColorWhereInput represents a where input for filtering ProjectLightColor queries.
type ProjectLightColorWhereInput struct {
	Not *ProjectLightColorWhereInput   `json:"not,omitempty"`
	Or  []*ProjectLightColorWhereInput `json:"or,omitempty"`
	And []*ProjectLightColorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "color_id" field predicates.
	ColorID             *ulid.ID  `json:"colorID,omitempty"`
	ColorIDNEQ          *ulid.ID  `json:"colorIDNEQ,omitempty"`
	ColorIDIn           []ulid.ID `json:"colorIDIn,omitempty"`
	ColorIDNotIn        []ulid.ID `json:"colorIDNotIn,omitempty"`
	ColorIDGT           *ulid.ID  `json:"colorIDGT,omitempty"`
	ColorIDGTE          *ulid.ID  `json:"colorIDGTE,omitempty"`
	ColorIDLT           *ulid.ID  `json:"colorIDLT,omitempty"`
	ColorIDLTE          *ulid.ID  `json:"colorIDLTE,omitempty"`
	ColorIDContains     *ulid.ID  `json:"colorIDContains,omitempty"`
	ColorIDHasPrefix    *ulid.ID  `json:"colorIDHasPrefix,omitempty"`
	ColorIDHasSuffix    *ulid.ID  `json:"colorIDHasSuffix,omitempty"`
	ColorIDEqualFold    *ulid.ID  `json:"colorIDEqualFold,omitempty"`
	ColorIDContainsFold *ulid.ID  `json:"colorIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "color" edge predicates.
	HasColor     *bool              `json:"hasColor,omitempty"`
	HasColorWith []*ColorWhereInput `json:"hasColorWith,omitempty"`
}

// Filter applies the ProjectLightColorWhereInput filter on the ProjectLightColorQuery builder.
func (i *ProjectLightColorWhereInput) Filter(q *ProjectLightColorQuery) (*ProjectLightColorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projectlightcolors.
// An error is returned if the input is empty or invalid.
func (i *ProjectLightColorWhereInput) P() (predicate.ProjectLightColor, error) {
	var predicates []predicate.ProjectLightColor
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projectlightcolor.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectLightColor, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectlightcolor.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectLightColor, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectlightcolor.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projectlightcolor.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectlightcolor.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectlightcolor.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectlightcolor.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectlightcolor.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectlightcolor.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectlightcolor.IDLTE(*i.IDLTE))
	}
	if i.ColorID != nil {
		predicates = append(predicates, projectlightcolor.ColorIDEQ(*i.ColorID))
	}
	if i.ColorIDNEQ != nil {
		predicates = append(predicates, projectlightcolor.ColorIDNEQ(*i.ColorIDNEQ))
	}
	if len(i.ColorIDIn) > 0 {
		predicates = append(predicates, projectlightcolor.ColorIDIn(i.ColorIDIn...))
	}
	if len(i.ColorIDNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.ColorIDNotIn(i.ColorIDNotIn...))
	}
	if i.ColorIDGT != nil {
		predicates = append(predicates, projectlightcolor.ColorIDGT(*i.ColorIDGT))
	}
	if i.ColorIDGTE != nil {
		predicates = append(predicates, projectlightcolor.ColorIDGTE(*i.ColorIDGTE))
	}
	if i.ColorIDLT != nil {
		predicates = append(predicates, projectlightcolor.ColorIDLT(*i.ColorIDLT))
	}
	if i.ColorIDLTE != nil {
		predicates = append(predicates, projectlightcolor.ColorIDLTE(*i.ColorIDLTE))
	}
	if i.ColorIDContains != nil {
		predicates = append(predicates, projectlightcolor.ColorIDContains(*i.ColorIDContains))
	}
	if i.ColorIDHasPrefix != nil {
		predicates = append(predicates, projectlightcolor.ColorIDHasPrefix(*i.ColorIDHasPrefix))
	}
	if i.ColorIDHasSuffix != nil {
		predicates = append(predicates, projectlightcolor.ColorIDHasSuffix(*i.ColorIDHasSuffix))
	}
	if i.ColorIDEqualFold != nil {
		predicates = append(predicates, projectlightcolor.ColorIDEqualFold(*i.ColorIDEqualFold))
	}
	if i.ColorIDContainsFold != nil {
		predicates = append(predicates, projectlightcolor.ColorIDContainsFold(*i.ColorIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectlightcolor.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectlightcolor.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectlightcolor.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectlightcolor.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectlightcolor.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProjects != nil {
		p := projectlightcolor.HasProjects()
		if !*i.HasProjects {
			p = projectlightcolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectlightcolor.HasProjectsWith(with...))
	}
	if i.HasColor != nil {
		p := projectlightcolor.HasColor()
		if !*i.HasColor {
			p = projectlightcolor.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasColorWith) > 0 {
		with := make([]predicate.Color, 0, len(i.HasColorWith))
		for _, w := range i.HasColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectlightcolor.HasColorWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectLightColorWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projectlightcolor.And(predicates...), nil
	}
}

// ProjectTaskWhereInput represents a where input for filtering ProjectTask queries.
type ProjectTaskWhereInput struct {
	Not *ProjectTaskWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTaskWhereInput `json:"or,omitempty"`
	And []*ProjectTaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "project_task_section_id" field predicates.
	ProjectTaskSectionID             *ulid.ID  `json:"projectTaskSectionID,omitempty"`
	ProjectTaskSectionIDNEQ          *ulid.ID  `json:"projectTaskSectionIDNEQ,omitempty"`
	ProjectTaskSectionIDIn           []ulid.ID `json:"projectTaskSectionIDIn,omitempty"`
	ProjectTaskSectionIDNotIn        []ulid.ID `json:"projectTaskSectionIDNotIn,omitempty"`
	ProjectTaskSectionIDGT           *ulid.ID  `json:"projectTaskSectionIDGT,omitempty"`
	ProjectTaskSectionIDGTE          *ulid.ID  `json:"projectTaskSectionIDGTE,omitempty"`
	ProjectTaskSectionIDLT           *ulid.ID  `json:"projectTaskSectionIDLT,omitempty"`
	ProjectTaskSectionIDLTE          *ulid.ID  `json:"projectTaskSectionIDLTE,omitempty"`
	ProjectTaskSectionIDContains     *ulid.ID  `json:"projectTaskSectionIDContains,omitempty"`
	ProjectTaskSectionIDHasPrefix    *ulid.ID  `json:"projectTaskSectionIDHasPrefix,omitempty"`
	ProjectTaskSectionIDHasSuffix    *ulid.ID  `json:"projectTaskSectionIDHasSuffix,omitempty"`
	ProjectTaskSectionIDEqualFold    *ulid.ID  `json:"projectTaskSectionIDEqualFold,omitempty"`
	ProjectTaskSectionIDContainsFold *ulid.ID  `json:"projectTaskSectionIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "projectTaskSection" edge predicates.
	HasProjectTaskSection     *bool                           `json:"hasProjectTaskSection,omitempty"`
	HasProjectTaskSectionWith []*ProjectTaskSectionWhereInput `json:"hasProjectTaskSectionWith,omitempty"`
}

// Filter applies the ProjectTaskWhereInput filter on the ProjectTaskQuery builder.
func (i *ProjectTaskWhereInput) Filter(q *ProjectTaskQuery) (*ProjectTaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecttasks.
// An error is returned if the input is empty or invalid.
func (i *ProjectTaskWhereInput) P() (predicate.ProjectTask, error) {
	var predicates []predicate.ProjectTask
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecttask.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTask, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecttask.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTask, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecttask.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecttask.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecttask.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecttask.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecttask.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecttask.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecttask.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecttask.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecttask.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projecttask.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projecttask.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projecttask.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projecttask.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projecttask.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projecttask.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projecttask.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projecttask.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projecttask.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projecttask.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projecttask.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projecttask.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projecttask.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TaskID != nil {
		predicates = append(predicates, projecttask.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, projecttask.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, projecttask.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, projecttask.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, projecttask.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, projecttask.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, projecttask.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, projecttask.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, projecttask.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, projecttask.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, projecttask.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, projecttask.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, projecttask.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.ProjectTaskSectionID != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDEQ(*i.ProjectTaskSectionID))
	}
	if i.ProjectTaskSectionIDNEQ != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDNEQ(*i.ProjectTaskSectionIDNEQ))
	}
	if len(i.ProjectTaskSectionIDIn) > 0 {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDIn(i.ProjectTaskSectionIDIn...))
	}
	if len(i.ProjectTaskSectionIDNotIn) > 0 {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDNotIn(i.ProjectTaskSectionIDNotIn...))
	}
	if i.ProjectTaskSectionIDGT != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDGT(*i.ProjectTaskSectionIDGT))
	}
	if i.ProjectTaskSectionIDGTE != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDGTE(*i.ProjectTaskSectionIDGTE))
	}
	if i.ProjectTaskSectionIDLT != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDLT(*i.ProjectTaskSectionIDLT))
	}
	if i.ProjectTaskSectionIDLTE != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDLTE(*i.ProjectTaskSectionIDLTE))
	}
	if i.ProjectTaskSectionIDContains != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDContains(*i.ProjectTaskSectionIDContains))
	}
	if i.ProjectTaskSectionIDHasPrefix != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDHasPrefix(*i.ProjectTaskSectionIDHasPrefix))
	}
	if i.ProjectTaskSectionIDHasSuffix != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDHasSuffix(*i.ProjectTaskSectionIDHasSuffix))
	}
	if i.ProjectTaskSectionIDEqualFold != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDEqualFold(*i.ProjectTaskSectionIDEqualFold))
	}
	if i.ProjectTaskSectionIDContainsFold != nil {
		predicates = append(predicates, projecttask.ProjectTaskSectionIDContainsFold(*i.ProjectTaskSectionIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecttask.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecttask.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecttask.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecttask.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecttask.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecttask.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecttask.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecttask.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecttask.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecttask.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecttask.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecttask.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecttask.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecttask.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecttask.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecttask.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projecttask.HasProject()
		if !*i.HasProject {
			p = projecttask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttask.HasProjectWith(with...))
	}
	if i.HasTask != nil {
		p := projecttask.HasTask()
		if !*i.HasTask {
			p = projecttask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttask.HasTaskWith(with...))
	}
	if i.HasProjectTaskSection != nil {
		p := projecttask.HasProjectTaskSection()
		if !*i.HasProjectTaskSection {
			p = projecttask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskSectionWith) > 0 {
		with := make([]predicate.ProjectTaskSection, 0, len(i.HasProjectTaskSectionWith))
		for _, w := range i.HasProjectTaskSectionWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttask.HasProjectTaskSectionWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecttask.And(predicates...), nil
	}
}

// ProjectTaskColumnWhereInput represents a where input for filtering ProjectTaskColumn queries.
type ProjectTaskColumnWhereInput struct {
	Not *ProjectTaskColumnWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTaskColumnWhereInput `json:"or,omitempty"`
	And []*ProjectTaskColumnWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "task_column_id" field predicates.
	TaskColumnID             *ulid.ID  `json:"taskColumnID,omitempty"`
	TaskColumnIDNEQ          *ulid.ID  `json:"taskColumnIDNEQ,omitempty"`
	TaskColumnIDIn           []ulid.ID `json:"taskColumnIDIn,omitempty"`
	TaskColumnIDNotIn        []ulid.ID `json:"taskColumnIDNotIn,omitempty"`
	TaskColumnIDGT           *ulid.ID  `json:"taskColumnIDGT,omitempty"`
	TaskColumnIDGTE          *ulid.ID  `json:"taskColumnIDGTE,omitempty"`
	TaskColumnIDLT           *ulid.ID  `json:"taskColumnIDLT,omitempty"`
	TaskColumnIDLTE          *ulid.ID  `json:"taskColumnIDLTE,omitempty"`
	TaskColumnIDContains     *ulid.ID  `json:"taskColumnIDContains,omitempty"`
	TaskColumnIDHasPrefix    *ulid.ID  `json:"taskColumnIDHasPrefix,omitempty"`
	TaskColumnIDHasSuffix    *ulid.ID  `json:"taskColumnIDHasSuffix,omitempty"`
	TaskColumnIDEqualFold    *ulid.ID  `json:"taskColumnIDEqualFold,omitempty"`
	TaskColumnIDContainsFold *ulid.ID  `json:"taskColumnIDContainsFold,omitempty"`

	// "width" field predicates.
	Width             *string  `json:"width,omitempty"`
	WidthNEQ          *string  `json:"widthNEQ,omitempty"`
	WidthIn           []string `json:"widthIn,omitempty"`
	WidthNotIn        []string `json:"widthNotIn,omitempty"`
	WidthGT           *string  `json:"widthGT,omitempty"`
	WidthGTE          *string  `json:"widthGTE,omitempty"`
	WidthLT           *string  `json:"widthLT,omitempty"`
	WidthLTE          *string  `json:"widthLTE,omitempty"`
	WidthContains     *string  `json:"widthContains,omitempty"`
	WidthHasPrefix    *string  `json:"widthHasPrefix,omitempty"`
	WidthHasSuffix    *string  `json:"widthHasSuffix,omitempty"`
	WidthEqualFold    *string  `json:"widthEqualFold,omitempty"`
	WidthContainsFold *string  `json:"widthContainsFold,omitempty"`

	// "disabled" field predicates.
	Disabled    *bool `json:"disabled,omitempty"`
	DisabledNEQ *bool `json:"disabledNEQ,omitempty"`

	// "customizable" field predicates.
	Customizable    *bool `json:"customizable,omitempty"`
	CustomizableNEQ *bool `json:"customizableNEQ,omitempty"`

	// "order" field predicates.
	Order      *int  `json:"order,omitempty"`
	OrderNEQ   *int  `json:"orderNEQ,omitempty"`
	OrderIn    []int `json:"orderIn,omitempty"`
	OrderNotIn []int `json:"orderNotIn,omitempty"`
	OrderGT    *int  `json:"orderGT,omitempty"`
	OrderGTE   *int  `json:"orderGTE,omitempty"`
	OrderLT    *int  `json:"orderLT,omitempty"`
	OrderLTE   *int  `json:"orderLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "taskColumn" edge predicates.
	HasTaskColumn     *bool                   `json:"hasTaskColumn,omitempty"`
	HasTaskColumnWith []*TaskColumnWhereInput `json:"hasTaskColumnWith,omitempty"`
}

// Filter applies the ProjectTaskColumnWhereInput filter on the ProjectTaskColumnQuery builder.
func (i *ProjectTaskColumnWhereInput) Filter(q *ProjectTaskColumnQuery) (*ProjectTaskColumnQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecttaskcolumns.
// An error is returned if the input is empty or invalid.
func (i *ProjectTaskColumnWhereInput) P() (predicate.ProjectTaskColumn, error) {
	var predicates []predicate.ProjectTaskColumn
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecttaskcolumn.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTaskColumn, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecttaskcolumn.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTaskColumn, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecttaskcolumn.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecttaskcolumn.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecttaskcolumn.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecttaskcolumn.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecttaskcolumn.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecttaskcolumn.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projecttaskcolumn.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TaskColumnID != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDEQ(*i.TaskColumnID))
	}
	if i.TaskColumnIDNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDNEQ(*i.TaskColumnIDNEQ))
	}
	if len(i.TaskColumnIDIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDIn(i.TaskColumnIDIn...))
	}
	if len(i.TaskColumnIDNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDNotIn(i.TaskColumnIDNotIn...))
	}
	if i.TaskColumnIDGT != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDGT(*i.TaskColumnIDGT))
	}
	if i.TaskColumnIDGTE != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDGTE(*i.TaskColumnIDGTE))
	}
	if i.TaskColumnIDLT != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDLT(*i.TaskColumnIDLT))
	}
	if i.TaskColumnIDLTE != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDLTE(*i.TaskColumnIDLTE))
	}
	if i.TaskColumnIDContains != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDContains(*i.TaskColumnIDContains))
	}
	if i.TaskColumnIDHasPrefix != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDHasPrefix(*i.TaskColumnIDHasPrefix))
	}
	if i.TaskColumnIDHasSuffix != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDHasSuffix(*i.TaskColumnIDHasSuffix))
	}
	if i.TaskColumnIDEqualFold != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDEqualFold(*i.TaskColumnIDEqualFold))
	}
	if i.TaskColumnIDContainsFold != nil {
		predicates = append(predicates, projecttaskcolumn.TaskColumnIDContainsFold(*i.TaskColumnIDContainsFold))
	}
	if i.Width != nil {
		predicates = append(predicates, projecttaskcolumn.WidthEQ(*i.Width))
	}
	if i.WidthNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.WidthNEQ(*i.WidthNEQ))
	}
	if len(i.WidthIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.WidthIn(i.WidthIn...))
	}
	if len(i.WidthNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.WidthNotIn(i.WidthNotIn...))
	}
	if i.WidthGT != nil {
		predicates = append(predicates, projecttaskcolumn.WidthGT(*i.WidthGT))
	}
	if i.WidthGTE != nil {
		predicates = append(predicates, projecttaskcolumn.WidthGTE(*i.WidthGTE))
	}
	if i.WidthLT != nil {
		predicates = append(predicates, projecttaskcolumn.WidthLT(*i.WidthLT))
	}
	if i.WidthLTE != nil {
		predicates = append(predicates, projecttaskcolumn.WidthLTE(*i.WidthLTE))
	}
	if i.WidthContains != nil {
		predicates = append(predicates, projecttaskcolumn.WidthContains(*i.WidthContains))
	}
	if i.WidthHasPrefix != nil {
		predicates = append(predicates, projecttaskcolumn.WidthHasPrefix(*i.WidthHasPrefix))
	}
	if i.WidthHasSuffix != nil {
		predicates = append(predicates, projecttaskcolumn.WidthHasSuffix(*i.WidthHasSuffix))
	}
	if i.WidthEqualFold != nil {
		predicates = append(predicates, projecttaskcolumn.WidthEqualFold(*i.WidthEqualFold))
	}
	if i.WidthContainsFold != nil {
		predicates = append(predicates, projecttaskcolumn.WidthContainsFold(*i.WidthContainsFold))
	}
	if i.Disabled != nil {
		predicates = append(predicates, projecttaskcolumn.DisabledEQ(*i.Disabled))
	}
	if i.DisabledNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.DisabledNEQ(*i.DisabledNEQ))
	}
	if i.Customizable != nil {
		predicates = append(predicates, projecttaskcolumn.CustomizableEQ(*i.Customizable))
	}
	if i.CustomizableNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.CustomizableNEQ(*i.CustomizableNEQ))
	}
	if i.Order != nil {
		predicates = append(predicates, projecttaskcolumn.OrderEQ(*i.Order))
	}
	if i.OrderNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.OrderNEQ(*i.OrderNEQ))
	}
	if len(i.OrderIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.OrderIn(i.OrderIn...))
	}
	if len(i.OrderNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.OrderNotIn(i.OrderNotIn...))
	}
	if i.OrderGT != nil {
		predicates = append(predicates, projecttaskcolumn.OrderGT(*i.OrderGT))
	}
	if i.OrderGTE != nil {
		predicates = append(predicates, projecttaskcolumn.OrderGTE(*i.OrderGTE))
	}
	if i.OrderLT != nil {
		predicates = append(predicates, projecttaskcolumn.OrderLT(*i.OrderLT))
	}
	if i.OrderLTE != nil {
		predicates = append(predicates, projecttaskcolumn.OrderLTE(*i.OrderLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecttaskcolumn.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecttaskcolumn.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projecttaskcolumn.HasProject()
		if !*i.HasProject {
			p = projecttaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskcolumn.HasProjectWith(with...))
	}
	if i.HasTaskColumn != nil {
		p := projecttaskcolumn.HasTaskColumn()
		if !*i.HasTaskColumn {
			p = projecttaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskColumnWith) > 0 {
		with := make([]predicate.TaskColumn, 0, len(i.HasTaskColumnWith))
		for _, w := range i.HasTaskColumnWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskcolumn.HasTaskColumnWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTaskColumnWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecttaskcolumn.And(predicates...), nil
	}
}

// ProjectTaskListStatusWhereInput represents a where input for filtering ProjectTaskListStatus queries.
type ProjectTaskListStatusWhereInput struct {
	Not *ProjectTaskListStatusWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTaskListStatusWhereInput `json:"or,omitempty"`
	And []*ProjectTaskListStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "task_list_completed_status_id" field predicates.
	TaskListCompletedStatusID             *ulid.ID  `json:"taskListCompletedStatusID,omitempty"`
	TaskListCompletedStatusIDNEQ          *ulid.ID  `json:"taskListCompletedStatusIDNEQ,omitempty"`
	TaskListCompletedStatusIDIn           []ulid.ID `json:"taskListCompletedStatusIDIn,omitempty"`
	TaskListCompletedStatusIDNotIn        []ulid.ID `json:"taskListCompletedStatusIDNotIn,omitempty"`
	TaskListCompletedStatusIDGT           *ulid.ID  `json:"taskListCompletedStatusIDGT,omitempty"`
	TaskListCompletedStatusIDGTE          *ulid.ID  `json:"taskListCompletedStatusIDGTE,omitempty"`
	TaskListCompletedStatusIDLT           *ulid.ID  `json:"taskListCompletedStatusIDLT,omitempty"`
	TaskListCompletedStatusIDLTE          *ulid.ID  `json:"taskListCompletedStatusIDLTE,omitempty"`
	TaskListCompletedStatusIDContains     *ulid.ID  `json:"taskListCompletedStatusIDContains,omitempty"`
	TaskListCompletedStatusIDHasPrefix    *ulid.ID  `json:"taskListCompletedStatusIDHasPrefix,omitempty"`
	TaskListCompletedStatusIDHasSuffix    *ulid.ID  `json:"taskListCompletedStatusIDHasSuffix,omitempty"`
	TaskListCompletedStatusIDEqualFold    *ulid.ID  `json:"taskListCompletedStatusIDEqualFold,omitempty"`
	TaskListCompletedStatusIDContainsFold *ulid.ID  `json:"taskListCompletedStatusIDContainsFold,omitempty"`

	// "task_list_sort_status_id" field predicates.
	TaskListSortStatusID             *ulid.ID  `json:"taskListSortStatusID,omitempty"`
	TaskListSortStatusIDNEQ          *ulid.ID  `json:"taskListSortStatusIDNEQ,omitempty"`
	TaskListSortStatusIDIn           []ulid.ID `json:"taskListSortStatusIDIn,omitempty"`
	TaskListSortStatusIDNotIn        []ulid.ID `json:"taskListSortStatusIDNotIn,omitempty"`
	TaskListSortStatusIDGT           *ulid.ID  `json:"taskListSortStatusIDGT,omitempty"`
	TaskListSortStatusIDGTE          *ulid.ID  `json:"taskListSortStatusIDGTE,omitempty"`
	TaskListSortStatusIDLT           *ulid.ID  `json:"taskListSortStatusIDLT,omitempty"`
	TaskListSortStatusIDLTE          *ulid.ID  `json:"taskListSortStatusIDLTE,omitempty"`
	TaskListSortStatusIDContains     *ulid.ID  `json:"taskListSortStatusIDContains,omitempty"`
	TaskListSortStatusIDHasPrefix    *ulid.ID  `json:"taskListSortStatusIDHasPrefix,omitempty"`
	TaskListSortStatusIDHasSuffix    *ulid.ID  `json:"taskListSortStatusIDHasSuffix,omitempty"`
	TaskListSortStatusIDEqualFold    *ulid.ID  `json:"taskListSortStatusIDEqualFold,omitempty"`
	TaskListSortStatusIDContainsFold *ulid.ID  `json:"taskListSortStatusIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "taskListCompletedStatus" edge predicates.
	HasTaskListCompletedStatus     *bool                                `json:"hasTaskListCompletedStatus,omitempty"`
	HasTaskListCompletedStatusWith []*TaskListCompletedStatusWhereInput `json:"hasTaskListCompletedStatusWith,omitempty"`

	// "taskListSortStatus" edge predicates.
	HasTaskListSortStatus     *bool                           `json:"hasTaskListSortStatus,omitempty"`
	HasTaskListSortStatusWith []*TaskListSortStatusWhereInput `json:"hasTaskListSortStatusWith,omitempty"`
}

// Filter applies the ProjectTaskListStatusWhereInput filter on the ProjectTaskListStatusQuery builder.
func (i *ProjectTaskListStatusWhereInput) Filter(q *ProjectTaskListStatusQuery) (*ProjectTaskListStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecttaskliststatusslice.
// An error is returned if the input is empty or invalid.
func (i *ProjectTaskListStatusWhereInput) P() (predicate.ProjectTaskListStatus, error) {
	var predicates []predicate.ProjectTaskListStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecttaskliststatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTaskListStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecttaskliststatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTaskListStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecttaskliststatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecttaskliststatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecttaskliststatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecttaskliststatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projecttaskliststatus.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TaskListCompletedStatusID != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDEQ(*i.TaskListCompletedStatusID))
	}
	if i.TaskListCompletedStatusIDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDNEQ(*i.TaskListCompletedStatusIDNEQ))
	}
	if len(i.TaskListCompletedStatusIDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDIn(i.TaskListCompletedStatusIDIn...))
	}
	if len(i.TaskListCompletedStatusIDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDNotIn(i.TaskListCompletedStatusIDNotIn...))
	}
	if i.TaskListCompletedStatusIDGT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDGT(*i.TaskListCompletedStatusIDGT))
	}
	if i.TaskListCompletedStatusIDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDGTE(*i.TaskListCompletedStatusIDGTE))
	}
	if i.TaskListCompletedStatusIDLT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDLT(*i.TaskListCompletedStatusIDLT))
	}
	if i.TaskListCompletedStatusIDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDLTE(*i.TaskListCompletedStatusIDLTE))
	}
	if i.TaskListCompletedStatusIDContains != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDContains(*i.TaskListCompletedStatusIDContains))
	}
	if i.TaskListCompletedStatusIDHasPrefix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDHasPrefix(*i.TaskListCompletedStatusIDHasPrefix))
	}
	if i.TaskListCompletedStatusIDHasSuffix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDHasSuffix(*i.TaskListCompletedStatusIDHasSuffix))
	}
	if i.TaskListCompletedStatusIDEqualFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDEqualFold(*i.TaskListCompletedStatusIDEqualFold))
	}
	if i.TaskListCompletedStatusIDContainsFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListCompletedStatusIDContainsFold(*i.TaskListCompletedStatusIDContainsFold))
	}
	if i.TaskListSortStatusID != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDEQ(*i.TaskListSortStatusID))
	}
	if i.TaskListSortStatusIDNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDNEQ(*i.TaskListSortStatusIDNEQ))
	}
	if len(i.TaskListSortStatusIDIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDIn(i.TaskListSortStatusIDIn...))
	}
	if len(i.TaskListSortStatusIDNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDNotIn(i.TaskListSortStatusIDNotIn...))
	}
	if i.TaskListSortStatusIDGT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDGT(*i.TaskListSortStatusIDGT))
	}
	if i.TaskListSortStatusIDGTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDGTE(*i.TaskListSortStatusIDGTE))
	}
	if i.TaskListSortStatusIDLT != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDLT(*i.TaskListSortStatusIDLT))
	}
	if i.TaskListSortStatusIDLTE != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDLTE(*i.TaskListSortStatusIDLTE))
	}
	if i.TaskListSortStatusIDContains != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDContains(*i.TaskListSortStatusIDContains))
	}
	if i.TaskListSortStatusIDHasPrefix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDHasPrefix(*i.TaskListSortStatusIDHasPrefix))
	}
	if i.TaskListSortStatusIDHasSuffix != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDHasSuffix(*i.TaskListSortStatusIDHasSuffix))
	}
	if i.TaskListSortStatusIDEqualFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDEqualFold(*i.TaskListSortStatusIDEqualFold))
	}
	if i.TaskListSortStatusIDContainsFold != nil {
		predicates = append(predicates, projecttaskliststatus.TaskListSortStatusIDContainsFold(*i.TaskListSortStatusIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecttaskliststatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecttaskliststatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projecttaskliststatus.HasProject()
		if !*i.HasProject {
			p = projecttaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskliststatus.HasProjectWith(with...))
	}
	if i.HasTaskListCompletedStatus != nil {
		p := projecttaskliststatus.HasTaskListCompletedStatus()
		if !*i.HasTaskListCompletedStatus {
			p = projecttaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListCompletedStatusWith) > 0 {
		with := make([]predicate.TaskListCompletedStatus, 0, len(i.HasTaskListCompletedStatusWith))
		for _, w := range i.HasTaskListCompletedStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskliststatus.HasTaskListCompletedStatusWith(with...))
	}
	if i.HasTaskListSortStatus != nil {
		p := projecttaskliststatus.HasTaskListSortStatus()
		if !*i.HasTaskListSortStatus {
			p = projecttaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListSortStatusWith) > 0 {
		with := make([]predicate.TaskListSortStatus, 0, len(i.HasTaskListSortStatusWith))
		for _, w := range i.HasTaskListSortStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttaskliststatus.HasTaskListSortStatusWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTaskListStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecttaskliststatus.And(predicates...), nil
	}
}

// ProjectTaskSectionWhereInput represents a where input for filtering ProjectTaskSection queries.
type ProjectTaskSectionWhereInput struct {
	Not *ProjectTaskSectionWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTaskSectionWhereInput `json:"or,omitempty"`
	And []*ProjectTaskSectionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "projectTasks" edge predicates.
	HasProjectTasks     *bool                    `json:"hasProjectTasks,omitempty"`
	HasProjectTasksWith []*ProjectTaskWhereInput `json:"hasProjectTasksWith,omitempty"`
}

// Filter applies the ProjectTaskSectionWhereInput filter on the ProjectTaskSectionQuery builder.
func (i *ProjectTaskSectionWhereInput) Filter(q *ProjectTaskSectionQuery) (*ProjectTaskSectionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projecttasksections.
// An error is returned if the input is empty or invalid.
func (i *ProjectTaskSectionWhereInput) P() (predicate.ProjectTaskSection, error) {
	var predicates []predicate.ProjectTaskSection
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projecttasksection.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTaskSection, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projecttasksection.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTaskSection, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projecttasksection.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projecttasksection.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projecttasksection.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projecttasksection.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projecttasksection.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projecttasksection.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projecttasksection.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projecttasksection.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projecttasksection.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projecttasksection.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projecttasksection.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projecttasksection.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projecttasksection.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projecttasksection.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projecttasksection.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projecttasksection.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projecttasksection.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projecttasksection.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projecttasksection.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projecttasksection.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projecttasksection.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projecttasksection.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, projecttasksection.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, projecttasksection.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, projecttasksection.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, projecttasksection.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, projecttasksection.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, projecttasksection.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, projecttasksection.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, projecttasksection.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, projecttasksection.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, projecttasksection.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, projecttasksection.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, projecttasksection.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, projecttasksection.NameContainsFold(*i.NameContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projecttasksection.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projecttasksection.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projecttasksection.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projecttasksection.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projecttasksection.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projecttasksection.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projecttasksection.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projecttasksection.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projecttasksection.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projecttasksection.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projecttasksection.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projecttasksection.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projecttasksection.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projecttasksection.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projecttasksection.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projecttasksection.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projecttasksection.HasProject()
		if !*i.HasProject {
			p = projecttasksection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttasksection.HasProjectWith(with...))
	}
	if i.HasProjectTasks != nil {
		p := projecttasksection.HasProjectTasks()
		if !*i.HasProjectTasks {
			p = projecttasksection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTasksWith) > 0 {
		with := make([]predicate.ProjectTask, 0, len(i.HasProjectTasksWith))
		for _, w := range i.HasProjectTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projecttasksection.HasProjectTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTaskSectionWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projecttasksection.And(predicates...), nil
	}
}

// ProjectTeammateWhereInput represents a where input for filtering ProjectTeammate queries.
type ProjectTeammateWhereInput struct {
	Not *ProjectTeammateWhereInput   `json:"not,omitempty"`
	Or  []*ProjectTeammateWhereInput `json:"or,omitempty"`
	And []*ProjectTeammateWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "role" field predicates.
	Role             *string  `json:"role,omitempty"`
	RoleNEQ          *string  `json:"roleNEQ,omitempty"`
	RoleIn           []string `json:"roleIn,omitempty"`
	RoleNotIn        []string `json:"roleNotIn,omitempty"`
	RoleGT           *string  `json:"roleGT,omitempty"`
	RoleGTE          *string  `json:"roleGTE,omitempty"`
	RoleLT           *string  `json:"roleLT,omitempty"`
	RoleLTE          *string  `json:"roleLTE,omitempty"`
	RoleContains     *string  `json:"roleContains,omitempty"`
	RoleHasPrefix    *string  `json:"roleHasPrefix,omitempty"`
	RoleHasSuffix    *string  `json:"roleHasSuffix,omitempty"`
	RoleEqualFold    *string  `json:"roleEqualFold,omitempty"`
	RoleContainsFold *string  `json:"roleContainsFold,omitempty"`

	// "is_owner" field predicates.
	IsOwner    *bool `json:"isOwner,omitempty"`
	IsOwnerNEQ *bool `json:"isOwnerNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the ProjectTeammateWhereInput filter on the ProjectTeammateQuery builder.
func (i *ProjectTeammateWhereInput) Filter(q *ProjectTeammateQuery) (*ProjectTeammateQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering projectteammates.
// An error is returned if the input is empty or invalid.
func (i *ProjectTeammateWhereInput) P() (predicate.ProjectTeammate, error) {
	var predicates []predicate.ProjectTeammate
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, projectteammate.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProjectTeammate, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, projectteammate.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProjectTeammate, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, projectteammate.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, projectteammate.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, projectteammate.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, projectteammate.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, projectteammate.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, projectteammate.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, projectteammate.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, projectteammate.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, projectteammate.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, projectteammate.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, projectteammate.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, projectteammate.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, projectteammate.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, projectteammate.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, projectteammate.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, projectteammate.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, projectteammate.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, projectteammate.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, projectteammate.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, projectteammate.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, projectteammate.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, projectteammate.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, projectteammate.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, projectteammate.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, projectteammate.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, projectteammate.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, projectteammate.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, projectteammate.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, projectteammate.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, projectteammate.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, projectteammate.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, projectteammate.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, projectteammate.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, projectteammate.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, projectteammate.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, projectteammate.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, projectteammate.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, projectteammate.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, projectteammate.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, projectteammate.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, projectteammate.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, projectteammate.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, projectteammate.RoleLTE(*i.RoleLTE))
	}
	if i.RoleContains != nil {
		predicates = append(predicates, projectteammate.RoleContains(*i.RoleContains))
	}
	if i.RoleHasPrefix != nil {
		predicates = append(predicates, projectteammate.RoleHasPrefix(*i.RoleHasPrefix))
	}
	if i.RoleHasSuffix != nil {
		predicates = append(predicates, projectteammate.RoleHasSuffix(*i.RoleHasSuffix))
	}
	if i.RoleEqualFold != nil {
		predicates = append(predicates, projectteammate.RoleEqualFold(*i.RoleEqualFold))
	}
	if i.RoleContainsFold != nil {
		predicates = append(predicates, projectteammate.RoleContainsFold(*i.RoleContainsFold))
	}
	if i.IsOwner != nil {
		predicates = append(predicates, projectteammate.IsOwnerEQ(*i.IsOwner))
	}
	if i.IsOwnerNEQ != nil {
		predicates = append(predicates, projectteammate.IsOwnerNEQ(*i.IsOwnerNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, projectteammate.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, projectteammate.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, projectteammate.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, projectteammate.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, projectteammate.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, projectteammate.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, projectteammate.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, projectteammate.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, projectteammate.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, projectteammate.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, projectteammate.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, projectteammate.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, projectteammate.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, projectteammate.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, projectteammate.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, projectteammate.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := projectteammate.HasProject()
		if !*i.HasProject {
			p = projectteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectteammate.HasProjectWith(with...))
	}
	if i.HasTeammate != nil {
		p := projectteammate.HasTeammate()
		if !*i.HasTeammate {
			p = projectteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, projectteammate.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate ProjectTeammateWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return projectteammate.And(predicates...), nil
	}
}

// TagWhereInput represents a where input for filtering Tag queries.
type TagWhereInput struct {
	Not *TagWhereInput   `json:"not,omitempty"`
	Or  []*TagWhereInput `json:"or,omitempty"`
	And []*TagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "color_id" field predicates.
	ColorID             *ulid.ID  `json:"colorID,omitempty"`
	ColorIDNEQ          *ulid.ID  `json:"colorIDNEQ,omitempty"`
	ColorIDIn           []ulid.ID `json:"colorIDIn,omitempty"`
	ColorIDNotIn        []ulid.ID `json:"colorIDNotIn,omitempty"`
	ColorIDGT           *ulid.ID  `json:"colorIDGT,omitempty"`
	ColorIDGTE          *ulid.ID  `json:"colorIDGTE,omitempty"`
	ColorIDLT           *ulid.ID  `json:"colorIDLT,omitempty"`
	ColorIDLTE          *ulid.ID  `json:"colorIDLTE,omitempty"`
	ColorIDContains     *ulid.ID  `json:"colorIDContains,omitempty"`
	ColorIDHasPrefix    *ulid.ID  `json:"colorIDHasPrefix,omitempty"`
	ColorIDHasSuffix    *ulid.ID  `json:"colorIDHasSuffix,omitempty"`
	ColorIDEqualFold    *ulid.ID  `json:"colorIDEqualFold,omitempty"`
	ColorIDContainsFold *ulid.ID  `json:"colorIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "color" edge predicates.
	HasColor     *bool              `json:"hasColor,omitempty"`
	HasColorWith []*ColorWhereInput `json:"hasColorWith,omitempty"`

	// "taskTags" edge predicates.
	HasTaskTags     *bool                `json:"hasTaskTags,omitempty"`
	HasTaskTagsWith []*TaskTagWhereInput `json:"hasTaskTagsWith,omitempty"`
}

// Filter applies the TagWhereInput filter on the TagQuery builder.
func (i *TagWhereInput) Filter(q *TagQuery) (*TagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tags.
// An error is returned if the input is empty or invalid.
func (i *TagWhereInput) P() (predicate.Tag, error) {
	var predicates []predicate.Tag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tag.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tag.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, tag.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, tag.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, tag.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, tag.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, tag.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, tag.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, tag.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, tag.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, tag.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, tag.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, tag.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, tag.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, tag.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.ColorID != nil {
		predicates = append(predicates, tag.ColorIDEQ(*i.ColorID))
	}
	if i.ColorIDNEQ != nil {
		predicates = append(predicates, tag.ColorIDNEQ(*i.ColorIDNEQ))
	}
	if len(i.ColorIDIn) > 0 {
		predicates = append(predicates, tag.ColorIDIn(i.ColorIDIn...))
	}
	if len(i.ColorIDNotIn) > 0 {
		predicates = append(predicates, tag.ColorIDNotIn(i.ColorIDNotIn...))
	}
	if i.ColorIDGT != nil {
		predicates = append(predicates, tag.ColorIDGT(*i.ColorIDGT))
	}
	if i.ColorIDGTE != nil {
		predicates = append(predicates, tag.ColorIDGTE(*i.ColorIDGTE))
	}
	if i.ColorIDLT != nil {
		predicates = append(predicates, tag.ColorIDLT(*i.ColorIDLT))
	}
	if i.ColorIDLTE != nil {
		predicates = append(predicates, tag.ColorIDLTE(*i.ColorIDLTE))
	}
	if i.ColorIDContains != nil {
		predicates = append(predicates, tag.ColorIDContains(*i.ColorIDContains))
	}
	if i.ColorIDHasPrefix != nil {
		predicates = append(predicates, tag.ColorIDHasPrefix(*i.ColorIDHasPrefix))
	}
	if i.ColorIDHasSuffix != nil {
		predicates = append(predicates, tag.ColorIDHasSuffix(*i.ColorIDHasSuffix))
	}
	if i.ColorIDEqualFold != nil {
		predicates = append(predicates, tag.ColorIDEqualFold(*i.ColorIDEqualFold))
	}
	if i.ColorIDContainsFold != nil {
		predicates = append(predicates, tag.ColorIDContainsFold(*i.ColorIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, tag.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tag.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tag.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tag.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tag.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tag.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tag.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tag.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tag.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tag.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tag.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tag.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tag.NameContainsFold(*i.NameContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tag.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tag.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tag.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tag.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tag.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tag.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tag.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tag.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tag.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tag.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tag.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tag.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tag.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tag.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tag.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tag.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := tag.HasWorkspace()
		if !*i.HasWorkspace {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasWorkspaceWith(with...))
	}
	if i.HasColor != nil {
		p := tag.HasColor()
		if !*i.HasColor {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasColorWith) > 0 {
		with := make([]predicate.Color, 0, len(i.HasColorWith))
		for _, w := range i.HasColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasColorWith(with...))
	}
	if i.HasTaskTags != nil {
		p := tag.HasTaskTags()
		if !*i.HasTaskTags {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskTagsWith) > 0 {
		with := make([]predicate.TaskTag, 0, len(i.HasTaskTagsWith))
		for _, w := range i.HasTaskTagsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasTaskTagsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TagWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tag.And(predicates...), nil
	}
}

// TaskWhereInput represents a where input for filtering Task queries.
type TaskWhereInput struct {
	Not *TaskWhereInput   `json:"not,omitempty"`
	Or  []*TaskWhereInput `json:"or,omitempty"`
	And []*TaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_parent_id" field predicates.
	TaskParentID             *ulid.ID  `json:"taskParentID,omitempty"`
	TaskParentIDNEQ          *ulid.ID  `json:"taskParentIDNEQ,omitempty"`
	TaskParentIDIn           []ulid.ID `json:"taskParentIDIn,omitempty"`
	TaskParentIDNotIn        []ulid.ID `json:"taskParentIDNotIn,omitempty"`
	TaskParentIDGT           *ulid.ID  `json:"taskParentIDGT,omitempty"`
	TaskParentIDGTE          *ulid.ID  `json:"taskParentIDGTE,omitempty"`
	TaskParentIDLT           *ulid.ID  `json:"taskParentIDLT,omitempty"`
	TaskParentIDLTE          *ulid.ID  `json:"taskParentIDLTE,omitempty"`
	TaskParentIDContains     *ulid.ID  `json:"taskParentIDContains,omitempty"`
	TaskParentIDHasPrefix    *ulid.ID  `json:"taskParentIDHasPrefix,omitempty"`
	TaskParentIDHasSuffix    *ulid.ID  `json:"taskParentIDHasSuffix,omitempty"`
	TaskParentIDIsNil        bool      `json:"taskParentIDIsNil,omitempty"`
	TaskParentIDNotNil       bool      `json:"taskParentIDNotNil,omitempty"`
	TaskParentIDEqualFold    *ulid.ID  `json:"taskParentIDEqualFold,omitempty"`
	TaskParentIDContainsFold *ulid.ID  `json:"taskParentIDContainsFold,omitempty"`

	// "task_priority_id" field predicates.
	TaskPriorityID             *ulid.ID  `json:"taskPriorityID,omitempty"`
	TaskPriorityIDNEQ          *ulid.ID  `json:"taskPriorityIDNEQ,omitempty"`
	TaskPriorityIDIn           []ulid.ID `json:"taskPriorityIDIn,omitempty"`
	TaskPriorityIDNotIn        []ulid.ID `json:"taskPriorityIDNotIn,omitempty"`
	TaskPriorityIDGT           *ulid.ID  `json:"taskPriorityIDGT,omitempty"`
	TaskPriorityIDGTE          *ulid.ID  `json:"taskPriorityIDGTE,omitempty"`
	TaskPriorityIDLT           *ulid.ID  `json:"taskPriorityIDLT,omitempty"`
	TaskPriorityIDLTE          *ulid.ID  `json:"taskPriorityIDLTE,omitempty"`
	TaskPriorityIDContains     *ulid.ID  `json:"taskPriorityIDContains,omitempty"`
	TaskPriorityIDHasPrefix    *ulid.ID  `json:"taskPriorityIDHasPrefix,omitempty"`
	TaskPriorityIDHasSuffix    *ulid.ID  `json:"taskPriorityIDHasSuffix,omitempty"`
	TaskPriorityIDIsNil        bool      `json:"taskPriorityIDIsNil,omitempty"`
	TaskPriorityIDNotNil       bool      `json:"taskPriorityIDNotNil,omitempty"`
	TaskPriorityIDEqualFold    *ulid.ID  `json:"taskPriorityIDEqualFold,omitempty"`
	TaskPriorityIDContainsFold *ulid.ID  `json:"taskPriorityIDContainsFold,omitempty"`

	// "assignee_id" field predicates.
	AssigneeID             *ulid.ID  `json:"assigneeID,omitempty"`
	AssigneeIDNEQ          *ulid.ID  `json:"assigneeIDNEQ,omitempty"`
	AssigneeIDIn           []ulid.ID `json:"assigneeIDIn,omitempty"`
	AssigneeIDNotIn        []ulid.ID `json:"assigneeIDNotIn,omitempty"`
	AssigneeIDGT           *ulid.ID  `json:"assigneeIDGT,omitempty"`
	AssigneeIDGTE          *ulid.ID  `json:"assigneeIDGTE,omitempty"`
	AssigneeIDLT           *ulid.ID  `json:"assigneeIDLT,omitempty"`
	AssigneeIDLTE          *ulid.ID  `json:"assigneeIDLTE,omitempty"`
	AssigneeIDContains     *ulid.ID  `json:"assigneeIDContains,omitempty"`
	AssigneeIDHasPrefix    *ulid.ID  `json:"assigneeIDHasPrefix,omitempty"`
	AssigneeIDHasSuffix    *ulid.ID  `json:"assigneeIDHasSuffix,omitempty"`
	AssigneeIDIsNil        bool      `json:"assigneeIDIsNil,omitempty"`
	AssigneeIDNotNil       bool      `json:"assigneeIDNotNil,omitempty"`
	AssigneeIDEqualFold    *ulid.ID  `json:"assigneeIDEqualFold,omitempty"`
	AssigneeIDContainsFold *ulid.ID  `json:"assigneeIDContainsFold,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *ulid.ID  `json:"createdBy,omitempty"`
	CreatedByNEQ          *ulid.ID  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []ulid.ID `json:"createdByIn,omitempty"`
	CreatedByNotIn        []ulid.ID `json:"createdByNotIn,omitempty"`
	CreatedByGT           *ulid.ID  `json:"createdByGT,omitempty"`
	CreatedByGTE          *ulid.ID  `json:"createdByGTE,omitempty"`
	CreatedByLT           *ulid.ID  `json:"createdByLT,omitempty"`
	CreatedByLTE          *ulid.ID  `json:"createdByLTE,omitempty"`
	CreatedByContains     *ulid.ID  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *ulid.ID  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *ulid.ID  `json:"createdByHasSuffix,omitempty"`
	CreatedByEqualFold    *ulid.ID  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *ulid.ID  `json:"createdByContainsFold,omitempty"`

	// "completed" field predicates.
	Completed    *bool `json:"completed,omitempty"`
	CompletedNEQ *bool `json:"completedNEQ,omitempty"`

	// "completed_at" field predicates.
	CompletedAt       *time.Time  `json:"completedAt,omitempty"`
	CompletedAtNEQ    *time.Time  `json:"completedAtNEQ,omitempty"`
	CompletedAtIn     []time.Time `json:"completedAtIn,omitempty"`
	CompletedAtNotIn  []time.Time `json:"completedAtNotIn,omitempty"`
	CompletedAtGT     *time.Time  `json:"completedAtGT,omitempty"`
	CompletedAtGTE    *time.Time  `json:"completedAtGTE,omitempty"`
	CompletedAtLT     *time.Time  `json:"completedAtLT,omitempty"`
	CompletedAtLTE    *time.Time  `json:"completedAtLTE,omitempty"`
	CompletedAtIsNil  bool        `json:"completedAtIsNil,omitempty"`
	CompletedAtNotNil bool        `json:"completedAtNotNil,omitempty"`

	// "is_new" field predicates.
	IsNew    *bool `json:"isNew,omitempty"`
	IsNewNEQ *bool `json:"isNewNEQ,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "due_date" field predicates.
	DueDate       *time.Time  `json:"dueDate,omitempty"`
	DueDateNEQ    *time.Time  `json:"dueDateNEQ,omitempty"`
	DueDateIn     []time.Time `json:"dueDateIn,omitempty"`
	DueDateNotIn  []time.Time `json:"dueDateNotIn,omitempty"`
	DueDateGT     *time.Time  `json:"dueDateGT,omitempty"`
	DueDateGTE    *time.Time  `json:"dueDateGTE,omitempty"`
	DueDateLT     *time.Time  `json:"dueDateLT,omitempty"`
	DueDateLTE    *time.Time  `json:"dueDateLTE,omitempty"`
	DueDateIsNil  bool        `json:"dueDateIsNil,omitempty"`
	DueDateNotNil bool        `json:"dueDateNotNil,omitempty"`

	// "due_time" field predicates.
	DueTime       *time.Time  `json:"dueTime,omitempty"`
	DueTimeNEQ    *time.Time  `json:"dueTimeNEQ,omitempty"`
	DueTimeIn     []time.Time `json:"dueTimeIn,omitempty"`
	DueTimeNotIn  []time.Time `json:"dueTimeNotIn,omitempty"`
	DueTimeGT     *time.Time  `json:"dueTimeGT,omitempty"`
	DueTimeGTE    *time.Time  `json:"dueTimeGTE,omitempty"`
	DueTimeLT     *time.Time  `json:"dueTimeLT,omitempty"`
	DueTimeLTE    *time.Time  `json:"dueTimeLTE,omitempty"`
	DueTimeIsNil  bool        `json:"dueTimeIsNil,omitempty"`
	DueTimeNotNil bool        `json:"dueTimeNotNil,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "taskPriority" edge predicates.
	HasTaskPriority     *bool                     `json:"hasTaskPriority,omitempty"`
	HasTaskPriorityWith []*TaskPriorityWhereInput `json:"hasTaskPriorityWith,omitempty"`

	// "subTasks" edge predicates.
	HasSubTasks     *bool             `json:"hasSubTasks,omitempty"`
	HasSubTasksWith []*TaskWhereInput `json:"hasSubTasksWith,omitempty"`

	// "parentTask" edge predicates.
	HasParentTask     *bool             `json:"hasParentTask,omitempty"`
	HasParentTaskWith []*TaskWhereInput `json:"hasParentTaskWith,omitempty"`

	// "teammateTasks" edge predicates.
	HasTeammateTasks     *bool                     `json:"hasTeammateTasks,omitempty"`
	HasTeammateTasksWith []*TeammateTaskWhereInput `json:"hasTeammateTasksWith,omitempty"`

	// "projectTasks" edge predicates.
	HasProjectTasks     *bool                    `json:"hasProjectTasks,omitempty"`
	HasProjectTasksWith []*ProjectTaskWhereInput `json:"hasProjectTasksWith,omitempty"`

	// "taskLikes" edge predicates.
	HasTaskLikes     *bool                 `json:"hasTaskLikes,omitempty"`
	HasTaskLikesWith []*TaskLikeWhereInput `json:"hasTaskLikesWith,omitempty"`

	// "taskTags" edge predicates.
	HasTaskTags     *bool                `json:"hasTaskTags,omitempty"`
	HasTaskTagsWith []*TaskTagWhereInput `json:"hasTaskTagsWith,omitempty"`

	// "taskCollaborators" edge predicates.
	HasTaskCollaborators     *bool                         `json:"hasTaskCollaborators,omitempty"`
	HasTaskCollaboratorsWith []*TaskCollaboratorWhereInput `json:"hasTaskCollaboratorsWith,omitempty"`

	// "taskFeeds" edge predicates.
	HasTaskFeeds     *bool                 `json:"hasTaskFeeds,omitempty"`
	HasTaskFeedsWith []*TaskFeedWhereInput `json:"hasTaskFeedsWith,omitempty"`

	// "taskFeedLikes" edge predicates.
	HasTaskFeedLikes     *bool                     `json:"hasTaskFeedLikes,omitempty"`
	HasTaskFeedLikesWith []*TaskFeedLikeWhereInput `json:"hasTaskFeedLikesWith,omitempty"`

	// "taskFiles" edge predicates.
	HasTaskFiles     *bool                 `json:"hasTaskFiles,omitempty"`
	HasTaskFilesWith []*TaskFileWhereInput `json:"hasTaskFilesWith,omitempty"`

	// "deletedTasksRef" edge predicates.
	HasDeletedTasksRef     *bool                    `json:"hasDeletedTasksRef,omitempty"`
	HasDeletedTasksRefWith []*DeletedTaskWhereInput `json:"hasDeletedTasksRefWith,omitempty"`

	// "taskActivityTasks" edge predicates.
	HasTaskActivityTasks     *bool                         `json:"hasTaskActivityTasks,omitempty"`
	HasTaskActivityTasksWith []*TaskActivityTaskWhereInput `json:"hasTaskActivityTasksWith,omitempty"`

	// "workspaceActivityTasks" edge predicates.
	HasWorkspaceActivityTasks     *bool                              `json:"hasWorkspaceActivityTasks,omitempty"`
	HasWorkspaceActivityTasksWith []*WorkspaceActivityTaskWhereInput `json:"hasWorkspaceActivityTasksWith,omitempty"`

	// "archivedTaskActivityTasks" edge predicates.
	HasArchivedTaskActivityTasks     *bool                                 `json:"hasArchivedTaskActivityTasks,omitempty"`
	HasArchivedTaskActivityTasksWith []*ArchivedTaskActivityTaskWhereInput `json:"hasArchivedTaskActivityTasksWith,omitempty"`
}

// Filter applies the TaskWhereInput filter on the TaskQuery builder.
func (i *TaskWhereInput) Filter(q *TaskQuery) (*TaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasks.
// An error is returned if the input is empty or invalid.
func (i *TaskWhereInput) P() (predicate.Task, error) {
	var predicates []predicate.Task
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, task.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Task, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, task.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Task, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, task.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, task.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, task.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, task.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, task.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, task.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, task.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, task.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, task.IDLTE(*i.IDLTE))
	}
	if i.TaskParentID != nil {
		predicates = append(predicates, task.TaskParentIDEQ(*i.TaskParentID))
	}
	if i.TaskParentIDNEQ != nil {
		predicates = append(predicates, task.TaskParentIDNEQ(*i.TaskParentIDNEQ))
	}
	if len(i.TaskParentIDIn) > 0 {
		predicates = append(predicates, task.TaskParentIDIn(i.TaskParentIDIn...))
	}
	if len(i.TaskParentIDNotIn) > 0 {
		predicates = append(predicates, task.TaskParentIDNotIn(i.TaskParentIDNotIn...))
	}
	if i.TaskParentIDGT != nil {
		predicates = append(predicates, task.TaskParentIDGT(*i.TaskParentIDGT))
	}
	if i.TaskParentIDGTE != nil {
		predicates = append(predicates, task.TaskParentIDGTE(*i.TaskParentIDGTE))
	}
	if i.TaskParentIDLT != nil {
		predicates = append(predicates, task.TaskParentIDLT(*i.TaskParentIDLT))
	}
	if i.TaskParentIDLTE != nil {
		predicates = append(predicates, task.TaskParentIDLTE(*i.TaskParentIDLTE))
	}
	if i.TaskParentIDContains != nil {
		predicates = append(predicates, task.TaskParentIDContains(*i.TaskParentIDContains))
	}
	if i.TaskParentIDHasPrefix != nil {
		predicates = append(predicates, task.TaskParentIDHasPrefix(*i.TaskParentIDHasPrefix))
	}
	if i.TaskParentIDHasSuffix != nil {
		predicates = append(predicates, task.TaskParentIDHasSuffix(*i.TaskParentIDHasSuffix))
	}
	if i.TaskParentIDIsNil {
		predicates = append(predicates, task.TaskParentIDIsNil())
	}
	if i.TaskParentIDNotNil {
		predicates = append(predicates, task.TaskParentIDNotNil())
	}
	if i.TaskParentIDEqualFold != nil {
		predicates = append(predicates, task.TaskParentIDEqualFold(*i.TaskParentIDEqualFold))
	}
	if i.TaskParentIDContainsFold != nil {
		predicates = append(predicates, task.TaskParentIDContainsFold(*i.TaskParentIDContainsFold))
	}
	if i.TaskPriorityID != nil {
		predicates = append(predicates, task.TaskPriorityIDEQ(*i.TaskPriorityID))
	}
	if i.TaskPriorityIDNEQ != nil {
		predicates = append(predicates, task.TaskPriorityIDNEQ(*i.TaskPriorityIDNEQ))
	}
	if len(i.TaskPriorityIDIn) > 0 {
		predicates = append(predicates, task.TaskPriorityIDIn(i.TaskPriorityIDIn...))
	}
	if len(i.TaskPriorityIDNotIn) > 0 {
		predicates = append(predicates, task.TaskPriorityIDNotIn(i.TaskPriorityIDNotIn...))
	}
	if i.TaskPriorityIDGT != nil {
		predicates = append(predicates, task.TaskPriorityIDGT(*i.TaskPriorityIDGT))
	}
	if i.TaskPriorityIDGTE != nil {
		predicates = append(predicates, task.TaskPriorityIDGTE(*i.TaskPriorityIDGTE))
	}
	if i.TaskPriorityIDLT != nil {
		predicates = append(predicates, task.TaskPriorityIDLT(*i.TaskPriorityIDLT))
	}
	if i.TaskPriorityIDLTE != nil {
		predicates = append(predicates, task.TaskPriorityIDLTE(*i.TaskPriorityIDLTE))
	}
	if i.TaskPriorityIDContains != nil {
		predicates = append(predicates, task.TaskPriorityIDContains(*i.TaskPriorityIDContains))
	}
	if i.TaskPriorityIDHasPrefix != nil {
		predicates = append(predicates, task.TaskPriorityIDHasPrefix(*i.TaskPriorityIDHasPrefix))
	}
	if i.TaskPriorityIDHasSuffix != nil {
		predicates = append(predicates, task.TaskPriorityIDHasSuffix(*i.TaskPriorityIDHasSuffix))
	}
	if i.TaskPriorityIDIsNil {
		predicates = append(predicates, task.TaskPriorityIDIsNil())
	}
	if i.TaskPriorityIDNotNil {
		predicates = append(predicates, task.TaskPriorityIDNotNil())
	}
	if i.TaskPriorityIDEqualFold != nil {
		predicates = append(predicates, task.TaskPriorityIDEqualFold(*i.TaskPriorityIDEqualFold))
	}
	if i.TaskPriorityIDContainsFold != nil {
		predicates = append(predicates, task.TaskPriorityIDContainsFold(*i.TaskPriorityIDContainsFold))
	}
	if i.AssigneeID != nil {
		predicates = append(predicates, task.AssigneeIDEQ(*i.AssigneeID))
	}
	if i.AssigneeIDNEQ != nil {
		predicates = append(predicates, task.AssigneeIDNEQ(*i.AssigneeIDNEQ))
	}
	if len(i.AssigneeIDIn) > 0 {
		predicates = append(predicates, task.AssigneeIDIn(i.AssigneeIDIn...))
	}
	if len(i.AssigneeIDNotIn) > 0 {
		predicates = append(predicates, task.AssigneeIDNotIn(i.AssigneeIDNotIn...))
	}
	if i.AssigneeIDGT != nil {
		predicates = append(predicates, task.AssigneeIDGT(*i.AssigneeIDGT))
	}
	if i.AssigneeIDGTE != nil {
		predicates = append(predicates, task.AssigneeIDGTE(*i.AssigneeIDGTE))
	}
	if i.AssigneeIDLT != nil {
		predicates = append(predicates, task.AssigneeIDLT(*i.AssigneeIDLT))
	}
	if i.AssigneeIDLTE != nil {
		predicates = append(predicates, task.AssigneeIDLTE(*i.AssigneeIDLTE))
	}
	if i.AssigneeIDContains != nil {
		predicates = append(predicates, task.AssigneeIDContains(*i.AssigneeIDContains))
	}
	if i.AssigneeIDHasPrefix != nil {
		predicates = append(predicates, task.AssigneeIDHasPrefix(*i.AssigneeIDHasPrefix))
	}
	if i.AssigneeIDHasSuffix != nil {
		predicates = append(predicates, task.AssigneeIDHasSuffix(*i.AssigneeIDHasSuffix))
	}
	if i.AssigneeIDIsNil {
		predicates = append(predicates, task.AssigneeIDIsNil())
	}
	if i.AssigneeIDNotNil {
		predicates = append(predicates, task.AssigneeIDNotNil())
	}
	if i.AssigneeIDEqualFold != nil {
		predicates = append(predicates, task.AssigneeIDEqualFold(*i.AssigneeIDEqualFold))
	}
	if i.AssigneeIDContainsFold != nil {
		predicates = append(predicates, task.AssigneeIDContainsFold(*i.AssigneeIDContainsFold))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, task.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, task.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, task.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, task.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, task.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, task.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, task.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, task.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, task.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, task.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, task.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, task.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, task.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.Completed != nil {
		predicates = append(predicates, task.CompletedEQ(*i.Completed))
	}
	if i.CompletedNEQ != nil {
		predicates = append(predicates, task.CompletedNEQ(*i.CompletedNEQ))
	}
	if i.CompletedAt != nil {
		predicates = append(predicates, task.CompletedAtEQ(*i.CompletedAt))
	}
	if i.CompletedAtNEQ != nil {
		predicates = append(predicates, task.CompletedAtNEQ(*i.CompletedAtNEQ))
	}
	if len(i.CompletedAtIn) > 0 {
		predicates = append(predicates, task.CompletedAtIn(i.CompletedAtIn...))
	}
	if len(i.CompletedAtNotIn) > 0 {
		predicates = append(predicates, task.CompletedAtNotIn(i.CompletedAtNotIn...))
	}
	if i.CompletedAtGT != nil {
		predicates = append(predicates, task.CompletedAtGT(*i.CompletedAtGT))
	}
	if i.CompletedAtGTE != nil {
		predicates = append(predicates, task.CompletedAtGTE(*i.CompletedAtGTE))
	}
	if i.CompletedAtLT != nil {
		predicates = append(predicates, task.CompletedAtLT(*i.CompletedAtLT))
	}
	if i.CompletedAtLTE != nil {
		predicates = append(predicates, task.CompletedAtLTE(*i.CompletedAtLTE))
	}
	if i.CompletedAtIsNil {
		predicates = append(predicates, task.CompletedAtIsNil())
	}
	if i.CompletedAtNotNil {
		predicates = append(predicates, task.CompletedAtNotNil())
	}
	if i.IsNew != nil {
		predicates = append(predicates, task.IsNewEQ(*i.IsNew))
	}
	if i.IsNewNEQ != nil {
		predicates = append(predicates, task.IsNewNEQ(*i.IsNewNEQ))
	}
	if i.Name != nil {
		predicates = append(predicates, task.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, task.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, task.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, task.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, task.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, task.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, task.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, task.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, task.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, task.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, task.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, task.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, task.NameContainsFold(*i.NameContainsFold))
	}
	if i.DueDate != nil {
		predicates = append(predicates, task.DueDateEQ(*i.DueDate))
	}
	if i.DueDateNEQ != nil {
		predicates = append(predicates, task.DueDateNEQ(*i.DueDateNEQ))
	}
	if len(i.DueDateIn) > 0 {
		predicates = append(predicates, task.DueDateIn(i.DueDateIn...))
	}
	if len(i.DueDateNotIn) > 0 {
		predicates = append(predicates, task.DueDateNotIn(i.DueDateNotIn...))
	}
	if i.DueDateGT != nil {
		predicates = append(predicates, task.DueDateGT(*i.DueDateGT))
	}
	if i.DueDateGTE != nil {
		predicates = append(predicates, task.DueDateGTE(*i.DueDateGTE))
	}
	if i.DueDateLT != nil {
		predicates = append(predicates, task.DueDateLT(*i.DueDateLT))
	}
	if i.DueDateLTE != nil {
		predicates = append(predicates, task.DueDateLTE(*i.DueDateLTE))
	}
	if i.DueDateIsNil {
		predicates = append(predicates, task.DueDateIsNil())
	}
	if i.DueDateNotNil {
		predicates = append(predicates, task.DueDateNotNil())
	}
	if i.DueTime != nil {
		predicates = append(predicates, task.DueTimeEQ(*i.DueTime))
	}
	if i.DueTimeNEQ != nil {
		predicates = append(predicates, task.DueTimeNEQ(*i.DueTimeNEQ))
	}
	if len(i.DueTimeIn) > 0 {
		predicates = append(predicates, task.DueTimeIn(i.DueTimeIn...))
	}
	if len(i.DueTimeNotIn) > 0 {
		predicates = append(predicates, task.DueTimeNotIn(i.DueTimeNotIn...))
	}
	if i.DueTimeGT != nil {
		predicates = append(predicates, task.DueTimeGT(*i.DueTimeGT))
	}
	if i.DueTimeGTE != nil {
		predicates = append(predicates, task.DueTimeGTE(*i.DueTimeGTE))
	}
	if i.DueTimeLT != nil {
		predicates = append(predicates, task.DueTimeLT(*i.DueTimeLT))
	}
	if i.DueTimeLTE != nil {
		predicates = append(predicates, task.DueTimeLTE(*i.DueTimeLTE))
	}
	if i.DueTimeIsNil {
		predicates = append(predicates, task.DueTimeIsNil())
	}
	if i.DueTimeNotNil {
		predicates = append(predicates, task.DueTimeNotNil())
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, task.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, task.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, task.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, task.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, task.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, task.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, task.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, task.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, task.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, task.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, task.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, task.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, task.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, task.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, task.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, task.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := task.HasTeammate()
		if !*i.HasTeammate {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTeammateWith(with...))
	}
	if i.HasTaskPriority != nil {
		p := task.HasTaskPriority()
		if !*i.HasTaskPriority {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskPriorityWith) > 0 {
		with := make([]predicate.TaskPriority, 0, len(i.HasTaskPriorityWith))
		for _, w := range i.HasTaskPriorityWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskPriorityWith(with...))
	}
	if i.HasSubTasks != nil {
		p := task.HasSubTasks()
		if !*i.HasSubTasks {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSubTasksWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasSubTasksWith))
		for _, w := range i.HasSubTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasSubTasksWith(with...))
	}
	if i.HasParentTask != nil {
		p := task.HasParentTask()
		if !*i.HasParentTask {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasParentTaskWith))
		for _, w := range i.HasParentTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasParentTaskWith(with...))
	}
	if i.HasTeammateTasks != nil {
		p := task.HasTeammateTasks()
		if !*i.HasTeammateTasks {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTasksWith) > 0 {
		with := make([]predicate.TeammateTask, 0, len(i.HasTeammateTasksWith))
		for _, w := range i.HasTeammateTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTeammateTasksWith(with...))
	}
	if i.HasProjectTasks != nil {
		p := task.HasProjectTasks()
		if !*i.HasProjectTasks {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTasksWith) > 0 {
		with := make([]predicate.ProjectTask, 0, len(i.HasProjectTasksWith))
		for _, w := range i.HasProjectTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasProjectTasksWith(with...))
	}
	if i.HasTaskLikes != nil {
		p := task.HasTaskLikes()
		if !*i.HasTaskLikes {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskLikesWith) > 0 {
		with := make([]predicate.TaskLike, 0, len(i.HasTaskLikesWith))
		for _, w := range i.HasTaskLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskLikesWith(with...))
	}
	if i.HasTaskTags != nil {
		p := task.HasTaskTags()
		if !*i.HasTaskTags {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskTagsWith) > 0 {
		with := make([]predicate.TaskTag, 0, len(i.HasTaskTagsWith))
		for _, w := range i.HasTaskTagsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskTagsWith(with...))
	}
	if i.HasTaskCollaborators != nil {
		p := task.HasTaskCollaborators()
		if !*i.HasTaskCollaborators {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskCollaboratorsWith) > 0 {
		with := make([]predicate.TaskCollaborator, 0, len(i.HasTaskCollaboratorsWith))
		for _, w := range i.HasTaskCollaboratorsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskCollaboratorsWith(with...))
	}
	if i.HasTaskFeeds != nil {
		p := task.HasTaskFeeds()
		if !*i.HasTaskFeeds {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFeedsWith) > 0 {
		with := make([]predicate.TaskFeed, 0, len(i.HasTaskFeedsWith))
		for _, w := range i.HasTaskFeedsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskFeedsWith(with...))
	}
	if i.HasTaskFeedLikes != nil {
		p := task.HasTaskFeedLikes()
		if !*i.HasTaskFeedLikes {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFeedLikesWith) > 0 {
		with := make([]predicate.TaskFeedLike, 0, len(i.HasTaskFeedLikesWith))
		for _, w := range i.HasTaskFeedLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskFeedLikesWith(with...))
	}
	if i.HasTaskFiles != nil {
		p := task.HasTaskFiles()
		if !*i.HasTaskFiles {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFilesWith) > 0 {
		with := make([]predicate.TaskFile, 0, len(i.HasTaskFilesWith))
		for _, w := range i.HasTaskFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskFilesWith(with...))
	}
	if i.HasDeletedTasksRef != nil {
		p := task.HasDeletedTasksRef()
		if !*i.HasDeletedTasksRef {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDeletedTasksRefWith) > 0 {
		with := make([]predicate.DeletedTask, 0, len(i.HasDeletedTasksRefWith))
		for _, w := range i.HasDeletedTasksRefWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasDeletedTasksRefWith(with...))
	}
	if i.HasTaskActivityTasks != nil {
		p := task.HasTaskActivityTasks()
		if !*i.HasTaskActivityTasks {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskActivityTasksWith) > 0 {
		with := make([]predicate.TaskActivityTask, 0, len(i.HasTaskActivityTasksWith))
		for _, w := range i.HasTaskActivityTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasTaskActivityTasksWith(with...))
	}
	if i.HasWorkspaceActivityTasks != nil {
		p := task.HasWorkspaceActivityTasks()
		if !*i.HasWorkspaceActivityTasks {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceActivityTasksWith) > 0 {
		with := make([]predicate.WorkspaceActivityTask, 0, len(i.HasWorkspaceActivityTasksWith))
		for _, w := range i.HasWorkspaceActivityTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasWorkspaceActivityTasksWith(with...))
	}
	if i.HasArchivedTaskActivityTasks != nil {
		p := task.HasArchivedTaskActivityTasks()
		if !*i.HasArchivedTaskActivityTasks {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasArchivedTaskActivityTasksWith) > 0 {
		with := make([]predicate.ArchivedTaskActivityTask, 0, len(i.HasArchivedTaskActivityTasksWith))
		for _, w := range i.HasArchivedTaskActivityTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasArchivedTaskActivityTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return task.And(predicates...), nil
	}
}

// TaskActivityWhereInput represents a where input for filtering TaskActivity queries.
type TaskActivityWhereInput struct {
	Not *TaskActivityWhereInput   `json:"not,omitempty"`
	Or  []*TaskActivityWhereInput `json:"or,omitempty"`
	And []*TaskActivityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "activity_type_id" field predicates.
	ActivityTypeID             *ulid.ID  `json:"activityTypeID,omitempty"`
	ActivityTypeIDNEQ          *ulid.ID  `json:"activityTypeIDNEQ,omitempty"`
	ActivityTypeIDIn           []ulid.ID `json:"activityTypeIDIn,omitempty"`
	ActivityTypeIDNotIn        []ulid.ID `json:"activityTypeIDNotIn,omitempty"`
	ActivityTypeIDGT           *ulid.ID  `json:"activityTypeIDGT,omitempty"`
	ActivityTypeIDGTE          *ulid.ID  `json:"activityTypeIDGTE,omitempty"`
	ActivityTypeIDLT           *ulid.ID  `json:"activityTypeIDLT,omitempty"`
	ActivityTypeIDLTE          *ulid.ID  `json:"activityTypeIDLTE,omitempty"`
	ActivityTypeIDContains     *ulid.ID  `json:"activityTypeIDContains,omitempty"`
	ActivityTypeIDHasPrefix    *ulid.ID  `json:"activityTypeIDHasPrefix,omitempty"`
	ActivityTypeIDHasSuffix    *ulid.ID  `json:"activityTypeIDHasSuffix,omitempty"`
	ActivityTypeIDEqualFold    *ulid.ID  `json:"activityTypeIDEqualFold,omitempty"`
	ActivityTypeIDContainsFold *ulid.ID  `json:"activityTypeIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "activityType" edge predicates.
	HasActivityType     *bool                     `json:"hasActivityType,omitempty"`
	HasActivityTypeWith []*ActivityTypeWhereInput `json:"hasActivityTypeWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "taskActivityTasks" edge predicates.
	HasTaskActivityTasks     *bool                         `json:"hasTaskActivityTasks,omitempty"`
	HasTaskActivityTasksWith []*TaskActivityTaskWhereInput `json:"hasTaskActivityTasksWith,omitempty"`

	// "archivedTaskActivityTasks" edge predicates.
	HasArchivedTaskActivityTasks     *bool                                 `json:"hasArchivedTaskActivityTasks,omitempty"`
	HasArchivedTaskActivityTasksWith []*ArchivedTaskActivityTaskWhereInput `json:"hasArchivedTaskActivityTasksWith,omitempty"`
}

// Filter applies the TaskActivityWhereInput filter on the TaskActivityQuery builder.
func (i *TaskActivityWhereInput) Filter(q *TaskActivityQuery) (*TaskActivityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskactivities.
// An error is returned if the input is empty or invalid.
func (i *TaskActivityWhereInput) P() (predicate.TaskActivity, error) {
	var predicates []predicate.TaskActivity
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskactivity.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskActivity, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskactivity.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskActivity, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskactivity.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskactivity.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskactivity.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskactivity.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskactivity.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskactivity.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskactivity.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskactivity.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskactivity.IDLTE(*i.IDLTE))
	}
	if i.ActivityTypeID != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDEQ(*i.ActivityTypeID))
	}
	if i.ActivityTypeIDNEQ != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDNEQ(*i.ActivityTypeIDNEQ))
	}
	if len(i.ActivityTypeIDIn) > 0 {
		predicates = append(predicates, taskactivity.ActivityTypeIDIn(i.ActivityTypeIDIn...))
	}
	if len(i.ActivityTypeIDNotIn) > 0 {
		predicates = append(predicates, taskactivity.ActivityTypeIDNotIn(i.ActivityTypeIDNotIn...))
	}
	if i.ActivityTypeIDGT != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDGT(*i.ActivityTypeIDGT))
	}
	if i.ActivityTypeIDGTE != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDGTE(*i.ActivityTypeIDGTE))
	}
	if i.ActivityTypeIDLT != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDLT(*i.ActivityTypeIDLT))
	}
	if i.ActivityTypeIDLTE != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDLTE(*i.ActivityTypeIDLTE))
	}
	if i.ActivityTypeIDContains != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDContains(*i.ActivityTypeIDContains))
	}
	if i.ActivityTypeIDHasPrefix != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDHasPrefix(*i.ActivityTypeIDHasPrefix))
	}
	if i.ActivityTypeIDHasSuffix != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDHasSuffix(*i.ActivityTypeIDHasSuffix))
	}
	if i.ActivityTypeIDEqualFold != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDEqualFold(*i.ActivityTypeIDEqualFold))
	}
	if i.ActivityTypeIDContainsFold != nil {
		predicates = append(predicates, taskactivity.ActivityTypeIDContainsFold(*i.ActivityTypeIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, taskactivity.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, taskactivity.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, taskactivity.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, taskactivity.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, taskactivity.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, taskactivity.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, taskactivity.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, taskactivity.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, taskactivity.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, taskactivity.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, taskactivity.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, taskactivity.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, taskactivity.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, taskactivity.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, taskactivity.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, taskactivity.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskactivity.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskactivity.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskactivity.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskactivity.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskactivity.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskactivity.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskactivity.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskactivity.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskactivity.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskactivity.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskactivity.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskactivity.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskactivity.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskactivity.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskactivity.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskactivity.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := taskactivity.HasTeammate()
		if !*i.HasTeammate {
			p = taskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskactivity.HasTeammateWith(with...))
	}
	if i.HasActivityType != nil {
		p := taskactivity.HasActivityType()
		if !*i.HasActivityType {
			p = taskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasActivityTypeWith) > 0 {
		with := make([]predicate.ActivityType, 0, len(i.HasActivityTypeWith))
		for _, w := range i.HasActivityTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskactivity.HasActivityTypeWith(with...))
	}
	if i.HasWorkspace != nil {
		p := taskactivity.HasWorkspace()
		if !*i.HasWorkspace {
			p = taskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskactivity.HasWorkspaceWith(with...))
	}
	if i.HasTaskActivityTasks != nil {
		p := taskactivity.HasTaskActivityTasks()
		if !*i.HasTaskActivityTasks {
			p = taskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskActivityTasksWith) > 0 {
		with := make([]predicate.TaskActivityTask, 0, len(i.HasTaskActivityTasksWith))
		for _, w := range i.HasTaskActivityTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskactivity.HasTaskActivityTasksWith(with...))
	}
	if i.HasArchivedTaskActivityTasks != nil {
		p := taskactivity.HasArchivedTaskActivityTasks()
		if !*i.HasArchivedTaskActivityTasks {
			p = taskactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasArchivedTaskActivityTasksWith) > 0 {
		with := make([]predicate.ArchivedTaskActivityTask, 0, len(i.HasArchivedTaskActivityTasksWith))
		for _, w := range i.HasArchivedTaskActivityTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskactivity.HasArchivedTaskActivityTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskActivityWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskactivity.And(predicates...), nil
	}
}

// TaskActivityTaskWhereInput represents a where input for filtering TaskActivityTask queries.
type TaskActivityTaskWhereInput struct {
	Not *TaskActivityTaskWhereInput   `json:"not,omitempty"`
	Or  []*TaskActivityTaskWhereInput `json:"or,omitempty"`
	And []*TaskActivityTaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_activity_id" field predicates.
	TaskActivityID             *ulid.ID  `json:"taskActivityID,omitempty"`
	TaskActivityIDNEQ          *ulid.ID  `json:"taskActivityIDNEQ,omitempty"`
	TaskActivityIDIn           []ulid.ID `json:"taskActivityIDIn,omitempty"`
	TaskActivityIDNotIn        []ulid.ID `json:"taskActivityIDNotIn,omitempty"`
	TaskActivityIDGT           *ulid.ID  `json:"taskActivityIDGT,omitempty"`
	TaskActivityIDGTE          *ulid.ID  `json:"taskActivityIDGTE,omitempty"`
	TaskActivityIDLT           *ulid.ID  `json:"taskActivityIDLT,omitempty"`
	TaskActivityIDLTE          *ulid.ID  `json:"taskActivityIDLTE,omitempty"`
	TaskActivityIDContains     *ulid.ID  `json:"taskActivityIDContains,omitempty"`
	TaskActivityIDHasPrefix    *ulid.ID  `json:"taskActivityIDHasPrefix,omitempty"`
	TaskActivityIDHasSuffix    *ulid.ID  `json:"taskActivityIDHasSuffix,omitempty"`
	TaskActivityIDEqualFold    *ulid.ID  `json:"taskActivityIDEqualFold,omitempty"`
	TaskActivityIDContainsFold *ulid.ID  `json:"taskActivityIDContainsFold,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "taskActivity" edge predicates.
	HasTaskActivity     *bool                     `json:"hasTaskActivity,omitempty"`
	HasTaskActivityWith []*TaskActivityWhereInput `json:"hasTaskActivityWith,omitempty"`
}

// Filter applies the TaskActivityTaskWhereInput filter on the TaskActivityTaskQuery builder.
func (i *TaskActivityTaskWhereInput) Filter(q *TaskActivityTaskQuery) (*TaskActivityTaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskactivitytasks.
// An error is returned if the input is empty or invalid.
func (i *TaskActivityTaskWhereInput) P() (predicate.TaskActivityTask, error) {
	var predicates []predicate.TaskActivityTask
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskactivitytask.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskActivityTask, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskactivitytask.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskActivityTask, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskactivitytask.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskactivitytask.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskactivitytask.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskactivitytask.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskactivitytask.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskactivitytask.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskactivitytask.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskactivitytask.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskactivitytask.IDLTE(*i.IDLTE))
	}
	if i.TaskActivityID != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDEQ(*i.TaskActivityID))
	}
	if i.TaskActivityIDNEQ != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDNEQ(*i.TaskActivityIDNEQ))
	}
	if len(i.TaskActivityIDIn) > 0 {
		predicates = append(predicates, taskactivitytask.TaskActivityIDIn(i.TaskActivityIDIn...))
	}
	if len(i.TaskActivityIDNotIn) > 0 {
		predicates = append(predicates, taskactivitytask.TaskActivityIDNotIn(i.TaskActivityIDNotIn...))
	}
	if i.TaskActivityIDGT != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDGT(*i.TaskActivityIDGT))
	}
	if i.TaskActivityIDGTE != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDGTE(*i.TaskActivityIDGTE))
	}
	if i.TaskActivityIDLT != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDLT(*i.TaskActivityIDLT))
	}
	if i.TaskActivityIDLTE != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDLTE(*i.TaskActivityIDLTE))
	}
	if i.TaskActivityIDContains != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDContains(*i.TaskActivityIDContains))
	}
	if i.TaskActivityIDHasPrefix != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDHasPrefix(*i.TaskActivityIDHasPrefix))
	}
	if i.TaskActivityIDHasSuffix != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDHasSuffix(*i.TaskActivityIDHasSuffix))
	}
	if i.TaskActivityIDEqualFold != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDEqualFold(*i.TaskActivityIDEqualFold))
	}
	if i.TaskActivityIDContainsFold != nil {
		predicates = append(predicates, taskactivitytask.TaskActivityIDContainsFold(*i.TaskActivityIDContainsFold))
	}
	if i.TaskID != nil {
		predicates = append(predicates, taskactivitytask.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, taskactivitytask.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, taskactivitytask.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, taskactivitytask.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, taskactivitytask.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, taskactivitytask.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, taskactivitytask.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, taskactivitytask.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, taskactivitytask.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, taskactivitytask.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, taskactivitytask.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, taskactivitytask.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, taskactivitytask.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskactivitytask.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskactivitytask.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskactivitytask.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskactivitytask.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskactivitytask.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskactivitytask.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskactivitytask.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskactivitytask.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskactivitytask.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskactivitytask.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskactivitytask.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskactivitytask.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskactivitytask.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskactivitytask.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskactivitytask.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskactivitytask.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := taskactivitytask.HasTask()
		if !*i.HasTask {
			p = taskactivitytask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskactivitytask.HasTaskWith(with...))
	}
	if i.HasTaskActivity != nil {
		p := taskactivitytask.HasTaskActivity()
		if !*i.HasTaskActivity {
			p = taskactivitytask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskActivityWith) > 0 {
		with := make([]predicate.TaskActivity, 0, len(i.HasTaskActivityWith))
		for _, w := range i.HasTaskActivityWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskactivitytask.HasTaskActivityWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskActivityTaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskactivitytask.And(predicates...), nil
	}
}

// TaskCollaboratorWhereInput represents a where input for filtering TaskCollaborator queries.
type TaskCollaboratorWhereInput struct {
	Not *TaskCollaboratorWhereInput   `json:"not,omitempty"`
	Or  []*TaskCollaboratorWhereInput `json:"or,omitempty"`
	And []*TaskCollaboratorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the TaskCollaboratorWhereInput filter on the TaskCollaboratorQuery builder.
func (i *TaskCollaboratorWhereInput) Filter(q *TaskCollaboratorQuery) (*TaskCollaboratorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskcollaborators.
// An error is returned if the input is empty or invalid.
func (i *TaskCollaboratorWhereInput) P() (predicate.TaskCollaborator, error) {
	var predicates []predicate.TaskCollaborator
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskcollaborator.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskCollaborator, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskcollaborator.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskCollaborator, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskcollaborator.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskcollaborator.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskcollaborator.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskcollaborator.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskcollaborator.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskcollaborator.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskcollaborator.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskcollaborator.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskcollaborator.IDLTE(*i.IDLTE))
	}
	if i.TaskID != nil {
		predicates = append(predicates, taskcollaborator.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, taskcollaborator.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, taskcollaborator.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, taskcollaborator.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, taskcollaborator.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, taskcollaborator.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, taskcollaborator.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, taskcollaborator.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, taskcollaborator.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, taskcollaborator.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, taskcollaborator.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, taskcollaborator.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, taskcollaborator.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, taskcollaborator.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, taskcollaborator.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, taskcollaborator.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskcollaborator.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskcollaborator.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskcollaborator.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskcollaborator.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskcollaborator.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskcollaborator.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskcollaborator.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskcollaborator.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskcollaborator.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskcollaborator.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskcollaborator.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskcollaborator.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskcollaborator.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskcollaborator.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskcollaborator.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskcollaborator.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := taskcollaborator.HasTask()
		if !*i.HasTask {
			p = taskcollaborator.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskcollaborator.HasTaskWith(with...))
	}
	if i.HasTeammate != nil {
		p := taskcollaborator.HasTeammate()
		if !*i.HasTeammate {
			p = taskcollaborator.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskcollaborator.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskCollaboratorWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskcollaborator.And(predicates...), nil
	}
}

// TaskColumnWhereInput represents a where input for filtering TaskColumn queries.
type TaskColumnWhereInput struct {
	Not *TaskColumnWhereInput   `json:"not,omitempty"`
	Or  []*TaskColumnWhereInput `json:"or,omitempty"`
	And []*TaskColumnWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "type" field predicates.
	Type      *taskcolumn.Type  `json:"type,omitempty"`
	TypeNEQ   *taskcolumn.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []taskcolumn.Type `json:"typeIn,omitempty"`
	TypeNotIn []taskcolumn.Type `json:"typeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammateTaskColumns" edge predicates.
	HasTeammateTaskColumns     *bool                           `json:"hasTeammateTaskColumns,omitempty"`
	HasTeammateTaskColumnsWith []*TeammateTaskColumnWhereInput `json:"hasTeammateTaskColumnsWith,omitempty"`

	// "projectTaskColumns" edge predicates.
	HasProjectTaskColumns     *bool                          `json:"hasProjectTaskColumns,omitempty"`
	HasProjectTaskColumnsWith []*ProjectTaskColumnWhereInput `json:"hasProjectTaskColumnsWith,omitempty"`
}

// Filter applies the TaskColumnWhereInput filter on the TaskColumnQuery builder.
func (i *TaskColumnWhereInput) Filter(q *TaskColumnQuery) (*TaskColumnQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskcolumns.
// An error is returned if the input is empty or invalid.
func (i *TaskColumnWhereInput) P() (predicate.TaskColumn, error) {
	var predicates []predicate.TaskColumn
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskcolumn.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskColumn, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskcolumn.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskColumn, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskcolumn.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskcolumn.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskcolumn.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskcolumn.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskcolumn.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskcolumn.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskcolumn.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskcolumn.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskcolumn.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, taskcolumn.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, taskcolumn.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, taskcolumn.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, taskcolumn.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, taskcolumn.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, taskcolumn.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, taskcolumn.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, taskcolumn.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, taskcolumn.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, taskcolumn.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, taskcolumn.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, taskcolumn.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, taskcolumn.NameContainsFold(*i.NameContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, taskcolumn.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, taskcolumn.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, taskcolumn.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, taskcolumn.TypeNotIn(i.TypeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskcolumn.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskcolumn.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskcolumn.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskcolumn.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskcolumn.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskcolumn.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskcolumn.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskcolumn.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskcolumn.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskcolumn.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskcolumn.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammateTaskColumns != nil {
		p := taskcolumn.HasTeammateTaskColumns()
		if !*i.HasTeammateTaskColumns {
			p = taskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskColumnsWith) > 0 {
		with := make([]predicate.TeammateTaskColumn, 0, len(i.HasTeammateTaskColumnsWith))
		for _, w := range i.HasTeammateTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskcolumn.HasTeammateTaskColumnsWith(with...))
	}
	if i.HasProjectTaskColumns != nil {
		p := taskcolumn.HasProjectTaskColumns()
		if !*i.HasProjectTaskColumns {
			p = taskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskColumnsWith) > 0 {
		with := make([]predicate.ProjectTaskColumn, 0, len(i.HasProjectTaskColumnsWith))
		for _, w := range i.HasProjectTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskcolumn.HasProjectTaskColumnsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskColumnWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskcolumn.And(predicates...), nil
	}
}

// TaskFeedWhereInput represents a where input for filtering TaskFeed queries.
type TaskFeedWhereInput struct {
	Not *TaskFeedWhereInput   `json:"not,omitempty"`
	Or  []*TaskFeedWhereInput `json:"or,omitempty"`
	And []*TaskFeedWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "is_first" field predicates.
	IsFirst    *bool `json:"isFirst,omitempty"`
	IsFirstNEQ *bool `json:"isFirstNEQ,omitempty"`

	// "is_pinned" field predicates.
	IsPinned    *bool `json:"isPinned,omitempty"`
	IsPinnedNEQ *bool `json:"isPinnedNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "taskFeedLikes" edge predicates.
	HasTaskFeedLikes     *bool                     `json:"hasTaskFeedLikes,omitempty"`
	HasTaskFeedLikesWith []*TaskFeedLikeWhereInput `json:"hasTaskFeedLikesWith,omitempty"`

	// "taskFiles" edge predicates.
	HasTaskFiles     *bool                 `json:"hasTaskFiles,omitempty"`
	HasTaskFilesWith []*TaskFileWhereInput `json:"hasTaskFilesWith,omitempty"`
}

// Filter applies the TaskFeedWhereInput filter on the TaskFeedQuery builder.
func (i *TaskFeedWhereInput) Filter(q *TaskFeedQuery) (*TaskFeedQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskfeeds.
// An error is returned if the input is empty or invalid.
func (i *TaskFeedWhereInput) P() (predicate.TaskFeed, error) {
	var predicates []predicate.TaskFeed
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskfeed.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskFeed, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskfeed.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskFeed, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskfeed.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskfeed.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskfeed.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskfeed.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskfeed.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskfeed.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskfeed.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskfeed.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskfeed.IDLTE(*i.IDLTE))
	}
	if i.TaskID != nil {
		predicates = append(predicates, taskfeed.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, taskfeed.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, taskfeed.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, taskfeed.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, taskfeed.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, taskfeed.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, taskfeed.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, taskfeed.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, taskfeed.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, taskfeed.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, taskfeed.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, taskfeed.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, taskfeed.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, taskfeed.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, taskfeed.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, taskfeed.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, taskfeed.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, taskfeed.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, taskfeed.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, taskfeed.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, taskfeed.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, taskfeed.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, taskfeed.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, taskfeed.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, taskfeed.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, taskfeed.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.IsFirst != nil {
		predicates = append(predicates, taskfeed.IsFirstEQ(*i.IsFirst))
	}
	if i.IsFirstNEQ != nil {
		predicates = append(predicates, taskfeed.IsFirstNEQ(*i.IsFirstNEQ))
	}
	if i.IsPinned != nil {
		predicates = append(predicates, taskfeed.IsPinnedEQ(*i.IsPinned))
	}
	if i.IsPinnedNEQ != nil {
		predicates = append(predicates, taskfeed.IsPinnedNEQ(*i.IsPinnedNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskfeed.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskfeed.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskfeed.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskfeed.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskfeed.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskfeed.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskfeed.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskfeed.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskfeed.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskfeed.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskfeed.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskfeed.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskfeed.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskfeed.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskfeed.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskfeed.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := taskfeed.HasTask()
		if !*i.HasTask {
			p = taskfeed.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfeed.HasTaskWith(with...))
	}
	if i.HasTeammate != nil {
		p := taskfeed.HasTeammate()
		if !*i.HasTeammate {
			p = taskfeed.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfeed.HasTeammateWith(with...))
	}
	if i.HasTaskFeedLikes != nil {
		p := taskfeed.HasTaskFeedLikes()
		if !*i.HasTaskFeedLikes {
			p = taskfeed.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFeedLikesWith) > 0 {
		with := make([]predicate.TaskFeedLike, 0, len(i.HasTaskFeedLikesWith))
		for _, w := range i.HasTaskFeedLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfeed.HasTaskFeedLikesWith(with...))
	}
	if i.HasTaskFiles != nil {
		p := taskfeed.HasTaskFiles()
		if !*i.HasTaskFiles {
			p = taskfeed.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFilesWith) > 0 {
		with := make([]predicate.TaskFile, 0, len(i.HasTaskFilesWith))
		for _, w := range i.HasTaskFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfeed.HasTaskFilesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskFeedWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskfeed.And(predicates...), nil
	}
}

// TaskFeedLikeWhereInput represents a where input for filtering TaskFeedLike queries.
type TaskFeedLikeWhereInput struct {
	Not *TaskFeedLikeWhereInput   `json:"not,omitempty"`
	Or  []*TaskFeedLikeWhereInput `json:"or,omitempty"`
	And []*TaskFeedLikeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "task_feed_id" field predicates.
	TaskFeedID             *ulid.ID  `json:"taskFeedID,omitempty"`
	TaskFeedIDNEQ          *ulid.ID  `json:"taskFeedIDNEQ,omitempty"`
	TaskFeedIDIn           []ulid.ID `json:"taskFeedIDIn,omitempty"`
	TaskFeedIDNotIn        []ulid.ID `json:"taskFeedIDNotIn,omitempty"`
	TaskFeedIDGT           *ulid.ID  `json:"taskFeedIDGT,omitempty"`
	TaskFeedIDGTE          *ulid.ID  `json:"taskFeedIDGTE,omitempty"`
	TaskFeedIDLT           *ulid.ID  `json:"taskFeedIDLT,omitempty"`
	TaskFeedIDLTE          *ulid.ID  `json:"taskFeedIDLTE,omitempty"`
	TaskFeedIDContains     *ulid.ID  `json:"taskFeedIDContains,omitempty"`
	TaskFeedIDHasPrefix    *ulid.ID  `json:"taskFeedIDHasPrefix,omitempty"`
	TaskFeedIDHasSuffix    *ulid.ID  `json:"taskFeedIDHasSuffix,omitempty"`
	TaskFeedIDEqualFold    *ulid.ID  `json:"taskFeedIDEqualFold,omitempty"`
	TaskFeedIDContainsFold *ulid.ID  `json:"taskFeedIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "feed" edge predicates.
	HasFeed     *bool                 `json:"hasFeed,omitempty"`
	HasFeedWith []*TaskFeedWhereInput `json:"hasFeedWith,omitempty"`
}

// Filter applies the TaskFeedLikeWhereInput filter on the TaskFeedLikeQuery builder.
func (i *TaskFeedLikeWhereInput) Filter(q *TaskFeedLikeQuery) (*TaskFeedLikeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskfeedlikes.
// An error is returned if the input is empty or invalid.
func (i *TaskFeedLikeWhereInput) P() (predicate.TaskFeedLike, error) {
	var predicates []predicate.TaskFeedLike
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskfeedlike.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskFeedLike, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskfeedlike.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskFeedLike, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskfeedlike.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskfeedlike.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskfeedlike.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskfeedlike.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskfeedlike.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskfeedlike.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskfeedlike.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskfeedlike.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskfeedlike.IDLTE(*i.IDLTE))
	}
	if i.TaskID != nil {
		predicates = append(predicates, taskfeedlike.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, taskfeedlike.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, taskfeedlike.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, taskfeedlike.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, taskfeedlike.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, taskfeedlike.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, taskfeedlike.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, taskfeedlike.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, taskfeedlike.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, taskfeedlike.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, taskfeedlike.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, taskfeedlike.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, taskfeedlike.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, taskfeedlike.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, taskfeedlike.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, taskfeedlike.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.TaskFeedID != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDEQ(*i.TaskFeedID))
	}
	if i.TaskFeedIDNEQ != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDNEQ(*i.TaskFeedIDNEQ))
	}
	if len(i.TaskFeedIDIn) > 0 {
		predicates = append(predicates, taskfeedlike.TaskFeedIDIn(i.TaskFeedIDIn...))
	}
	if len(i.TaskFeedIDNotIn) > 0 {
		predicates = append(predicates, taskfeedlike.TaskFeedIDNotIn(i.TaskFeedIDNotIn...))
	}
	if i.TaskFeedIDGT != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDGT(*i.TaskFeedIDGT))
	}
	if i.TaskFeedIDGTE != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDGTE(*i.TaskFeedIDGTE))
	}
	if i.TaskFeedIDLT != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDLT(*i.TaskFeedIDLT))
	}
	if i.TaskFeedIDLTE != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDLTE(*i.TaskFeedIDLTE))
	}
	if i.TaskFeedIDContains != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDContains(*i.TaskFeedIDContains))
	}
	if i.TaskFeedIDHasPrefix != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDHasPrefix(*i.TaskFeedIDHasPrefix))
	}
	if i.TaskFeedIDHasSuffix != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDHasSuffix(*i.TaskFeedIDHasSuffix))
	}
	if i.TaskFeedIDEqualFold != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDEqualFold(*i.TaskFeedIDEqualFold))
	}
	if i.TaskFeedIDContainsFold != nil {
		predicates = append(predicates, taskfeedlike.TaskFeedIDContainsFold(*i.TaskFeedIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskfeedlike.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskfeedlike.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskfeedlike.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskfeedlike.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskfeedlike.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskfeedlike.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskfeedlike.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskfeedlike.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskfeedlike.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskfeedlike.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskfeedlike.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskfeedlike.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskfeedlike.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskfeedlike.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskfeedlike.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskfeedlike.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := taskfeedlike.HasTask()
		if !*i.HasTask {
			p = taskfeedlike.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfeedlike.HasTaskWith(with...))
	}
	if i.HasTeammate != nil {
		p := taskfeedlike.HasTeammate()
		if !*i.HasTeammate {
			p = taskfeedlike.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfeedlike.HasTeammateWith(with...))
	}
	if i.HasFeed != nil {
		p := taskfeedlike.HasFeed()
		if !*i.HasFeed {
			p = taskfeedlike.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFeedWith) > 0 {
		with := make([]predicate.TaskFeed, 0, len(i.HasFeedWith))
		for _, w := range i.HasFeedWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfeedlike.HasFeedWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskFeedLikeWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskfeedlike.And(predicates...), nil
	}
}

// TaskFileWhereInput represents a where input for filtering TaskFile queries.
type TaskFileWhereInput struct {
	Not *TaskFileWhereInput   `json:"not,omitempty"`
	Or  []*TaskFileWhereInput `json:"or,omitempty"`
	And []*TaskFileWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "task_feed_id" field predicates.
	TaskFeedID             *ulid.ID  `json:"taskFeedID,omitempty"`
	TaskFeedIDNEQ          *ulid.ID  `json:"taskFeedIDNEQ,omitempty"`
	TaskFeedIDIn           []ulid.ID `json:"taskFeedIDIn,omitempty"`
	TaskFeedIDNotIn        []ulid.ID `json:"taskFeedIDNotIn,omitempty"`
	TaskFeedIDGT           *ulid.ID  `json:"taskFeedIDGT,omitempty"`
	TaskFeedIDGTE          *ulid.ID  `json:"taskFeedIDGTE,omitempty"`
	TaskFeedIDLT           *ulid.ID  `json:"taskFeedIDLT,omitempty"`
	TaskFeedIDLTE          *ulid.ID  `json:"taskFeedIDLTE,omitempty"`
	TaskFeedIDContains     *ulid.ID  `json:"taskFeedIDContains,omitempty"`
	TaskFeedIDHasPrefix    *ulid.ID  `json:"taskFeedIDHasPrefix,omitempty"`
	TaskFeedIDHasSuffix    *ulid.ID  `json:"taskFeedIDHasSuffix,omitempty"`
	TaskFeedIDEqualFold    *ulid.ID  `json:"taskFeedIDEqualFold,omitempty"`
	TaskFeedIDContainsFold *ulid.ID  `json:"taskFeedIDContainsFold,omitempty"`

	// "file_type_id" field predicates.
	FileTypeID             *ulid.ID  `json:"fileTypeID,omitempty"`
	FileTypeIDNEQ          *ulid.ID  `json:"fileTypeIDNEQ,omitempty"`
	FileTypeIDIn           []ulid.ID `json:"fileTypeIDIn,omitempty"`
	FileTypeIDNotIn        []ulid.ID `json:"fileTypeIDNotIn,omitempty"`
	FileTypeIDGT           *ulid.ID  `json:"fileTypeIDGT,omitempty"`
	FileTypeIDGTE          *ulid.ID  `json:"fileTypeIDGTE,omitempty"`
	FileTypeIDLT           *ulid.ID  `json:"fileTypeIDLT,omitempty"`
	FileTypeIDLTE          *ulid.ID  `json:"fileTypeIDLTE,omitempty"`
	FileTypeIDContains     *ulid.ID  `json:"fileTypeIDContains,omitempty"`
	FileTypeIDHasPrefix    *ulid.ID  `json:"fileTypeIDHasPrefix,omitempty"`
	FileTypeIDHasSuffix    *ulid.ID  `json:"fileTypeIDHasSuffix,omitempty"`
	FileTypeIDEqualFold    *ulid.ID  `json:"fileTypeIDEqualFold,omitempty"`
	FileTypeIDContainsFold *ulid.ID  `json:"fileTypeIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "src" field predicates.
	Src             *string  `json:"src,omitempty"`
	SrcNEQ          *string  `json:"srcNEQ,omitempty"`
	SrcIn           []string `json:"srcIn,omitempty"`
	SrcNotIn        []string `json:"srcNotIn,omitempty"`
	SrcGT           *string  `json:"srcGT,omitempty"`
	SrcGTE          *string  `json:"srcGTE,omitempty"`
	SrcLT           *string  `json:"srcLT,omitempty"`
	SrcLTE          *string  `json:"srcLTE,omitempty"`
	SrcContains     *string  `json:"srcContains,omitempty"`
	SrcHasPrefix    *string  `json:"srcHasPrefix,omitempty"`
	SrcHasSuffix    *string  `json:"srcHasSuffix,omitempty"`
	SrcEqualFold    *string  `json:"srcEqualFold,omitempty"`
	SrcContainsFold *string  `json:"srcContainsFold,omitempty"`

	// "attached" field predicates.
	Attached    *bool `json:"attached,omitempty"`
	AttachedNEQ *bool `json:"attachedNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "taskFeed" edge predicates.
	HasTaskFeed     *bool                 `json:"hasTaskFeed,omitempty"`
	HasTaskFeedWith []*TaskFeedWhereInput `json:"hasTaskFeedWith,omitempty"`

	// "fileType" edge predicates.
	HasFileType     *bool                 `json:"hasFileType,omitempty"`
	HasFileTypeWith []*FileTypeWhereInput `json:"hasFileTypeWith,omitempty"`
}

// Filter applies the TaskFileWhereInput filter on the TaskFileQuery builder.
func (i *TaskFileWhereInput) Filter(q *TaskFileQuery) (*TaskFileQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskfiles.
// An error is returned if the input is empty or invalid.
func (i *TaskFileWhereInput) P() (predicate.TaskFile, error) {
	var predicates []predicate.TaskFile
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskfile.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskFile, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskfile.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskFile, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskfile.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskfile.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskfile.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskfile.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskfile.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskfile.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskfile.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskfile.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskfile.IDLTE(*i.IDLTE))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, taskfile.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, taskfile.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, taskfile.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, taskfile.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, taskfile.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, taskfile.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, taskfile.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, taskfile.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, taskfile.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, taskfile.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, taskfile.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, taskfile.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, taskfile.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TaskID != nil {
		predicates = append(predicates, taskfile.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, taskfile.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, taskfile.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, taskfile.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, taskfile.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, taskfile.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, taskfile.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, taskfile.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, taskfile.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, taskfile.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, taskfile.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, taskfile.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, taskfile.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.TaskFeedID != nil {
		predicates = append(predicates, taskfile.TaskFeedIDEQ(*i.TaskFeedID))
	}
	if i.TaskFeedIDNEQ != nil {
		predicates = append(predicates, taskfile.TaskFeedIDNEQ(*i.TaskFeedIDNEQ))
	}
	if len(i.TaskFeedIDIn) > 0 {
		predicates = append(predicates, taskfile.TaskFeedIDIn(i.TaskFeedIDIn...))
	}
	if len(i.TaskFeedIDNotIn) > 0 {
		predicates = append(predicates, taskfile.TaskFeedIDNotIn(i.TaskFeedIDNotIn...))
	}
	if i.TaskFeedIDGT != nil {
		predicates = append(predicates, taskfile.TaskFeedIDGT(*i.TaskFeedIDGT))
	}
	if i.TaskFeedIDGTE != nil {
		predicates = append(predicates, taskfile.TaskFeedIDGTE(*i.TaskFeedIDGTE))
	}
	if i.TaskFeedIDLT != nil {
		predicates = append(predicates, taskfile.TaskFeedIDLT(*i.TaskFeedIDLT))
	}
	if i.TaskFeedIDLTE != nil {
		predicates = append(predicates, taskfile.TaskFeedIDLTE(*i.TaskFeedIDLTE))
	}
	if i.TaskFeedIDContains != nil {
		predicates = append(predicates, taskfile.TaskFeedIDContains(*i.TaskFeedIDContains))
	}
	if i.TaskFeedIDHasPrefix != nil {
		predicates = append(predicates, taskfile.TaskFeedIDHasPrefix(*i.TaskFeedIDHasPrefix))
	}
	if i.TaskFeedIDHasSuffix != nil {
		predicates = append(predicates, taskfile.TaskFeedIDHasSuffix(*i.TaskFeedIDHasSuffix))
	}
	if i.TaskFeedIDEqualFold != nil {
		predicates = append(predicates, taskfile.TaskFeedIDEqualFold(*i.TaskFeedIDEqualFold))
	}
	if i.TaskFeedIDContainsFold != nil {
		predicates = append(predicates, taskfile.TaskFeedIDContainsFold(*i.TaskFeedIDContainsFold))
	}
	if i.FileTypeID != nil {
		predicates = append(predicates, taskfile.FileTypeIDEQ(*i.FileTypeID))
	}
	if i.FileTypeIDNEQ != nil {
		predicates = append(predicates, taskfile.FileTypeIDNEQ(*i.FileTypeIDNEQ))
	}
	if len(i.FileTypeIDIn) > 0 {
		predicates = append(predicates, taskfile.FileTypeIDIn(i.FileTypeIDIn...))
	}
	if len(i.FileTypeIDNotIn) > 0 {
		predicates = append(predicates, taskfile.FileTypeIDNotIn(i.FileTypeIDNotIn...))
	}
	if i.FileTypeIDGT != nil {
		predicates = append(predicates, taskfile.FileTypeIDGT(*i.FileTypeIDGT))
	}
	if i.FileTypeIDGTE != nil {
		predicates = append(predicates, taskfile.FileTypeIDGTE(*i.FileTypeIDGTE))
	}
	if i.FileTypeIDLT != nil {
		predicates = append(predicates, taskfile.FileTypeIDLT(*i.FileTypeIDLT))
	}
	if i.FileTypeIDLTE != nil {
		predicates = append(predicates, taskfile.FileTypeIDLTE(*i.FileTypeIDLTE))
	}
	if i.FileTypeIDContains != nil {
		predicates = append(predicates, taskfile.FileTypeIDContains(*i.FileTypeIDContains))
	}
	if i.FileTypeIDHasPrefix != nil {
		predicates = append(predicates, taskfile.FileTypeIDHasPrefix(*i.FileTypeIDHasPrefix))
	}
	if i.FileTypeIDHasSuffix != nil {
		predicates = append(predicates, taskfile.FileTypeIDHasSuffix(*i.FileTypeIDHasSuffix))
	}
	if i.FileTypeIDEqualFold != nil {
		predicates = append(predicates, taskfile.FileTypeIDEqualFold(*i.FileTypeIDEqualFold))
	}
	if i.FileTypeIDContainsFold != nil {
		predicates = append(predicates, taskfile.FileTypeIDContainsFold(*i.FileTypeIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, taskfile.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, taskfile.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, taskfile.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, taskfile.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, taskfile.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, taskfile.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, taskfile.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, taskfile.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, taskfile.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, taskfile.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, taskfile.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, taskfile.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, taskfile.NameContainsFold(*i.NameContainsFold))
	}
	if i.Src != nil {
		predicates = append(predicates, taskfile.SrcEQ(*i.Src))
	}
	if i.SrcNEQ != nil {
		predicates = append(predicates, taskfile.SrcNEQ(*i.SrcNEQ))
	}
	if len(i.SrcIn) > 0 {
		predicates = append(predicates, taskfile.SrcIn(i.SrcIn...))
	}
	if len(i.SrcNotIn) > 0 {
		predicates = append(predicates, taskfile.SrcNotIn(i.SrcNotIn...))
	}
	if i.SrcGT != nil {
		predicates = append(predicates, taskfile.SrcGT(*i.SrcGT))
	}
	if i.SrcGTE != nil {
		predicates = append(predicates, taskfile.SrcGTE(*i.SrcGTE))
	}
	if i.SrcLT != nil {
		predicates = append(predicates, taskfile.SrcLT(*i.SrcLT))
	}
	if i.SrcLTE != nil {
		predicates = append(predicates, taskfile.SrcLTE(*i.SrcLTE))
	}
	if i.SrcContains != nil {
		predicates = append(predicates, taskfile.SrcContains(*i.SrcContains))
	}
	if i.SrcHasPrefix != nil {
		predicates = append(predicates, taskfile.SrcHasPrefix(*i.SrcHasPrefix))
	}
	if i.SrcHasSuffix != nil {
		predicates = append(predicates, taskfile.SrcHasSuffix(*i.SrcHasSuffix))
	}
	if i.SrcEqualFold != nil {
		predicates = append(predicates, taskfile.SrcEqualFold(*i.SrcEqualFold))
	}
	if i.SrcContainsFold != nil {
		predicates = append(predicates, taskfile.SrcContainsFold(*i.SrcContainsFold))
	}
	if i.Attached != nil {
		predicates = append(predicates, taskfile.AttachedEQ(*i.Attached))
	}
	if i.AttachedNEQ != nil {
		predicates = append(predicates, taskfile.AttachedNEQ(*i.AttachedNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskfile.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskfile.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskfile.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskfile.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskfile.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskfile.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskfile.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskfile.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskfile.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskfile.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskfile.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskfile.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskfile.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskfile.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskfile.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskfile.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasProject != nil {
		p := taskfile.HasProject()
		if !*i.HasProject {
			p = taskfile.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfile.HasProjectWith(with...))
	}
	if i.HasTask != nil {
		p := taskfile.HasTask()
		if !*i.HasTask {
			p = taskfile.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfile.HasTaskWith(with...))
	}
	if i.HasTaskFeed != nil {
		p := taskfile.HasTaskFeed()
		if !*i.HasTaskFeed {
			p = taskfile.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFeedWith) > 0 {
		with := make([]predicate.TaskFeed, 0, len(i.HasTaskFeedWith))
		for _, w := range i.HasTaskFeedWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfile.HasTaskFeedWith(with...))
	}
	if i.HasFileType != nil {
		p := taskfile.HasFileType()
		if !*i.HasFileType {
			p = taskfile.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFileTypeWith) > 0 {
		with := make([]predicate.FileType, 0, len(i.HasFileTypeWith))
		for _, w := range i.HasFileTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskfile.HasFileTypeWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskFileWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskfile.And(predicates...), nil
	}
}

// TaskLikeWhereInput represents a where input for filtering TaskLike queries.
type TaskLikeWhereInput struct {
	Not *TaskLikeWhereInput   `json:"not,omitempty"`
	Or  []*TaskLikeWhereInput `json:"or,omitempty"`
	And []*TaskLikeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`
}

// Filter applies the TaskLikeWhereInput filter on the TaskLikeQuery builder.
func (i *TaskLikeWhereInput) Filter(q *TaskLikeQuery) (*TaskLikeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasklikes.
// An error is returned if the input is empty or invalid.
func (i *TaskLikeWhereInput) P() (predicate.TaskLike, error) {
	var predicates []predicate.TaskLike
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasklike.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskLike, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasklike.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskLike, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasklike.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasklike.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasklike.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasklike.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasklike.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasklike.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasklike.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasklike.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasklike.IDLTE(*i.IDLTE))
	}
	if i.TaskID != nil {
		predicates = append(predicates, tasklike.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, tasklike.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, tasklike.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, tasklike.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, tasklike.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, tasklike.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, tasklike.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, tasklike.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, tasklike.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, tasklike.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, tasklike.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, tasklike.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, tasklike.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, tasklike.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, tasklike.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, tasklike.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, tasklike.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, tasklike.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, tasklike.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, tasklike.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, tasklike.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, tasklike.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, tasklike.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, tasklike.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, tasklike.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, tasklike.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, tasklike.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, tasklike.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, tasklike.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, tasklike.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, tasklike.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, tasklike.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, tasklike.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, tasklike.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, tasklike.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, tasklike.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, tasklike.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, tasklike.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, tasklike.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasklike.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasklike.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasklike.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasklike.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasklike.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasklike.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasklike.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasklike.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasklike.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasklike.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasklike.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasklike.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasklike.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasklike.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasklike.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasklike.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := tasklike.HasTask()
		if !*i.HasTask {
			p = tasklike.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklike.HasTaskWith(with...))
	}
	if i.HasTeammate != nil {
		p := tasklike.HasTeammate()
		if !*i.HasTeammate {
			p = tasklike.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklike.HasTeammateWith(with...))
	}
	if i.HasWorkspace != nil {
		p := tasklike.HasWorkspace()
		if !*i.HasWorkspace {
			p = tasklike.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklike.HasWorkspaceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskLikeWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasklike.And(predicates...), nil
	}
}

// TaskListCompletedStatusWhereInput represents a where input for filtering TaskListCompletedStatus queries.
type TaskListCompletedStatusWhereInput struct {
	Not *TaskListCompletedStatusWhereInput   `json:"not,omitempty"`
	Or  []*TaskListCompletedStatusWhereInput `json:"or,omitempty"`
	And []*TaskListCompletedStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "status_code" field predicates.
	StatusCode      *tasklistcompletedstatus.StatusCode  `json:"statusCode,omitempty"`
	StatusCodeNEQ   *tasklistcompletedstatus.StatusCode  `json:"statusCodeNEQ,omitempty"`
	StatusCodeIn    []tasklistcompletedstatus.StatusCode `json:"statusCodeIn,omitempty"`
	StatusCodeNotIn []tasklistcompletedstatus.StatusCode `json:"statusCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammateTaskListStatuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`

	// "projectTaskListStatuses" edge predicates.
	HasProjectTaskListStatuses     *bool                              `json:"hasProjectTaskListStatuses,omitempty"`
	HasProjectTaskListStatusesWith []*ProjectTaskListStatusWhereInput `json:"hasProjectTaskListStatusesWith,omitempty"`
}

// Filter applies the TaskListCompletedStatusWhereInput filter on the TaskListCompletedStatusQuery builder.
func (i *TaskListCompletedStatusWhereInput) Filter(q *TaskListCompletedStatusQuery) (*TaskListCompletedStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasklistcompletedstatusslice.
// An error is returned if the input is empty or invalid.
func (i *TaskListCompletedStatusWhereInput) P() (predicate.TaskListCompletedStatus, error) {
	var predicates []predicate.TaskListCompletedStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasklistcompletedstatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskListCompletedStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskListCompletedStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tasklistcompletedstatus.NameContainsFold(*i.NameContainsFold))
	}
	if i.StatusCode != nil {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeEQ(*i.StatusCode))
	}
	if i.StatusCodeNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeNEQ(*i.StatusCodeNEQ))
	}
	if len(i.StatusCodeIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeIn(i.StatusCodeIn...))
	}
	if len(i.StatusCodeNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.StatusCodeNotIn(i.StatusCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasklistcompletedstatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammateTaskListStatuses != nil {
		p := tasklistcompletedstatus.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = tasklistcompletedstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.HasTeammateTaskListStatusesWith(with...))
	}
	if i.HasProjectTaskListStatuses != nil {
		p := tasklistcompletedstatus.HasProjectTaskListStatuses()
		if !*i.HasProjectTaskListStatuses {
			p = tasklistcompletedstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskListStatusesWith) > 0 {
		with := make([]predicate.ProjectTaskListStatus, 0, len(i.HasProjectTaskListStatusesWith))
		for _, w := range i.HasProjectTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistcompletedstatus.HasProjectTaskListStatusesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskListCompletedStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasklistcompletedstatus.And(predicates...), nil
	}
}

// TaskListSortStatusWhereInput represents a where input for filtering TaskListSortStatus queries.
type TaskListSortStatusWhereInput struct {
	Not *TaskListSortStatusWhereInput   `json:"not,omitempty"`
	Or  []*TaskListSortStatusWhereInput `json:"or,omitempty"`
	And []*TaskListSortStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "status_code" field predicates.
	StatusCode      *tasklistsortstatus.StatusCode  `json:"statusCode,omitempty"`
	StatusCodeNEQ   *tasklistsortstatus.StatusCode  `json:"statusCodeNEQ,omitempty"`
	StatusCodeIn    []tasklistsortstatus.StatusCode `json:"statusCodeIn,omitempty"`
	StatusCodeNotIn []tasklistsortstatus.StatusCode `json:"statusCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammateTaskListStatuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`

	// "projectTaskListStatuses" edge predicates.
	HasProjectTaskListStatuses     *bool                              `json:"hasProjectTaskListStatuses,omitempty"`
	HasProjectTaskListStatusesWith []*ProjectTaskListStatusWhereInput `json:"hasProjectTaskListStatusesWith,omitempty"`
}

// Filter applies the TaskListSortStatusWhereInput filter on the TaskListSortStatusQuery builder.
func (i *TaskListSortStatusWhereInput) Filter(q *TaskListSortStatusQuery) (*TaskListSortStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasklistsortstatusslice.
// An error is returned if the input is empty or invalid.
func (i *TaskListSortStatusWhereInput) P() (predicate.TaskListSortStatus, error) {
	var predicates []predicate.TaskListSortStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasklistsortstatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskListSortStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasklistsortstatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskListSortStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasklistsortstatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasklistsortstatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasklistsortstatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasklistsortstatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasklistsortstatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasklistsortstatus.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tasklistsortstatus.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tasklistsortstatus.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tasklistsortstatus.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tasklistsortstatus.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tasklistsortstatus.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tasklistsortstatus.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tasklistsortstatus.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tasklistsortstatus.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tasklistsortstatus.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tasklistsortstatus.NameContainsFold(*i.NameContainsFold))
	}
	if i.StatusCode != nil {
		predicates = append(predicates, tasklistsortstatus.StatusCodeEQ(*i.StatusCode))
	}
	if i.StatusCodeNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.StatusCodeNEQ(*i.StatusCodeNEQ))
	}
	if len(i.StatusCodeIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.StatusCodeIn(i.StatusCodeIn...))
	}
	if len(i.StatusCodeNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.StatusCodeNotIn(i.StatusCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasklistsortstatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasklistsortstatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammateTaskListStatuses != nil {
		p := tasklistsortstatus.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = tasklistsortstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistsortstatus.HasTeammateTaskListStatusesWith(with...))
	}
	if i.HasProjectTaskListStatuses != nil {
		p := tasklistsortstatus.HasProjectTaskListStatuses()
		if !*i.HasProjectTaskListStatuses {
			p = tasklistsortstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTaskListStatusesWith) > 0 {
		with := make([]predicate.ProjectTaskListStatus, 0, len(i.HasProjectTaskListStatusesWith))
		for _, w := range i.HasProjectTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasklistsortstatus.HasProjectTaskListStatusesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskListSortStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasklistsortstatus.And(predicates...), nil
	}
}

// TaskPriorityWhereInput represents a where input for filtering TaskPriority queries.
type TaskPriorityWhereInput struct {
	Not *TaskPriorityWhereInput   `json:"not,omitempty"`
	Or  []*TaskPriorityWhereInput `json:"or,omitempty"`
	And []*TaskPriorityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "color_id" field predicates.
	ColorID             *ulid.ID  `json:"colorID,omitempty"`
	ColorIDNEQ          *ulid.ID  `json:"colorIDNEQ,omitempty"`
	ColorIDIn           []ulid.ID `json:"colorIDIn,omitempty"`
	ColorIDNotIn        []ulid.ID `json:"colorIDNotIn,omitempty"`
	ColorIDGT           *ulid.ID  `json:"colorIDGT,omitempty"`
	ColorIDGTE          *ulid.ID  `json:"colorIDGTE,omitempty"`
	ColorIDLT           *ulid.ID  `json:"colorIDLT,omitempty"`
	ColorIDLTE          *ulid.ID  `json:"colorIDLTE,omitempty"`
	ColorIDContains     *ulid.ID  `json:"colorIDContains,omitempty"`
	ColorIDHasPrefix    *ulid.ID  `json:"colorIDHasPrefix,omitempty"`
	ColorIDHasSuffix    *ulid.ID  `json:"colorIDHasSuffix,omitempty"`
	ColorIDEqualFold    *ulid.ID  `json:"colorIDEqualFold,omitempty"`
	ColorIDContainsFold *ulid.ID  `json:"colorIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "priority_type" field predicates.
	PriorityType      *taskpriority.PriorityType  `json:"priorityType,omitempty"`
	PriorityTypeNEQ   *taskpriority.PriorityType  `json:"priorityTypeNEQ,omitempty"`
	PriorityTypeIn    []taskpriority.PriorityType `json:"priorityTypeIn,omitempty"`
	PriorityTypeNotIn []taskpriority.PriorityType `json:"priorityTypeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "color" edge predicates.
	HasColor     *bool              `json:"hasColor,omitempty"`
	HasColorWith []*ColorWhereInput `json:"hasColorWith,omitempty"`

	// "tasks" edge predicates.
	HasTasks     *bool             `json:"hasTasks,omitempty"`
	HasTasksWith []*TaskWhereInput `json:"hasTasksWith,omitempty"`
}

// Filter applies the TaskPriorityWhereInput filter on the TaskPriorityQuery builder.
func (i *TaskPriorityWhereInput) Filter(q *TaskPriorityQuery) (*TaskPriorityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering taskpriorities.
// An error is returned if the input is empty or invalid.
func (i *TaskPriorityWhereInput) P() (predicate.TaskPriority, error) {
	var predicates []predicate.TaskPriority
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, taskpriority.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskPriority, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, taskpriority.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskPriority, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, taskpriority.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, taskpriority.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, taskpriority.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, taskpriority.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, taskpriority.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, taskpriority.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, taskpriority.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, taskpriority.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, taskpriority.IDLTE(*i.IDLTE))
	}
	if i.ColorID != nil {
		predicates = append(predicates, taskpriority.ColorIDEQ(*i.ColorID))
	}
	if i.ColorIDNEQ != nil {
		predicates = append(predicates, taskpriority.ColorIDNEQ(*i.ColorIDNEQ))
	}
	if len(i.ColorIDIn) > 0 {
		predicates = append(predicates, taskpriority.ColorIDIn(i.ColorIDIn...))
	}
	if len(i.ColorIDNotIn) > 0 {
		predicates = append(predicates, taskpriority.ColorIDNotIn(i.ColorIDNotIn...))
	}
	if i.ColorIDGT != nil {
		predicates = append(predicates, taskpriority.ColorIDGT(*i.ColorIDGT))
	}
	if i.ColorIDGTE != nil {
		predicates = append(predicates, taskpriority.ColorIDGTE(*i.ColorIDGTE))
	}
	if i.ColorIDLT != nil {
		predicates = append(predicates, taskpriority.ColorIDLT(*i.ColorIDLT))
	}
	if i.ColorIDLTE != nil {
		predicates = append(predicates, taskpriority.ColorIDLTE(*i.ColorIDLTE))
	}
	if i.ColorIDContains != nil {
		predicates = append(predicates, taskpriority.ColorIDContains(*i.ColorIDContains))
	}
	if i.ColorIDHasPrefix != nil {
		predicates = append(predicates, taskpriority.ColorIDHasPrefix(*i.ColorIDHasPrefix))
	}
	if i.ColorIDHasSuffix != nil {
		predicates = append(predicates, taskpriority.ColorIDHasSuffix(*i.ColorIDHasSuffix))
	}
	if i.ColorIDEqualFold != nil {
		predicates = append(predicates, taskpriority.ColorIDEqualFold(*i.ColorIDEqualFold))
	}
	if i.ColorIDContainsFold != nil {
		predicates = append(predicates, taskpriority.ColorIDContainsFold(*i.ColorIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, taskpriority.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, taskpriority.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, taskpriority.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, taskpriority.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, taskpriority.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, taskpriority.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, taskpriority.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, taskpriority.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, taskpriority.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, taskpriority.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, taskpriority.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, taskpriority.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, taskpriority.NameContainsFold(*i.NameContainsFold))
	}
	if i.PriorityType != nil {
		predicates = append(predicates, taskpriority.PriorityTypeEQ(*i.PriorityType))
	}
	if i.PriorityTypeNEQ != nil {
		predicates = append(predicates, taskpriority.PriorityTypeNEQ(*i.PriorityTypeNEQ))
	}
	if len(i.PriorityTypeIn) > 0 {
		predicates = append(predicates, taskpriority.PriorityTypeIn(i.PriorityTypeIn...))
	}
	if len(i.PriorityTypeNotIn) > 0 {
		predicates = append(predicates, taskpriority.PriorityTypeNotIn(i.PriorityTypeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, taskpriority.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, taskpriority.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, taskpriority.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, taskpriority.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, taskpriority.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, taskpriority.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, taskpriority.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, taskpriority.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, taskpriority.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, taskpriority.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, taskpriority.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, taskpriority.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, taskpriority.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, taskpriority.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, taskpriority.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, taskpriority.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasColor != nil {
		p := taskpriority.HasColor()
		if !*i.HasColor {
			p = taskpriority.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasColorWith) > 0 {
		with := make([]predicate.Color, 0, len(i.HasColorWith))
		for _, w := range i.HasColorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskpriority.HasColorWith(with...))
	}
	if i.HasTasks != nil {
		p := taskpriority.HasTasks()
		if !*i.HasTasks {
			p = taskpriority.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTasksWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTasksWith))
		for _, w := range i.HasTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, taskpriority.HasTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskPriorityWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return taskpriority.And(predicates...), nil
	}
}

// TaskSectionWhereInput represents a where input for filtering TaskSection queries.
type TaskSectionWhereInput struct {
	Not *TaskSectionWhereInput   `json:"not,omitempty"`
	Or  []*TaskSectionWhereInput `json:"or,omitempty"`
	And []*TaskSectionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`
}

// Filter applies the TaskSectionWhereInput filter on the TaskSectionQuery builder.
func (i *TaskSectionWhereInput) Filter(q *TaskSectionQuery) (*TaskSectionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasksections.
// An error is returned if the input is empty or invalid.
func (i *TaskSectionWhereInput) P() (predicate.TaskSection, error) {
	var predicates []predicate.TaskSection
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasksection.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskSection, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasksection.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskSection, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasksection.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasksection.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasksection.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasksection.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasksection.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasksection.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasksection.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasksection.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasksection.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, tasksection.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tasksection.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tasksection.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tasksection.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tasksection.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tasksection.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tasksection.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tasksection.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tasksection.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tasksection.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tasksection.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tasksection.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tasksection.NameContainsFold(*i.NameContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasksection.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasksection.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasksection.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasksection.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasksection.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasksection.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasksection.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasksection.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasksection.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasksection.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasksection.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasksection.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasksection.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasksection.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasksection.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasksection.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskSectionWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasksection.And(predicates...), nil
	}
}

// TaskTagWhereInput represents a where input for filtering TaskTag queries.
type TaskTagWhereInput struct {
	Not *TaskTagWhereInput   `json:"not,omitempty"`
	Or  []*TaskTagWhereInput `json:"or,omitempty"`
	And []*TaskTagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "tag_id" field predicates.
	TagID             *ulid.ID  `json:"tagID,omitempty"`
	TagIDNEQ          *ulid.ID  `json:"tagIDNEQ,omitempty"`
	TagIDIn           []ulid.ID `json:"tagIDIn,omitempty"`
	TagIDNotIn        []ulid.ID `json:"tagIDNotIn,omitempty"`
	TagIDGT           *ulid.ID  `json:"tagIDGT,omitempty"`
	TagIDGTE          *ulid.ID  `json:"tagIDGTE,omitempty"`
	TagIDLT           *ulid.ID  `json:"tagIDLT,omitempty"`
	TagIDLTE          *ulid.ID  `json:"tagIDLTE,omitempty"`
	TagIDContains     *ulid.ID  `json:"tagIDContains,omitempty"`
	TagIDHasPrefix    *ulid.ID  `json:"tagIDHasPrefix,omitempty"`
	TagIDHasSuffix    *ulid.ID  `json:"tagIDHasSuffix,omitempty"`
	TagIDEqualFold    *ulid.ID  `json:"tagIDEqualFold,omitempty"`
	TagIDContainsFold *ulid.ID  `json:"tagIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "tag" edge predicates.
	HasTag     *bool            `json:"hasTag,omitempty"`
	HasTagWith []*TagWhereInput `json:"hasTagWith,omitempty"`
}

// Filter applies the TaskTagWhereInput filter on the TaskTagQuery builder.
func (i *TaskTagWhereInput) Filter(q *TaskTagQuery) (*TaskTagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasktags.
// An error is returned if the input is empty or invalid.
func (i *TaskTagWhereInput) P() (predicate.TaskTag, error) {
	var predicates []predicate.TaskTag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tasktag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TaskTag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tasktag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TaskTag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tasktag.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tasktag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tasktag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tasktag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tasktag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tasktag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tasktag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tasktag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tasktag.IDLTE(*i.IDLTE))
	}
	if i.TaskID != nil {
		predicates = append(predicates, tasktag.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, tasktag.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, tasktag.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, tasktag.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, tasktag.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, tasktag.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, tasktag.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, tasktag.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, tasktag.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, tasktag.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, tasktag.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, tasktag.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, tasktag.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.TagID != nil {
		predicates = append(predicates, tasktag.TagIDEQ(*i.TagID))
	}
	if i.TagIDNEQ != nil {
		predicates = append(predicates, tasktag.TagIDNEQ(*i.TagIDNEQ))
	}
	if len(i.TagIDIn) > 0 {
		predicates = append(predicates, tasktag.TagIDIn(i.TagIDIn...))
	}
	if len(i.TagIDNotIn) > 0 {
		predicates = append(predicates, tasktag.TagIDNotIn(i.TagIDNotIn...))
	}
	if i.TagIDGT != nil {
		predicates = append(predicates, tasktag.TagIDGT(*i.TagIDGT))
	}
	if i.TagIDGTE != nil {
		predicates = append(predicates, tasktag.TagIDGTE(*i.TagIDGTE))
	}
	if i.TagIDLT != nil {
		predicates = append(predicates, tasktag.TagIDLT(*i.TagIDLT))
	}
	if i.TagIDLTE != nil {
		predicates = append(predicates, tasktag.TagIDLTE(*i.TagIDLTE))
	}
	if i.TagIDContains != nil {
		predicates = append(predicates, tasktag.TagIDContains(*i.TagIDContains))
	}
	if i.TagIDHasPrefix != nil {
		predicates = append(predicates, tasktag.TagIDHasPrefix(*i.TagIDHasPrefix))
	}
	if i.TagIDHasSuffix != nil {
		predicates = append(predicates, tasktag.TagIDHasSuffix(*i.TagIDHasSuffix))
	}
	if i.TagIDEqualFold != nil {
		predicates = append(predicates, tasktag.TagIDEqualFold(*i.TagIDEqualFold))
	}
	if i.TagIDContainsFold != nil {
		predicates = append(predicates, tasktag.TagIDContainsFold(*i.TagIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tasktag.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tasktag.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tasktag.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tasktag.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tasktag.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tasktag.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tasktag.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tasktag.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, tasktag.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, tasktag.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, tasktag.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, tasktag.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, tasktag.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, tasktag.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, tasktag.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, tasktag.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := tasktag.HasTask()
		if !*i.HasTask {
			p = tasktag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasktag.HasTaskWith(with...))
	}
	if i.HasTag != nil {
		p := tasktag.HasTag()
		if !*i.HasTag {
			p = tasktag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTagWith))
		for _, w := range i.HasTagWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tasktag.HasTagWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TaskTagWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tasktag.And(predicates...), nil
	}
}

// TeammateWhereInput represents a where input for filtering Teammate queries.
type TeammateWhereInput struct {
	Not *TeammateWhereInput   `json:"not,omitempty"`
	Or  []*TeammateWhereInput `json:"or,omitempty"`
	And []*TeammateWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "image" field predicates.
	Image             *string  `json:"image,omitempty"`
	ImageNEQ          *string  `json:"imageNEQ,omitempty"`
	ImageIn           []string `json:"imageIn,omitempty"`
	ImageNotIn        []string `json:"imageNotIn,omitempty"`
	ImageGT           *string  `json:"imageGT,omitempty"`
	ImageGTE          *string  `json:"imageGTE,omitempty"`
	ImageLT           *string  `json:"imageLT,omitempty"`
	ImageLTE          *string  `json:"imageLTE,omitempty"`
	ImageContains     *string  `json:"imageContains,omitempty"`
	ImageHasPrefix    *string  `json:"imageHasPrefix,omitempty"`
	ImageHasSuffix    *string  `json:"imageHasSuffix,omitempty"`
	ImageEqualFold    *string  `json:"imageEqualFold,omitempty"`
	ImageContainsFold *string  `json:"imageContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspaces" edge predicates.
	HasWorkspaces     *bool                  `json:"hasWorkspaces,omitempty"`
	HasWorkspacesWith []*WorkspaceWhereInput `json:"hasWorkspacesWith,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "projectTeammates" edge predicates.
	HasProjectTeammates     *bool                        `json:"hasProjectTeammates,omitempty"`
	HasProjectTeammatesWith []*ProjectTeammateWhereInput `json:"hasProjectTeammatesWith,omitempty"`

	// "workspaceTeammates" edge predicates.
	HasWorkspaceTeammates     *bool                          `json:"hasWorkspaceTeammates,omitempty"`
	HasWorkspaceTeammatesWith []*WorkspaceTeammateWhereInput `json:"hasWorkspaceTeammatesWith,omitempty"`

	// "favoriteProjects" edge predicates.
	HasFavoriteProjects     *bool                        `json:"hasFavoriteProjects,omitempty"`
	HasFavoriteProjectsWith []*FavoriteProjectWhereInput `json:"hasFavoriteProjectsWith,omitempty"`

	// "favoriteWorkspaces" edge predicates.
	HasFavoriteWorkspaces     *bool                          `json:"hasFavoriteWorkspaces,omitempty"`
	HasFavoriteWorkspacesWith []*FavoriteWorkspaceWhereInput `json:"hasFavoriteWorkspacesWith,omitempty"`

	// "teammateTaskTabStatuses" edge predicates.
	HasTeammateTaskTabStatuses     *bool                              `json:"hasTeammateTaskTabStatuses,omitempty"`
	HasTeammateTaskTabStatusesWith []*TeammateTaskTabStatusWhereInput `json:"hasTeammateTaskTabStatusesWith,omitempty"`

	// "teammateTaskColumns" edge predicates.
	HasTeammateTaskColumns     *bool                           `json:"hasTeammateTaskColumns,omitempty"`
	HasTeammateTaskColumnsWith []*TeammateTaskColumnWhereInput `json:"hasTeammateTaskColumnsWith,omitempty"`

	// "teammateTaskListStatuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`

	// "teammateTaskSections" edge predicates.
	HasTeammateTaskSections     *bool                            `json:"hasTeammateTaskSections,omitempty"`
	HasTeammateTaskSectionsWith []*TeammateTaskSectionWhereInput `json:"hasTeammateTaskSectionsWith,omitempty"`

	// "tasks" edge predicates.
	HasTasks     *bool             `json:"hasTasks,omitempty"`
	HasTasksWith []*TaskWhereInput `json:"hasTasksWith,omitempty"`

	// "teammateTasks" edge predicates.
	HasTeammateTasks     *bool                     `json:"hasTeammateTasks,omitempty"`
	HasTeammateTasksWith []*TeammateTaskWhereInput `json:"hasTeammateTasksWith,omitempty"`

	// "taskLikes" edge predicates.
	HasTaskLikes     *bool                 `json:"hasTaskLikes,omitempty"`
	HasTaskLikesWith []*TaskLikeWhereInput `json:"hasTaskLikesWith,omitempty"`

	// "taskCollaborators" edge predicates.
	HasTaskCollaborators     *bool                         `json:"hasTaskCollaborators,omitempty"`
	HasTaskCollaboratorsWith []*TaskCollaboratorWhereInput `json:"hasTaskCollaboratorsWith,omitempty"`

	// "taskFeeds" edge predicates.
	HasTaskFeeds     *bool                 `json:"hasTaskFeeds,omitempty"`
	HasTaskFeedsWith []*TaskFeedWhereInput `json:"hasTaskFeedsWith,omitempty"`

	// "taskFeedLikes" edge predicates.
	HasTaskFeedLikes     *bool                     `json:"hasTaskFeedLikes,omitempty"`
	HasTaskFeedLikesWith []*TaskFeedLikeWhereInput `json:"hasTaskFeedLikesWith,omitempty"`

	// "taskActivities" edge predicates.
	HasTaskActivities     *bool                     `json:"hasTaskActivities,omitempty"`
	HasTaskActivitiesWith []*TaskActivityWhereInput `json:"hasTaskActivitiesWith,omitempty"`

	// "workspaceActivities" edge predicates.
	HasWorkspaceActivities     *bool                          `json:"hasWorkspaceActivities,omitempty"`
	HasWorkspaceActivitiesWith []*WorkspaceActivityWhereInput `json:"hasWorkspaceActivitiesWith,omitempty"`

	// "archivedTaskActivities" edge predicates.
	HasArchivedTaskActivities     *bool                             `json:"hasArchivedTaskActivities,omitempty"`
	HasArchivedTaskActivitiesWith []*ArchivedTaskActivityWhereInput `json:"hasArchivedTaskActivitiesWith,omitempty"`
}

// Filter applies the TeammateWhereInput filter on the TeammateQuery builder.
func (i *TeammateWhereInput) Filter(q *TeammateQuery) (*TeammateQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammates.
// An error is returned if the input is empty or invalid.
func (i *TeammateWhereInput) P() (predicate.Teammate, error) {
	var predicates []predicate.Teammate
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammate.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Teammate, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammate.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Teammate, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammate.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammate.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammate.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammate.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammate.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammate.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammate.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammate.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammate.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, teammate.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, teammate.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, teammate.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, teammate.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, teammate.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, teammate.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, teammate.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, teammate.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, teammate.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, teammate.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, teammate.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, teammate.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, teammate.NameContainsFold(*i.NameContainsFold))
	}
	if i.Image != nil {
		predicates = append(predicates, teammate.ImageEQ(*i.Image))
	}
	if i.ImageNEQ != nil {
		predicates = append(predicates, teammate.ImageNEQ(*i.ImageNEQ))
	}
	if len(i.ImageIn) > 0 {
		predicates = append(predicates, teammate.ImageIn(i.ImageIn...))
	}
	if len(i.ImageNotIn) > 0 {
		predicates = append(predicates, teammate.ImageNotIn(i.ImageNotIn...))
	}
	if i.ImageGT != nil {
		predicates = append(predicates, teammate.ImageGT(*i.ImageGT))
	}
	if i.ImageGTE != nil {
		predicates = append(predicates, teammate.ImageGTE(*i.ImageGTE))
	}
	if i.ImageLT != nil {
		predicates = append(predicates, teammate.ImageLT(*i.ImageLT))
	}
	if i.ImageLTE != nil {
		predicates = append(predicates, teammate.ImageLTE(*i.ImageLTE))
	}
	if i.ImageContains != nil {
		predicates = append(predicates, teammate.ImageContains(*i.ImageContains))
	}
	if i.ImageHasPrefix != nil {
		predicates = append(predicates, teammate.ImageHasPrefix(*i.ImageHasPrefix))
	}
	if i.ImageHasSuffix != nil {
		predicates = append(predicates, teammate.ImageHasSuffix(*i.ImageHasSuffix))
	}
	if i.ImageEqualFold != nil {
		predicates = append(predicates, teammate.ImageEqualFold(*i.ImageEqualFold))
	}
	if i.ImageContainsFold != nil {
		predicates = append(predicates, teammate.ImageContainsFold(*i.ImageContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, teammate.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, teammate.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, teammate.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, teammate.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, teammate.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, teammate.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, teammate.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, teammate.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, teammate.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, teammate.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, teammate.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, teammate.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, teammate.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammate.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammate.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammate.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammate.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammate.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammate.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammate.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammate.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammate.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammate.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammate.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammate.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammate.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammate.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammate.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammate.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspaces != nil {
		p := teammate.HasWorkspaces()
		if !*i.HasWorkspaces {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspacesWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspacesWith))
		for _, w := range i.HasWorkspacesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasWorkspacesWith(with...))
	}
	if i.HasProjects != nil {
		p := teammate.HasProjects()
		if !*i.HasProjects {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasProjectsWith(with...))
	}
	if i.HasProjectTeammates != nil {
		p := teammate.HasProjectTeammates()
		if !*i.HasProjectTeammates {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectTeammatesWith) > 0 {
		with := make([]predicate.ProjectTeammate, 0, len(i.HasProjectTeammatesWith))
		for _, w := range i.HasProjectTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasProjectTeammatesWith(with...))
	}
	if i.HasWorkspaceTeammates != nil {
		p := teammate.HasWorkspaceTeammates()
		if !*i.HasWorkspaceTeammates {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceTeammatesWith) > 0 {
		with := make([]predicate.WorkspaceTeammate, 0, len(i.HasWorkspaceTeammatesWith))
		for _, w := range i.HasWorkspaceTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasWorkspaceTeammatesWith(with...))
	}
	if i.HasFavoriteProjects != nil {
		p := teammate.HasFavoriteProjects()
		if !*i.HasFavoriteProjects {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteProjectsWith) > 0 {
		with := make([]predicate.FavoriteProject, 0, len(i.HasFavoriteProjectsWith))
		for _, w := range i.HasFavoriteProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasFavoriteProjectsWith(with...))
	}
	if i.HasFavoriteWorkspaces != nil {
		p := teammate.HasFavoriteWorkspaces()
		if !*i.HasFavoriteWorkspaces {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteWorkspacesWith) > 0 {
		with := make([]predicate.FavoriteWorkspace, 0, len(i.HasFavoriteWorkspacesWith))
		for _, w := range i.HasFavoriteWorkspacesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasFavoriteWorkspacesWith(with...))
	}
	if i.HasTeammateTaskTabStatuses != nil {
		p := teammate.HasTeammateTaskTabStatuses()
		if !*i.HasTeammateTaskTabStatuses {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskTabStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskTabStatus, 0, len(i.HasTeammateTaskTabStatusesWith))
		for _, w := range i.HasTeammateTaskTabStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTaskTabStatusesWith(with...))
	}
	if i.HasTeammateTaskColumns != nil {
		p := teammate.HasTeammateTaskColumns()
		if !*i.HasTeammateTaskColumns {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskColumnsWith) > 0 {
		with := make([]predicate.TeammateTaskColumn, 0, len(i.HasTeammateTaskColumnsWith))
		for _, w := range i.HasTeammateTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTaskColumnsWith(with...))
	}
	if i.HasTeammateTaskListStatuses != nil {
		p := teammate.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTaskListStatusesWith(with...))
	}
	if i.HasTeammateTaskSections != nil {
		p := teammate.HasTeammateTaskSections()
		if !*i.HasTeammateTaskSections {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskSectionsWith) > 0 {
		with := make([]predicate.TeammateTaskSection, 0, len(i.HasTeammateTaskSectionsWith))
		for _, w := range i.HasTeammateTaskSectionsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTaskSectionsWith(with...))
	}
	if i.HasTasks != nil {
		p := teammate.HasTasks()
		if !*i.HasTasks {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTasksWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTasksWith))
		for _, w := range i.HasTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTasksWith(with...))
	}
	if i.HasTeammateTasks != nil {
		p := teammate.HasTeammateTasks()
		if !*i.HasTeammateTasks {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTasksWith) > 0 {
		with := make([]predicate.TeammateTask, 0, len(i.HasTeammateTasksWith))
		for _, w := range i.HasTeammateTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTeammateTasksWith(with...))
	}
	if i.HasTaskLikes != nil {
		p := teammate.HasTaskLikes()
		if !*i.HasTaskLikes {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskLikesWith) > 0 {
		with := make([]predicate.TaskLike, 0, len(i.HasTaskLikesWith))
		for _, w := range i.HasTaskLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTaskLikesWith(with...))
	}
	if i.HasTaskCollaborators != nil {
		p := teammate.HasTaskCollaborators()
		if !*i.HasTaskCollaborators {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskCollaboratorsWith) > 0 {
		with := make([]predicate.TaskCollaborator, 0, len(i.HasTaskCollaboratorsWith))
		for _, w := range i.HasTaskCollaboratorsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTaskCollaboratorsWith(with...))
	}
	if i.HasTaskFeeds != nil {
		p := teammate.HasTaskFeeds()
		if !*i.HasTaskFeeds {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFeedsWith) > 0 {
		with := make([]predicate.TaskFeed, 0, len(i.HasTaskFeedsWith))
		for _, w := range i.HasTaskFeedsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTaskFeedsWith(with...))
	}
	if i.HasTaskFeedLikes != nil {
		p := teammate.HasTaskFeedLikes()
		if !*i.HasTaskFeedLikes {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskFeedLikesWith) > 0 {
		with := make([]predicate.TaskFeedLike, 0, len(i.HasTaskFeedLikesWith))
		for _, w := range i.HasTaskFeedLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTaskFeedLikesWith(with...))
	}
	if i.HasTaskActivities != nil {
		p := teammate.HasTaskActivities()
		if !*i.HasTaskActivities {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskActivitiesWith) > 0 {
		with := make([]predicate.TaskActivity, 0, len(i.HasTaskActivitiesWith))
		for _, w := range i.HasTaskActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasTaskActivitiesWith(with...))
	}
	if i.HasWorkspaceActivities != nil {
		p := teammate.HasWorkspaceActivities()
		if !*i.HasWorkspaceActivities {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceActivitiesWith) > 0 {
		with := make([]predicate.WorkspaceActivity, 0, len(i.HasWorkspaceActivitiesWith))
		for _, w := range i.HasWorkspaceActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasWorkspaceActivitiesWith(with...))
	}
	if i.HasArchivedTaskActivities != nil {
		p := teammate.HasArchivedTaskActivities()
		if !*i.HasArchivedTaskActivities {
			p = teammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasArchivedTaskActivitiesWith) > 0 {
		with := make([]predicate.ArchivedTaskActivity, 0, len(i.HasArchivedTaskActivitiesWith))
		for _, w := range i.HasArchivedTaskActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammate.HasArchivedTaskActivitiesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammate.And(predicates...), nil
	}
}

// TeammateTaskWhereInput represents a where input for filtering TeammateTask queries.
type TeammateTaskWhereInput struct {
	Not *TeammateTaskWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskWhereInput `json:"or,omitempty"`
	And []*TeammateTaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "teammate_task_section_id" field predicates.
	TeammateTaskSectionID             *ulid.ID  `json:"teammateTaskSectionID,omitempty"`
	TeammateTaskSectionIDNEQ          *ulid.ID  `json:"teammateTaskSectionIDNEQ,omitempty"`
	TeammateTaskSectionIDIn           []ulid.ID `json:"teammateTaskSectionIDIn,omitempty"`
	TeammateTaskSectionIDNotIn        []ulid.ID `json:"teammateTaskSectionIDNotIn,omitempty"`
	TeammateTaskSectionIDGT           *ulid.ID  `json:"teammateTaskSectionIDGT,omitempty"`
	TeammateTaskSectionIDGTE          *ulid.ID  `json:"teammateTaskSectionIDGTE,omitempty"`
	TeammateTaskSectionIDLT           *ulid.ID  `json:"teammateTaskSectionIDLT,omitempty"`
	TeammateTaskSectionIDLTE          *ulid.ID  `json:"teammateTaskSectionIDLTE,omitempty"`
	TeammateTaskSectionIDContains     *ulid.ID  `json:"teammateTaskSectionIDContains,omitempty"`
	TeammateTaskSectionIDHasPrefix    *ulid.ID  `json:"teammateTaskSectionIDHasPrefix,omitempty"`
	TeammateTaskSectionIDHasSuffix    *ulid.ID  `json:"teammateTaskSectionIDHasSuffix,omitempty"`
	TeammateTaskSectionIDEqualFold    *ulid.ID  `json:"teammateTaskSectionIDEqualFold,omitempty"`
	TeammateTaskSectionIDContainsFold *ulid.ID  `json:"teammateTaskSectionIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "teammateTaskSection" edge predicates.
	HasTeammateTaskSection     *bool                            `json:"hasTeammateTaskSection,omitempty"`
	HasTeammateTaskSectionWith []*TeammateTaskSectionWhereInput `json:"hasTeammateTaskSectionWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`
}

// Filter applies the TeammateTaskWhereInput filter on the TeammateTaskQuery builder.
func (i *TeammateTaskWhereInput) Filter(q *TeammateTaskQuery) (*TeammateTaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetasks.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskWhereInput) P() (predicate.TeammateTask, error) {
	var predicates []predicate.TeammateTask
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetask.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTask, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetask.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTask, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetask.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetask.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetask.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetask.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetask.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetask.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetask.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetask.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetask.IDLTE(*i.IDLTE))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetask.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetask.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetask.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetask.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetask.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetask.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetask.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetask.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetask.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetask.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetask.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetask.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetask.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.TaskID != nil {
		predicates = append(predicates, teammatetask.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, teammatetask.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, teammatetask.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, teammatetask.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, teammatetask.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, teammatetask.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, teammatetask.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, teammatetask.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, teammatetask.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, teammatetask.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, teammatetask.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, teammatetask.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, teammatetask.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.TeammateTaskSectionID != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDEQ(*i.TeammateTaskSectionID))
	}
	if i.TeammateTaskSectionIDNEQ != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDNEQ(*i.TeammateTaskSectionIDNEQ))
	}
	if len(i.TeammateTaskSectionIDIn) > 0 {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDIn(i.TeammateTaskSectionIDIn...))
	}
	if len(i.TeammateTaskSectionIDNotIn) > 0 {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDNotIn(i.TeammateTaskSectionIDNotIn...))
	}
	if i.TeammateTaskSectionIDGT != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDGT(*i.TeammateTaskSectionIDGT))
	}
	if i.TeammateTaskSectionIDGTE != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDGTE(*i.TeammateTaskSectionIDGTE))
	}
	if i.TeammateTaskSectionIDLT != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDLT(*i.TeammateTaskSectionIDLT))
	}
	if i.TeammateTaskSectionIDLTE != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDLTE(*i.TeammateTaskSectionIDLTE))
	}
	if i.TeammateTaskSectionIDContains != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDContains(*i.TeammateTaskSectionIDContains))
	}
	if i.TeammateTaskSectionIDHasPrefix != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDHasPrefix(*i.TeammateTaskSectionIDHasPrefix))
	}
	if i.TeammateTaskSectionIDHasSuffix != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDHasSuffix(*i.TeammateTaskSectionIDHasSuffix))
	}
	if i.TeammateTaskSectionIDEqualFold != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDEqualFold(*i.TeammateTaskSectionIDEqualFold))
	}
	if i.TeammateTaskSectionIDContainsFold != nil {
		predicates = append(predicates, teammatetask.TeammateTaskSectionIDContainsFold(*i.TeammateTaskSectionIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, teammatetask.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, teammatetask.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, teammatetask.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetask.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetask.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetask.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetask.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetask.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetask.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetask.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetask.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetask.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetask.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetask.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetask.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetask.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetask.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetask.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetask.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := teammatetask.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetask.HasTeammateWith(with...))
	}
	if i.HasTask != nil {
		p := teammatetask.HasTask()
		if !*i.HasTask {
			p = teammatetask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetask.HasTaskWith(with...))
	}
	if i.HasTeammateTaskSection != nil {
		p := teammatetask.HasTeammateTaskSection()
		if !*i.HasTeammateTaskSection {
			p = teammatetask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskSectionWith) > 0 {
		with := make([]predicate.TeammateTaskSection, 0, len(i.HasTeammateTaskSectionWith))
		for _, w := range i.HasTeammateTaskSectionWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetask.HasTeammateTaskSectionWith(with...))
	}
	if i.HasWorkspace != nil {
		p := teammatetask.HasWorkspace()
		if !*i.HasWorkspace {
			p = teammatetask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetask.HasWorkspaceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetask.And(predicates...), nil
	}
}

// TeammateTaskColumnWhereInput represents a where input for filtering TeammateTaskColumn queries.
type TeammateTaskColumnWhereInput struct {
	Not *TeammateTaskColumnWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskColumnWhereInput `json:"or,omitempty"`
	And []*TeammateTaskColumnWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "task_column_id" field predicates.
	TaskColumnID             *ulid.ID  `json:"taskColumnID,omitempty"`
	TaskColumnIDNEQ          *ulid.ID  `json:"taskColumnIDNEQ,omitempty"`
	TaskColumnIDIn           []ulid.ID `json:"taskColumnIDIn,omitempty"`
	TaskColumnIDNotIn        []ulid.ID `json:"taskColumnIDNotIn,omitempty"`
	TaskColumnIDGT           *ulid.ID  `json:"taskColumnIDGT,omitempty"`
	TaskColumnIDGTE          *ulid.ID  `json:"taskColumnIDGTE,omitempty"`
	TaskColumnIDLT           *ulid.ID  `json:"taskColumnIDLT,omitempty"`
	TaskColumnIDLTE          *ulid.ID  `json:"taskColumnIDLTE,omitempty"`
	TaskColumnIDContains     *ulid.ID  `json:"taskColumnIDContains,omitempty"`
	TaskColumnIDHasPrefix    *ulid.ID  `json:"taskColumnIDHasPrefix,omitempty"`
	TaskColumnIDHasSuffix    *ulid.ID  `json:"taskColumnIDHasSuffix,omitempty"`
	TaskColumnIDEqualFold    *ulid.ID  `json:"taskColumnIDEqualFold,omitempty"`
	TaskColumnIDContainsFold *ulid.ID  `json:"taskColumnIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "width" field predicates.
	Width             *string  `json:"width,omitempty"`
	WidthNEQ          *string  `json:"widthNEQ,omitempty"`
	WidthIn           []string `json:"widthIn,omitempty"`
	WidthNotIn        []string `json:"widthNotIn,omitempty"`
	WidthGT           *string  `json:"widthGT,omitempty"`
	WidthGTE          *string  `json:"widthGTE,omitempty"`
	WidthLT           *string  `json:"widthLT,omitempty"`
	WidthLTE          *string  `json:"widthLTE,omitempty"`
	WidthContains     *string  `json:"widthContains,omitempty"`
	WidthHasPrefix    *string  `json:"widthHasPrefix,omitempty"`
	WidthHasSuffix    *string  `json:"widthHasSuffix,omitempty"`
	WidthEqualFold    *string  `json:"widthEqualFold,omitempty"`
	WidthContainsFold *string  `json:"widthContainsFold,omitempty"`

	// "disabled" field predicates.
	Disabled    *bool `json:"disabled,omitempty"`
	DisabledNEQ *bool `json:"disabledNEQ,omitempty"`

	// "customizable" field predicates.
	Customizable    *bool `json:"customizable,omitempty"`
	CustomizableNEQ *bool `json:"customizableNEQ,omitempty"`

	// "order" field predicates.
	Order      *int  `json:"order,omitempty"`
	OrderNEQ   *int  `json:"orderNEQ,omitempty"`
	OrderIn    []int `json:"orderIn,omitempty"`
	OrderNotIn []int `json:"orderNotIn,omitempty"`
	OrderGT    *int  `json:"orderGT,omitempty"`
	OrderGTE   *int  `json:"orderGTE,omitempty"`
	OrderLT    *int  `json:"orderLT,omitempty"`
	OrderLTE   *int  `json:"orderLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "taskColumn" edge predicates.
	HasTaskColumn     *bool                   `json:"hasTaskColumn,omitempty"`
	HasTaskColumnWith []*TaskColumnWhereInput `json:"hasTaskColumnWith,omitempty"`
}

// Filter applies the TeammateTaskColumnWhereInput filter on the TeammateTaskColumnQuery builder.
func (i *TeammateTaskColumnWhereInput) Filter(q *TeammateTaskColumnQuery) (*TeammateTaskColumnQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetaskcolumns.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskColumnWhereInput) P() (predicate.TeammateTaskColumn, error) {
	var predicates []predicate.TeammateTaskColumn
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetaskcolumn.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTaskColumn, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetaskcolumn.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTaskColumn, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetaskcolumn.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetaskcolumn.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetaskcolumn.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetaskcolumn.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.IDLTE(*i.IDLTE))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.TaskColumnID != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDEQ(*i.TaskColumnID))
	}
	if i.TaskColumnIDNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDNEQ(*i.TaskColumnIDNEQ))
	}
	if len(i.TaskColumnIDIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDIn(i.TaskColumnIDIn...))
	}
	if len(i.TaskColumnIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDNotIn(i.TaskColumnIDNotIn...))
	}
	if i.TaskColumnIDGT != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDGT(*i.TaskColumnIDGT))
	}
	if i.TaskColumnIDGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDGTE(*i.TaskColumnIDGTE))
	}
	if i.TaskColumnIDLT != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDLT(*i.TaskColumnIDLT))
	}
	if i.TaskColumnIDLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDLTE(*i.TaskColumnIDLTE))
	}
	if i.TaskColumnIDContains != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDContains(*i.TaskColumnIDContains))
	}
	if i.TaskColumnIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDHasPrefix(*i.TaskColumnIDHasPrefix))
	}
	if i.TaskColumnIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDHasSuffix(*i.TaskColumnIDHasSuffix))
	}
	if i.TaskColumnIDEqualFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDEqualFold(*i.TaskColumnIDEqualFold))
	}
	if i.TaskColumnIDContainsFold != nil {
		predicates = append(predicates, teammatetaskcolumn.TaskColumnIDContainsFold(*i.TaskColumnIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, teammatetaskcolumn.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.Width != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthEQ(*i.Width))
	}
	if i.WidthNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthNEQ(*i.WidthNEQ))
	}
	if len(i.WidthIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.WidthIn(i.WidthIn...))
	}
	if len(i.WidthNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.WidthNotIn(i.WidthNotIn...))
	}
	if i.WidthGT != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthGT(*i.WidthGT))
	}
	if i.WidthGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthGTE(*i.WidthGTE))
	}
	if i.WidthLT != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthLT(*i.WidthLT))
	}
	if i.WidthLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthLTE(*i.WidthLTE))
	}
	if i.WidthContains != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthContains(*i.WidthContains))
	}
	if i.WidthHasPrefix != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthHasPrefix(*i.WidthHasPrefix))
	}
	if i.WidthHasSuffix != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthHasSuffix(*i.WidthHasSuffix))
	}
	if i.WidthEqualFold != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthEqualFold(*i.WidthEqualFold))
	}
	if i.WidthContainsFold != nil {
		predicates = append(predicates, teammatetaskcolumn.WidthContainsFold(*i.WidthContainsFold))
	}
	if i.Disabled != nil {
		predicates = append(predicates, teammatetaskcolumn.DisabledEQ(*i.Disabled))
	}
	if i.DisabledNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.DisabledNEQ(*i.DisabledNEQ))
	}
	if i.Customizable != nil {
		predicates = append(predicates, teammatetaskcolumn.CustomizableEQ(*i.Customizable))
	}
	if i.CustomizableNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.CustomizableNEQ(*i.CustomizableNEQ))
	}
	if i.Order != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderEQ(*i.Order))
	}
	if i.OrderNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderNEQ(*i.OrderNEQ))
	}
	if len(i.OrderIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.OrderIn(i.OrderIn...))
	}
	if len(i.OrderNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.OrderNotIn(i.OrderNotIn...))
	}
	if i.OrderGT != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderGT(*i.OrderGT))
	}
	if i.OrderGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderGTE(*i.OrderGTE))
	}
	if i.OrderLT != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderLT(*i.OrderLT))
	}
	if i.OrderLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.OrderLTE(*i.OrderLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetaskcolumn.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := teammatetaskcolumn.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskcolumn.HasTeammateWith(with...))
	}
	if i.HasWorkspace != nil {
		p := teammatetaskcolumn.HasWorkspace()
		if !*i.HasWorkspace {
			p = teammatetaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskcolumn.HasWorkspaceWith(with...))
	}
	if i.HasTaskColumn != nil {
		p := teammatetaskcolumn.HasTaskColumn()
		if !*i.HasTaskColumn {
			p = teammatetaskcolumn.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskColumnWith) > 0 {
		with := make([]predicate.TaskColumn, 0, len(i.HasTaskColumnWith))
		for _, w := range i.HasTaskColumnWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskcolumn.HasTaskColumnWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskColumnWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetaskcolumn.And(predicates...), nil
	}
}

// TeammateTaskListStatusWhereInput represents a where input for filtering TeammateTaskListStatus queries.
type TeammateTaskListStatusWhereInput struct {
	Not *TeammateTaskListStatusWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskListStatusWhereInput `json:"or,omitempty"`
	And []*TeammateTaskListStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "task_list_completed_status_id" field predicates.
	TaskListCompletedStatusID             *ulid.ID  `json:"taskListCompletedStatusID,omitempty"`
	TaskListCompletedStatusIDNEQ          *ulid.ID  `json:"taskListCompletedStatusIDNEQ,omitempty"`
	TaskListCompletedStatusIDIn           []ulid.ID `json:"taskListCompletedStatusIDIn,omitempty"`
	TaskListCompletedStatusIDNotIn        []ulid.ID `json:"taskListCompletedStatusIDNotIn,omitempty"`
	TaskListCompletedStatusIDGT           *ulid.ID  `json:"taskListCompletedStatusIDGT,omitempty"`
	TaskListCompletedStatusIDGTE          *ulid.ID  `json:"taskListCompletedStatusIDGTE,omitempty"`
	TaskListCompletedStatusIDLT           *ulid.ID  `json:"taskListCompletedStatusIDLT,omitempty"`
	TaskListCompletedStatusIDLTE          *ulid.ID  `json:"taskListCompletedStatusIDLTE,omitempty"`
	TaskListCompletedStatusIDContains     *ulid.ID  `json:"taskListCompletedStatusIDContains,omitempty"`
	TaskListCompletedStatusIDHasPrefix    *ulid.ID  `json:"taskListCompletedStatusIDHasPrefix,omitempty"`
	TaskListCompletedStatusIDHasSuffix    *ulid.ID  `json:"taskListCompletedStatusIDHasSuffix,omitempty"`
	TaskListCompletedStatusIDEqualFold    *ulid.ID  `json:"taskListCompletedStatusIDEqualFold,omitempty"`
	TaskListCompletedStatusIDContainsFold *ulid.ID  `json:"taskListCompletedStatusIDContainsFold,omitempty"`

	// "task_list_sort_status_id" field predicates.
	TaskListSortStatusID             *ulid.ID  `json:"taskListSortStatusID,omitempty"`
	TaskListSortStatusIDNEQ          *ulid.ID  `json:"taskListSortStatusIDNEQ,omitempty"`
	TaskListSortStatusIDIn           []ulid.ID `json:"taskListSortStatusIDIn,omitempty"`
	TaskListSortStatusIDNotIn        []ulid.ID `json:"taskListSortStatusIDNotIn,omitempty"`
	TaskListSortStatusIDGT           *ulid.ID  `json:"taskListSortStatusIDGT,omitempty"`
	TaskListSortStatusIDGTE          *ulid.ID  `json:"taskListSortStatusIDGTE,omitempty"`
	TaskListSortStatusIDLT           *ulid.ID  `json:"taskListSortStatusIDLT,omitempty"`
	TaskListSortStatusIDLTE          *ulid.ID  `json:"taskListSortStatusIDLTE,omitempty"`
	TaskListSortStatusIDContains     *ulid.ID  `json:"taskListSortStatusIDContains,omitempty"`
	TaskListSortStatusIDHasPrefix    *ulid.ID  `json:"taskListSortStatusIDHasPrefix,omitempty"`
	TaskListSortStatusIDHasSuffix    *ulid.ID  `json:"taskListSortStatusIDHasSuffix,omitempty"`
	TaskListSortStatusIDEqualFold    *ulid.ID  `json:"taskListSortStatusIDEqualFold,omitempty"`
	TaskListSortStatusIDContainsFold *ulid.ID  `json:"taskListSortStatusIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "taskListCompletedStatus" edge predicates.
	HasTaskListCompletedStatus     *bool                                `json:"hasTaskListCompletedStatus,omitempty"`
	HasTaskListCompletedStatusWith []*TaskListCompletedStatusWhereInput `json:"hasTaskListCompletedStatusWith,omitempty"`

	// "taskListSortStatus" edge predicates.
	HasTaskListSortStatus     *bool                           `json:"hasTaskListSortStatus,omitempty"`
	HasTaskListSortStatusWith []*TaskListSortStatusWhereInput `json:"hasTaskListSortStatusWith,omitempty"`
}

// Filter applies the TeammateTaskListStatusWhereInput filter on the TeammateTaskListStatusQuery builder.
func (i *TeammateTaskListStatusWhereInput) Filter(q *TeammateTaskListStatusQuery) (*TeammateTaskListStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetaskliststatusslice.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskListStatusWhereInput) P() (predicate.TeammateTaskListStatus, error) {
	var predicates []predicate.TeammateTaskListStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetaskliststatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTaskListStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetaskliststatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTaskListStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetaskliststatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetaskliststatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.TaskListCompletedStatusID != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDEQ(*i.TaskListCompletedStatusID))
	}
	if i.TaskListCompletedStatusIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDNEQ(*i.TaskListCompletedStatusIDNEQ))
	}
	if len(i.TaskListCompletedStatusIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDIn(i.TaskListCompletedStatusIDIn...))
	}
	if len(i.TaskListCompletedStatusIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDNotIn(i.TaskListCompletedStatusIDNotIn...))
	}
	if i.TaskListCompletedStatusIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDGT(*i.TaskListCompletedStatusIDGT))
	}
	if i.TaskListCompletedStatusIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDGTE(*i.TaskListCompletedStatusIDGTE))
	}
	if i.TaskListCompletedStatusIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDLT(*i.TaskListCompletedStatusIDLT))
	}
	if i.TaskListCompletedStatusIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDLTE(*i.TaskListCompletedStatusIDLTE))
	}
	if i.TaskListCompletedStatusIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDContains(*i.TaskListCompletedStatusIDContains))
	}
	if i.TaskListCompletedStatusIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDHasPrefix(*i.TaskListCompletedStatusIDHasPrefix))
	}
	if i.TaskListCompletedStatusIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDHasSuffix(*i.TaskListCompletedStatusIDHasSuffix))
	}
	if i.TaskListCompletedStatusIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDEqualFold(*i.TaskListCompletedStatusIDEqualFold))
	}
	if i.TaskListCompletedStatusIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListCompletedStatusIDContainsFold(*i.TaskListCompletedStatusIDContainsFold))
	}
	if i.TaskListSortStatusID != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDEQ(*i.TaskListSortStatusID))
	}
	if i.TaskListSortStatusIDNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDNEQ(*i.TaskListSortStatusIDNEQ))
	}
	if len(i.TaskListSortStatusIDIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDIn(i.TaskListSortStatusIDIn...))
	}
	if len(i.TaskListSortStatusIDNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDNotIn(i.TaskListSortStatusIDNotIn...))
	}
	if i.TaskListSortStatusIDGT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDGT(*i.TaskListSortStatusIDGT))
	}
	if i.TaskListSortStatusIDGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDGTE(*i.TaskListSortStatusIDGTE))
	}
	if i.TaskListSortStatusIDLT != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDLT(*i.TaskListSortStatusIDLT))
	}
	if i.TaskListSortStatusIDLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDLTE(*i.TaskListSortStatusIDLTE))
	}
	if i.TaskListSortStatusIDContains != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDContains(*i.TaskListSortStatusIDContains))
	}
	if i.TaskListSortStatusIDHasPrefix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDHasPrefix(*i.TaskListSortStatusIDHasPrefix))
	}
	if i.TaskListSortStatusIDHasSuffix != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDHasSuffix(*i.TaskListSortStatusIDHasSuffix))
	}
	if i.TaskListSortStatusIDEqualFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDEqualFold(*i.TaskListSortStatusIDEqualFold))
	}
	if i.TaskListSortStatusIDContainsFold != nil {
		predicates = append(predicates, teammatetaskliststatus.TaskListSortStatusIDContainsFold(*i.TaskListSortStatusIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetaskliststatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := teammatetaskliststatus.HasWorkspace()
		if !*i.HasWorkspace {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := teammatetaskliststatus.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasTeammateWith(with...))
	}
	if i.HasTaskListCompletedStatus != nil {
		p := teammatetaskliststatus.HasTaskListCompletedStatus()
		if !*i.HasTaskListCompletedStatus {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListCompletedStatusWith) > 0 {
		with := make([]predicate.TaskListCompletedStatus, 0, len(i.HasTaskListCompletedStatusWith))
		for _, w := range i.HasTaskListCompletedStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasTaskListCompletedStatusWith(with...))
	}
	if i.HasTaskListSortStatus != nil {
		p := teammatetaskliststatus.HasTaskListSortStatus()
		if !*i.HasTaskListSortStatus {
			p = teammatetaskliststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskListSortStatusWith) > 0 {
		with := make([]predicate.TaskListSortStatus, 0, len(i.HasTaskListSortStatusWith))
		for _, w := range i.HasTaskListSortStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetaskliststatus.HasTaskListSortStatusWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskListStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetaskliststatus.And(predicates...), nil
	}
}

// TeammateTaskSectionWhereInput represents a where input for filtering TeammateTaskSection queries.
type TeammateTaskSectionWhereInput struct {
	Not *TeammateTaskSectionWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskSectionWhereInput `json:"or,omitempty"`
	And []*TeammateTaskSectionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "assigned" field predicates.
	Assigned    *bool `json:"assigned,omitempty"`
	AssignedNEQ *bool `json:"assignedNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammateTasks" edge predicates.
	HasTeammateTasks     *bool                     `json:"hasTeammateTasks,omitempty"`
	HasTeammateTasksWith []*TeammateTaskWhereInput `json:"hasTeammateTasksWith,omitempty"`
}

// Filter applies the TeammateTaskSectionWhereInput filter on the TeammateTaskSectionQuery builder.
func (i *TeammateTaskSectionWhereInput) Filter(q *TeammateTaskSectionQuery) (*TeammateTaskSectionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetasksections.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskSectionWhereInput) P() (predicate.TeammateTaskSection, error) {
	var predicates []predicate.TeammateTaskSection
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetasksection.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTaskSection, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetasksection.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTaskSection, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetasksection.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetasksection.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetasksection.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetasksection.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetasksection.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetasksection.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetasksection.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetasksection.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetasksection.IDLTE(*i.IDLTE))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetasksection.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetasksection.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetasksection.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, teammatetasksection.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, teammatetasksection.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, teammatetasksection.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, teammatetasksection.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, teammatetasksection.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, teammatetasksection.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, teammatetasksection.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, teammatetasksection.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, teammatetasksection.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, teammatetasksection.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, teammatetasksection.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, teammatetasksection.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, teammatetasksection.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, teammatetasksection.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, teammatetasksection.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, teammatetasksection.NameContainsFold(*i.NameContainsFold))
	}
	if i.Assigned != nil {
		predicates = append(predicates, teammatetasksection.AssignedEQ(*i.Assigned))
	}
	if i.AssignedNEQ != nil {
		predicates = append(predicates, teammatetasksection.AssignedNEQ(*i.AssignedNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetasksection.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetasksection.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetasksection.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetasksection.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetasksection.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetasksection.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetasksection.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetasksection.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetasksection.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetasksection.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetasksection.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetasksection.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetasksection.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetasksection.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetasksection.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetasksection.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := teammatetasksection.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetasksection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetasksection.HasTeammateWith(with...))
	}
	if i.HasWorkspace != nil {
		p := teammatetasksection.HasWorkspace()
		if !*i.HasWorkspace {
			p = teammatetasksection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetasksection.HasWorkspaceWith(with...))
	}
	if i.HasTeammateTasks != nil {
		p := teammatetasksection.HasTeammateTasks()
		if !*i.HasTeammateTasks {
			p = teammatetasksection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTasksWith) > 0 {
		with := make([]predicate.TeammateTask, 0, len(i.HasTeammateTasksWith))
		for _, w := range i.HasTeammateTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetasksection.HasTeammateTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskSectionWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetasksection.And(predicates...), nil
	}
}

// TeammateTaskTabStatusWhereInput represents a where input for filtering TeammateTaskTabStatus queries.
type TeammateTaskTabStatusWhereInput struct {
	Not *TeammateTaskTabStatusWhereInput   `json:"not,omitempty"`
	Or  []*TeammateTaskTabStatusWhereInput `json:"or,omitempty"`
	And []*TeammateTaskTabStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "status_code" field predicates.
	StatusCode      *teammatetasktabstatus.StatusCode  `json:"statusCode,omitempty"`
	StatusCodeNEQ   *teammatetasktabstatus.StatusCode  `json:"statusCodeNEQ,omitempty"`
	StatusCodeIn    []teammatetasktabstatus.StatusCode `json:"statusCodeIn,omitempty"`
	StatusCodeNotIn []teammatetasktabstatus.StatusCode `json:"statusCodeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the TeammateTaskTabStatusWhereInput filter on the TeammateTaskTabStatusQuery builder.
func (i *TeammateTaskTabStatusWhereInput) Filter(q *TeammateTaskTabStatusQuery) (*TeammateTaskTabStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering teammatetasktabstatusslice.
// An error is returned if the input is empty or invalid.
func (i *TeammateTaskTabStatusWhereInput) P() (predicate.TeammateTaskTabStatus, error) {
	var predicates []predicate.TeammateTaskTabStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, teammatetasktabstatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TeammateTaskTabStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, teammatetasktabstatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TeammateTaskTabStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, teammatetasktabstatus.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, teammatetasktabstatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, teammatetasktabstatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, teammatetasktabstatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, teammatetasktabstatus.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, teammatetasktabstatus.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.StatusCode != nil {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeEQ(*i.StatusCode))
	}
	if i.StatusCodeNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeNEQ(*i.StatusCodeNEQ))
	}
	if len(i.StatusCodeIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeIn(i.StatusCodeIn...))
	}
	if len(i.StatusCodeNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.StatusCodeNotIn(i.StatusCodeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, teammatetasktabstatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := teammatetasktabstatus.HasWorkspace()
		if !*i.HasWorkspace {
			p = teammatetasktabstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetasktabstatus.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := teammatetasktabstatus.HasTeammate()
		if !*i.HasTeammate {
			p = teammatetasktabstatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, teammatetasktabstatus.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TeammateTaskTabStatusWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return teammatetasktabstatus.And(predicates...), nil
	}
}

// TestTodoWhereInput represents a where input for filtering TestTodo queries.
type TestTodoWhereInput struct {
	Not *TestTodoWhereInput   `json:"not,omitempty"`
	Or  []*TestTodoWhereInput `json:"or,omitempty"`
	And []*TestTodoWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "test_user_id" field predicates.
	TestUserID             *ulid.ID  `json:"testUserID,omitempty"`
	TestUserIDNEQ          *ulid.ID  `json:"testUserIDNEQ,omitempty"`
	TestUserIDIn           []ulid.ID `json:"testUserIDIn,omitempty"`
	TestUserIDNotIn        []ulid.ID `json:"testUserIDNotIn,omitempty"`
	TestUserIDGT           *ulid.ID  `json:"testUserIDGT,omitempty"`
	TestUserIDGTE          *ulid.ID  `json:"testUserIDGTE,omitempty"`
	TestUserIDLT           *ulid.ID  `json:"testUserIDLT,omitempty"`
	TestUserIDLTE          *ulid.ID  `json:"testUserIDLTE,omitempty"`
	TestUserIDContains     *ulid.ID  `json:"testUserIDContains,omitempty"`
	TestUserIDHasPrefix    *ulid.ID  `json:"testUserIDHasPrefix,omitempty"`
	TestUserIDHasSuffix    *ulid.ID  `json:"testUserIDHasSuffix,omitempty"`
	TestUserIDIsNil        bool      `json:"testUserIDIsNil,omitempty"`
	TestUserIDNotNil       bool      `json:"testUserIDNotNil,omitempty"`
	TestUserIDEqualFold    *ulid.ID  `json:"testUserIDEqualFold,omitempty"`
	TestUserIDContainsFold *ulid.ID  `json:"testUserIDContainsFold,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *ulid.ID  `json:"createdBy,omitempty"`
	CreatedByNEQ          *ulid.ID  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []ulid.ID `json:"createdByIn,omitempty"`
	CreatedByNotIn        []ulid.ID `json:"createdByNotIn,omitempty"`
	CreatedByGT           *ulid.ID  `json:"createdByGT,omitempty"`
	CreatedByGTE          *ulid.ID  `json:"createdByGTE,omitempty"`
	CreatedByLT           *ulid.ID  `json:"createdByLT,omitempty"`
	CreatedByLTE          *ulid.ID  `json:"createdByLTE,omitempty"`
	CreatedByContains     *ulid.ID  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *ulid.ID  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *ulid.ID  `json:"createdByHasSuffix,omitempty"`
	CreatedByEqualFold    *ulid.ID  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *ulid.ID  `json:"createdByContainsFold,omitempty"`

	// "parent_todo_id" field predicates.
	ParentTodoID             *ulid.ID  `json:"parentTodoID,omitempty"`
	ParentTodoIDNEQ          *ulid.ID  `json:"parentTodoIDNEQ,omitempty"`
	ParentTodoIDIn           []ulid.ID `json:"parentTodoIDIn,omitempty"`
	ParentTodoIDNotIn        []ulid.ID `json:"parentTodoIDNotIn,omitempty"`
	ParentTodoIDGT           *ulid.ID  `json:"parentTodoIDGT,omitempty"`
	ParentTodoIDGTE          *ulid.ID  `json:"parentTodoIDGTE,omitempty"`
	ParentTodoIDLT           *ulid.ID  `json:"parentTodoIDLT,omitempty"`
	ParentTodoIDLTE          *ulid.ID  `json:"parentTodoIDLTE,omitempty"`
	ParentTodoIDContains     *ulid.ID  `json:"parentTodoIDContains,omitempty"`
	ParentTodoIDHasPrefix    *ulid.ID  `json:"parentTodoIDHasPrefix,omitempty"`
	ParentTodoIDHasSuffix    *ulid.ID  `json:"parentTodoIDHasSuffix,omitempty"`
	ParentTodoIDIsNil        bool      `json:"parentTodoIDIsNil,omitempty"`
	ParentTodoIDNotNil       bool      `json:"parentTodoIDNotNil,omitempty"`
	ParentTodoIDEqualFold    *ulid.ID  `json:"parentTodoIDEqualFold,omitempty"`
	ParentTodoIDContainsFold *ulid.ID  `json:"parentTodoIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "status" field predicates.
	Status      *testtodo.Status  `json:"status,omitempty"`
	StatusNEQ   *testtodo.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []testtodo.Status `json:"statusIn,omitempty"`
	StatusNotIn []testtodo.Status `json:"statusNotIn,omitempty"`

	// "priority" field predicates.
	Priority      *int  `json:"priority,omitempty"`
	PriorityNEQ   *int  `json:"priorityNEQ,omitempty"`
	PriorityIn    []int `json:"priorityIn,omitempty"`
	PriorityNotIn []int `json:"priorityNotIn,omitempty"`
	PriorityGT    *int  `json:"priorityGT,omitempty"`
	PriorityGTE   *int  `json:"priorityGTE,omitempty"`
	PriorityLT    *int  `json:"priorityLT,omitempty"`
	PriorityLTE   *int  `json:"priorityLTE,omitempty"`

	// "due_date" field predicates.
	DueDate       *time.Time  `json:"dueDate,omitempty"`
	DueDateNEQ    *time.Time  `json:"dueDateNEQ,omitempty"`
	DueDateIn     []time.Time `json:"dueDateIn,omitempty"`
	DueDateNotIn  []time.Time `json:"dueDateNotIn,omitempty"`
	DueDateGT     *time.Time  `json:"dueDateGT,omitempty"`
	DueDateGTE    *time.Time  `json:"dueDateGTE,omitempty"`
	DueDateLT     *time.Time  `json:"dueDateLT,omitempty"`
	DueDateLTE    *time.Time  `json:"dueDateLTE,omitempty"`
	DueDateIsNil  bool        `json:"dueDateIsNil,omitempty"`
	DueDateNotNil bool        `json:"dueDateNotNil,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "testUser" edge predicates.
	HasTestUser     *bool                 `json:"hasTestUser,omitempty"`
	HasTestUserWith []*TestUserWhereInput `json:"hasTestUserWith,omitempty"`

	// "parent" edge predicates.
	HasParent     *bool                 `json:"hasParent,omitempty"`
	HasParentWith []*TestTodoWhereInput `json:"hasParentWith,omitempty"`

	// "children" edge predicates.
	HasChildren     *bool                 `json:"hasChildren,omitempty"`
	HasChildrenWith []*TestTodoWhereInput `json:"hasChildrenWith,omitempty"`
}

// Filter applies the TestTodoWhereInput filter on the TestTodoQuery builder.
func (i *TestTodoWhereInput) Filter(q *TestTodoQuery) (*TestTodoQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering testtodos.
// An error is returned if the input is empty or invalid.
func (i *TestTodoWhereInput) P() (predicate.TestTodo, error) {
	var predicates []predicate.TestTodo
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, testtodo.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TestTodo, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, testtodo.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TestTodo, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, testtodo.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, testtodo.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, testtodo.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, testtodo.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, testtodo.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, testtodo.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, testtodo.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, testtodo.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, testtodo.IDLTE(*i.IDLTE))
	}
	if i.TestUserID != nil {
		predicates = append(predicates, testtodo.TestUserIDEQ(*i.TestUserID))
	}
	if i.TestUserIDNEQ != nil {
		predicates = append(predicates, testtodo.TestUserIDNEQ(*i.TestUserIDNEQ))
	}
	if len(i.TestUserIDIn) > 0 {
		predicates = append(predicates, testtodo.TestUserIDIn(i.TestUserIDIn...))
	}
	if len(i.TestUserIDNotIn) > 0 {
		predicates = append(predicates, testtodo.TestUserIDNotIn(i.TestUserIDNotIn...))
	}
	if i.TestUserIDGT != nil {
		predicates = append(predicates, testtodo.TestUserIDGT(*i.TestUserIDGT))
	}
	if i.TestUserIDGTE != nil {
		predicates = append(predicates, testtodo.TestUserIDGTE(*i.TestUserIDGTE))
	}
	if i.TestUserIDLT != nil {
		predicates = append(predicates, testtodo.TestUserIDLT(*i.TestUserIDLT))
	}
	if i.TestUserIDLTE != nil {
		predicates = append(predicates, testtodo.TestUserIDLTE(*i.TestUserIDLTE))
	}
	if i.TestUserIDContains != nil {
		predicates = append(predicates, testtodo.TestUserIDContains(*i.TestUserIDContains))
	}
	if i.TestUserIDHasPrefix != nil {
		predicates = append(predicates, testtodo.TestUserIDHasPrefix(*i.TestUserIDHasPrefix))
	}
	if i.TestUserIDHasSuffix != nil {
		predicates = append(predicates, testtodo.TestUserIDHasSuffix(*i.TestUserIDHasSuffix))
	}
	if i.TestUserIDIsNil {
		predicates = append(predicates, testtodo.TestUserIDIsNil())
	}
	if i.TestUserIDNotNil {
		predicates = append(predicates, testtodo.TestUserIDNotNil())
	}
	if i.TestUserIDEqualFold != nil {
		predicates = append(predicates, testtodo.TestUserIDEqualFold(*i.TestUserIDEqualFold))
	}
	if i.TestUserIDContainsFold != nil {
		predicates = append(predicates, testtodo.TestUserIDContainsFold(*i.TestUserIDContainsFold))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, testtodo.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, testtodo.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, testtodo.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, testtodo.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, testtodo.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, testtodo.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, testtodo.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, testtodo.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, testtodo.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, testtodo.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, testtodo.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, testtodo.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, testtodo.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.ParentTodoID != nil {
		predicates = append(predicates, testtodo.ParentTodoIDEQ(*i.ParentTodoID))
	}
	if i.ParentTodoIDNEQ != nil {
		predicates = append(predicates, testtodo.ParentTodoIDNEQ(*i.ParentTodoIDNEQ))
	}
	if len(i.ParentTodoIDIn) > 0 {
		predicates = append(predicates, testtodo.ParentTodoIDIn(i.ParentTodoIDIn...))
	}
	if len(i.ParentTodoIDNotIn) > 0 {
		predicates = append(predicates, testtodo.ParentTodoIDNotIn(i.ParentTodoIDNotIn...))
	}
	if i.ParentTodoIDGT != nil {
		predicates = append(predicates, testtodo.ParentTodoIDGT(*i.ParentTodoIDGT))
	}
	if i.ParentTodoIDGTE != nil {
		predicates = append(predicates, testtodo.ParentTodoIDGTE(*i.ParentTodoIDGTE))
	}
	if i.ParentTodoIDLT != nil {
		predicates = append(predicates, testtodo.ParentTodoIDLT(*i.ParentTodoIDLT))
	}
	if i.ParentTodoIDLTE != nil {
		predicates = append(predicates, testtodo.ParentTodoIDLTE(*i.ParentTodoIDLTE))
	}
	if i.ParentTodoIDContains != nil {
		predicates = append(predicates, testtodo.ParentTodoIDContains(*i.ParentTodoIDContains))
	}
	if i.ParentTodoIDHasPrefix != nil {
		predicates = append(predicates, testtodo.ParentTodoIDHasPrefix(*i.ParentTodoIDHasPrefix))
	}
	if i.ParentTodoIDHasSuffix != nil {
		predicates = append(predicates, testtodo.ParentTodoIDHasSuffix(*i.ParentTodoIDHasSuffix))
	}
	if i.ParentTodoIDIsNil {
		predicates = append(predicates, testtodo.ParentTodoIDIsNil())
	}
	if i.ParentTodoIDNotNil {
		predicates = append(predicates, testtodo.ParentTodoIDNotNil())
	}
	if i.ParentTodoIDEqualFold != nil {
		predicates = append(predicates, testtodo.ParentTodoIDEqualFold(*i.ParentTodoIDEqualFold))
	}
	if i.ParentTodoIDContainsFold != nil {
		predicates = append(predicates, testtodo.ParentTodoIDContainsFold(*i.ParentTodoIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, testtodo.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, testtodo.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, testtodo.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, testtodo.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, testtodo.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, testtodo.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, testtodo.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, testtodo.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, testtodo.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, testtodo.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, testtodo.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, testtodo.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, testtodo.NameContainsFold(*i.NameContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, testtodo.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, testtodo.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, testtodo.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, testtodo.StatusNotIn(i.StatusNotIn...))
	}
	if i.Priority != nil {
		predicates = append(predicates, testtodo.PriorityEQ(*i.Priority))
	}
	if i.PriorityNEQ != nil {
		predicates = append(predicates, testtodo.PriorityNEQ(*i.PriorityNEQ))
	}
	if len(i.PriorityIn) > 0 {
		predicates = append(predicates, testtodo.PriorityIn(i.PriorityIn...))
	}
	if len(i.PriorityNotIn) > 0 {
		predicates = append(predicates, testtodo.PriorityNotIn(i.PriorityNotIn...))
	}
	if i.PriorityGT != nil {
		predicates = append(predicates, testtodo.PriorityGT(*i.PriorityGT))
	}
	if i.PriorityGTE != nil {
		predicates = append(predicates, testtodo.PriorityGTE(*i.PriorityGTE))
	}
	if i.PriorityLT != nil {
		predicates = append(predicates, testtodo.PriorityLT(*i.PriorityLT))
	}
	if i.PriorityLTE != nil {
		predicates = append(predicates, testtodo.PriorityLTE(*i.PriorityLTE))
	}
	if i.DueDate != nil {
		predicates = append(predicates, testtodo.DueDateEQ(*i.DueDate))
	}
	if i.DueDateNEQ != nil {
		predicates = append(predicates, testtodo.DueDateNEQ(*i.DueDateNEQ))
	}
	if len(i.DueDateIn) > 0 {
		predicates = append(predicates, testtodo.DueDateIn(i.DueDateIn...))
	}
	if len(i.DueDateNotIn) > 0 {
		predicates = append(predicates, testtodo.DueDateNotIn(i.DueDateNotIn...))
	}
	if i.DueDateGT != nil {
		predicates = append(predicates, testtodo.DueDateGT(*i.DueDateGT))
	}
	if i.DueDateGTE != nil {
		predicates = append(predicates, testtodo.DueDateGTE(*i.DueDateGTE))
	}
	if i.DueDateLT != nil {
		predicates = append(predicates, testtodo.DueDateLT(*i.DueDateLT))
	}
	if i.DueDateLTE != nil {
		predicates = append(predicates, testtodo.DueDateLTE(*i.DueDateLTE))
	}
	if i.DueDateIsNil {
		predicates = append(predicates, testtodo.DueDateIsNil())
	}
	if i.DueDateNotNil {
		predicates = append(predicates, testtodo.DueDateNotNil())
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, testtodo.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, testtodo.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, testtodo.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, testtodo.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, testtodo.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, testtodo.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, testtodo.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, testtodo.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, testtodo.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, testtodo.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, testtodo.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, testtodo.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, testtodo.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, testtodo.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, testtodo.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, testtodo.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTestUser != nil {
		p := testtodo.HasTestUser()
		if !*i.HasTestUser {
			p = testtodo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTestUserWith) > 0 {
		with := make([]predicate.TestUser, 0, len(i.HasTestUserWith))
		for _, w := range i.HasTestUserWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, testtodo.HasTestUserWith(with...))
	}
	if i.HasParent != nil {
		p := testtodo.HasParent()
		if !*i.HasParent {
			p = testtodo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentWith) > 0 {
		with := make([]predicate.TestTodo, 0, len(i.HasParentWith))
		for _, w := range i.HasParentWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, testtodo.HasParentWith(with...))
	}
	if i.HasChildren != nil {
		p := testtodo.HasChildren()
		if !*i.HasChildren {
			p = testtodo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChildrenWith) > 0 {
		with := make([]predicate.TestTodo, 0, len(i.HasChildrenWith))
		for _, w := range i.HasChildrenWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, testtodo.HasChildrenWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TestTodoWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return testtodo.And(predicates...), nil
	}
}

// TestUserWhereInput represents a where input for filtering TestUser queries.
type TestUserWhereInput struct {
	Not *TestUserWhereInput   `json:"not,omitempty"`
	Or  []*TestUserWhereInput `json:"or,omitempty"`
	And []*TestUserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "age" field predicates.
	Age      *int  `json:"age,omitempty"`
	AgeNEQ   *int  `json:"ageNEQ,omitempty"`
	AgeIn    []int `json:"ageIn,omitempty"`
	AgeNotIn []int `json:"ageNotIn,omitempty"`
	AgeGT    *int  `json:"ageGT,omitempty"`
	AgeGTE   *int  `json:"ageGTE,omitempty"`
	AgeLT    *int  `json:"ageLT,omitempty"`
	AgeLTE   *int  `json:"ageLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "testTodos" edge predicates.
	HasTestTodos     *bool                 `json:"hasTestTodos,omitempty"`
	HasTestTodosWith []*TestTodoWhereInput `json:"hasTestTodosWith,omitempty"`
}

// Filter applies the TestUserWhereInput filter on the TestUserQuery builder.
func (i *TestUserWhereInput) Filter(q *TestUserQuery) (*TestUserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering testusers.
// An error is returned if the input is empty or invalid.
func (i *TestUserWhereInput) P() (predicate.TestUser, error) {
	var predicates []predicate.TestUser
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, testuser.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TestUser, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, testuser.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TestUser, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, testuser.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, testuser.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, testuser.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, testuser.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, testuser.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, testuser.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, testuser.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, testuser.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, testuser.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, testuser.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, testuser.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, testuser.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, testuser.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, testuser.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, testuser.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, testuser.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, testuser.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, testuser.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, testuser.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, testuser.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, testuser.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, testuser.NameContainsFold(*i.NameContainsFold))
	}
	if i.Age != nil {
		predicates = append(predicates, testuser.AgeEQ(*i.Age))
	}
	if i.AgeNEQ != nil {
		predicates = append(predicates, testuser.AgeNEQ(*i.AgeNEQ))
	}
	if len(i.AgeIn) > 0 {
		predicates = append(predicates, testuser.AgeIn(i.AgeIn...))
	}
	if len(i.AgeNotIn) > 0 {
		predicates = append(predicates, testuser.AgeNotIn(i.AgeNotIn...))
	}
	if i.AgeGT != nil {
		predicates = append(predicates, testuser.AgeGT(*i.AgeGT))
	}
	if i.AgeGTE != nil {
		predicates = append(predicates, testuser.AgeGTE(*i.AgeGTE))
	}
	if i.AgeLT != nil {
		predicates = append(predicates, testuser.AgeLT(*i.AgeLT))
	}
	if i.AgeLTE != nil {
		predicates = append(predicates, testuser.AgeLTE(*i.AgeLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, testuser.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, testuser.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, testuser.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, testuser.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, testuser.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, testuser.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, testuser.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, testuser.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, testuser.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, testuser.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, testuser.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, testuser.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, testuser.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, testuser.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, testuser.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, testuser.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTestTodos != nil {
		p := testuser.HasTestTodos()
		if !*i.HasTestTodos {
			p = testuser.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTestTodosWith) > 0 {
		with := make([]predicate.TestTodo, 0, len(i.HasTestTodosWith))
		for _, w := range i.HasTestTodosWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, testuser.HasTestTodosWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate TestUserWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return testuser.And(predicates...), nil
	}
}

// WorkspaceWhereInput represents a where input for filtering Workspace queries.
type WorkspaceWhereInput struct {
	Not *WorkspaceWhereInput   `json:"not,omitempty"`
	Or  []*WorkspaceWhereInput `json:"or,omitempty"`
	And []*WorkspaceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *ulid.ID  `json:"createdBy,omitempty"`
	CreatedByNEQ          *ulid.ID  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []ulid.ID `json:"createdByIn,omitempty"`
	CreatedByNotIn        []ulid.ID `json:"createdByNotIn,omitempty"`
	CreatedByGT           *ulid.ID  `json:"createdByGT,omitempty"`
	CreatedByGTE          *ulid.ID  `json:"createdByGTE,omitempty"`
	CreatedByLT           *ulid.ID  `json:"createdByLT,omitempty"`
	CreatedByLTE          *ulid.ID  `json:"createdByLTE,omitempty"`
	CreatedByContains     *ulid.ID  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *ulid.ID  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *ulid.ID  `json:"createdByHasSuffix,omitempty"`
	CreatedByEqualFold    *ulid.ID  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *ulid.ID  `json:"createdByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "projects" edge predicates.
	HasProjects     *bool                `json:"hasProjects,omitempty"`
	HasProjectsWith []*ProjectWhereInput `json:"hasProjectsWith,omitempty"`

	// "workspaceTeammates" edge predicates.
	HasWorkspaceTeammates     *bool                          `json:"hasWorkspaceTeammates,omitempty"`
	HasWorkspaceTeammatesWith []*WorkspaceTeammateWhereInput `json:"hasWorkspaceTeammatesWith,omitempty"`

	// "favoriteWorkspaces" edge predicates.
	HasFavoriteWorkspaces     *bool                          `json:"hasFavoriteWorkspaces,omitempty"`
	HasFavoriteWorkspacesWith []*FavoriteWorkspaceWhereInput `json:"hasFavoriteWorkspacesWith,omitempty"`

	// "teammateTaskTabStatuses" edge predicates.
	HasTeammateTaskTabStatuses     *bool                              `json:"hasTeammateTaskTabStatuses,omitempty"`
	HasTeammateTaskTabStatusesWith []*TeammateTaskTabStatusWhereInput `json:"hasTeammateTaskTabStatusesWith,omitempty"`

	// "teammateTaskListStatuses" edge predicates.
	HasTeammateTaskListStatuses     *bool                               `json:"hasTeammateTaskListStatuses,omitempty"`
	HasTeammateTaskListStatusesWith []*TeammateTaskListStatusWhereInput `json:"hasTeammateTaskListStatusesWith,omitempty"`

	// "teammateTaskSections" edge predicates.
	HasTeammateTaskSections     *bool                            `json:"hasTeammateTaskSections,omitempty"`
	HasTeammateTaskSectionsWith []*TeammateTaskSectionWhereInput `json:"hasTeammateTaskSectionsWith,omitempty"`

	// "taskLikes" edge predicates.
	HasTaskLikes     *bool                 `json:"hasTaskLikes,omitempty"`
	HasTaskLikesWith []*TaskLikeWhereInput `json:"hasTaskLikesWith,omitempty"`

	// "tags" edge predicates.
	HasTags     *bool            `json:"hasTags,omitempty"`
	HasTagsWith []*TagWhereInput `json:"hasTagsWith,omitempty"`

	// "teammateTaskColumns" edge predicates.
	HasTeammateTaskColumns     *bool                           `json:"hasTeammateTaskColumns,omitempty"`
	HasTeammateTaskColumnsWith []*TeammateTaskColumnWhereInput `json:"hasTeammateTaskColumnsWith,omitempty"`

	// "teammateTasks" edge predicates.
	HasTeammateTasks     *bool                     `json:"hasTeammateTasks,omitempty"`
	HasTeammateTasksWith []*TeammateTaskWhereInput `json:"hasTeammateTasksWith,omitempty"`

	// "deletedTasksRef" edge predicates.
	HasDeletedTasksRef     *bool                    `json:"hasDeletedTasksRef,omitempty"`
	HasDeletedTasksRefWith []*DeletedTaskWhereInput `json:"hasDeletedTasksRefWith,omitempty"`

	// "workspaceActivities" edge predicates.
	HasWorkspaceActivities     *bool                          `json:"hasWorkspaceActivities,omitempty"`
	HasWorkspaceActivitiesWith []*WorkspaceActivityWhereInput `json:"hasWorkspaceActivitiesWith,omitempty"`

	// "taskActivities" edge predicates.
	HasTaskActivities     *bool                     `json:"hasTaskActivities,omitempty"`
	HasTaskActivitiesWith []*TaskActivityWhereInput `json:"hasTaskActivitiesWith,omitempty"`

	// "archivedTaskActivities" edge predicates.
	HasArchivedTaskActivities     *bool                             `json:"hasArchivedTaskActivities,omitempty"`
	HasArchivedTaskActivitiesWith []*ArchivedTaskActivityWhereInput `json:"hasArchivedTaskActivitiesWith,omitempty"`
}

// Filter applies the WorkspaceWhereInput filter on the WorkspaceQuery builder.
func (i *WorkspaceWhereInput) Filter(q *WorkspaceQuery) (*WorkspaceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering workspaces.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceWhereInput) P() (predicate.Workspace, error) {
	var predicates []predicate.Workspace
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, workspace.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Workspace, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspace.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Workspace, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspace.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, workspace.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspace.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspace.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspace.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspace.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspace.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspace.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspace.IDLTE(*i.IDLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, workspace.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, workspace.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, workspace.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, workspace.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, workspace.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, workspace.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, workspace.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, workspace.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, workspace.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, workspace.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, workspace.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, workspace.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, workspace.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, workspace.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, workspace.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, workspace.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, workspace.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, workspace.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, workspace.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, workspace.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, workspace.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, workspace.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, workspace.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, workspace.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, workspace.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, workspace.NameContainsFold(*i.NameContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspace.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspace.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspace.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspace.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspace.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspace.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspace.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspace.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspace.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspace.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspace.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspace.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspace.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspace.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspace.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspace.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTeammate != nil {
		p := workspace.HasTeammate()
		if !*i.HasTeammate {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateWith(with...))
	}
	if i.HasProjects != nil {
		p := workspace.HasProjects()
		if !*i.HasProjects {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectsWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectsWith))
		for _, w := range i.HasProjectsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasProjectsWith(with...))
	}
	if i.HasWorkspaceTeammates != nil {
		p := workspace.HasWorkspaceTeammates()
		if !*i.HasWorkspaceTeammates {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceTeammatesWith) > 0 {
		with := make([]predicate.WorkspaceTeammate, 0, len(i.HasWorkspaceTeammatesWith))
		for _, w := range i.HasWorkspaceTeammatesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasWorkspaceTeammatesWith(with...))
	}
	if i.HasFavoriteWorkspaces != nil {
		p := workspace.HasFavoriteWorkspaces()
		if !*i.HasFavoriteWorkspaces {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFavoriteWorkspacesWith) > 0 {
		with := make([]predicate.FavoriteWorkspace, 0, len(i.HasFavoriteWorkspacesWith))
		for _, w := range i.HasFavoriteWorkspacesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasFavoriteWorkspacesWith(with...))
	}
	if i.HasTeammateTaskTabStatuses != nil {
		p := workspace.HasTeammateTaskTabStatuses()
		if !*i.HasTeammateTaskTabStatuses {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskTabStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskTabStatus, 0, len(i.HasTeammateTaskTabStatusesWith))
		for _, w := range i.HasTeammateTaskTabStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateTaskTabStatusesWith(with...))
	}
	if i.HasTeammateTaskListStatuses != nil {
		p := workspace.HasTeammateTaskListStatuses()
		if !*i.HasTeammateTaskListStatuses {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskListStatusesWith) > 0 {
		with := make([]predicate.TeammateTaskListStatus, 0, len(i.HasTeammateTaskListStatusesWith))
		for _, w := range i.HasTeammateTaskListStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateTaskListStatusesWith(with...))
	}
	if i.HasTeammateTaskSections != nil {
		p := workspace.HasTeammateTaskSections()
		if !*i.HasTeammateTaskSections {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskSectionsWith) > 0 {
		with := make([]predicate.TeammateTaskSection, 0, len(i.HasTeammateTaskSectionsWith))
		for _, w := range i.HasTeammateTaskSectionsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateTaskSectionsWith(with...))
	}
	if i.HasTaskLikes != nil {
		p := workspace.HasTaskLikes()
		if !*i.HasTaskLikes {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskLikesWith) > 0 {
		with := make([]predicate.TaskLike, 0, len(i.HasTaskLikesWith))
		for _, w := range i.HasTaskLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTaskLikesWith(with...))
	}
	if i.HasTags != nil {
		p := workspace.HasTags()
		if !*i.HasTags {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTagsWith))
		for _, w := range i.HasTagsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTagsWith(with...))
	}
	if i.HasTeammateTaskColumns != nil {
		p := workspace.HasTeammateTaskColumns()
		if !*i.HasTeammateTaskColumns {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTaskColumnsWith) > 0 {
		with := make([]predicate.TeammateTaskColumn, 0, len(i.HasTeammateTaskColumnsWith))
		for _, w := range i.HasTeammateTaskColumnsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateTaskColumnsWith(with...))
	}
	if i.HasTeammateTasks != nil {
		p := workspace.HasTeammateTasks()
		if !*i.HasTeammateTasks {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateTasksWith) > 0 {
		with := make([]predicate.TeammateTask, 0, len(i.HasTeammateTasksWith))
		for _, w := range i.HasTeammateTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTeammateTasksWith(with...))
	}
	if i.HasDeletedTasksRef != nil {
		p := workspace.HasDeletedTasksRef()
		if !*i.HasDeletedTasksRef {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDeletedTasksRefWith) > 0 {
		with := make([]predicate.DeletedTask, 0, len(i.HasDeletedTasksRefWith))
		for _, w := range i.HasDeletedTasksRefWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasDeletedTasksRefWith(with...))
	}
	if i.HasWorkspaceActivities != nil {
		p := workspace.HasWorkspaceActivities()
		if !*i.HasWorkspaceActivities {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceActivitiesWith) > 0 {
		with := make([]predicate.WorkspaceActivity, 0, len(i.HasWorkspaceActivitiesWith))
		for _, w := range i.HasWorkspaceActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasWorkspaceActivitiesWith(with...))
	}
	if i.HasTaskActivities != nil {
		p := workspace.HasTaskActivities()
		if !*i.HasTaskActivities {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskActivitiesWith) > 0 {
		with := make([]predicate.TaskActivity, 0, len(i.HasTaskActivitiesWith))
		for _, w := range i.HasTaskActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasTaskActivitiesWith(with...))
	}
	if i.HasArchivedTaskActivities != nil {
		p := workspace.HasArchivedTaskActivities()
		if !*i.HasArchivedTaskActivities {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasArchivedTaskActivitiesWith) > 0 {
		with := make([]predicate.ArchivedTaskActivity, 0, len(i.HasArchivedTaskActivitiesWith))
		for _, w := range i.HasArchivedTaskActivitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasArchivedTaskActivitiesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate WorkspaceWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return workspace.And(predicates...), nil
	}
}

// WorkspaceActivityWhereInput represents a where input for filtering WorkspaceActivity queries.
type WorkspaceActivityWhereInput struct {
	Not *WorkspaceActivityWhereInput   `json:"not,omitempty"`
	Or  []*WorkspaceActivityWhereInput `json:"or,omitempty"`
	And []*WorkspaceActivityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "activity_type_id" field predicates.
	ActivityTypeID             *ulid.ID  `json:"activityTypeID,omitempty"`
	ActivityTypeIDNEQ          *ulid.ID  `json:"activityTypeIDNEQ,omitempty"`
	ActivityTypeIDIn           []ulid.ID `json:"activityTypeIDIn,omitempty"`
	ActivityTypeIDNotIn        []ulid.ID `json:"activityTypeIDNotIn,omitempty"`
	ActivityTypeIDGT           *ulid.ID  `json:"activityTypeIDGT,omitempty"`
	ActivityTypeIDGTE          *ulid.ID  `json:"activityTypeIDGTE,omitempty"`
	ActivityTypeIDLT           *ulid.ID  `json:"activityTypeIDLT,omitempty"`
	ActivityTypeIDLTE          *ulid.ID  `json:"activityTypeIDLTE,omitempty"`
	ActivityTypeIDContains     *ulid.ID  `json:"activityTypeIDContains,omitempty"`
	ActivityTypeIDHasPrefix    *ulid.ID  `json:"activityTypeIDHasPrefix,omitempty"`
	ActivityTypeIDHasSuffix    *ulid.ID  `json:"activityTypeIDHasSuffix,omitempty"`
	ActivityTypeIDEqualFold    *ulid.ID  `json:"activityTypeIDEqualFold,omitempty"`
	ActivityTypeIDContainsFold *ulid.ID  `json:"activityTypeIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "project_id" field predicates.
	ProjectID             *ulid.ID  `json:"projectID,omitempty"`
	ProjectIDNEQ          *ulid.ID  `json:"projectIDNEQ,omitempty"`
	ProjectIDIn           []ulid.ID `json:"projectIDIn,omitempty"`
	ProjectIDNotIn        []ulid.ID `json:"projectIDNotIn,omitempty"`
	ProjectIDGT           *ulid.ID  `json:"projectIDGT,omitempty"`
	ProjectIDGTE          *ulid.ID  `json:"projectIDGTE,omitempty"`
	ProjectIDLT           *ulid.ID  `json:"projectIDLT,omitempty"`
	ProjectIDLTE          *ulid.ID  `json:"projectIDLTE,omitempty"`
	ProjectIDContains     *ulid.ID  `json:"projectIDContains,omitempty"`
	ProjectIDHasPrefix    *ulid.ID  `json:"projectIDHasPrefix,omitempty"`
	ProjectIDHasSuffix    *ulid.ID  `json:"projectIDHasSuffix,omitempty"`
	ProjectIDEqualFold    *ulid.ID  `json:"projectIDEqualFold,omitempty"`
	ProjectIDContainsFold *ulid.ID  `json:"projectIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "activityType" edge predicates.
	HasActivityType     *bool                     `json:"hasActivityType,omitempty"`
	HasActivityTypeWith []*ActivityTypeWhereInput `json:"hasActivityTypeWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "project" edge predicates.
	HasProject     *bool                `json:"hasProject,omitempty"`
	HasProjectWith []*ProjectWhereInput `json:"hasProjectWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`

	// "workspaceActivityTasks" edge predicates.
	HasWorkspaceActivityTasks     *bool                              `json:"hasWorkspaceActivityTasks,omitempty"`
	HasWorkspaceActivityTasksWith []*WorkspaceActivityTaskWhereInput `json:"hasWorkspaceActivityTasksWith,omitempty"`
}

// Filter applies the WorkspaceActivityWhereInput filter on the WorkspaceActivityQuery builder.
func (i *WorkspaceActivityWhereInput) Filter(q *WorkspaceActivityQuery) (*WorkspaceActivityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering workspaceactivities.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceActivityWhereInput) P() (predicate.WorkspaceActivity, error) {
	var predicates []predicate.WorkspaceActivity
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, workspaceactivity.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.WorkspaceActivity, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspaceactivity.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.WorkspaceActivity, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspaceactivity.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, workspaceactivity.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspaceactivity.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspaceactivity.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspaceactivity.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspaceactivity.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspaceactivity.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspaceactivity.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspaceactivity.IDLTE(*i.IDLTE))
	}
	if i.ActivityTypeID != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDEQ(*i.ActivityTypeID))
	}
	if i.ActivityTypeIDNEQ != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDNEQ(*i.ActivityTypeIDNEQ))
	}
	if len(i.ActivityTypeIDIn) > 0 {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDIn(i.ActivityTypeIDIn...))
	}
	if len(i.ActivityTypeIDNotIn) > 0 {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDNotIn(i.ActivityTypeIDNotIn...))
	}
	if i.ActivityTypeIDGT != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDGT(*i.ActivityTypeIDGT))
	}
	if i.ActivityTypeIDGTE != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDGTE(*i.ActivityTypeIDGTE))
	}
	if i.ActivityTypeIDLT != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDLT(*i.ActivityTypeIDLT))
	}
	if i.ActivityTypeIDLTE != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDLTE(*i.ActivityTypeIDLTE))
	}
	if i.ActivityTypeIDContains != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDContains(*i.ActivityTypeIDContains))
	}
	if i.ActivityTypeIDHasPrefix != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDHasPrefix(*i.ActivityTypeIDHasPrefix))
	}
	if i.ActivityTypeIDHasSuffix != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDHasSuffix(*i.ActivityTypeIDHasSuffix))
	}
	if i.ActivityTypeIDEqualFold != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDEqualFold(*i.ActivityTypeIDEqualFold))
	}
	if i.ActivityTypeIDContainsFold != nil {
		predicates = append(predicates, workspaceactivity.ActivityTypeIDContainsFold(*i.ActivityTypeIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, workspaceactivity.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, workspaceactivity.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, workspaceactivity.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.ProjectID != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDEQ(*i.ProjectID))
	}
	if i.ProjectIDNEQ != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDNEQ(*i.ProjectIDNEQ))
	}
	if len(i.ProjectIDIn) > 0 {
		predicates = append(predicates, workspaceactivity.ProjectIDIn(i.ProjectIDIn...))
	}
	if len(i.ProjectIDNotIn) > 0 {
		predicates = append(predicates, workspaceactivity.ProjectIDNotIn(i.ProjectIDNotIn...))
	}
	if i.ProjectIDGT != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDGT(*i.ProjectIDGT))
	}
	if i.ProjectIDGTE != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDGTE(*i.ProjectIDGTE))
	}
	if i.ProjectIDLT != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDLT(*i.ProjectIDLT))
	}
	if i.ProjectIDLTE != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDLTE(*i.ProjectIDLTE))
	}
	if i.ProjectIDContains != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDContains(*i.ProjectIDContains))
	}
	if i.ProjectIDHasPrefix != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDHasPrefix(*i.ProjectIDHasPrefix))
	}
	if i.ProjectIDHasSuffix != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDHasSuffix(*i.ProjectIDHasSuffix))
	}
	if i.ProjectIDEqualFold != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDEqualFold(*i.ProjectIDEqualFold))
	}
	if i.ProjectIDContainsFold != nil {
		predicates = append(predicates, workspaceactivity.ProjectIDContainsFold(*i.ProjectIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, workspaceactivity.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, workspaceactivity.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, workspaceactivity.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspaceactivity.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspaceactivity.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspaceactivity.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceactivity.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspaceactivity.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspaceactivity.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspaceactivity.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspaceactivity.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspaceactivity.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspaceactivity.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspaceactivity.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceactivity.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspaceactivity.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspaceactivity.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspaceactivity.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspaceactivity.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasActivityType != nil {
		p := workspaceactivity.HasActivityType()
		if !*i.HasActivityType {
			p = workspaceactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasActivityTypeWith) > 0 {
		with := make([]predicate.ActivityType, 0, len(i.HasActivityTypeWith))
		for _, w := range i.HasActivityTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceactivity.HasActivityTypeWith(with...))
	}
	if i.HasWorkspace != nil {
		p := workspaceactivity.HasWorkspace()
		if !*i.HasWorkspace {
			p = workspaceactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceactivity.HasWorkspaceWith(with...))
	}
	if i.HasProject != nil {
		p := workspaceactivity.HasProject()
		if !*i.HasProject {
			p = workspaceactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProjectWith) > 0 {
		with := make([]predicate.Project, 0, len(i.HasProjectWith))
		for _, w := range i.HasProjectWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceactivity.HasProjectWith(with...))
	}
	if i.HasTeammate != nil {
		p := workspaceactivity.HasTeammate()
		if !*i.HasTeammate {
			p = workspaceactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceactivity.HasTeammateWith(with...))
	}
	if i.HasWorkspaceActivityTasks != nil {
		p := workspaceactivity.HasWorkspaceActivityTasks()
		if !*i.HasWorkspaceActivityTasks {
			p = workspaceactivity.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceActivityTasksWith) > 0 {
		with := make([]predicate.WorkspaceActivityTask, 0, len(i.HasWorkspaceActivityTasksWith))
		for _, w := range i.HasWorkspaceActivityTasksWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceactivity.HasWorkspaceActivityTasksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate WorkspaceActivityWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return workspaceactivity.And(predicates...), nil
	}
}

// WorkspaceActivityTaskWhereInput represents a where input for filtering WorkspaceActivityTask queries.
type WorkspaceActivityTaskWhereInput struct {
	Not *WorkspaceActivityTaskWhereInput   `json:"not,omitempty"`
	Or  []*WorkspaceActivityTaskWhereInput `json:"or,omitempty"`
	And []*WorkspaceActivityTaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_activity_id" field predicates.
	WorkspaceActivityID             *ulid.ID  `json:"workspaceActivityID,omitempty"`
	WorkspaceActivityIDNEQ          *ulid.ID  `json:"workspaceActivityIDNEQ,omitempty"`
	WorkspaceActivityIDIn           []ulid.ID `json:"workspaceActivityIDIn,omitempty"`
	WorkspaceActivityIDNotIn        []ulid.ID `json:"workspaceActivityIDNotIn,omitempty"`
	WorkspaceActivityIDGT           *ulid.ID  `json:"workspaceActivityIDGT,omitempty"`
	WorkspaceActivityIDGTE          *ulid.ID  `json:"workspaceActivityIDGTE,omitempty"`
	WorkspaceActivityIDLT           *ulid.ID  `json:"workspaceActivityIDLT,omitempty"`
	WorkspaceActivityIDLTE          *ulid.ID  `json:"workspaceActivityIDLTE,omitempty"`
	WorkspaceActivityIDContains     *ulid.ID  `json:"workspaceActivityIDContains,omitempty"`
	WorkspaceActivityIDHasPrefix    *ulid.ID  `json:"workspaceActivityIDHasPrefix,omitempty"`
	WorkspaceActivityIDHasSuffix    *ulid.ID  `json:"workspaceActivityIDHasSuffix,omitempty"`
	WorkspaceActivityIDEqualFold    *ulid.ID  `json:"workspaceActivityIDEqualFold,omitempty"`
	WorkspaceActivityIDContainsFold *ulid.ID  `json:"workspaceActivityIDContainsFold,omitempty"`

	// "task_id" field predicates.
	TaskID             *ulid.ID  `json:"taskID,omitempty"`
	TaskIDNEQ          *ulid.ID  `json:"taskIDNEQ,omitempty"`
	TaskIDIn           []ulid.ID `json:"taskIDIn,omitempty"`
	TaskIDNotIn        []ulid.ID `json:"taskIDNotIn,omitempty"`
	TaskIDGT           *ulid.ID  `json:"taskIDGT,omitempty"`
	TaskIDGTE          *ulid.ID  `json:"taskIDGTE,omitempty"`
	TaskIDLT           *ulid.ID  `json:"taskIDLT,omitempty"`
	TaskIDLTE          *ulid.ID  `json:"taskIDLTE,omitempty"`
	TaskIDContains     *ulid.ID  `json:"taskIDContains,omitempty"`
	TaskIDHasPrefix    *ulid.ID  `json:"taskIDHasPrefix,omitempty"`
	TaskIDHasSuffix    *ulid.ID  `json:"taskIDHasSuffix,omitempty"`
	TaskIDEqualFold    *ulid.ID  `json:"taskIDEqualFold,omitempty"`
	TaskIDContainsFold *ulid.ID  `json:"taskIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "task" edge predicates.
	HasTask     *bool             `json:"hasTask,omitempty"`
	HasTaskWith []*TaskWhereInput `json:"hasTaskWith,omitempty"`

	// "workspaceActivity" edge predicates.
	HasWorkspaceActivity     *bool                          `json:"hasWorkspaceActivity,omitempty"`
	HasWorkspaceActivityWith []*WorkspaceActivityWhereInput `json:"hasWorkspaceActivityWith,omitempty"`
}

// Filter applies the WorkspaceActivityTaskWhereInput filter on the WorkspaceActivityTaskQuery builder.
func (i *WorkspaceActivityTaskWhereInput) Filter(q *WorkspaceActivityTaskQuery) (*WorkspaceActivityTaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering workspaceactivitytasks.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceActivityTaskWhereInput) P() (predicate.WorkspaceActivityTask, error) {
	var predicates []predicate.WorkspaceActivityTask
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, workspaceactivitytask.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.WorkspaceActivityTask, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspaceactivitytask.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.WorkspaceActivityTask, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspaceactivitytask.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, workspaceactivitytask.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspaceactivitytask.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspaceactivitytask.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspaceactivitytask.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspaceactivitytask.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspaceactivitytask.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceActivityID != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDEQ(*i.WorkspaceActivityID))
	}
	if i.WorkspaceActivityIDNEQ != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDNEQ(*i.WorkspaceActivityIDNEQ))
	}
	if len(i.WorkspaceActivityIDIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDIn(i.WorkspaceActivityIDIn...))
	}
	if len(i.WorkspaceActivityIDNotIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDNotIn(i.WorkspaceActivityIDNotIn...))
	}
	if i.WorkspaceActivityIDGT != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDGT(*i.WorkspaceActivityIDGT))
	}
	if i.WorkspaceActivityIDGTE != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDGTE(*i.WorkspaceActivityIDGTE))
	}
	if i.WorkspaceActivityIDLT != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDLT(*i.WorkspaceActivityIDLT))
	}
	if i.WorkspaceActivityIDLTE != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDLTE(*i.WorkspaceActivityIDLTE))
	}
	if i.WorkspaceActivityIDContains != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDContains(*i.WorkspaceActivityIDContains))
	}
	if i.WorkspaceActivityIDHasPrefix != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDHasPrefix(*i.WorkspaceActivityIDHasPrefix))
	}
	if i.WorkspaceActivityIDHasSuffix != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDHasSuffix(*i.WorkspaceActivityIDHasSuffix))
	}
	if i.WorkspaceActivityIDEqualFold != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDEqualFold(*i.WorkspaceActivityIDEqualFold))
	}
	if i.WorkspaceActivityIDContainsFold != nil {
		predicates = append(predicates, workspaceactivitytask.WorkspaceActivityIDContainsFold(*i.WorkspaceActivityIDContainsFold))
	}
	if i.TaskID != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDEQ(*i.TaskID))
	}
	if i.TaskIDNEQ != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDNEQ(*i.TaskIDNEQ))
	}
	if len(i.TaskIDIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.TaskIDIn(i.TaskIDIn...))
	}
	if len(i.TaskIDNotIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.TaskIDNotIn(i.TaskIDNotIn...))
	}
	if i.TaskIDGT != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDGT(*i.TaskIDGT))
	}
	if i.TaskIDGTE != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDGTE(*i.TaskIDGTE))
	}
	if i.TaskIDLT != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDLT(*i.TaskIDLT))
	}
	if i.TaskIDLTE != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDLTE(*i.TaskIDLTE))
	}
	if i.TaskIDContains != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDContains(*i.TaskIDContains))
	}
	if i.TaskIDHasPrefix != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDHasPrefix(*i.TaskIDHasPrefix))
	}
	if i.TaskIDHasSuffix != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDHasSuffix(*i.TaskIDHasSuffix))
	}
	if i.TaskIDEqualFold != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDEqualFold(*i.TaskIDEqualFold))
	}
	if i.TaskIDContainsFold != nil {
		predicates = append(predicates, workspaceactivitytask.TaskIDContainsFold(*i.TaskIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspaceactivitytask.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspaceactivitytask.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspaceactivitytask.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspaceactivitytask.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspaceactivitytask.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspaceactivitytask.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspaceactivitytask.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTask != nil {
		p := workspaceactivitytask.HasTask()
		if !*i.HasTask {
			p = workspaceactivitytask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaskWith) > 0 {
		with := make([]predicate.Task, 0, len(i.HasTaskWith))
		for _, w := range i.HasTaskWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceactivitytask.HasTaskWith(with...))
	}
	if i.HasWorkspaceActivity != nil {
		p := workspaceactivitytask.HasWorkspaceActivity()
		if !*i.HasWorkspaceActivity {
			p = workspaceactivitytask.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceActivityWith) > 0 {
		with := make([]predicate.WorkspaceActivity, 0, len(i.HasWorkspaceActivityWith))
		for _, w := range i.HasWorkspaceActivityWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceactivitytask.HasWorkspaceActivityWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate WorkspaceActivityTaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return workspaceactivitytask.And(predicates...), nil
	}
}

// WorkspaceTeammateWhereInput represents a where input for filtering WorkspaceTeammate queries.
type WorkspaceTeammateWhereInput struct {
	Not *WorkspaceTeammateWhereInput   `json:"not,omitempty"`
	Or  []*WorkspaceTeammateWhereInput `json:"or,omitempty"`
	And []*WorkspaceTeammateWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ulid.ID  `json:"id,omitempty"`
	IDNEQ   *ulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ulid.ID `json:"idIn,omitempty"`
	IDNotIn []ulid.ID `json:"idNotIn,omitempty"`
	IDGT    *ulid.ID  `json:"idGT,omitempty"`
	IDGTE   *ulid.ID  `json:"idGTE,omitempty"`
	IDLT    *ulid.ID  `json:"idLT,omitempty"`
	IDLTE   *ulid.ID  `json:"idLTE,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *ulid.ID  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *ulid.ID  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []ulid.ID `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []ulid.ID `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *ulid.ID  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *ulid.ID  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *ulid.ID  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *ulid.ID  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *ulid.ID  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *ulid.ID  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *ulid.ID  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *ulid.ID  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *ulid.ID  `json:"workspaceIDContainsFold,omitempty"`

	// "teammate_id" field predicates.
	TeammateID             *ulid.ID  `json:"teammateID,omitempty"`
	TeammateIDNEQ          *ulid.ID  `json:"teammateIDNEQ,omitempty"`
	TeammateIDIn           []ulid.ID `json:"teammateIDIn,omitempty"`
	TeammateIDNotIn        []ulid.ID `json:"teammateIDNotIn,omitempty"`
	TeammateIDGT           *ulid.ID  `json:"teammateIDGT,omitempty"`
	TeammateIDGTE          *ulid.ID  `json:"teammateIDGTE,omitempty"`
	TeammateIDLT           *ulid.ID  `json:"teammateIDLT,omitempty"`
	TeammateIDLTE          *ulid.ID  `json:"teammateIDLTE,omitempty"`
	TeammateIDContains     *ulid.ID  `json:"teammateIDContains,omitempty"`
	TeammateIDHasPrefix    *ulid.ID  `json:"teammateIDHasPrefix,omitempty"`
	TeammateIDHasSuffix    *ulid.ID  `json:"teammateIDHasSuffix,omitempty"`
	TeammateIDEqualFold    *ulid.ID  `json:"teammateIDEqualFold,omitempty"`
	TeammateIDContainsFold *ulid.ID  `json:"teammateIDContainsFold,omitempty"`

	// "role" field predicates.
	Role             *string  `json:"role,omitempty"`
	RoleNEQ          *string  `json:"roleNEQ,omitempty"`
	RoleIn           []string `json:"roleIn,omitempty"`
	RoleNotIn        []string `json:"roleNotIn,omitempty"`
	RoleGT           *string  `json:"roleGT,omitempty"`
	RoleGTE          *string  `json:"roleGTE,omitempty"`
	RoleLT           *string  `json:"roleLT,omitempty"`
	RoleLTE          *string  `json:"roleLTE,omitempty"`
	RoleContains     *string  `json:"roleContains,omitempty"`
	RoleHasPrefix    *string  `json:"roleHasPrefix,omitempty"`
	RoleHasSuffix    *string  `json:"roleHasSuffix,omitempty"`
	RoleEqualFold    *string  `json:"roleEqualFold,omitempty"`
	RoleContainsFold *string  `json:"roleContainsFold,omitempty"`

	// "is_owner" field predicates.
	IsOwner    *bool `json:"isOwner,omitempty"`
	IsOwnerNEQ *bool `json:"isOwnerNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`

	// "teammate" edge predicates.
	HasTeammate     *bool                 `json:"hasTeammate,omitempty"`
	HasTeammateWith []*TeammateWhereInput `json:"hasTeammateWith,omitempty"`
}

// Filter applies the WorkspaceTeammateWhereInput filter on the WorkspaceTeammateQuery builder.
func (i *WorkspaceTeammateWhereInput) Filter(q *WorkspaceTeammateQuery) (*WorkspaceTeammateQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering workspaceteammates.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceTeammateWhereInput) P() (predicate.WorkspaceTeammate, error) {
	var predicates []predicate.WorkspaceTeammate
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, workspaceteammate.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.WorkspaceTeammate, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspaceteammate.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.WorkspaceTeammate, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspaceteammate.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, workspaceteammate.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspaceteammate.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspaceteammate.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspaceteammate.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspaceteammate.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspaceteammate.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspaceteammate.IDLTE(*i.IDLTE))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, workspaceteammate.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, workspaceteammate.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.TeammateID != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDEQ(*i.TeammateID))
	}
	if i.TeammateIDNEQ != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDNEQ(*i.TeammateIDNEQ))
	}
	if len(i.TeammateIDIn) > 0 {
		predicates = append(predicates, workspaceteammate.TeammateIDIn(i.TeammateIDIn...))
	}
	if len(i.TeammateIDNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.TeammateIDNotIn(i.TeammateIDNotIn...))
	}
	if i.TeammateIDGT != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDGT(*i.TeammateIDGT))
	}
	if i.TeammateIDGTE != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDGTE(*i.TeammateIDGTE))
	}
	if i.TeammateIDLT != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDLT(*i.TeammateIDLT))
	}
	if i.TeammateIDLTE != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDLTE(*i.TeammateIDLTE))
	}
	if i.TeammateIDContains != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDContains(*i.TeammateIDContains))
	}
	if i.TeammateIDHasPrefix != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDHasPrefix(*i.TeammateIDHasPrefix))
	}
	if i.TeammateIDHasSuffix != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDHasSuffix(*i.TeammateIDHasSuffix))
	}
	if i.TeammateIDEqualFold != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDEqualFold(*i.TeammateIDEqualFold))
	}
	if i.TeammateIDContainsFold != nil {
		predicates = append(predicates, workspaceteammate.TeammateIDContainsFold(*i.TeammateIDContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, workspaceteammate.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, workspaceteammate.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, workspaceteammate.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, workspaceteammate.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, workspaceteammate.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, workspaceteammate.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, workspaceteammate.RoleLTE(*i.RoleLTE))
	}
	if i.RoleContains != nil {
		predicates = append(predicates, workspaceteammate.RoleContains(*i.RoleContains))
	}
	if i.RoleHasPrefix != nil {
		predicates = append(predicates, workspaceteammate.RoleHasPrefix(*i.RoleHasPrefix))
	}
	if i.RoleHasSuffix != nil {
		predicates = append(predicates, workspaceteammate.RoleHasSuffix(*i.RoleHasSuffix))
	}
	if i.RoleEqualFold != nil {
		predicates = append(predicates, workspaceteammate.RoleEqualFold(*i.RoleEqualFold))
	}
	if i.RoleContainsFold != nil {
		predicates = append(predicates, workspaceteammate.RoleContainsFold(*i.RoleContainsFold))
	}
	if i.IsOwner != nil {
		predicates = append(predicates, workspaceteammate.IsOwnerEQ(*i.IsOwner))
	}
	if i.IsOwnerNEQ != nil {
		predicates = append(predicates, workspaceteammate.IsOwnerNEQ(*i.IsOwnerNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspaceteammate.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspaceteammate.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspaceteammate.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceteammate.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspaceteammate.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasWorkspace != nil {
		p := workspaceteammate.HasWorkspace()
		if !*i.HasWorkspace {
			p = workspaceteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceteammate.HasWorkspaceWith(with...))
	}
	if i.HasTeammate != nil {
		p := workspaceteammate.HasTeammate()
		if !*i.HasTeammate {
			p = workspaceteammate.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTeammateWith) > 0 {
		with := make([]predicate.Teammate, 0, len(i.HasTeammateWith))
		for _, w := range i.HasTeammateWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceteammate.HasTeammateWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("project-management-demo-backend/ent: empty predicate WorkspaceTeammateWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return workspaceteammate.And(predicates...), nil
	}
}
