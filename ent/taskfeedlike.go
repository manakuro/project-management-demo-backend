// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/teammate"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TaskFeedLike is the model entity for the TaskFeedLike schema.
type TaskFeedLike struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID ulid.ID `json:"task_id,omitempty"`
	// TeammateID holds the value of the "teammate_id" field.
	TeammateID ulid.ID `json:"teammate_id,omitempty"`
	// TaskFeedID holds the value of the "task_feed_id" field.
	TaskFeedID ulid.ID `json:"task_feed_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskFeedLikeQuery when eager-loading is set.
	Edges TaskFeedLikeEdges `json:"edges"`
}

// TaskFeedLikeEdges holds the relations/edges for other nodes in the graph.
type TaskFeedLikeEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// Teammate holds the value of the teammate edge.
	Teammate *Teammate `json:"teammate,omitempty"`
	// Feed holds the value of the feed edge.
	Feed *TaskFeed `json:"feed,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskFeedLikeEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// The edge task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// TeammateOrErr returns the Teammate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskFeedLikeEdges) TeammateOrErr() (*Teammate, error) {
	if e.loadedTypes[1] {
		if e.Teammate == nil {
			// The edge teammate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammate.Label}
		}
		return e.Teammate, nil
	}
	return nil, &NotLoadedError{edge: "teammate"}
}

// FeedOrErr returns the Feed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskFeedLikeEdges) FeedOrErr() (*TaskFeed, error) {
	if e.loadedTypes[2] {
		if e.Feed == nil {
			// The edge feed was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: taskfeed.Label}
		}
		return e.Feed, nil
	}
	return nil, &NotLoadedError{edge: "feed"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskFeedLike) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskfeedlike.FieldCreatedAt, taskfeedlike.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case taskfeedlike.FieldID, taskfeedlike.FieldTaskID, taskfeedlike.FieldTeammateID, taskfeedlike.FieldTaskFeedID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskFeedLike", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskFeedLike fields.
func (tfl *TaskFeedLike) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskfeedlike.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tfl.ID = *value
			}
		case taskfeedlike.FieldTaskID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				tfl.TaskID = *value
			}
		case taskfeedlike.FieldTeammateID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field teammate_id", values[i])
			} else if value != nil {
				tfl.TeammateID = *value
			}
		case taskfeedlike.FieldTaskFeedID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_feed_id", values[i])
			} else if value != nil {
				tfl.TaskFeedID = *value
			}
		case taskfeedlike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tfl.CreatedAt = value.Time
			}
		case taskfeedlike.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tfl.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTask queries the "task" edge of the TaskFeedLike entity.
func (tfl *TaskFeedLike) QueryTask() *TaskQuery {
	return (&TaskFeedLikeClient{config: tfl.config}).QueryTask(tfl)
}

// QueryTeammate queries the "teammate" edge of the TaskFeedLike entity.
func (tfl *TaskFeedLike) QueryTeammate() *TeammateQuery {
	return (&TaskFeedLikeClient{config: tfl.config}).QueryTeammate(tfl)
}

// QueryFeed queries the "feed" edge of the TaskFeedLike entity.
func (tfl *TaskFeedLike) QueryFeed() *TaskFeedQuery {
	return (&TaskFeedLikeClient{config: tfl.config}).QueryFeed(tfl)
}

// Update returns a builder for updating this TaskFeedLike.
// Note that you need to call TaskFeedLike.Unwrap() before calling this method if this TaskFeedLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (tfl *TaskFeedLike) Update() *TaskFeedLikeUpdateOne {
	return (&TaskFeedLikeClient{config: tfl.config}).UpdateOne(tfl)
}

// Unwrap unwraps the TaskFeedLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tfl *TaskFeedLike) Unwrap() *TaskFeedLike {
	tx, ok := tfl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskFeedLike is not a transactional entity")
	}
	tfl.config.driver = tx.drv
	return tfl
}

// String implements the fmt.Stringer.
func (tfl *TaskFeedLike) String() string {
	var builder strings.Builder
	builder.WriteString("TaskFeedLike(")
	builder.WriteString(fmt.Sprintf("id=%v", tfl.ID))
	builder.WriteString(", task_id=")
	builder.WriteString(fmt.Sprintf("%v", tfl.TaskID))
	builder.WriteString(", teammate_id=")
	builder.WriteString(fmt.Sprintf("%v", tfl.TeammateID))
	builder.WriteString(", task_feed_id=")
	builder.WriteString(fmt.Sprintf("%v", tfl.TaskFeedID))
	builder.WriteString(", created_at=")
	builder.WriteString(tfl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tfl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskFeedLikes is a parsable slice of TaskFeedLike.
type TaskFeedLikes []*TaskFeedLike

func (tfl TaskFeedLikes) config(cfg config) {
	for _i := range tfl {
		tfl[_i].config = cfg
	}
}
