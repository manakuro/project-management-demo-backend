// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskactivity"
	"project-management-demo-backend/ent/taskactivitytask"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskActivityQuery is the builder for querying TaskActivity entities.
type TaskActivityQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TaskActivity
	// eager-loading edges.
	withTeammate          *TeammateQuery
	withActivityType      *ActivityTypeQuery
	withWorkspace         *WorkspaceQuery
	withTaskActivityTasks *TaskActivityTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskActivityQuery builder.
func (taq *TaskActivityQuery) Where(ps ...predicate.TaskActivity) *TaskActivityQuery {
	taq.predicates = append(taq.predicates, ps...)
	return taq
}

// Limit adds a limit step to the query.
func (taq *TaskActivityQuery) Limit(limit int) *TaskActivityQuery {
	taq.limit = &limit
	return taq
}

// Offset adds an offset step to the query.
func (taq *TaskActivityQuery) Offset(offset int) *TaskActivityQuery {
	taq.offset = &offset
	return taq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (taq *TaskActivityQuery) Unique(unique bool) *TaskActivityQuery {
	taq.unique = &unique
	return taq
}

// Order adds an order step to the query.
func (taq *TaskActivityQuery) Order(o ...OrderFunc) *TaskActivityQuery {
	taq.order = append(taq.order, o...)
	return taq
}

// QueryTeammate chains the current query on the "teammate" edge.
func (taq *TaskActivityQuery) QueryTeammate() *TeammateQuery {
	query := &TeammateQuery{config: taq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := taq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, selector),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivity.TeammateTable, taskactivity.TeammateColumn),
		)
		fromU = sqlgraph.SetNeighbors(taq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActivityType chains the current query on the "activityType" edge.
func (taq *TaskActivityQuery) QueryActivityType() *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: taq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := taq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, selector),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivity.ActivityTypeTable, taskactivity.ActivityTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(taq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspace chains the current query on the "workspace" edge.
func (taq *TaskActivityQuery) QueryWorkspace() *WorkspaceQuery {
	query := &WorkspaceQuery{config: taq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := taq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, selector),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, taskactivity.WorkspaceTable, taskactivity.WorkspaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(taq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskActivityTasks chains the current query on the "taskActivityTasks" edge.
func (taq *TaskActivityQuery) QueryTaskActivityTasks() *TaskActivityTaskQuery {
	query := &TaskActivityTaskQuery{config: taq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := taq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(taskactivity.Table, taskactivity.FieldID, selector),
			sqlgraph.To(taskactivitytask.Table, taskactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, taskactivity.TaskActivityTasksTable, taskactivity.TaskActivityTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(taq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TaskActivity entity from the query.
// Returns a *NotFoundError when no TaskActivity was found.
func (taq *TaskActivityQuery) First(ctx context.Context) (*TaskActivity, error) {
	nodes, err := taq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{taskactivity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (taq *TaskActivityQuery) FirstX(ctx context.Context) *TaskActivity {
	node, err := taq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TaskActivity ID from the query.
// Returns a *NotFoundError when no TaskActivity ID was found.
func (taq *TaskActivityQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = taq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{taskactivity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (taq *TaskActivityQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := taq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TaskActivity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TaskActivity entity is found.
// Returns a *NotFoundError when no TaskActivity entities are found.
func (taq *TaskActivityQuery) Only(ctx context.Context) (*TaskActivity, error) {
	nodes, err := taq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{taskactivity.Label}
	default:
		return nil, &NotSingularError{taskactivity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (taq *TaskActivityQuery) OnlyX(ctx context.Context) *TaskActivity {
	node, err := taq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TaskActivity ID in the query.
// Returns a *NotSingularError when more than one TaskActivity ID is found.
// Returns a *NotFoundError when no entities are found.
func (taq *TaskActivityQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = taq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = &NotSingularError{taskactivity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (taq *TaskActivityQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := taq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TaskActivities.
func (taq *TaskActivityQuery) All(ctx context.Context) ([]*TaskActivity, error) {
	if err := taq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return taq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (taq *TaskActivityQuery) AllX(ctx context.Context) []*TaskActivity {
	nodes, err := taq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TaskActivity IDs.
func (taq *TaskActivityQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := taq.Select(taskactivity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (taq *TaskActivityQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := taq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (taq *TaskActivityQuery) Count(ctx context.Context) (int, error) {
	if err := taq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return taq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (taq *TaskActivityQuery) CountX(ctx context.Context) int {
	count, err := taq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (taq *TaskActivityQuery) Exist(ctx context.Context) (bool, error) {
	if err := taq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return taq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (taq *TaskActivityQuery) ExistX(ctx context.Context) bool {
	exist, err := taq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskActivityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (taq *TaskActivityQuery) Clone() *TaskActivityQuery {
	if taq == nil {
		return nil
	}
	return &TaskActivityQuery{
		config:                taq.config,
		limit:                 taq.limit,
		offset:                taq.offset,
		order:                 append([]OrderFunc{}, taq.order...),
		predicates:            append([]predicate.TaskActivity{}, taq.predicates...),
		withTeammate:          taq.withTeammate.Clone(),
		withActivityType:      taq.withActivityType.Clone(),
		withWorkspace:         taq.withWorkspace.Clone(),
		withTaskActivityTasks: taq.withTaskActivityTasks.Clone(),
		// clone intermediate query.
		sql:    taq.sql.Clone(),
		path:   taq.path,
		unique: taq.unique,
	}
}

// WithTeammate tells the query-builder to eager-load the nodes that are connected to
// the "teammate" edge. The optional arguments are used to configure the query builder of the edge.
func (taq *TaskActivityQuery) WithTeammate(opts ...func(*TeammateQuery)) *TaskActivityQuery {
	query := &TeammateQuery{config: taq.config}
	for _, opt := range opts {
		opt(query)
	}
	taq.withTeammate = query
	return taq
}

// WithActivityType tells the query-builder to eager-load the nodes that are connected to
// the "activityType" edge. The optional arguments are used to configure the query builder of the edge.
func (taq *TaskActivityQuery) WithActivityType(opts ...func(*ActivityTypeQuery)) *TaskActivityQuery {
	query := &ActivityTypeQuery{config: taq.config}
	for _, opt := range opts {
		opt(query)
	}
	taq.withActivityType = query
	return taq
}

// WithWorkspace tells the query-builder to eager-load the nodes that are connected to
// the "workspace" edge. The optional arguments are used to configure the query builder of the edge.
func (taq *TaskActivityQuery) WithWorkspace(opts ...func(*WorkspaceQuery)) *TaskActivityQuery {
	query := &WorkspaceQuery{config: taq.config}
	for _, opt := range opts {
		opt(query)
	}
	taq.withWorkspace = query
	return taq
}

// WithTaskActivityTasks tells the query-builder to eager-load the nodes that are connected to
// the "taskActivityTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (taq *TaskActivityQuery) WithTaskActivityTasks(opts ...func(*TaskActivityTaskQuery)) *TaskActivityQuery {
	query := &TaskActivityTaskQuery{config: taq.config}
	for _, opt := range opts {
		opt(query)
	}
	taq.withTaskActivityTasks = query
	return taq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ActivityTypeID ulid.ID `json:"activity_type_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TaskActivity.Query().
//		GroupBy(taskactivity.FieldActivityTypeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (taq *TaskActivityQuery) GroupBy(field string, fields ...string) *TaskActivityGroupBy {
	group := &TaskActivityGroupBy{config: taq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return taq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ActivityTypeID ulid.ID `json:"activity_type_id,omitempty"`
//	}
//
//	client.TaskActivity.Query().
//		Select(taskactivity.FieldActivityTypeID).
//		Scan(ctx, &v)
//
func (taq *TaskActivityQuery) Select(fields ...string) *TaskActivitySelect {
	taq.fields = append(taq.fields, fields...)
	return &TaskActivitySelect{TaskActivityQuery: taq}
}

func (taq *TaskActivityQuery) prepareQuery(ctx context.Context) error {
	for _, f := range taq.fields {
		if !taskactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if taq.path != nil {
		prev, err := taq.path(ctx)
		if err != nil {
			return err
		}
		taq.sql = prev
	}
	return nil
}

func (taq *TaskActivityQuery) sqlAll(ctx context.Context) ([]*TaskActivity, error) {
	var (
		nodes       = []*TaskActivity{}
		_spec       = taq.querySpec()
		loadedTypes = [4]bool{
			taq.withTeammate != nil,
			taq.withActivityType != nil,
			taq.withWorkspace != nil,
			taq.withTaskActivityTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TaskActivity{config: taq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, taq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := taq.withTeammate; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*TaskActivity)
		for i := range nodes {
			fk := nodes[i].TeammateID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teammate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teammate = n
			}
		}
	}

	if query := taq.withActivityType; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*TaskActivity)
		for i := range nodes {
			fk := nodes[i].ActivityTypeID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(activitytype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "activity_type_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ActivityType = n
			}
		}
	}

	if query := taq.withWorkspace; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*TaskActivity)
		for i := range nodes {
			fk := nodes[i].WorkspaceID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(workspace.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workspace_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Workspace = n
			}
		}
	}

	if query := taq.withTaskActivityTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*TaskActivity)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.TaskActivityTasks = []*TaskActivityTask{}
		}
		query.Where(predicate.TaskActivityTask(func(s *sql.Selector) {
			s.Where(sql.InValues(taskactivity.TaskActivityTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TaskActivityID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_activity_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TaskActivityTasks = append(node.Edges.TaskActivityTasks, n)
		}
	}

	return nodes, nil
}

func (taq *TaskActivityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := taq.querySpec()
	_spec.Node.Columns = taq.fields
	if len(taq.fields) > 0 {
		_spec.Unique = taq.unique != nil && *taq.unique
	}
	return sqlgraph.CountNodes(ctx, taq.driver, _spec)
}

func (taq *TaskActivityQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := taq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (taq *TaskActivityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskactivity.Table,
			Columns: taskactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskactivity.FieldID,
			},
		},
		From:   taq.sql,
		Unique: true,
	}
	if unique := taq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := taq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskactivity.FieldID)
		for i := range fields {
			if fields[i] != taskactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := taq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := taq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := taq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := taq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (taq *TaskActivityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(taq.driver.Dialect())
	t1 := builder.Table(taskactivity.Table)
	columns := taq.fields
	if len(columns) == 0 {
		columns = taskactivity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if taq.sql != nil {
		selector = taq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if taq.unique != nil && *taq.unique {
		selector.Distinct()
	}
	for _, p := range taq.predicates {
		p(selector)
	}
	for _, p := range taq.order {
		p(selector)
	}
	if offset := taq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := taq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskActivityGroupBy is the group-by builder for TaskActivity entities.
type TaskActivityGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tagb *TaskActivityGroupBy) Aggregate(fns ...AggregateFunc) *TaskActivityGroupBy {
	tagb.fns = append(tagb.fns, fns...)
	return tagb
}

// Scan applies the group-by query and scans the result into the given value.
func (tagb *TaskActivityGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tagb.path(ctx)
	if err != nil {
		return err
	}
	tagb.sql = query
	return tagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tagb.fields) > 1 {
		return nil, errors.New("ent: TaskActivityGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) StringsX(ctx context.Context) []string {
	v, err := tagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivityGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) StringX(ctx context.Context) string {
	v, err := tagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tagb.fields) > 1 {
		return nil, errors.New("ent: TaskActivityGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) IntsX(ctx context.Context) []int {
	v, err := tagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivityGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) IntX(ctx context.Context) int {
	v, err := tagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tagb.fields) > 1 {
		return nil, errors.New("ent: TaskActivityGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivityGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tagb.fields) > 1 {
		return nil, errors.New("ent: TaskActivityGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tagb *TaskActivityGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivityGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tagb *TaskActivityGroupBy) BoolX(ctx context.Context) bool {
	v, err := tagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tagb *TaskActivityGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tagb.fields {
		if !taskactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tagb *TaskActivityGroupBy) sqlQuery() *sql.Selector {
	selector := tagb.sql.Select()
	aggregation := make([]string, 0, len(tagb.fns))
	for _, fn := range tagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tagb.fields)+len(tagb.fns))
		for _, f := range tagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tagb.fields...)...)
}

// TaskActivitySelect is the builder for selecting fields of TaskActivity entities.
type TaskActivitySelect struct {
	*TaskActivityQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tas *TaskActivitySelect) Scan(ctx context.Context, v interface{}) error {
	if err := tas.prepareQuery(ctx); err != nil {
		return err
	}
	tas.sql = tas.TaskActivityQuery.sqlQuery(ctx)
	return tas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tas *TaskActivitySelect) ScanX(ctx context.Context, v interface{}) {
	if err := tas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) Strings(ctx context.Context) ([]string, error) {
	if len(tas.fields) > 1 {
		return nil, errors.New("ent: TaskActivitySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tas *TaskActivitySelect) StringsX(ctx context.Context) []string {
	v, err := tas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivitySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tas *TaskActivitySelect) StringX(ctx context.Context) string {
	v, err := tas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) Ints(ctx context.Context) ([]int, error) {
	if len(tas.fields) > 1 {
		return nil, errors.New("ent: TaskActivitySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tas *TaskActivitySelect) IntsX(ctx context.Context) []int {
	v, err := tas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivitySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tas *TaskActivitySelect) IntX(ctx context.Context) int {
	v, err := tas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tas.fields) > 1 {
		return nil, errors.New("ent: TaskActivitySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tas *TaskActivitySelect) Float64sX(ctx context.Context) []float64 {
	v, err := tas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivitySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tas *TaskActivitySelect) Float64X(ctx context.Context) float64 {
	v, err := tas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tas.fields) > 1 {
		return nil, errors.New("ent: TaskActivitySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tas *TaskActivitySelect) BoolsX(ctx context.Context) []bool {
	v, err := tas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tas *TaskActivitySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{taskactivity.Label}
	default:
		err = fmt.Errorf("ent: TaskActivitySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tas *TaskActivitySelect) BoolX(ctx context.Context) bool {
	v, err := tas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tas *TaskActivitySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tas.sql.Query()
	if err := tas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
