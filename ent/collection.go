// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *ColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ColorQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fp *FavoriteProjectQuery) CollectFields(ctx context.Context, satisfies ...string) *FavoriteProjectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		fp = fp.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return fp
}

func (fp *FavoriteProjectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *FavoriteProjectQuery {
	return fp
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fw *FavoriteWorkspaceQuery) CollectFields(ctx context.Context, satisfies ...string) *FavoriteWorkspaceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		fw = fw.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return fw
}

func (fw *FavoriteWorkspaceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *FavoriteWorkspaceQuery {
	return fw
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *IconQuery) CollectFields(ctx context.Context, satisfies ...string) *IconQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *IconQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *IconQuery {
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mtts *MyTasksTabStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *MyTasksTabStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		mtts = mtts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return mtts
}

func (mtts *MyTasksTabStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MyTasksTabStatusQuery {
	return mtts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProjectQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProjectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectQuery {
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pbc *ProjectBaseColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectBaseColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pbc = pbc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pbc
}

func (pbc *ProjectBaseColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectBaseColorQuery {
	return pbc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pi *ProjectIconQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectIconQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pi = pi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pi
}

func (pi *ProjectIconQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectIconQuery {
	return pi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (plc *ProjectLightColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectLightColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		plc = plc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return plc
}

func (plc *ProjectLightColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectLightColorQuery {
	return plc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *ProjectTeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pt = pt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pt
}

func (pt *ProjectTeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTeammateQuery {
	return pt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tc *TaskColumnQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskColumnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tc = tc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tc
}

func (tc *TaskColumnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskColumnQuery {
	return tc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateQuery {
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tt *TestTodoQuery) CollectFields(ctx context.Context, satisfies ...string) *TestTodoQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tt
}

func (tt *TestTodoQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TestTodoQuery {
	return tt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tu *TestUserQuery) CollectFields(ctx context.Context, satisfies ...string) *TestUserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tu = tu.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tu
}

func (tu *TestUserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TestUserQuery {
	return tu
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkspaceQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkspaceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return w
}

func (w *WorkspaceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkspaceQuery {
	return w
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wt *WorkspaceTeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkspaceTeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wt = wt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wt
}

func (wt *WorkspaceTeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkspaceTeammateQuery {
	return wt
}
