// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *ColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ColorQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "projectBaseColors":
			c = c.WithProjectBaseColors(func(query *ProjectBaseColorQuery) {
				query.collectField(ctx, field)
			})
		case "projectLightColors":
			c = c.WithProjectLightColors(func(query *ProjectLightColorQuery) {
				query.collectField(ctx, field)
			})
		case "tags":
			c = c.WithTags(func(query *TagQuery) {
				query.collectField(ctx, field)
			})
		case "taskPriorities":
			c = c.WithTaskPriorities(func(query *TaskPriorityQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fp *FavoriteProjectQuery) CollectFields(ctx context.Context, satisfies ...string) *FavoriteProjectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		fp = fp.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return fp
}

func (fp *FavoriteProjectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *FavoriteProjectQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "project":
			fp = fp.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			fp = fp.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return fp
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fw *FavoriteWorkspaceQuery) CollectFields(ctx context.Context, satisfies ...string) *FavoriteWorkspaceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		fw = fw.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return fw
}

func (fw *FavoriteWorkspaceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *FavoriteWorkspaceQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "teammate":
			fw = fw.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			fw = fw.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return fw
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ft *FileTypeQuery) CollectFields(ctx context.Context, satisfies ...string) *FileTypeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ft = ft.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ft
}

func (ft *FileTypeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *FileTypeQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "taskFiles":
			ft = ft.WithTaskFiles(func(query *TaskFileQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ft
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *IconQuery) CollectFields(ctx context.Context, satisfies ...string) *IconQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *IconQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *IconQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "projectIcons":
			i = i.WithProjectIcons(func(query *ProjectIconQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProjectQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProjectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "favoriteProjects":
			pr = pr.WithFavoriteProjects(func(query *FavoriteProjectQuery) {
				query.collectField(ctx, field)
			})
		case "projectBaseColor":
			pr = pr.WithProjectBaseColor(func(query *ProjectBaseColorQuery) {
				query.collectField(ctx, field)
			})
		case "projectIcon":
			pr = pr.WithProjectIcon(func(query *ProjectIconQuery) {
				query.collectField(ctx, field)
			})
		case "projectLightColor":
			pr = pr.WithProjectLightColor(func(query *ProjectLightColorQuery) {
				query.collectField(ctx, field)
			})
		case "projectTaskColumns":
			pr = pr.WithProjectTaskColumns(func(query *ProjectTaskColumnQuery) {
				query.collectField(ctx, field)
			})
		case "projectTaskListStatuses":
			pr = pr.WithProjectTaskListStatuses(func(query *ProjectTaskListStatusQuery) {
				query.collectField(ctx, field)
			})
		case "projectTaskSections":
			pr = pr.WithProjectTaskSections(func(query *ProjectTaskSectionQuery) {
				query.collectField(ctx, field)
			})
		case "projectTasks":
			pr = pr.WithProjectTasks(func(query *ProjectTaskQuery) {
				query.collectField(ctx, field)
			})
		case "projectTeammates":
			pr = pr.WithProjectTeammates(func(query *ProjectTeammateQuery) {
				query.collectField(ctx, field)
			})
		case "taskFiles":
			pr = pr.WithTaskFiles(func(query *TaskFileQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			pr = pr.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			pr = pr.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pbc *ProjectBaseColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectBaseColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pbc = pbc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pbc
}

func (pbc *ProjectBaseColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectBaseColorQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "color":
			pbc = pbc.WithColor(func(query *ColorQuery) {
				query.collectField(ctx, field)
			})
		case "projects":
			pbc = pbc.WithProjects(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pbc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pi *ProjectIconQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectIconQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pi = pi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pi
}

func (pi *ProjectIconQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectIconQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "icon":
			pi = pi.WithIcon(func(query *IconQuery) {
				query.collectField(ctx, field)
			})
		case "projects":
			pi = pi.WithProjects(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (plc *ProjectLightColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectLightColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		plc = plc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return plc
}

func (plc *ProjectLightColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectLightColorQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "color":
			plc = plc.WithColor(func(query *ColorQuery) {
				query.collectField(ctx, field)
			})
		case "projects":
			plc = plc.WithProjects(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return plc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *ProjectTaskQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTaskQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pt = pt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pt
}

func (pt *ProjectTaskQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTaskQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "project":
			pt = pt.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "projectTaskSection":
			pt = pt.WithProjectTaskSection(func(query *ProjectTaskSectionQuery) {
				query.collectField(ctx, field)
			})
		case "task":
			pt = pt.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ptc *ProjectTaskColumnQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTaskColumnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ptc = ptc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ptc
}

func (ptc *ProjectTaskColumnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTaskColumnQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "project":
			ptc = ptc.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "taskColumn":
			ptc = ptc.WithTaskColumn(func(query *TaskColumnQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ptc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ptls *ProjectTaskListStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTaskListStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ptls = ptls.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ptls
}

func (ptls *ProjectTaskListStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTaskListStatusQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "project":
			ptls = ptls.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "taskListCompletedStatus":
			ptls = ptls.WithTaskListCompletedStatus(func(query *TaskListCompletedStatusQuery) {
				query.collectField(ctx, field)
			})
		case "taskListSortStatus":
			ptls = ptls.WithTaskListSortStatus(func(query *TaskListSortStatusQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ptls
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pts *ProjectTaskSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTaskSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pts = pts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pts
}

func (pts *ProjectTaskSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTaskSectionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "project":
			pts = pts.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "projectTasks":
			pts = pts.WithProjectTasks(func(query *ProjectTaskQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *ProjectTeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pt = pt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pt
}

func (pt *ProjectTeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTeammateQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "project":
			pt = pt.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			pt = pt.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TagQuery) CollectFields(ctx context.Context, satisfies ...string) *TagQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TagQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TagQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "color":
			t = t.WithColor(func(query *ColorQuery) {
				query.collectField(ctx, field)
			})
		case "taskTags":
			t = t.WithTaskTags(func(query *TaskTagQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			t = t.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TaskQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TaskQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "parent":
			t = t.WithParent(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "projectTasks":
			t = t.WithProjectTasks(func(query *ProjectTaskQuery) {
				query.collectField(ctx, field)
			})
		case "subTasks":
			t = t.WithSubTasks(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "taskCollaborators":
			t = t.WithTaskCollaborators(func(query *TaskCollaboratorQuery) {
				query.collectField(ctx, field)
			})
		case "taskFeedLikes":
			t = t.WithTaskFeedLikes(func(query *TaskFeedLikeQuery) {
				query.collectField(ctx, field)
			})
		case "taskFeeds":
			t = t.WithTaskFeeds(func(query *TaskFeedQuery) {
				query.collectField(ctx, field)
			})
		case "taskFiles":
			t = t.WithTaskFiles(func(query *TaskFileQuery) {
				query.collectField(ctx, field)
			})
		case "taskLikes":
			t = t.WithTaskLikes(func(query *TaskLikeQuery) {
				query.collectField(ctx, field)
			})
		case "taskPriority":
			t = t.WithTaskPriority(func(query *TaskPriorityQuery) {
				query.collectField(ctx, field)
			})
		case "taskTags":
			t = t.WithTaskTags(func(query *TaskTagQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			t = t.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTasks":
			t = t.WithTeammateTasks(func(query *TeammateTaskQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tc *TaskCollaboratorQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskCollaboratorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tc = tc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tc
}

func (tc *TaskCollaboratorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskCollaboratorQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "task":
			tc = tc.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			tc = tc.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tc *TaskColumnQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskColumnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tc = tc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tc
}

func (tc *TaskColumnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskColumnQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "projectTaskColumns":
			tc = tc.WithProjectTaskColumns(func(query *ProjectTaskColumnQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskColumns":
			tc = tc.WithTeammateTaskColumns(func(query *TeammateTaskColumnQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tf *TaskFeedQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskFeedQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tf = tf.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tf
}

func (tf *TaskFeedQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskFeedQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "task":
			tf = tf.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "taskFeedLikes":
			tf = tf.WithTaskFeedLikes(func(query *TaskFeedLikeQuery) {
				query.collectField(ctx, field)
			})
		case "taskFiles":
			tf = tf.WithTaskFiles(func(query *TaskFileQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			tf = tf.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tf
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tfl *TaskFeedLikeQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskFeedLikeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tfl = tfl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tfl
}

func (tfl *TaskFeedLikeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskFeedLikeQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "feed":
			tfl = tfl.WithFeed(func(query *TaskFeedQuery) {
				query.collectField(ctx, field)
			})
		case "task":
			tfl = tfl.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			tfl = tfl.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tfl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tf *TaskFileQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskFileQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tf = tf.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tf
}

func (tf *TaskFileQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskFileQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "fileType":
			tf = tf.WithFileType(func(query *FileTypeQuery) {
				query.collectField(ctx, field)
			})
		case "project":
			tf = tf.WithProject(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "task":
			tf = tf.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "taskFeed":
			tf = tf.WithTaskFeed(func(query *TaskFeedQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tf
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tl *TaskLikeQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskLikeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tl = tl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tl
}

func (tl *TaskLikeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskLikeQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "task":
			tl = tl.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			tl = tl.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			tl = tl.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tlcs *TaskListCompletedStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskListCompletedStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tlcs = tlcs.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tlcs
}

func (tlcs *TaskListCompletedStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskListCompletedStatusQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "projectTaskListStatuses":
			tlcs = tlcs.WithProjectTaskListStatuses(func(query *ProjectTaskListStatusQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskListStatuses":
			tlcs = tlcs.WithTeammateTaskListStatuses(func(query *TeammateTaskListStatusQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tlcs
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tlss *TaskListSortStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskListSortStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tlss = tlss.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tlss
}

func (tlss *TaskListSortStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskListSortStatusQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "projectTaskListStatuses":
			tlss = tlss.WithProjectTaskListStatuses(func(query *ProjectTaskListStatusQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskListStatuses":
			tlss = tlss.WithTeammateTaskListStatuses(func(query *TeammateTaskListStatusQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tlss
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tp *TaskPriorityQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskPriorityQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tp = tp.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tp
}

func (tp *TaskPriorityQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskPriorityQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "color":
			tp = tp.WithColor(func(query *ColorQuery) {
				query.collectField(ctx, field)
			})
		case "tasks":
			tp = tp.WithTasks(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tp
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ts *TaskSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ts = ts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ts
}

func (ts *TaskSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskSectionQuery {
	return ts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tt *TaskTagQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskTagQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tt
}

func (tt *TaskTagQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskTagQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "tag":
			tt = tt.WithTag(func(query *TagQuery) {
				query.collectField(ctx, field)
			})
		case "task":
			tt = tt.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "favoriteProjects":
			t = t.WithFavoriteProjects(func(query *FavoriteProjectQuery) {
				query.collectField(ctx, field)
			})
		case "favoriteWorkspaces":
			t = t.WithFavoriteWorkspaces(func(query *FavoriteWorkspaceQuery) {
				query.collectField(ctx, field)
			})
		case "projectTeammates":
			t = t.WithProjectTeammates(func(query *ProjectTeammateQuery) {
				query.collectField(ctx, field)
			})
		case "projects":
			t = t.WithProjects(func(query *ProjectQuery) {
				query.collectField(ctx, field)
			})
		case "taskCollaborators":
			t = t.WithTaskCollaborators(func(query *TaskCollaboratorQuery) {
				query.collectField(ctx, field)
			})
		case "taskFeedLikes":
			t = t.WithTaskFeedLikes(func(query *TaskFeedLikeQuery) {
				query.collectField(ctx, field)
			})
		case "taskFeeds":
			t = t.WithTaskFeeds(func(query *TaskFeedQuery) {
				query.collectField(ctx, field)
			})
		case "taskLikes":
			t = t.WithTaskLikes(func(query *TaskLikeQuery) {
				query.collectField(ctx, field)
			})
		case "tasks":
			t = t.WithTasks(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskColumns":
			t = t.WithTeammateTaskColumns(func(query *TeammateTaskColumnQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskListStatuses":
			t = t.WithTeammateTaskListStatuses(func(query *TeammateTaskListStatusQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskSections":
			t = t.WithTeammateTaskSections(func(query *TeammateTaskSectionQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskTabStatuses":
			t = t.WithTeammateTaskTabStatuses(func(query *TeammateTaskTabStatusQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTasks":
			t = t.WithTeammateTasks(func(query *TeammateTaskQuery) {
				query.collectField(ctx, field)
			})
		case "workspaceTeammates":
			t = t.WithWorkspaceTeammates(func(query *WorkspaceTeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspaces":
			t = t.WithWorkspaces(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tt *TeammateTaskQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tt
}

func (tt *TeammateTaskQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "task":
			tt = tt.WithTask(func(query *TaskQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			tt = tt.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskSection":
			tt = tt.WithTeammateTaskSection(func(query *TeammateTaskSectionQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ttc *TeammateTaskColumnQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskColumnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ttc = ttc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ttc
}

func (ttc *TeammateTaskColumnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskColumnQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "taskColumn":
			ttc = ttc.WithTaskColumn(func(query *TaskColumnQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			ttc = ttc.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			ttc = ttc.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ttc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ttls *TeammateTaskListStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskListStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ttls = ttls.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ttls
}

func (ttls *TeammateTaskListStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskListStatusQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "taskListCompletedStatus":
			ttls = ttls.WithTaskListCompletedStatus(func(query *TaskListCompletedStatusQuery) {
				query.collectField(ctx, field)
			})
		case "taskListSortStatus":
			ttls = ttls.WithTaskListSortStatus(func(query *TaskListSortStatusQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			ttls = ttls.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			ttls = ttls.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ttls
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tts *TeammateTaskSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tts = tts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tts
}

func (tts *TeammateTaskSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskSectionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "teammate":
			tts = tts.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTasks":
			tts = tts.WithTeammateTasks(func(query *TeammateTaskQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			tts = tts.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ttts *TeammateTaskTabStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskTabStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ttts = ttts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ttts
}

func (ttts *TeammateTaskTabStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskTabStatusQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "teammate":
			ttts = ttts.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			ttts = ttts.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ttts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tt *TestTodoQuery) CollectFields(ctx context.Context, satisfies ...string) *TestTodoQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tt
}

func (tt *TestTodoQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TestTodoQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "parent":
			tt = tt.WithParent(func(query *TestTodoQuery) {
				query.collectField(ctx, field)
			})
		case "testUser":
			tt = tt.WithTestUser(func(query *TestUserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tu *TestUserQuery) CollectFields(ctx context.Context, satisfies ...string) *TestUserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tu = tu.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tu
}

func (tu *TestUserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TestUserQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "testTodos":
			tu = tu.WithTestTodos(func(query *TestTodoQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tu
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkspaceQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkspaceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return w
}

func (w *WorkspaceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkspaceQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "favoriteWorkspaces":
			w = w.WithFavoriteWorkspaces(func(query *FavoriteWorkspaceQuery) {
				query.collectField(ctx, field)
			})
		case "tags":
			w = w.WithTags(func(query *TagQuery) {
				query.collectField(ctx, field)
			})
		case "taskLikes":
			w = w.WithTaskLikes(func(query *TaskLikeQuery) {
				query.collectField(ctx, field)
			})
		case "teammate":
			w = w.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskColumns":
			w = w.WithTeammateTaskColumns(func(query *TeammateTaskColumnQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskListStatuses":
			w = w.WithTeammateTaskListStatuses(func(query *TeammateTaskListStatusQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskSections":
			w = w.WithTeammateTaskSections(func(query *TeammateTaskSectionQuery) {
				query.collectField(ctx, field)
			})
		case "teammateTaskTabStatuses":
			w = w.WithTeammateTaskTabStatuses(func(query *TeammateTaskTabStatusQuery) {
				query.collectField(ctx, field)
			})
		case "workspaceTeammates":
			w = w.WithWorkspaceTeammates(func(query *WorkspaceTeammateQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return w
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wt *WorkspaceTeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkspaceTeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wt = wt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wt
}

func (wt *WorkspaceTeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkspaceTeammateQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "teammate":
			wt = wt.WithTeammate(func(query *TeammateQuery) {
				query.collectField(ctx, field)
			})
		case "workspace":
			wt = wt.WithWorkspace(func(query *WorkspaceQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return wt
}
