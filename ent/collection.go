// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *ColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ColorQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fp *FavoriteProjectQuery) CollectFields(ctx context.Context, satisfies ...string) *FavoriteProjectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		fp = fp.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return fp
}

func (fp *FavoriteProjectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *FavoriteProjectQuery {
	return fp
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fw *FavoriteWorkspaceQuery) CollectFields(ctx context.Context, satisfies ...string) *FavoriteWorkspaceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		fw = fw.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return fw
}

func (fw *FavoriteWorkspaceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *FavoriteWorkspaceQuery {
	return fw
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *IconQuery) CollectFields(ctx context.Context, satisfies ...string) *IconQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *IconQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *IconQuery {
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProjectQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProjectQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectQuery {
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pbc *ProjectBaseColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectBaseColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pbc = pbc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pbc
}

func (pbc *ProjectBaseColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectBaseColorQuery {
	return pbc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pi *ProjectIconQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectIconQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pi = pi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pi
}

func (pi *ProjectIconQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectIconQuery {
	return pi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (plc *ProjectLightColorQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectLightColorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		plc = plc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return plc
}

func (plc *ProjectLightColorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectLightColorQuery {
	return plc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ptc *ProjectTaskColumnQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTaskColumnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ptc = ptc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ptc
}

func (ptc *ProjectTaskColumnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTaskColumnQuery {
	return ptc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ptls *ProjectTaskListStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTaskListStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ptls = ptls.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ptls
}

func (ptls *ProjectTaskListStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTaskListStatusQuery {
	return ptls
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pts *ProjectTaskSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTaskSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pts = pts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pts
}

func (pts *ProjectTaskSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTaskSectionQuery {
	return pts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *ProjectTeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *ProjectTeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pt = pt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pt
}

func (pt *ProjectTeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProjectTeammateQuery {
	return pt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tc *TaskColumnQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskColumnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tc = tc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tc
}

func (tc *TaskColumnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskColumnQuery {
	return tc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tlcs *TaskListCompletedStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskListCompletedStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tlcs = tlcs.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tlcs
}

func (tlcs *TaskListCompletedStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskListCompletedStatusQuery {
	return tlcs
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tlss *TaskListSortStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskListSortStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tlss = tlss.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tlss
}

func (tlss *TaskListSortStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskListSortStatusQuery {
	return tlss
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ts *TaskSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ts = ts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ts
}

func (ts *TaskSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskSectionQuery {
	return ts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateQuery {
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ttc *TeammateTaskColumnQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskColumnQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ttc = ttc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ttc
}

func (ttc *TeammateTaskColumnQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskColumnQuery {
	return ttc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ttls *TeammateTaskListStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskListStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ttls = ttls.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ttls
}

func (ttls *TeammateTaskListStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskListStatusQuery {
	return ttls
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tts *TeammateTaskSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tts = tts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tts
}

func (tts *TeammateTaskSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskSectionQuery {
	return tts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ttts *TeammateTaskTabStatusQuery) CollectFields(ctx context.Context, satisfies ...string) *TeammateTaskTabStatusQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ttts = ttts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ttts
}

func (ttts *TeammateTaskTabStatusQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TeammateTaskTabStatusQuery {
	return ttts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tt *TestTodoQuery) CollectFields(ctx context.Context, satisfies ...string) *TestTodoQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tt
}

func (tt *TestTodoQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TestTodoQuery {
	return tt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tu *TestUserQuery) CollectFields(ctx context.Context, satisfies ...string) *TestUserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tu = tu.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tu
}

func (tu *TestUserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TestUserQuery {
	return tu
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkspaceQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkspaceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		w = w.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return w
}

func (w *WorkspaceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkspaceQuery {
	return w
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wt *WorkspaceTeammateQuery) CollectFields(ctx context.Context, satisfies ...string) *WorkspaceTeammateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		wt = wt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return wt
}

func (wt *WorkspaceTeammateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *WorkspaceTeammateQuery {
	return wt
}
