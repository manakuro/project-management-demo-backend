// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskactivity"
	"project-management-demo-backend/ent/taskactivitytask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskActivityTaskUpdate is the builder for updating TaskActivityTask entities.
type TaskActivityTaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskActivityTaskMutation
}

// Where appends a list predicates to the TaskActivityTaskUpdate builder.
func (tatu *TaskActivityTaskUpdate) Where(ps ...predicate.TaskActivityTask) *TaskActivityTaskUpdate {
	tatu.mutation.Where(ps...)
	return tatu
}

// SetTaskActivityID sets the "task_activity_id" field.
func (tatu *TaskActivityTaskUpdate) SetTaskActivityID(u ulid.ID) *TaskActivityTaskUpdate {
	tatu.mutation.SetTaskActivityID(u)
	return tatu
}

// SetTaskID sets the "task_id" field.
func (tatu *TaskActivityTaskUpdate) SetTaskID(u ulid.ID) *TaskActivityTaskUpdate {
	tatu.mutation.SetTaskID(u)
	return tatu
}

// SetTask sets the "task" edge to the Task entity.
func (tatu *TaskActivityTaskUpdate) SetTask(t *Task) *TaskActivityTaskUpdate {
	return tatu.SetTaskID(t.ID)
}

// SetTaskActivity sets the "taskActivity" edge to the TaskActivity entity.
func (tatu *TaskActivityTaskUpdate) SetTaskActivity(t *TaskActivity) *TaskActivityTaskUpdate {
	return tatu.SetTaskActivityID(t.ID)
}

// Mutation returns the TaskActivityTaskMutation object of the builder.
func (tatu *TaskActivityTaskUpdate) Mutation() *TaskActivityTaskMutation {
	return tatu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tatu *TaskActivityTaskUpdate) ClearTask() *TaskActivityTaskUpdate {
	tatu.mutation.ClearTask()
	return tatu
}

// ClearTaskActivity clears the "taskActivity" edge to the TaskActivity entity.
func (tatu *TaskActivityTaskUpdate) ClearTaskActivity() *TaskActivityTaskUpdate {
	tatu.mutation.ClearTaskActivity()
	return tatu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tatu *TaskActivityTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tatu.hooks) == 0 {
		if err = tatu.check(); err != nil {
			return 0, err
		}
		affected, err = tatu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tatu.check(); err != nil {
				return 0, err
			}
			tatu.mutation = mutation
			affected, err = tatu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tatu.hooks) - 1; i >= 0; i-- {
			if tatu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tatu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tatu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tatu *TaskActivityTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tatu *TaskActivityTaskUpdate) Exec(ctx context.Context) error {
	_, err := tatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tatu *TaskActivityTaskUpdate) ExecX(ctx context.Context) {
	if err := tatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tatu *TaskActivityTaskUpdate) check() error {
	if _, ok := tatu.mutation.TaskID(); tatu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivityTask.task"`)
	}
	if _, ok := tatu.mutation.TaskActivityID(); tatu.mutation.TaskActivityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivityTask.taskActivity"`)
	}
	return nil
}

func (tatu *TaskActivityTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskactivitytask.Table,
			Columns: taskactivitytask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskactivitytask.FieldID,
			},
		},
	}
	if ps := tatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tatu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskTable,
			Columns: []string{taskactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskTable,
			Columns: []string{taskactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tatu.mutation.TaskActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskActivityTable,
			Columns: []string{taskactivitytask.TaskActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatu.mutation.TaskActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskActivityTable,
			Columns: []string{taskactivitytask.TaskActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskactivitytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskActivityTaskUpdateOne is the builder for updating a single TaskActivityTask entity.
type TaskActivityTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskActivityTaskMutation
}

// SetTaskActivityID sets the "task_activity_id" field.
func (tatuo *TaskActivityTaskUpdateOne) SetTaskActivityID(u ulid.ID) *TaskActivityTaskUpdateOne {
	tatuo.mutation.SetTaskActivityID(u)
	return tatuo
}

// SetTaskID sets the "task_id" field.
func (tatuo *TaskActivityTaskUpdateOne) SetTaskID(u ulid.ID) *TaskActivityTaskUpdateOne {
	tatuo.mutation.SetTaskID(u)
	return tatuo
}

// SetTask sets the "task" edge to the Task entity.
func (tatuo *TaskActivityTaskUpdateOne) SetTask(t *Task) *TaskActivityTaskUpdateOne {
	return tatuo.SetTaskID(t.ID)
}

// SetTaskActivity sets the "taskActivity" edge to the TaskActivity entity.
func (tatuo *TaskActivityTaskUpdateOne) SetTaskActivity(t *TaskActivity) *TaskActivityTaskUpdateOne {
	return tatuo.SetTaskActivityID(t.ID)
}

// Mutation returns the TaskActivityTaskMutation object of the builder.
func (tatuo *TaskActivityTaskUpdateOne) Mutation() *TaskActivityTaskMutation {
	return tatuo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tatuo *TaskActivityTaskUpdateOne) ClearTask() *TaskActivityTaskUpdateOne {
	tatuo.mutation.ClearTask()
	return tatuo
}

// ClearTaskActivity clears the "taskActivity" edge to the TaskActivity entity.
func (tatuo *TaskActivityTaskUpdateOne) ClearTaskActivity() *TaskActivityTaskUpdateOne {
	tatuo.mutation.ClearTaskActivity()
	return tatuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tatuo *TaskActivityTaskUpdateOne) Select(field string, fields ...string) *TaskActivityTaskUpdateOne {
	tatuo.fields = append([]string{field}, fields...)
	return tatuo
}

// Save executes the query and returns the updated TaskActivityTask entity.
func (tatuo *TaskActivityTaskUpdateOne) Save(ctx context.Context) (*TaskActivityTask, error) {
	var (
		err  error
		node *TaskActivityTask
	)
	if len(tatuo.hooks) == 0 {
		if err = tatuo.check(); err != nil {
			return nil, err
		}
		node, err = tatuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tatuo.check(); err != nil {
				return nil, err
			}
			tatuo.mutation = mutation
			node, err = tatuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tatuo.hooks) - 1; i >= 0; i-- {
			if tatuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tatuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tatuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tatuo *TaskActivityTaskUpdateOne) SaveX(ctx context.Context) *TaskActivityTask {
	node, err := tatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tatuo *TaskActivityTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tatuo *TaskActivityTaskUpdateOne) ExecX(ctx context.Context) {
	if err := tatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tatuo *TaskActivityTaskUpdateOne) check() error {
	if _, ok := tatuo.mutation.TaskID(); tatuo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivityTask.task"`)
	}
	if _, ok := tatuo.mutation.TaskActivityID(); tatuo.mutation.TaskActivityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivityTask.taskActivity"`)
	}
	return nil
}

func (tatuo *TaskActivityTaskUpdateOne) sqlSave(ctx context.Context) (_node *TaskActivityTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskactivitytask.Table,
			Columns: taskactivitytask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskactivitytask.FieldID,
			},
		},
	}
	id, ok := tatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskActivityTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskactivitytask.FieldID)
		for _, f := range fields {
			if !taskactivitytask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskactivitytask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tatuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskTable,
			Columns: []string{taskactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskTable,
			Columns: []string{taskactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tatuo.mutation.TaskActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskActivityTable,
			Columns: []string{taskactivitytask.TaskActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatuo.mutation.TaskActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivitytask.TaskActivityTable,
			Columns: []string{taskactivitytask.TaskActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskActivityTask{config: tatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskactivitytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
