// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/schema/ulid"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Color is the model entity for the Color schema.
type Color struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Hex holds the value of the "hex" field.
	Hex string `json:"hex,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ColorQuery when eager-loading is set.
	Edges ColorEdges `json:"edges"`
}

// ColorEdges holds the relations/edges for other nodes in the graph.
type ColorEdges struct {
	// ProjectBaseColors holds the value of the project_base_colors edge.
	ProjectBaseColors []*ProjectBaseColor `json:"project_base_colors,omitempty"`
	// ProjectLightColors holds the value of the project_light_colors edge.
	ProjectLightColors []*ProjectLightColor `json:"project_light_colors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectBaseColorsOrErr returns the ProjectBaseColors value or an error if the edge
// was not loaded in eager-loading.
func (e ColorEdges) ProjectBaseColorsOrErr() ([]*ProjectBaseColor, error) {
	if e.loadedTypes[0] {
		return e.ProjectBaseColors, nil
	}
	return nil, &NotLoadedError{edge: "project_base_colors"}
}

// ProjectLightColorsOrErr returns the ProjectLightColors value or an error if the edge
// was not loaded in eager-loading.
func (e ColorEdges) ProjectLightColorsOrErr() ([]*ProjectLightColor, error) {
	if e.loadedTypes[1] {
		return e.ProjectLightColors, nil
	}
	return nil, &NotLoadedError{edge: "project_light_colors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Color) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case color.FieldName, color.FieldColor, color.FieldHex:
			values[i] = new(sql.NullString)
		case color.FieldCreatedAt, color.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case color.FieldID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Color", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Color fields.
func (c *Color) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case color.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case color.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case color.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				c.Color = value.String
			}
		case color.FieldHex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hex", values[i])
			} else if value.Valid {
				c.Hex = value.String
			}
		case color.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case color.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryProjectBaseColors queries the "project_base_colors" edge of the Color entity.
func (c *Color) QueryProjectBaseColors() *ProjectBaseColorQuery {
	return (&ColorClient{config: c.config}).QueryProjectBaseColors(c)
}

// QueryProjectLightColors queries the "project_light_colors" edge of the Color entity.
func (c *Color) QueryProjectLightColors() *ProjectLightColorQuery {
	return (&ColorClient{config: c.config}).QueryProjectLightColors(c)
}

// Update returns a builder for updating this Color.
// Note that you need to call Color.Unwrap() before calling this method if this Color
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Color) Update() *ColorUpdateOne {
	return (&ColorClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Color entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Color) Unwrap() *Color {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Color is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Color) String() string {
	var builder strings.Builder
	builder.WriteString("Color(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", color=")
	builder.WriteString(c.Color)
	builder.WriteString(", hex=")
	builder.WriteString(c.Hex)
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Colors is a parsable slice of Color.
type Colors []*Color

func (c Colors) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
