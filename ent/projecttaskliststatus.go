// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProjectTaskListStatus is the model entity for the ProjectTaskListStatus schema.
type ProjectTaskListStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID ulid.ID `json:"project_id,omitempty"`
	// TaskListCompletedStatusID holds the value of the "task_list_completed_status_id" field.
	TaskListCompletedStatusID ulid.ID `json:"task_list_completed_status_id,omitempty"`
	// TaskListSortStatusID holds the value of the "task_list_sort_status_id" field.
	TaskListSortStatusID ulid.ID `json:"task_list_sort_status_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTaskListStatusQuery when eager-loading is set.
	Edges ProjectTaskListStatusEdges `json:"edges"`
}

// ProjectTaskListStatusEdges holds the relations/edges for other nodes in the graph.
type ProjectTaskListStatusEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// TaskListCompletedStatus holds the value of the taskListCompletedStatus edge.
	TaskListCompletedStatus *TaskListCompletedStatus `json:"taskListCompletedStatus,omitempty"`
	// TaskListSortStatus holds the value of the taskListSortStatus edge.
	TaskListSortStatus *TaskListSortStatus `json:"taskListSortStatus,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskListStatusEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// TaskListCompletedStatusOrErr returns the TaskListCompletedStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskListStatusEdges) TaskListCompletedStatusOrErr() (*TaskListCompletedStatus, error) {
	if e.loadedTypes[1] {
		if e.TaskListCompletedStatus == nil {
			// The edge taskListCompletedStatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tasklistcompletedstatus.Label}
		}
		return e.TaskListCompletedStatus, nil
	}
	return nil, &NotLoadedError{edge: "taskListCompletedStatus"}
}

// TaskListSortStatusOrErr returns the TaskListSortStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTaskListStatusEdges) TaskListSortStatusOrErr() (*TaskListSortStatus, error) {
	if e.loadedTypes[2] {
		if e.TaskListSortStatus == nil {
			// The edge taskListSortStatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tasklistsortstatus.Label}
		}
		return e.TaskListSortStatus, nil
	}
	return nil, &NotLoadedError{edge: "taskListSortStatus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTaskListStatus) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttaskliststatus.FieldCreatedAt, projecttaskliststatus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projecttaskliststatus.FieldID, projecttaskliststatus.FieldProjectID, projecttaskliststatus.FieldTaskListCompletedStatusID, projecttaskliststatus.FieldTaskListSortStatusID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectTaskListStatus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTaskListStatus fields.
func (ptls *ProjectTaskListStatus) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttaskliststatus.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ptls.ID = *value
			}
		case projecttaskliststatus.FieldProjectID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				ptls.ProjectID = *value
			}
		case projecttaskliststatus.FieldTaskListCompletedStatusID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_list_completed_status_id", values[i])
			} else if value != nil {
				ptls.TaskListCompletedStatusID = *value
			}
		case projecttaskliststatus.FieldTaskListSortStatusID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_list_sort_status_id", values[i])
			} else if value != nil {
				ptls.TaskListSortStatusID = *value
			}
		case projecttaskliststatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ptls.CreatedAt = value.Time
			}
		case projecttaskliststatus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ptls.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the ProjectTaskListStatus entity.
func (ptls *ProjectTaskListStatus) QueryProject() *ProjectQuery {
	return (&ProjectTaskListStatusClient{config: ptls.config}).QueryProject(ptls)
}

// QueryTaskListCompletedStatus queries the "taskListCompletedStatus" edge of the ProjectTaskListStatus entity.
func (ptls *ProjectTaskListStatus) QueryTaskListCompletedStatus() *TaskListCompletedStatusQuery {
	return (&ProjectTaskListStatusClient{config: ptls.config}).QueryTaskListCompletedStatus(ptls)
}

// QueryTaskListSortStatus queries the "taskListSortStatus" edge of the ProjectTaskListStatus entity.
func (ptls *ProjectTaskListStatus) QueryTaskListSortStatus() *TaskListSortStatusQuery {
	return (&ProjectTaskListStatusClient{config: ptls.config}).QueryTaskListSortStatus(ptls)
}

// Update returns a builder for updating this ProjectTaskListStatus.
// Note that you need to call ProjectTaskListStatus.Unwrap() before calling this method if this ProjectTaskListStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ptls *ProjectTaskListStatus) Update() *ProjectTaskListStatusUpdateOne {
	return (&ProjectTaskListStatusClient{config: ptls.config}).UpdateOne(ptls)
}

// Unwrap unwraps the ProjectTaskListStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ptls *ProjectTaskListStatus) Unwrap() *ProjectTaskListStatus {
	tx, ok := ptls.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectTaskListStatus is not a transactional entity")
	}
	ptls.config.driver = tx.drv
	return ptls
}

// String implements the fmt.Stringer.
func (ptls *ProjectTaskListStatus) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTaskListStatus(")
	builder.WriteString(fmt.Sprintf("id=%v", ptls.ID))
	builder.WriteString(", project_id=")
	builder.WriteString(fmt.Sprintf("%v", ptls.ProjectID))
	builder.WriteString(", task_list_completed_status_id=")
	builder.WriteString(fmt.Sprintf("%v", ptls.TaskListCompletedStatusID))
	builder.WriteString(", task_list_sort_status_id=")
	builder.WriteString(fmt.Sprintf("%v", ptls.TaskListSortStatusID))
	builder.WriteString(", created_at=")
	builder.WriteString(ptls.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ptls.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectTaskListStatusSlice is a parsable slice of ProjectTaskListStatus.
type ProjectTaskListStatusSlice []*ProjectTaskListStatus

func (ptls ProjectTaskListStatusSlice) config(cfg config) {
	for _i := range ptls {
		ptls[_i].config = cfg
	}
}
