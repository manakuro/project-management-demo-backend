// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceactivity"
	"project-management-demo-backend/ent/workspaceactivitytask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceActivityQuery is the builder for querying WorkspaceActivity entities.
type WorkspaceActivityQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.WorkspaceActivity
	// eager-loading edges.
	withActivityType           *ActivityTypeQuery
	withWorkspace              *WorkspaceQuery
	withProject                *ProjectQuery
	withTeammate               *TeammateQuery
	withWorkspaceActivityTasks *WorkspaceActivityTaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkspaceActivityQuery builder.
func (waq *WorkspaceActivityQuery) Where(ps ...predicate.WorkspaceActivity) *WorkspaceActivityQuery {
	waq.predicates = append(waq.predicates, ps...)
	return waq
}

// Limit adds a limit step to the query.
func (waq *WorkspaceActivityQuery) Limit(limit int) *WorkspaceActivityQuery {
	waq.limit = &limit
	return waq
}

// Offset adds an offset step to the query.
func (waq *WorkspaceActivityQuery) Offset(offset int) *WorkspaceActivityQuery {
	waq.offset = &offset
	return waq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (waq *WorkspaceActivityQuery) Unique(unique bool) *WorkspaceActivityQuery {
	waq.unique = &unique
	return waq
}

// Order adds an order step to the query.
func (waq *WorkspaceActivityQuery) Order(o ...OrderFunc) *WorkspaceActivityQuery {
	waq.order = append(waq.order, o...)
	return waq
}

// QueryActivityType chains the current query on the "activityType" edge.
func (waq *WorkspaceActivityQuery) QueryActivityType() *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: waq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := waq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := waq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, selector),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.ActivityTypeTable, workspaceactivity.ActivityTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(waq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspace chains the current query on the "workspace" edge.
func (waq *WorkspaceActivityQuery) QueryWorkspace() *WorkspaceQuery {
	query := &WorkspaceQuery{config: waq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := waq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := waq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, selector),
			sqlgraph.To(workspace.Table, workspace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.WorkspaceTable, workspaceactivity.WorkspaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(waq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (waq *WorkspaceActivityQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: waq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := waq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := waq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.ProjectTable, workspaceactivity.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(waq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeammate chains the current query on the "teammate" edge.
func (waq *WorkspaceActivityQuery) QueryTeammate() *TeammateQuery {
	query := &TeammateQuery{config: waq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := waq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := waq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, selector),
			sqlgraph.To(teammate.Table, teammate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workspaceactivity.TeammateTable, workspaceactivity.TeammateColumn),
		)
		fromU = sqlgraph.SetNeighbors(waq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspaceActivityTasks chains the current query on the "workspaceActivityTasks" edge.
func (waq *WorkspaceActivityQuery) QueryWorkspaceActivityTasks() *WorkspaceActivityTaskQuery {
	query := &WorkspaceActivityTaskQuery{config: waq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := waq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := waq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspaceactivity.Table, workspaceactivity.FieldID, selector),
			sqlgraph.To(workspaceactivitytask.Table, workspaceactivitytask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workspaceactivity.WorkspaceActivityTasksTable, workspaceactivity.WorkspaceActivityTasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(waq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkspaceActivity entity from the query.
// Returns a *NotFoundError when no WorkspaceActivity was found.
func (waq *WorkspaceActivityQuery) First(ctx context.Context) (*WorkspaceActivity, error) {
	nodes, err := waq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workspaceactivity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) FirstX(ctx context.Context) *WorkspaceActivity {
	node, err := waq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkspaceActivity ID from the query.
// Returns a *NotFoundError when no WorkspaceActivity ID was found.
func (waq *WorkspaceActivityQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = waq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workspaceactivity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := waq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkspaceActivity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkspaceActivity entity is found.
// Returns a *NotFoundError when no WorkspaceActivity entities are found.
func (waq *WorkspaceActivityQuery) Only(ctx context.Context) (*WorkspaceActivity, error) {
	nodes, err := waq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workspaceactivity.Label}
	default:
		return nil, &NotSingularError{workspaceactivity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) OnlyX(ctx context.Context) *WorkspaceActivity {
	node, err := waq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkspaceActivity ID in the query.
// Returns a *NotSingularError when more than one WorkspaceActivity ID is found.
// Returns a *NotFoundError when no entities are found.
func (waq *WorkspaceActivityQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = waq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = &NotSingularError{workspaceactivity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := waq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkspaceActivities.
func (waq *WorkspaceActivityQuery) All(ctx context.Context) ([]*WorkspaceActivity, error) {
	if err := waq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return waq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) AllX(ctx context.Context) []*WorkspaceActivity {
	nodes, err := waq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkspaceActivity IDs.
func (waq *WorkspaceActivityQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := waq.Select(workspaceactivity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := waq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (waq *WorkspaceActivityQuery) Count(ctx context.Context) (int, error) {
	if err := waq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return waq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) CountX(ctx context.Context) int {
	count, err := waq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (waq *WorkspaceActivityQuery) Exist(ctx context.Context) (bool, error) {
	if err := waq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return waq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (waq *WorkspaceActivityQuery) ExistX(ctx context.Context) bool {
	exist, err := waq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkspaceActivityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (waq *WorkspaceActivityQuery) Clone() *WorkspaceActivityQuery {
	if waq == nil {
		return nil
	}
	return &WorkspaceActivityQuery{
		config:                     waq.config,
		limit:                      waq.limit,
		offset:                     waq.offset,
		order:                      append([]OrderFunc{}, waq.order...),
		predicates:                 append([]predicate.WorkspaceActivity{}, waq.predicates...),
		withActivityType:           waq.withActivityType.Clone(),
		withWorkspace:              waq.withWorkspace.Clone(),
		withProject:                waq.withProject.Clone(),
		withTeammate:               waq.withTeammate.Clone(),
		withWorkspaceActivityTasks: waq.withWorkspaceActivityTasks.Clone(),
		// clone intermediate query.
		sql:    waq.sql.Clone(),
		path:   waq.path,
		unique: waq.unique,
	}
}

// WithActivityType tells the query-builder to eager-load the nodes that are connected to
// the "activityType" edge. The optional arguments are used to configure the query builder of the edge.
func (waq *WorkspaceActivityQuery) WithActivityType(opts ...func(*ActivityTypeQuery)) *WorkspaceActivityQuery {
	query := &ActivityTypeQuery{config: waq.config}
	for _, opt := range opts {
		opt(query)
	}
	waq.withActivityType = query
	return waq
}

// WithWorkspace tells the query-builder to eager-load the nodes that are connected to
// the "workspace" edge. The optional arguments are used to configure the query builder of the edge.
func (waq *WorkspaceActivityQuery) WithWorkspace(opts ...func(*WorkspaceQuery)) *WorkspaceActivityQuery {
	query := &WorkspaceQuery{config: waq.config}
	for _, opt := range opts {
		opt(query)
	}
	waq.withWorkspace = query
	return waq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (waq *WorkspaceActivityQuery) WithProject(opts ...func(*ProjectQuery)) *WorkspaceActivityQuery {
	query := &ProjectQuery{config: waq.config}
	for _, opt := range opts {
		opt(query)
	}
	waq.withProject = query
	return waq
}

// WithTeammate tells the query-builder to eager-load the nodes that are connected to
// the "teammate" edge. The optional arguments are used to configure the query builder of the edge.
func (waq *WorkspaceActivityQuery) WithTeammate(opts ...func(*TeammateQuery)) *WorkspaceActivityQuery {
	query := &TeammateQuery{config: waq.config}
	for _, opt := range opts {
		opt(query)
	}
	waq.withTeammate = query
	return waq
}

// WithWorkspaceActivityTasks tells the query-builder to eager-load the nodes that are connected to
// the "workspaceActivityTasks" edge. The optional arguments are used to configure the query builder of the edge.
func (waq *WorkspaceActivityQuery) WithWorkspaceActivityTasks(opts ...func(*WorkspaceActivityTaskQuery)) *WorkspaceActivityQuery {
	query := &WorkspaceActivityTaskQuery{config: waq.config}
	for _, opt := range opts {
		opt(query)
	}
	waq.withWorkspaceActivityTasks = query
	return waq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ActivityTypeID ulid.ID `json:"activity_type_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkspaceActivity.Query().
//		GroupBy(workspaceactivity.FieldActivityTypeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (waq *WorkspaceActivityQuery) GroupBy(field string, fields ...string) *WorkspaceActivityGroupBy {
	group := &WorkspaceActivityGroupBy{config: waq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := waq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return waq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ActivityTypeID ulid.ID `json:"activity_type_id,omitempty"`
//	}
//
//	client.WorkspaceActivity.Query().
//		Select(workspaceactivity.FieldActivityTypeID).
//		Scan(ctx, &v)
//
func (waq *WorkspaceActivityQuery) Select(fields ...string) *WorkspaceActivitySelect {
	waq.fields = append(waq.fields, fields...)
	return &WorkspaceActivitySelect{WorkspaceActivityQuery: waq}
}

func (waq *WorkspaceActivityQuery) prepareQuery(ctx context.Context) error {
	for _, f := range waq.fields {
		if !workspaceactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if waq.path != nil {
		prev, err := waq.path(ctx)
		if err != nil {
			return err
		}
		waq.sql = prev
	}
	return nil
}

func (waq *WorkspaceActivityQuery) sqlAll(ctx context.Context) ([]*WorkspaceActivity, error) {
	var (
		nodes       = []*WorkspaceActivity{}
		_spec       = waq.querySpec()
		loadedTypes = [5]bool{
			waq.withActivityType != nil,
			waq.withWorkspace != nil,
			waq.withProject != nil,
			waq.withTeammate != nil,
			waq.withWorkspaceActivityTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &WorkspaceActivity{config: waq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, waq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := waq.withActivityType; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*WorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].ActivityTypeID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(activitytype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "activity_type_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ActivityType = n
			}
		}
	}

	if query := waq.withWorkspace; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*WorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].WorkspaceID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(workspace.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workspace_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Workspace = n
			}
		}
	}

	if query := waq.withProject; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*WorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].ProjectID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(project.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Project = n
			}
		}
	}

	if query := waq.withTeammate; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*WorkspaceActivity)
		for i := range nodes {
			fk := nodes[i].TeammateID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(teammate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "teammate_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Teammate = n
			}
		}
	}

	if query := waq.withWorkspaceActivityTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[ulid.ID]*WorkspaceActivity)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.WorkspaceActivityTasks = []*WorkspaceActivityTask{}
		}
		query.Where(predicate.WorkspaceActivityTask(func(s *sql.Selector) {
			s.Where(sql.InValues(workspaceactivity.WorkspaceActivityTasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.WorkspaceActivityID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "workspace_activity_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.WorkspaceActivityTasks = append(node.Edges.WorkspaceActivityTasks, n)
		}
	}

	return nodes, nil
}

func (waq *WorkspaceActivityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := waq.querySpec()
	_spec.Node.Columns = waq.fields
	if len(waq.fields) > 0 {
		_spec.Unique = waq.unique != nil && *waq.unique
	}
	return sqlgraph.CountNodes(ctx, waq.driver, _spec)
}

func (waq *WorkspaceActivityQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := waq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (waq *WorkspaceActivityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workspaceactivity.Table,
			Columns: workspaceactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: workspaceactivity.FieldID,
			},
		},
		From:   waq.sql,
		Unique: true,
	}
	if unique := waq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := waq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workspaceactivity.FieldID)
		for i := range fields {
			if fields[i] != workspaceactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := waq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := waq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := waq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := waq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (waq *WorkspaceActivityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(waq.driver.Dialect())
	t1 := builder.Table(workspaceactivity.Table)
	columns := waq.fields
	if len(columns) == 0 {
		columns = workspaceactivity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if waq.sql != nil {
		selector = waq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if waq.unique != nil && *waq.unique {
		selector.Distinct()
	}
	for _, p := range waq.predicates {
		p(selector)
	}
	for _, p := range waq.order {
		p(selector)
	}
	if offset := waq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := waq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkspaceActivityGroupBy is the group-by builder for WorkspaceActivity entities.
type WorkspaceActivityGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wagb *WorkspaceActivityGroupBy) Aggregate(fns ...AggregateFunc) *WorkspaceActivityGroupBy {
	wagb.fns = append(wagb.fns, fns...)
	return wagb
}

// Scan applies the group-by query and scans the result into the given value.
func (wagb *WorkspaceActivityGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := wagb.path(ctx)
	if err != nil {
		return err
	}
	wagb.sql = query
	return wagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := wagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(wagb.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivityGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := wagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) StringsX(ctx context.Context) []string {
	v, err := wagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivityGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) StringX(ctx context.Context) string {
	v, err := wagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(wagb.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivityGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := wagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) IntsX(ctx context.Context) []int {
	v, err := wagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivityGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) IntX(ctx context.Context) int {
	v, err := wagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(wagb.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivityGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := wagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := wagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivityGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) Float64X(ctx context.Context) float64 {
	v, err := wagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(wagb.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivityGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := wagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := wagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wagb *WorkspaceActivityGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivityGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wagb *WorkspaceActivityGroupBy) BoolX(ctx context.Context) bool {
	v, err := wagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wagb *WorkspaceActivityGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range wagb.fields {
		if !workspaceactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wagb *WorkspaceActivityGroupBy) sqlQuery() *sql.Selector {
	selector := wagb.sql.Select()
	aggregation := make([]string, 0, len(wagb.fns))
	for _, fn := range wagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(wagb.fields)+len(wagb.fns))
		for _, f := range wagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(wagb.fields...)...)
}

// WorkspaceActivitySelect is the builder for selecting fields of WorkspaceActivity entities.
type WorkspaceActivitySelect struct {
	*WorkspaceActivityQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (was *WorkspaceActivitySelect) Scan(ctx context.Context, v interface{}) error {
	if err := was.prepareQuery(ctx); err != nil {
		return err
	}
	was.sql = was.WorkspaceActivityQuery.sqlQuery(ctx)
	return was.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (was *WorkspaceActivitySelect) ScanX(ctx context.Context, v interface{}) {
	if err := was.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) Strings(ctx context.Context) ([]string, error) {
	if len(was.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivitySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := was.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (was *WorkspaceActivitySelect) StringsX(ctx context.Context) []string {
	v, err := was.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = was.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivitySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (was *WorkspaceActivitySelect) StringX(ctx context.Context) string {
	v, err := was.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) Ints(ctx context.Context) ([]int, error) {
	if len(was.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivitySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := was.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (was *WorkspaceActivitySelect) IntsX(ctx context.Context) []int {
	v, err := was.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = was.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivitySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (was *WorkspaceActivitySelect) IntX(ctx context.Context) int {
	v, err := was.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(was.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivitySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := was.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (was *WorkspaceActivitySelect) Float64sX(ctx context.Context) []float64 {
	v, err := was.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = was.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivitySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (was *WorkspaceActivitySelect) Float64X(ctx context.Context) float64 {
	v, err := was.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(was.fields) > 1 {
		return nil, errors.New("ent: WorkspaceActivitySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := was.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (was *WorkspaceActivitySelect) BoolsX(ctx context.Context) []bool {
	v, err := was.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (was *WorkspaceActivitySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = was.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workspaceactivity.Label}
	default:
		err = fmt.Errorf("ent: WorkspaceActivitySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (was *WorkspaceActivitySelect) BoolX(ctx context.Context) bool {
	v, err := was.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (was *WorkspaceActivitySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := was.sql.Query()
	if err := was.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
