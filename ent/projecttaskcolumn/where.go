// Code generated by entc, DO NOT EDIT.

package projecttaskcolumn

import (
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// TaskColumnID applies equality check predicate on the "task_column_id" field. It's identical to TaskColumnIDEQ.
func TaskColumnID(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskColumnID), v))
	})
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// Customizable applies equality check predicate on the "customizable" field. It's identical to CustomizableEQ.
func Customizable(v bool) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomizable), v))
	})
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrder), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...ulid.ID) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectID), v...))
	})
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...ulid.ID) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectID), v...))
	})
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectID), v))
	})
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectID), v))
	})
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectID), vc))
	})
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectID), vc))
	})
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectID), vc))
	})
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectID), vc))
	})
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectID), vc))
	})
}

// TaskColumnIDEQ applies the EQ predicate on the "task_column_id" field.
func TaskColumnIDEQ(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskColumnID), v))
	})
}

// TaskColumnIDNEQ applies the NEQ predicate on the "task_column_id" field.
func TaskColumnIDNEQ(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskColumnID), v))
	})
}

// TaskColumnIDIn applies the In predicate on the "task_column_id" field.
func TaskColumnIDIn(vs ...ulid.ID) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskColumnID), v...))
	})
}

// TaskColumnIDNotIn applies the NotIn predicate on the "task_column_id" field.
func TaskColumnIDNotIn(vs ...ulid.ID) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskColumnID), v...))
	})
}

// TaskColumnIDGT applies the GT predicate on the "task_column_id" field.
func TaskColumnIDGT(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskColumnID), v))
	})
}

// TaskColumnIDGTE applies the GTE predicate on the "task_column_id" field.
func TaskColumnIDGTE(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskColumnID), v))
	})
}

// TaskColumnIDLT applies the LT predicate on the "task_column_id" field.
func TaskColumnIDLT(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskColumnID), v))
	})
}

// TaskColumnIDLTE applies the LTE predicate on the "task_column_id" field.
func TaskColumnIDLTE(v ulid.ID) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskColumnID), v))
	})
}

// TaskColumnIDContains applies the Contains predicate on the "task_column_id" field.
func TaskColumnIDContains(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskColumnID), vc))
	})
}

// TaskColumnIDHasPrefix applies the HasPrefix predicate on the "task_column_id" field.
func TaskColumnIDHasPrefix(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskColumnID), vc))
	})
}

// TaskColumnIDHasSuffix applies the HasSuffix predicate on the "task_column_id" field.
func TaskColumnIDHasSuffix(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskColumnID), vc))
	})
}

// TaskColumnIDEqualFold applies the EqualFold predicate on the "task_column_id" field.
func TaskColumnIDEqualFold(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskColumnID), vc))
	})
}

// TaskColumnIDContainsFold applies the ContainsFold predicate on the "task_column_id" field.
func TaskColumnIDContainsFold(v ulid.ID) predicate.ProjectTaskColumn {
	vc := string(v)
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskColumnID), vc))
	})
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWidth), v))
	})
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...string) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWidth), v...))
	})
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...string) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWidth), v...))
	})
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWidth), v))
	})
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWidth), v))
	})
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWidth), v))
	})
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWidth), v))
	})
}

// WidthContains applies the Contains predicate on the "width" field.
func WidthContains(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWidth), v))
	})
}

// WidthHasPrefix applies the HasPrefix predicate on the "width" field.
func WidthHasPrefix(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWidth), v))
	})
}

// WidthHasSuffix applies the HasSuffix predicate on the "width" field.
func WidthHasSuffix(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWidth), v))
	})
}

// WidthEqualFold applies the EqualFold predicate on the "width" field.
func WidthEqualFold(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWidth), v))
	})
}

// WidthContainsFold applies the ContainsFold predicate on the "width" field.
func WidthContainsFold(v string) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWidth), v))
	})
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisabled), v))
	})
}

// CustomizableEQ applies the EQ predicate on the "customizable" field.
func CustomizableEQ(v bool) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomizable), v))
	})
}

// CustomizableNEQ applies the NEQ predicate on the "customizable" field.
func CustomizableNEQ(v bool) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomizable), v))
	})
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrder), v))
	})
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrder), v))
	})
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrder), v...))
	})
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrder), v...))
	})
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrder), v))
	})
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrder), v))
	})
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrder), v))
	})
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrder), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectTaskColumn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTaskColumn applies the HasEdge predicate on the "taskColumn" edge.
func HasTaskColumn() predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TaskColumnTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskColumnTable, TaskColumnColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskColumnWith applies the HasEdge predicate on the "taskColumn" edge with a given conditions (other predicates).
func HasTaskColumnWith(preds ...predicate.TaskColumn) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TaskColumnInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskColumnTable, TaskColumnColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectTaskColumn) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectTaskColumn) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectTaskColumn) predicate.ProjectTaskColumn {
	return predicate.ProjectTaskColumn(func(s *sql.Selector) {
		p(s.Not())
	})
}
