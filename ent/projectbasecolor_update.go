// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/schema/ulid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectBaseColorUpdate is the builder for updating ProjectBaseColor entities.
type ProjectBaseColorUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectBaseColorMutation
}

// Where appends a list predicates to the ProjectBaseColorUpdate builder.
func (pbcu *ProjectBaseColorUpdate) Where(ps ...predicate.ProjectBaseColor) *ProjectBaseColorUpdate {
	pbcu.mutation.Where(ps...)
	return pbcu
}

// SetColorID sets the "color_id" field.
func (pbcu *ProjectBaseColorUpdate) SetColorID(u ulid.ID) *ProjectBaseColorUpdate {
	pbcu.mutation.SetColorID(u)
	return pbcu
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (pbcu *ProjectBaseColorUpdate) AddProjectIDs(ids ...ulid.ID) *ProjectBaseColorUpdate {
	pbcu.mutation.AddProjectIDs(ids...)
	return pbcu
}

// AddProjects adds the "projects" edges to the Project entity.
func (pbcu *ProjectBaseColorUpdate) AddProjects(p ...*Project) *ProjectBaseColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcu.AddProjectIDs(ids...)
}

// SetColor sets the "color" edge to the Color entity.
func (pbcu *ProjectBaseColorUpdate) SetColor(c *Color) *ProjectBaseColorUpdate {
	return pbcu.SetColorID(c.ID)
}

// Mutation returns the ProjectBaseColorMutation object of the builder.
func (pbcu *ProjectBaseColorUpdate) Mutation() *ProjectBaseColorMutation {
	return pbcu.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (pbcu *ProjectBaseColorUpdate) ClearProjects() *ProjectBaseColorUpdate {
	pbcu.mutation.ClearProjects()
	return pbcu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (pbcu *ProjectBaseColorUpdate) RemoveProjectIDs(ids ...ulid.ID) *ProjectBaseColorUpdate {
	pbcu.mutation.RemoveProjectIDs(ids...)
	return pbcu
}

// RemoveProjects removes "projects" edges to Project entities.
func (pbcu *ProjectBaseColorUpdate) RemoveProjects(p ...*Project) *ProjectBaseColorUpdate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcu.RemoveProjectIDs(ids...)
}

// ClearColor clears the "color" edge to the Color entity.
func (pbcu *ProjectBaseColorUpdate) ClearColor() *ProjectBaseColorUpdate {
	pbcu.mutation.ClearColor()
	return pbcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbcu *ProjectBaseColorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pbcu.hooks) == 0 {
		if err = pbcu.check(); err != nil {
			return 0, err
		}
		affected, err = pbcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectBaseColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbcu.check(); err != nil {
				return 0, err
			}
			pbcu.mutation = mutation
			affected, err = pbcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pbcu.hooks) - 1; i >= 0; i-- {
			if pbcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbcu *ProjectBaseColorUpdate) SaveX(ctx context.Context) int {
	affected, err := pbcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbcu *ProjectBaseColorUpdate) Exec(ctx context.Context) error {
	_, err := pbcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcu *ProjectBaseColorUpdate) ExecX(ctx context.Context) {
	if err := pbcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbcu *ProjectBaseColorUpdate) check() error {
	if _, ok := pbcu.mutation.ColorID(); pbcu.mutation.ColorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"color\"")
	}
	return nil
}

func (pbcu *ProjectBaseColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectbasecolor.Table,
			Columns: projectbasecolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: projectbasecolor.FieldID,
			},
		},
	}
	if ps := pbcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pbcu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectbasecolor.ProjectsTable,
			Columns: []string{projectbasecolor.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !pbcu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectbasecolor.ProjectsTable,
			Columns: []string{projectbasecolor.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectbasecolor.ProjectsTable,
			Columns: []string{projectbasecolor.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbcu.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectbasecolor.ColorTable,
			Columns: []string{projectbasecolor.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcu.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectbasecolor.ColorTable,
			Columns: []string{projectbasecolor.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pbcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectbasecolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProjectBaseColorUpdateOne is the builder for updating a single ProjectBaseColor entity.
type ProjectBaseColorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectBaseColorMutation
}

// SetColorID sets the "color_id" field.
func (pbcuo *ProjectBaseColorUpdateOne) SetColorID(u ulid.ID) *ProjectBaseColorUpdateOne {
	pbcuo.mutation.SetColorID(u)
	return pbcuo
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (pbcuo *ProjectBaseColorUpdateOne) AddProjectIDs(ids ...ulid.ID) *ProjectBaseColorUpdateOne {
	pbcuo.mutation.AddProjectIDs(ids...)
	return pbcuo
}

// AddProjects adds the "projects" edges to the Project entity.
func (pbcuo *ProjectBaseColorUpdateOne) AddProjects(p ...*Project) *ProjectBaseColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcuo.AddProjectIDs(ids...)
}

// SetColor sets the "color" edge to the Color entity.
func (pbcuo *ProjectBaseColorUpdateOne) SetColor(c *Color) *ProjectBaseColorUpdateOne {
	return pbcuo.SetColorID(c.ID)
}

// Mutation returns the ProjectBaseColorMutation object of the builder.
func (pbcuo *ProjectBaseColorUpdateOne) Mutation() *ProjectBaseColorMutation {
	return pbcuo.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (pbcuo *ProjectBaseColorUpdateOne) ClearProjects() *ProjectBaseColorUpdateOne {
	pbcuo.mutation.ClearProjects()
	return pbcuo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (pbcuo *ProjectBaseColorUpdateOne) RemoveProjectIDs(ids ...ulid.ID) *ProjectBaseColorUpdateOne {
	pbcuo.mutation.RemoveProjectIDs(ids...)
	return pbcuo
}

// RemoveProjects removes "projects" edges to Project entities.
func (pbcuo *ProjectBaseColorUpdateOne) RemoveProjects(p ...*Project) *ProjectBaseColorUpdateOne {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcuo.RemoveProjectIDs(ids...)
}

// ClearColor clears the "color" edge to the Color entity.
func (pbcuo *ProjectBaseColorUpdateOne) ClearColor() *ProjectBaseColorUpdateOne {
	pbcuo.mutation.ClearColor()
	return pbcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbcuo *ProjectBaseColorUpdateOne) Select(field string, fields ...string) *ProjectBaseColorUpdateOne {
	pbcuo.fields = append([]string{field}, fields...)
	return pbcuo
}

// Save executes the query and returns the updated ProjectBaseColor entity.
func (pbcuo *ProjectBaseColorUpdateOne) Save(ctx context.Context) (*ProjectBaseColor, error) {
	var (
		err  error
		node *ProjectBaseColor
	)
	if len(pbcuo.hooks) == 0 {
		if err = pbcuo.check(); err != nil {
			return nil, err
		}
		node, err = pbcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectBaseColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbcuo.check(); err != nil {
				return nil, err
			}
			pbcuo.mutation = mutation
			node, err = pbcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pbcuo.hooks) - 1; i >= 0; i-- {
			if pbcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbcuo *ProjectBaseColorUpdateOne) SaveX(ctx context.Context) *ProjectBaseColor {
	node, err := pbcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbcuo *ProjectBaseColorUpdateOne) Exec(ctx context.Context) error {
	_, err := pbcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcuo *ProjectBaseColorUpdateOne) ExecX(ctx context.Context) {
	if err := pbcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbcuo *ProjectBaseColorUpdateOne) check() error {
	if _, ok := pbcuo.mutation.ColorID(); pbcuo.mutation.ColorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"color\"")
	}
	return nil
}

func (pbcuo *ProjectBaseColorUpdateOne) sqlSave(ctx context.Context) (_node *ProjectBaseColor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectbasecolor.Table,
			Columns: projectbasecolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: projectbasecolor.FieldID,
			},
		},
	}
	id, ok := pbcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProjectBaseColor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pbcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectbasecolor.FieldID)
		for _, f := range fields {
			if !projectbasecolor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectbasecolor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pbcuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectbasecolor.ProjectsTable,
			Columns: []string{projectbasecolor.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcuo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !pbcuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectbasecolor.ProjectsTable,
			Columns: []string{projectbasecolor.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcuo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectbasecolor.ProjectsTable,
			Columns: []string{projectbasecolor.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbcuo.mutation.ColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectbasecolor.ColorTable,
			Columns: []string{projectbasecolor.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcuo.mutation.ColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectbasecolor.ColorTable,
			Columns: []string{projectbasecolor.ColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: color.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectBaseColor{config: pbcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectbasecolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
