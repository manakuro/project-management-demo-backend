// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FavoriteWorkspaceCreate is the builder for creating a FavoriteWorkspace entity.
type FavoriteWorkspaceCreate struct {
	config
	mutation *FavoriteWorkspaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWorkspaceID sets the "workspace_id" field.
func (fwc *FavoriteWorkspaceCreate) SetWorkspaceID(u ulid.ID) *FavoriteWorkspaceCreate {
	fwc.mutation.SetWorkspaceID(u)
	return fwc
}

// SetTeammateID sets the "teammate_id" field.
func (fwc *FavoriteWorkspaceCreate) SetTeammateID(u ulid.ID) *FavoriteWorkspaceCreate {
	fwc.mutation.SetTeammateID(u)
	return fwc
}

// SetCreatedAt sets the "created_at" field.
func (fwc *FavoriteWorkspaceCreate) SetCreatedAt(t time.Time) *FavoriteWorkspaceCreate {
	fwc.mutation.SetCreatedAt(t)
	return fwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fwc *FavoriteWorkspaceCreate) SetNillableCreatedAt(t *time.Time) *FavoriteWorkspaceCreate {
	if t != nil {
		fwc.SetCreatedAt(*t)
	}
	return fwc
}

// SetUpdatedAt sets the "updated_at" field.
func (fwc *FavoriteWorkspaceCreate) SetUpdatedAt(t time.Time) *FavoriteWorkspaceCreate {
	fwc.mutation.SetUpdatedAt(t)
	return fwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fwc *FavoriteWorkspaceCreate) SetNillableUpdatedAt(t *time.Time) *FavoriteWorkspaceCreate {
	if t != nil {
		fwc.SetUpdatedAt(*t)
	}
	return fwc
}

// SetID sets the "id" field.
func (fwc *FavoriteWorkspaceCreate) SetID(u ulid.ID) *FavoriteWorkspaceCreate {
	fwc.mutation.SetID(u)
	return fwc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fwc *FavoriteWorkspaceCreate) SetNillableID(u *ulid.ID) *FavoriteWorkspaceCreate {
	if u != nil {
		fwc.SetID(*u)
	}
	return fwc
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (fwc *FavoriteWorkspaceCreate) SetWorkspace(w *Workspace) *FavoriteWorkspaceCreate {
	return fwc.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (fwc *FavoriteWorkspaceCreate) SetTeammate(t *Teammate) *FavoriteWorkspaceCreate {
	return fwc.SetTeammateID(t.ID)
}

// Mutation returns the FavoriteWorkspaceMutation object of the builder.
func (fwc *FavoriteWorkspaceCreate) Mutation() *FavoriteWorkspaceMutation {
	return fwc.mutation
}

// Save creates the FavoriteWorkspace in the database.
func (fwc *FavoriteWorkspaceCreate) Save(ctx context.Context) (*FavoriteWorkspace, error) {
	var (
		err  error
		node *FavoriteWorkspace
	)
	fwc.defaults()
	if len(fwc.hooks) == 0 {
		if err = fwc.check(); err != nil {
			return nil, err
		}
		node, err = fwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavoriteWorkspaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fwc.check(); err != nil {
				return nil, err
			}
			fwc.mutation = mutation
			if node, err = fwc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fwc.hooks) - 1; i >= 0; i-- {
			if fwc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fwc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fwc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fwc *FavoriteWorkspaceCreate) SaveX(ctx context.Context) *FavoriteWorkspace {
	v, err := fwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fwc *FavoriteWorkspaceCreate) Exec(ctx context.Context) error {
	_, err := fwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwc *FavoriteWorkspaceCreate) ExecX(ctx context.Context) {
	if err := fwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fwc *FavoriteWorkspaceCreate) defaults() {
	if _, ok := fwc.mutation.CreatedAt(); !ok {
		v := favoriteworkspace.DefaultCreatedAt()
		fwc.mutation.SetCreatedAt(v)
	}
	if _, ok := fwc.mutation.UpdatedAt(); !ok {
		v := favoriteworkspace.DefaultUpdatedAt()
		fwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fwc.mutation.ID(); !ok {
		v := favoriteworkspace.DefaultID()
		fwc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fwc *FavoriteWorkspaceCreate) check() error {
	if _, ok := fwc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "workspace_id"`)}
	}
	if _, ok := fwc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "teammate_id"`)}
	}
	if _, ok := fwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := fwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := fwc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New("ent: missing required edge \"workspace\"")}
	}
	if _, ok := fwc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New("ent: missing required edge \"teammate\"")}
	}
	return nil
}

func (fwc *FavoriteWorkspaceCreate) sqlSave(ctx context.Context) (*FavoriteWorkspace, error) {
	_node, _spec := fwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (fwc *FavoriteWorkspaceCreate) createSpec() (*FavoriteWorkspace, *sqlgraph.CreateSpec) {
	var (
		_node = &FavoriteWorkspace{config: fwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: favoriteworkspace.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: favoriteworkspace.FieldID,
			},
		}
	)
	_spec.OnConflict = fwc.conflict
	if id, ok := fwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fwc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: favoriteworkspace.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fwc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: favoriteworkspace.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := fwc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteworkspace.WorkspaceTable,
			Columns: []string{favoriteworkspace.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fwc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favoriteworkspace.TeammateTable,
			Columns: []string{favoriteworkspace.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FavoriteWorkspace.Create().
//		SetWorkspaceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FavoriteWorkspaceUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (fwc *FavoriteWorkspaceCreate) OnConflict(opts ...sql.ConflictOption) *FavoriteWorkspaceUpsertOne {
	fwc.conflict = opts
	return &FavoriteWorkspaceUpsertOne{
		create: fwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FavoriteWorkspace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fwc *FavoriteWorkspaceCreate) OnConflictColumns(columns ...string) *FavoriteWorkspaceUpsertOne {
	fwc.conflict = append(fwc.conflict, sql.ConflictColumns(columns...))
	return &FavoriteWorkspaceUpsertOne{
		create: fwc,
	}
}

type (
	// FavoriteWorkspaceUpsertOne is the builder for "upsert"-ing
	//  one FavoriteWorkspace node.
	FavoriteWorkspaceUpsertOne struct {
		create *FavoriteWorkspaceCreate
	}

	// FavoriteWorkspaceUpsert is the "OnConflict" setter.
	FavoriteWorkspaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetWorkspaceID sets the "workspace_id" field.
func (u *FavoriteWorkspaceUpsert) SetWorkspaceID(v ulid.ID) *FavoriteWorkspaceUpsert {
	u.Set(favoriteworkspace.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsert) UpdateWorkspaceID() *FavoriteWorkspaceUpsert {
	u.SetExcluded(favoriteworkspace.FieldWorkspaceID)
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *FavoriteWorkspaceUpsert) SetTeammateID(v ulid.ID) *FavoriteWorkspaceUpsert {
	u.Set(favoriteworkspace.FieldTeammateID, v)
	return u
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsert) UpdateTeammateID() *FavoriteWorkspaceUpsert {
	u.SetExcluded(favoriteworkspace.FieldTeammateID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FavoriteWorkspaceUpsert) SetCreatedAt(v time.Time) *FavoriteWorkspaceUpsert {
	u.Set(favoriteworkspace.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsert) UpdateCreatedAt() *FavoriteWorkspaceUpsert {
	u.SetExcluded(favoriteworkspace.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FavoriteWorkspaceUpsert) SetUpdatedAt(v time.Time) *FavoriteWorkspaceUpsert {
	u.Set(favoriteworkspace.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsert) UpdateUpdatedAt() *FavoriteWorkspaceUpsert {
	u.SetExcluded(favoriteworkspace.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FavoriteWorkspace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(favoriteworkspace.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FavoriteWorkspaceUpsertOne) UpdateNewValues() *FavoriteWorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(favoriteworkspace.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FavoriteWorkspace.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FavoriteWorkspaceUpsertOne) Ignore() *FavoriteWorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FavoriteWorkspaceUpsertOne) DoNothing() *FavoriteWorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FavoriteWorkspaceCreate.OnConflict
// documentation for more info.
func (u *FavoriteWorkspaceUpsertOne) Update(set func(*FavoriteWorkspaceUpsert)) *FavoriteWorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FavoriteWorkspaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *FavoriteWorkspaceUpsertOne) SetWorkspaceID(v ulid.ID) *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertOne) UpdateWorkspaceID() *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *FavoriteWorkspaceUpsertOne) SetTeammateID(v ulid.ID) *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertOne) UpdateTeammateID() *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateTeammateID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FavoriteWorkspaceUpsertOne) SetCreatedAt(v time.Time) *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertOne) UpdateCreatedAt() *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FavoriteWorkspaceUpsertOne) SetUpdatedAt(v time.Time) *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertOne) UpdateUpdatedAt() *FavoriteWorkspaceUpsertOne {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FavoriteWorkspaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FavoriteWorkspaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FavoriteWorkspaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FavoriteWorkspaceUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FavoriteWorkspaceUpsertOne.ID is not supported by MySQL driver. Use FavoriteWorkspaceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FavoriteWorkspaceUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FavoriteWorkspaceCreateBulk is the builder for creating many FavoriteWorkspace entities in bulk.
type FavoriteWorkspaceCreateBulk struct {
	config
	builders []*FavoriteWorkspaceCreate
	conflict []sql.ConflictOption
}

// Save creates the FavoriteWorkspace entities in the database.
func (fwcb *FavoriteWorkspaceCreateBulk) Save(ctx context.Context) ([]*FavoriteWorkspace, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fwcb.builders))
	nodes := make([]*FavoriteWorkspace, len(fwcb.builders))
	mutators := make([]Mutator, len(fwcb.builders))
	for i := range fwcb.builders {
		func(i int, root context.Context) {
			builder := fwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavoriteWorkspaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fwcb *FavoriteWorkspaceCreateBulk) SaveX(ctx context.Context) []*FavoriteWorkspace {
	v, err := fwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fwcb *FavoriteWorkspaceCreateBulk) Exec(ctx context.Context) error {
	_, err := fwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwcb *FavoriteWorkspaceCreateBulk) ExecX(ctx context.Context) {
	if err := fwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FavoriteWorkspace.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FavoriteWorkspaceUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (fwcb *FavoriteWorkspaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *FavoriteWorkspaceUpsertBulk {
	fwcb.conflict = opts
	return &FavoriteWorkspaceUpsertBulk{
		create: fwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FavoriteWorkspace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fwcb *FavoriteWorkspaceCreateBulk) OnConflictColumns(columns ...string) *FavoriteWorkspaceUpsertBulk {
	fwcb.conflict = append(fwcb.conflict, sql.ConflictColumns(columns...))
	return &FavoriteWorkspaceUpsertBulk{
		create: fwcb,
	}
}

// FavoriteWorkspaceUpsertBulk is the builder for "upsert"-ing
// a bulk of FavoriteWorkspace nodes.
type FavoriteWorkspaceUpsertBulk struct {
	create *FavoriteWorkspaceCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FavoriteWorkspace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(favoriteworkspace.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FavoriteWorkspaceUpsertBulk) UpdateNewValues() *FavoriteWorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(favoriteworkspace.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FavoriteWorkspace.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FavoriteWorkspaceUpsertBulk) Ignore() *FavoriteWorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FavoriteWorkspaceUpsertBulk) DoNothing() *FavoriteWorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FavoriteWorkspaceCreateBulk.OnConflict
// documentation for more info.
func (u *FavoriteWorkspaceUpsertBulk) Update(set func(*FavoriteWorkspaceUpsert)) *FavoriteWorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FavoriteWorkspaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *FavoriteWorkspaceUpsertBulk) SetWorkspaceID(v ulid.ID) *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertBulk) UpdateWorkspaceID() *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *FavoriteWorkspaceUpsertBulk) SetTeammateID(v ulid.ID) *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertBulk) UpdateTeammateID() *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateTeammateID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FavoriteWorkspaceUpsertBulk) SetCreatedAt(v time.Time) *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertBulk) UpdateCreatedAt() *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FavoriteWorkspaceUpsertBulk) SetUpdatedAt(v time.Time) *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FavoriteWorkspaceUpsertBulk) UpdateUpdatedAt() *FavoriteWorkspaceUpsertBulk {
	return u.Update(func(s *FavoriteWorkspaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FavoriteWorkspaceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FavoriteWorkspaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FavoriteWorkspaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FavoriteWorkspaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
