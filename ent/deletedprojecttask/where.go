// Code generated by entc, DO NOT EDIT.

package deletedprojecttask

import (
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// ProjectTaskSectionID applies equality check predicate on the "project_task_section_id" field. It's identical to ProjectTaskSectionIDEQ.
func ProjectTaskSectionID(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectTaskSectionID), v))
	})
}

// ProjectTaskCreatedAt applies equality check predicate on the "project_task_created_at" field. It's identical to ProjectTaskCreatedAtEQ.
func ProjectTaskCreatedAt(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectTaskCreatedAt), v))
	})
}

// ProjectTaskUpdatedAt applies equality check predicate on the "project_task_updated_at" field. It's identical to ProjectTaskUpdatedAtEQ.
func ProjectTaskUpdatedAt(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectTaskUpdatedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectID), v))
	})
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...ulid.ID) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectID), v...))
	})
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...ulid.ID) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectID), v...))
	})
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectID), v))
	})
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectID), v))
	})
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectID), v))
	})
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectID), vc))
	})
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectID), vc))
	})
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectID), vc))
	})
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectID), vc))
	})
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectID), vc))
	})
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskID), v))
	})
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...ulid.ID) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskID), v...))
	})
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...ulid.ID) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskID), v...))
	})
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskID), v))
	})
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskID), v))
	})
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskID), v))
	})
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskID), v))
	})
}

// TaskIDContains applies the Contains predicate on the "task_id" field.
func TaskIDContains(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskID), vc))
	})
}

// TaskIDHasPrefix applies the HasPrefix predicate on the "task_id" field.
func TaskIDHasPrefix(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskID), vc))
	})
}

// TaskIDHasSuffix applies the HasSuffix predicate on the "task_id" field.
func TaskIDHasSuffix(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskID), vc))
	})
}

// TaskIDEqualFold applies the EqualFold predicate on the "task_id" field.
func TaskIDEqualFold(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskID), vc))
	})
}

// TaskIDContainsFold applies the ContainsFold predicate on the "task_id" field.
func TaskIDContainsFold(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskID), vc))
	})
}

// ProjectTaskSectionIDEQ applies the EQ predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDEQ(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectTaskSectionID), v))
	})
}

// ProjectTaskSectionIDNEQ applies the NEQ predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDNEQ(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectTaskSectionID), v))
	})
}

// ProjectTaskSectionIDIn applies the In predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDIn(vs ...ulid.ID) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectTaskSectionID), v...))
	})
}

// ProjectTaskSectionIDNotIn applies the NotIn predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDNotIn(vs ...ulid.ID) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectTaskSectionID), v...))
	})
}

// ProjectTaskSectionIDGT applies the GT predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDGT(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectTaskSectionID), v))
	})
}

// ProjectTaskSectionIDGTE applies the GTE predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDGTE(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectTaskSectionID), v))
	})
}

// ProjectTaskSectionIDLT applies the LT predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDLT(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectTaskSectionID), v))
	})
}

// ProjectTaskSectionIDLTE applies the LTE predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDLTE(v ulid.ID) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectTaskSectionID), v))
	})
}

// ProjectTaskSectionIDContains applies the Contains predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDContains(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectTaskSectionID), vc))
	})
}

// ProjectTaskSectionIDHasPrefix applies the HasPrefix predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDHasPrefix(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectTaskSectionID), vc))
	})
}

// ProjectTaskSectionIDHasSuffix applies the HasSuffix predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDHasSuffix(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectTaskSectionID), vc))
	})
}

// ProjectTaskSectionIDEqualFold applies the EqualFold predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDEqualFold(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectTaskSectionID), vc))
	})
}

// ProjectTaskSectionIDContainsFold applies the ContainsFold predicate on the "project_task_section_id" field.
func ProjectTaskSectionIDContainsFold(v ulid.ID) predicate.DeletedProjectTask {
	vc := string(v)
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectTaskSectionID), vc))
	})
}

// ProjectTaskCreatedAtEQ applies the EQ predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectTaskCreatedAt), v))
	})
}

// ProjectTaskCreatedAtNEQ applies the NEQ predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtNEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectTaskCreatedAt), v))
	})
}

// ProjectTaskCreatedAtIn applies the In predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectTaskCreatedAt), v...))
	})
}

// ProjectTaskCreatedAtNotIn applies the NotIn predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtNotIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectTaskCreatedAt), v...))
	})
}

// ProjectTaskCreatedAtGT applies the GT predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtGT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectTaskCreatedAt), v))
	})
}

// ProjectTaskCreatedAtGTE applies the GTE predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtGTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectTaskCreatedAt), v))
	})
}

// ProjectTaskCreatedAtLT applies the LT predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtLT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectTaskCreatedAt), v))
	})
}

// ProjectTaskCreatedAtLTE applies the LTE predicate on the "project_task_created_at" field.
func ProjectTaskCreatedAtLTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectTaskCreatedAt), v))
	})
}

// ProjectTaskUpdatedAtEQ applies the EQ predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectTaskUpdatedAt), v))
	})
}

// ProjectTaskUpdatedAtNEQ applies the NEQ predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtNEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectTaskUpdatedAt), v))
	})
}

// ProjectTaskUpdatedAtIn applies the In predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectTaskUpdatedAt), v...))
	})
}

// ProjectTaskUpdatedAtNotIn applies the NotIn predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtNotIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectTaskUpdatedAt), v...))
	})
}

// ProjectTaskUpdatedAtGT applies the GT predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtGT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectTaskUpdatedAt), v))
	})
}

// ProjectTaskUpdatedAtGTE applies the GTE predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtGTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectTaskUpdatedAt), v))
	})
}

// ProjectTaskUpdatedAtLT applies the LT predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtLT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectTaskUpdatedAt), v))
	})
}

// ProjectTaskUpdatedAtLTE applies the LTE predicate on the "project_task_updated_at" field.
func ProjectTaskUpdatedAtLTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectTaskUpdatedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DeletedProjectTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TaskTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TaskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectTaskSection applies the HasEdge predicate on the "projectTaskSection" edge.
func HasProjectTaskSection() predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskSectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTaskSectionTable, ProjectTaskSectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectTaskSectionWith applies the HasEdge predicate on the "projectTaskSection" edge with a given conditions (other predicates).
func HasProjectTaskSectionWith(preds ...predicate.ProjectTaskSection) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTaskSectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTaskSectionTable, ProjectTaskSectionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeletedProjectTask) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeletedProjectTask) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeletedProjectTask) predicate.DeletedProjectTask {
	return predicate.DeletedProjectTask(func(s *sql.Selector) {
		p(s.Not())
	})
}
