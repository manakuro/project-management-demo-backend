// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/archivedworkspaceactivity"
	"project-management-demo-backend/ent/deletedprojecttask"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/projecttask"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskfile"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceactivity"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWorkspaceID sets the "workspace_id" field.
func (pc *ProjectCreate) SetWorkspaceID(u ulid.ID) *ProjectCreate {
	pc.mutation.SetWorkspaceID(u)
	return pc
}

// SetProjectBaseColorID sets the "project_base_color_id" field.
func (pc *ProjectCreate) SetProjectBaseColorID(u ulid.ID) *ProjectCreate {
	pc.mutation.SetProjectBaseColorID(u)
	return pc
}

// SetProjectLightColorID sets the "project_light_color_id" field.
func (pc *ProjectCreate) SetProjectLightColorID(u ulid.ID) *ProjectCreate {
	pc.mutation.SetProjectLightColorID(u)
	return pc
}

// SetProjectIconID sets the "project_icon_id" field.
func (pc *ProjectCreate) SetProjectIconID(u ulid.ID) *ProjectCreate {
	pc.mutation.SetProjectIconID(u)
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *ProjectCreate) SetCreatedBy(u ulid.ID) *ProjectCreate {
	pc.mutation.SetCreatedBy(u)
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProjectCreate) SetDescription(m map[string]interface{}) *ProjectCreate {
	pc.mutation.SetDescription(m)
	return pc
}

// SetDescriptionTitle sets the "description_title" field.
func (pc *ProjectCreate) SetDescriptionTitle(s string) *ProjectCreate {
	pc.mutation.SetDescriptionTitle(s)
	return pc
}

// SetDueDate sets the "due_date" field.
func (pc *ProjectCreate) SetDueDate(t time.Time) *ProjectCreate {
	pc.mutation.SetDueDate(t)
	return pc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDueDate(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetDueDate(*t)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProjectCreate) SetID(u ulid.ID) *ProjectCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableID(u *ulid.ID) *ProjectCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (pc *ProjectCreate) SetWorkspace(w *Workspace) *ProjectCreate {
	return pc.SetWorkspaceID(w.ID)
}

// SetProjectBaseColor sets the "projectBaseColor" edge to the ProjectBaseColor entity.
func (pc *ProjectCreate) SetProjectBaseColor(p *ProjectBaseColor) *ProjectCreate {
	return pc.SetProjectBaseColorID(p.ID)
}

// SetProjectLightColor sets the "projectLightColor" edge to the ProjectLightColor entity.
func (pc *ProjectCreate) SetProjectLightColor(p *ProjectLightColor) *ProjectCreate {
	return pc.SetProjectLightColorID(p.ID)
}

// SetProjectIcon sets the "projectIcon" edge to the ProjectIcon entity.
func (pc *ProjectCreate) SetProjectIcon(p *ProjectIcon) *ProjectCreate {
	return pc.SetProjectIconID(p.ID)
}

// SetTeammateID sets the "teammate" edge to the Teammate entity by ID.
func (pc *ProjectCreate) SetTeammateID(id ulid.ID) *ProjectCreate {
	pc.mutation.SetTeammateID(id)
	return pc
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (pc *ProjectCreate) SetTeammate(t *Teammate) *ProjectCreate {
	return pc.SetTeammateID(t.ID)
}

// AddProjectTeammateIDs adds the "projectTeammates" edge to the ProjectTeammate entity by IDs.
func (pc *ProjectCreate) AddProjectTeammateIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddProjectTeammateIDs(ids...)
	return pc
}

// AddProjectTeammates adds the "projectTeammates" edges to the ProjectTeammate entity.
func (pc *ProjectCreate) AddProjectTeammates(p ...*ProjectTeammate) *ProjectCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProjectTeammateIDs(ids...)
}

// AddFavoriteProjectIDs adds the "favoriteProjects" edge to the FavoriteProject entity by IDs.
func (pc *ProjectCreate) AddFavoriteProjectIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddFavoriteProjectIDs(ids...)
	return pc
}

// AddFavoriteProjects adds the "favoriteProjects" edges to the FavoriteProject entity.
func (pc *ProjectCreate) AddFavoriteProjects(f ...*FavoriteProject) *ProjectCreate {
	ids := make([]ulid.ID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pc.AddFavoriteProjectIDs(ids...)
}

// AddProjectTaskColumnIDs adds the "projectTaskColumns" edge to the ProjectTaskColumn entity by IDs.
func (pc *ProjectCreate) AddProjectTaskColumnIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddProjectTaskColumnIDs(ids...)
	return pc
}

// AddProjectTaskColumns adds the "projectTaskColumns" edges to the ProjectTaskColumn entity.
func (pc *ProjectCreate) AddProjectTaskColumns(p ...*ProjectTaskColumn) *ProjectCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProjectTaskColumnIDs(ids...)
}

// AddProjectTaskListStatuseIDs adds the "projectTaskListStatuses" edge to the ProjectTaskListStatus entity by IDs.
func (pc *ProjectCreate) AddProjectTaskListStatuseIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddProjectTaskListStatuseIDs(ids...)
	return pc
}

// AddProjectTaskListStatuses adds the "projectTaskListStatuses" edges to the ProjectTaskListStatus entity.
func (pc *ProjectCreate) AddProjectTaskListStatuses(p ...*ProjectTaskListStatus) *ProjectCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProjectTaskListStatuseIDs(ids...)
}

// AddProjectTaskSectionIDs adds the "projectTaskSections" edge to the ProjectTaskSection entity by IDs.
func (pc *ProjectCreate) AddProjectTaskSectionIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddProjectTaskSectionIDs(ids...)
	return pc
}

// AddProjectTaskSections adds the "projectTaskSections" edges to the ProjectTaskSection entity.
func (pc *ProjectCreate) AddProjectTaskSections(p ...*ProjectTaskSection) *ProjectCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProjectTaskSectionIDs(ids...)
}

// AddProjectTaskIDs adds the "projectTasks" edge to the ProjectTask entity by IDs.
func (pc *ProjectCreate) AddProjectTaskIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddProjectTaskIDs(ids...)
	return pc
}

// AddProjectTasks adds the "projectTasks" edges to the ProjectTask entity.
func (pc *ProjectCreate) AddProjectTasks(p ...*ProjectTask) *ProjectCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProjectTaskIDs(ids...)
}

// AddTaskFileIDs adds the "taskFiles" edge to the TaskFile entity by IDs.
func (pc *ProjectCreate) AddTaskFileIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddTaskFileIDs(ids...)
	return pc
}

// AddTaskFiles adds the "taskFiles" edges to the TaskFile entity.
func (pc *ProjectCreate) AddTaskFiles(t ...*TaskFile) *ProjectCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskFileIDs(ids...)
}

// AddWorkspaceActivityIDs adds the "workspaceActivities" edge to the WorkspaceActivity entity by IDs.
func (pc *ProjectCreate) AddWorkspaceActivityIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddWorkspaceActivityIDs(ids...)
	return pc
}

// AddWorkspaceActivities adds the "workspaceActivities" edges to the WorkspaceActivity entity.
func (pc *ProjectCreate) AddWorkspaceActivities(w ...*WorkspaceActivity) *ProjectCreate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pc.AddWorkspaceActivityIDs(ids...)
}

// AddArchivedWorkspaceActivityIDs adds the "archivedWorkspaceActivities" edge to the ArchivedWorkspaceActivity entity by IDs.
func (pc *ProjectCreate) AddArchivedWorkspaceActivityIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddArchivedWorkspaceActivityIDs(ids...)
	return pc
}

// AddArchivedWorkspaceActivities adds the "archivedWorkspaceActivities" edges to the ArchivedWorkspaceActivity entity.
func (pc *ProjectCreate) AddArchivedWorkspaceActivities(a ...*ArchivedWorkspaceActivity) *ProjectCreate {
	ids := make([]ulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddArchivedWorkspaceActivityIDs(ids...)
}

// AddDeletedProjectTaskIDs adds the "deletedProjectTasks" edge to the DeletedProjectTask entity by IDs.
func (pc *ProjectCreate) AddDeletedProjectTaskIDs(ids ...ulid.ID) *ProjectCreate {
	pc.mutation.AddDeletedProjectTaskIDs(ids...)
	return pc
}

// AddDeletedProjectTasks adds the "deletedProjectTasks" edges to the DeletedProjectTask entity.
func (pc *ProjectCreate) AddDeletedProjectTasks(d ...*DeletedProjectTask) *ProjectCreate {
	ids := make([]ulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDeletedProjectTaskIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	var (
		err  error
		node *Project
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := project.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "Project.workspace_id"`)}
	}
	if _, ok := pc.mutation.ProjectBaseColorID(); !ok {
		return &ValidationError{Name: "project_base_color_id", err: errors.New(`ent: missing required field "Project.project_base_color_id"`)}
	}
	if _, ok := pc.mutation.ProjectLightColorID(); !ok {
		return &ValidationError{Name: "project_light_color_id", err: errors.New(`ent: missing required field "Project.project_light_color_id"`)}
	}
	if _, ok := pc.mutation.ProjectIconID(); !ok {
		return &ValidationError{Name: "project_icon_id", err: errors.New(`ent: missing required field "Project.project_icon_id"`)}
	}
	if _, ok := pc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Project.created_by"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Project.description"`)}
	}
	if _, ok := pc.mutation.DescriptionTitle(); !ok {
		return &ValidationError{Name: "description_title", err: errors.New(`ent: missing required field "Project.description_title"`)}
	}
	if v, ok := pc.mutation.DescriptionTitle(); ok {
		if err := project.DescriptionTitleValidator(v); err != nil {
			return &ValidationError{Name: "description_title", err: fmt.Errorf(`ent: validator failed for field "Project.description_title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	if _, ok := pc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New(`ent: missing required edge "Project.workspace"`)}
	}
	if _, ok := pc.mutation.ProjectBaseColorID(); !ok {
		return &ValidationError{Name: "projectBaseColor", err: errors.New(`ent: missing required edge "Project.projectBaseColor"`)}
	}
	if _, ok := pc.mutation.ProjectLightColorID(); !ok {
		return &ValidationError{Name: "projectLightColor", err: errors.New(`ent: missing required edge "Project.projectLightColor"`)}
	}
	if _, ok := pc.mutation.ProjectIconID(); !ok {
		return &ValidationError{Name: "projectIcon", err: errors.New(`ent: missing required edge "Project.projectIcon"`)}
	}
	if _, ok := pc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New(`ent: missing required edge "Project.teammate"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: project.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: project.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: project.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pc.mutation.DescriptionTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldDescriptionTitle,
		})
		_node.DescriptionTitle = value
	}
	if value, ok := pc.mutation.DueDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldDueDate,
		})
		_node.DueDate = &value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.WorkspaceTable,
			Columns: []string{project.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectBaseColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.ProjectBaseColorTable,
			Columns: []string{project.ProjectBaseColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectbasecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectBaseColorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectLightColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.ProjectLightColorTable,
			Columns: []string{project.ProjectLightColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectlightcolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectLightColorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectIconIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.ProjectIconTable,
			Columns: []string{project.ProjectIconColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecticon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectIconID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.TeammateTable,
			Columns: []string{project.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectTeammatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectTeammatesTable,
			Columns: []string{project.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.FavoriteProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FavoriteProjectsTable,
			Columns: []string{project.FavoriteProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: favoriteproject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectTaskColumnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectTaskColumnsTable,
			Columns: []string{project.ProjectTaskColumnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttaskcolumn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectTaskListStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectTaskListStatusesTable,
			Columns: []string{project.ProjectTaskListStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttaskliststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectTaskSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectTaskSectionsTable,
			Columns: []string{project.ProjectTaskSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttasksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectTasksTable,
			Columns: []string{project.ProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projecttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TaskFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TaskFilesTable,
			Columns: []string{project.TaskFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WorkspaceActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.WorkspaceActivitiesTable,
			Columns: []string{project.WorkspaceActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ArchivedWorkspaceActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ArchivedWorkspaceActivitiesTable,
			Columns: []string{project.ArchivedWorkspaceActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: archivedworkspaceactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DeletedProjectTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.DeletedProjectTasksTable,
			Columns: []string{project.DeletedProjectTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: deletedprojecttask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.Create().
//		SetWorkspaceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (pc *ProjectCreate) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertOne {
	pc.conflict = opts
	return &ProjectUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *ProjectCreate) OnConflictColumns(columns ...string) *ProjectUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertOne{
		create: pc,
	}
}

type (
	// ProjectUpsertOne is the builder for "upsert"-ing
	//  one Project node.
	ProjectUpsertOne struct {
		create *ProjectCreate
	}

	// ProjectUpsert is the "OnConflict" setter.
	ProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetWorkspaceID sets the "workspace_id" field.
func (u *ProjectUpsert) SetWorkspaceID(v ulid.ID) *ProjectUpsert {
	u.Set(project.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateWorkspaceID() *ProjectUpsert {
	u.SetExcluded(project.FieldWorkspaceID)
	return u
}

// SetProjectBaseColorID sets the "project_base_color_id" field.
func (u *ProjectUpsert) SetProjectBaseColorID(v ulid.ID) *ProjectUpsert {
	u.Set(project.FieldProjectBaseColorID, v)
	return u
}

// UpdateProjectBaseColorID sets the "project_base_color_id" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateProjectBaseColorID() *ProjectUpsert {
	u.SetExcluded(project.FieldProjectBaseColorID)
	return u
}

// SetProjectLightColorID sets the "project_light_color_id" field.
func (u *ProjectUpsert) SetProjectLightColorID(v ulid.ID) *ProjectUpsert {
	u.Set(project.FieldProjectLightColorID, v)
	return u
}

// UpdateProjectLightColorID sets the "project_light_color_id" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateProjectLightColorID() *ProjectUpsert {
	u.SetExcluded(project.FieldProjectLightColorID)
	return u
}

// SetProjectIconID sets the "project_icon_id" field.
func (u *ProjectUpsert) SetProjectIconID(v ulid.ID) *ProjectUpsert {
	u.Set(project.FieldProjectIconID, v)
	return u
}

// UpdateProjectIconID sets the "project_icon_id" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateProjectIconID() *ProjectUpsert {
	u.SetExcluded(project.FieldProjectIconID)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ProjectUpsert) SetCreatedBy(v ulid.ID) *ProjectUpsert {
	u.Set(project.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateCreatedBy() *ProjectUpsert {
	u.SetExcluded(project.FieldCreatedBy)
	return u
}

// SetName sets the "name" field.
func (u *ProjectUpsert) SetName(v string) *ProjectUpsert {
	u.Set(project.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateName() *ProjectUpsert {
	u.SetExcluded(project.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ProjectUpsert) SetDescription(v map[string]interface{}) *ProjectUpsert {
	u.Set(project.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDescription() *ProjectUpsert {
	u.SetExcluded(project.FieldDescription)
	return u
}

// SetDescriptionTitle sets the "description_title" field.
func (u *ProjectUpsert) SetDescriptionTitle(v string) *ProjectUpsert {
	u.Set(project.FieldDescriptionTitle, v)
	return u
}

// UpdateDescriptionTitle sets the "description_title" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDescriptionTitle() *ProjectUpsert {
	u.SetExcluded(project.FieldDescriptionTitle)
	return u
}

// SetDueDate sets the "due_date" field.
func (u *ProjectUpsert) SetDueDate(v time.Time) *ProjectUpsert {
	u.Set(project.FieldDueDate, v)
	return u
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDueDate() *ProjectUpsert {
	u.SetExcluded(project.FieldDueDate)
	return u
}

// ClearDueDate clears the value of the "due_date" field.
func (u *ProjectUpsert) ClearDueDate() *ProjectUpsert {
	u.SetNull(project.FieldDueDate)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectUpsert) SetCreatedAt(v time.Time) *ProjectUpsert {
	u.Set(project.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateCreatedAt() *ProjectUpsert {
	u.SetExcluded(project.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsert) SetUpdatedAt(v time.Time) *ProjectUpsert {
	u.Set(project.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUpdatedAt() *ProjectUpsert {
	u.SetExcluded(project.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProjectUpsertOne) UpdateNewValues() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(project.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(project.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(project.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Project.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ProjectUpsertOne) Ignore() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertOne) DoNothing() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreate.OnConflict
// documentation for more info.
func (u *ProjectUpsertOne) Update(set func(*ProjectUpsert)) *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *ProjectUpsertOne) SetWorkspaceID(v ulid.ID) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateWorkspaceID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetProjectBaseColorID sets the "project_base_color_id" field.
func (u *ProjectUpsertOne) SetProjectBaseColorID(v ulid.ID) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetProjectBaseColorID(v)
	})
}

// UpdateProjectBaseColorID sets the "project_base_color_id" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateProjectBaseColorID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateProjectBaseColorID()
	})
}

// SetProjectLightColorID sets the "project_light_color_id" field.
func (u *ProjectUpsertOne) SetProjectLightColorID(v ulid.ID) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetProjectLightColorID(v)
	})
}

// UpdateProjectLightColorID sets the "project_light_color_id" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateProjectLightColorID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateProjectLightColorID()
	})
}

// SetProjectIconID sets the "project_icon_id" field.
func (u *ProjectUpsertOne) SetProjectIconID(v ulid.ID) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetProjectIconID(v)
	})
}

// UpdateProjectIconID sets the "project_icon_id" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateProjectIconID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateProjectIconID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ProjectUpsertOne) SetCreatedBy(v ulid.ID) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateCreatedBy() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertOne) SetName(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateName() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProjectUpsertOne) SetDescription(v map[string]interface{}) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDescription() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDescription()
	})
}

// SetDescriptionTitle sets the "description_title" field.
func (u *ProjectUpsertOne) SetDescriptionTitle(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDescriptionTitle(v)
	})
}

// UpdateDescriptionTitle sets the "description_title" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDescriptionTitle() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDescriptionTitle()
	})
}

// SetDueDate sets the "due_date" field.
func (u *ProjectUpsertOne) SetDueDate(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDueDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDueDate()
	})
}

// ClearDueDate clears the value of the "due_date" field.
func (u *ProjectUpsertOne) ClearDueDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDueDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectUpsertOne) SetCreatedAt(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateCreatedAt() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertOne) SetUpdatedAt(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUpdatedAt() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectUpsertOne.ID is not supported by MySQL driver. Use ProjectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	builders []*ProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *ProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertBulk {
	pcb.conflict = opts
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *ProjectCreateBulk) OnConflictColumns(columns ...string) *ProjectUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// ProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Project nodes.
type ProjectUpsertBulk struct {
	create *ProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ProjectUpsertBulk) UpdateNewValues() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(project.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(project.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(project.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ProjectUpsertBulk) Ignore() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertBulk) DoNothing() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectUpsertBulk) Update(set func(*ProjectUpsert)) *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *ProjectUpsertBulk) SetWorkspaceID(v ulid.ID) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateWorkspaceID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetProjectBaseColorID sets the "project_base_color_id" field.
func (u *ProjectUpsertBulk) SetProjectBaseColorID(v ulid.ID) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetProjectBaseColorID(v)
	})
}

// UpdateProjectBaseColorID sets the "project_base_color_id" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateProjectBaseColorID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateProjectBaseColorID()
	})
}

// SetProjectLightColorID sets the "project_light_color_id" field.
func (u *ProjectUpsertBulk) SetProjectLightColorID(v ulid.ID) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetProjectLightColorID(v)
	})
}

// UpdateProjectLightColorID sets the "project_light_color_id" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateProjectLightColorID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateProjectLightColorID()
	})
}

// SetProjectIconID sets the "project_icon_id" field.
func (u *ProjectUpsertBulk) SetProjectIconID(v ulid.ID) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetProjectIconID(v)
	})
}

// UpdateProjectIconID sets the "project_icon_id" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateProjectIconID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateProjectIconID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ProjectUpsertBulk) SetCreatedBy(v ulid.ID) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateCreatedBy() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertBulk) SetName(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateName() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProjectUpsertBulk) SetDescription(v map[string]interface{}) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDescription() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDescription()
	})
}

// SetDescriptionTitle sets the "description_title" field.
func (u *ProjectUpsertBulk) SetDescriptionTitle(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDescriptionTitle(v)
	})
}

// UpdateDescriptionTitle sets the "description_title" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDescriptionTitle() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDescriptionTitle()
	})
}

// SetDueDate sets the "due_date" field.
func (u *ProjectUpsertBulk) SetDueDate(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDueDate(v)
	})
}

// UpdateDueDate sets the "due_date" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDueDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDueDate()
	})
}

// ClearDueDate clears the value of the "due_date" field.
func (u *ProjectUpsertBulk) ClearDueDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDueDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProjectUpsertBulk) SetCreatedAt(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateCreatedAt() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertBulk) SetUpdatedAt(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUpdatedAt() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProjectUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
