// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/tasksection"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskSectionCreate is the builder for creating a TaskSection entity.
type TaskSectionCreate struct {
	config
	mutation *TaskSectionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tsc *TaskSectionCreate) SetName(s string) *TaskSectionCreate {
	tsc.mutation.SetName(s)
	return tsc
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TaskSectionCreate) SetCreatedAt(t time.Time) *TaskSectionCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TaskSectionCreate) SetNillableCreatedAt(t *time.Time) *TaskSectionCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TaskSectionCreate) SetUpdatedAt(t time.Time) *TaskSectionCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TaskSectionCreate) SetNillableUpdatedAt(t *time.Time) *TaskSectionCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetID sets the "id" field.
func (tsc *TaskSectionCreate) SetID(u ulid.ID) *TaskSectionCreate {
	tsc.mutation.SetID(u)
	return tsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tsc *TaskSectionCreate) SetNillableID(u *ulid.ID) *TaskSectionCreate {
	if u != nil {
		tsc.SetID(*u)
	}
	return tsc
}

// Mutation returns the TaskSectionMutation object of the builder.
func (tsc *TaskSectionCreate) Mutation() *TaskSectionMutation {
	return tsc.mutation
}

// Save creates the TaskSection in the database.
func (tsc *TaskSectionCreate) Save(ctx context.Context) (*TaskSection, error) {
	var (
		err  error
		node *TaskSection
	)
	tsc.defaults()
	if len(tsc.hooks) == 0 {
		if err = tsc.check(); err != nil {
			return nil, err
		}
		node, err = tsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsc.check(); err != nil {
				return nil, err
			}
			tsc.mutation = mutation
			if node, err = tsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tsc.hooks) - 1; i >= 0; i-- {
			if tsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TaskSectionCreate) SaveX(ctx context.Context) *TaskSection {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TaskSectionCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TaskSectionCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TaskSectionCreate) defaults() {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := tasksection.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		v := tasksection.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.ID(); !ok {
		v := tasksection.DefaultID()
		tsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TaskSectionCreate) check() error {
	if _, ok := tsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := tsc.mutation.Name(); ok {
		if err := tasksection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (tsc *TaskSectionCreate) sqlSave(ctx context.Context) (*TaskSection, error) {
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (tsc *TaskSectionCreate) createSpec() (*TaskSection, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskSection{config: tsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tasksection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tasksection.FieldID,
			},
		}
	)
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasksection.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasksection.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasksection.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TaskSectionCreateBulk is the builder for creating many TaskSection entities in bulk.
type TaskSectionCreateBulk struct {
	config
	builders []*TaskSectionCreate
}

// Save creates the TaskSection entities in the database.
func (tscb *TaskSectionCreateBulk) Save(ctx context.Context) ([]*TaskSection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TaskSection, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TaskSectionCreateBulk) SaveX(ctx context.Context) []*TaskSection {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TaskSectionCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TaskSectionCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
