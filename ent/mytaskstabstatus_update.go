// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/mytaskstabstatus"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MyTasksTabStatusUpdate is the builder for updating MyTasksTabStatus entities.
type MyTasksTabStatusUpdate struct {
	config
	hooks    []Hook
	mutation *MyTasksTabStatusMutation
}

// Where appends a list predicates to the MyTasksTabStatusUpdate builder.
func (mttsu *MyTasksTabStatusUpdate) Where(ps ...predicate.MyTasksTabStatus) *MyTasksTabStatusUpdate {
	mttsu.mutation.Where(ps...)
	return mttsu
}

// SetWorkspaceID sets the "workspace_id" field.
func (mttsu *MyTasksTabStatusUpdate) SetWorkspaceID(u ulid.ID) *MyTasksTabStatusUpdate {
	mttsu.mutation.SetWorkspaceID(u)
	return mttsu
}

// SetTeammateID sets the "teammate_id" field.
func (mttsu *MyTasksTabStatusUpdate) SetTeammateID(u ulid.ID) *MyTasksTabStatusUpdate {
	mttsu.mutation.SetTeammateID(u)
	return mttsu
}

// SetStatus sets the "status" field.
func (mttsu *MyTasksTabStatusUpdate) SetStatus(m mytaskstabstatus.Status) *MyTasksTabStatusUpdate {
	mttsu.mutation.SetStatus(m)
	return mttsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mttsu *MyTasksTabStatusUpdate) SetNillableStatus(m *mytaskstabstatus.Status) *MyTasksTabStatusUpdate {
	if m != nil {
		mttsu.SetStatus(*m)
	}
	return mttsu
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (mttsu *MyTasksTabStatusUpdate) SetWorkspace(w *Workspace) *MyTasksTabStatusUpdate {
	return mttsu.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (mttsu *MyTasksTabStatusUpdate) SetTeammate(t *Teammate) *MyTasksTabStatusUpdate {
	return mttsu.SetTeammateID(t.ID)
}

// Mutation returns the MyTasksTabStatusMutation object of the builder.
func (mttsu *MyTasksTabStatusUpdate) Mutation() *MyTasksTabStatusMutation {
	return mttsu.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (mttsu *MyTasksTabStatusUpdate) ClearWorkspace() *MyTasksTabStatusUpdate {
	mttsu.mutation.ClearWorkspace()
	return mttsu
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (mttsu *MyTasksTabStatusUpdate) ClearTeammate() *MyTasksTabStatusUpdate {
	mttsu.mutation.ClearTeammate()
	return mttsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mttsu *MyTasksTabStatusUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mttsu.hooks) == 0 {
		if err = mttsu.check(); err != nil {
			return 0, err
		}
		affected, err = mttsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MyTasksTabStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mttsu.check(); err != nil {
				return 0, err
			}
			mttsu.mutation = mutation
			affected, err = mttsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mttsu.hooks) - 1; i >= 0; i-- {
			if mttsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mttsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mttsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mttsu *MyTasksTabStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := mttsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mttsu *MyTasksTabStatusUpdate) Exec(ctx context.Context) error {
	_, err := mttsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mttsu *MyTasksTabStatusUpdate) ExecX(ctx context.Context) {
	if err := mttsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mttsu *MyTasksTabStatusUpdate) check() error {
	if v, ok := mttsu.mutation.Status(); ok {
		if err := mytaskstabstatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := mttsu.mutation.WorkspaceID(); mttsu.mutation.WorkspaceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workspace\"")
	}
	if _, ok := mttsu.mutation.TeammateID(); mttsu.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	return nil
}

func (mttsu *MyTasksTabStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mytaskstabstatus.Table,
			Columns: mytaskstabstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mytaskstabstatus.FieldID,
			},
		},
	}
	if ps := mttsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mttsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mytaskstabstatus.FieldStatus,
		})
	}
	if mttsu.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.WorkspaceTable,
			Columns: []string{mytaskstabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttsu.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.WorkspaceTable,
			Columns: []string{mytaskstabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mttsu.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.TeammateTable,
			Columns: []string{mytaskstabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttsu.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.TeammateTable,
			Columns: []string{mytaskstabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mttsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mytaskstabstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MyTasksTabStatusUpdateOne is the builder for updating a single MyTasksTabStatus entity.
type MyTasksTabStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MyTasksTabStatusMutation
}

// SetWorkspaceID sets the "workspace_id" field.
func (mttsuo *MyTasksTabStatusUpdateOne) SetWorkspaceID(u ulid.ID) *MyTasksTabStatusUpdateOne {
	mttsuo.mutation.SetWorkspaceID(u)
	return mttsuo
}

// SetTeammateID sets the "teammate_id" field.
func (mttsuo *MyTasksTabStatusUpdateOne) SetTeammateID(u ulid.ID) *MyTasksTabStatusUpdateOne {
	mttsuo.mutation.SetTeammateID(u)
	return mttsuo
}

// SetStatus sets the "status" field.
func (mttsuo *MyTasksTabStatusUpdateOne) SetStatus(m mytaskstabstatus.Status) *MyTasksTabStatusUpdateOne {
	mttsuo.mutation.SetStatus(m)
	return mttsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mttsuo *MyTasksTabStatusUpdateOne) SetNillableStatus(m *mytaskstabstatus.Status) *MyTasksTabStatusUpdateOne {
	if m != nil {
		mttsuo.SetStatus(*m)
	}
	return mttsuo
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (mttsuo *MyTasksTabStatusUpdateOne) SetWorkspace(w *Workspace) *MyTasksTabStatusUpdateOne {
	return mttsuo.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (mttsuo *MyTasksTabStatusUpdateOne) SetTeammate(t *Teammate) *MyTasksTabStatusUpdateOne {
	return mttsuo.SetTeammateID(t.ID)
}

// Mutation returns the MyTasksTabStatusMutation object of the builder.
func (mttsuo *MyTasksTabStatusUpdateOne) Mutation() *MyTasksTabStatusMutation {
	return mttsuo.mutation
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (mttsuo *MyTasksTabStatusUpdateOne) ClearWorkspace() *MyTasksTabStatusUpdateOne {
	mttsuo.mutation.ClearWorkspace()
	return mttsuo
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (mttsuo *MyTasksTabStatusUpdateOne) ClearTeammate() *MyTasksTabStatusUpdateOne {
	mttsuo.mutation.ClearTeammate()
	return mttsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mttsuo *MyTasksTabStatusUpdateOne) Select(field string, fields ...string) *MyTasksTabStatusUpdateOne {
	mttsuo.fields = append([]string{field}, fields...)
	return mttsuo
}

// Save executes the query and returns the updated MyTasksTabStatus entity.
func (mttsuo *MyTasksTabStatusUpdateOne) Save(ctx context.Context) (*MyTasksTabStatus, error) {
	var (
		err  error
		node *MyTasksTabStatus
	)
	if len(mttsuo.hooks) == 0 {
		if err = mttsuo.check(); err != nil {
			return nil, err
		}
		node, err = mttsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MyTasksTabStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mttsuo.check(); err != nil {
				return nil, err
			}
			mttsuo.mutation = mutation
			node, err = mttsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mttsuo.hooks) - 1; i >= 0; i-- {
			if mttsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mttsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mttsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mttsuo *MyTasksTabStatusUpdateOne) SaveX(ctx context.Context) *MyTasksTabStatus {
	node, err := mttsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mttsuo *MyTasksTabStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := mttsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mttsuo *MyTasksTabStatusUpdateOne) ExecX(ctx context.Context) {
	if err := mttsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mttsuo *MyTasksTabStatusUpdateOne) check() error {
	if v, ok := mttsuo.mutation.Status(); ok {
		if err := mytaskstabstatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := mttsuo.mutation.WorkspaceID(); mttsuo.mutation.WorkspaceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"workspace\"")
	}
	if _, ok := mttsuo.mutation.TeammateID(); mttsuo.mutation.TeammateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"teammate\"")
	}
	return nil
}

func (mttsuo *MyTasksTabStatusUpdateOne) sqlSave(ctx context.Context) (_node *MyTasksTabStatus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mytaskstabstatus.Table,
			Columns: mytaskstabstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: mytaskstabstatus.FieldID,
			},
		},
	}
	id, ok := mttsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MyTasksTabStatus.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mttsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mytaskstabstatus.FieldID)
		for _, f := range fields {
			if !mytaskstabstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mytaskstabstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mttsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mttsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mytaskstabstatus.FieldStatus,
		})
	}
	if mttsuo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.WorkspaceTable,
			Columns: []string{mytaskstabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttsuo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.WorkspaceTable,
			Columns: []string{mytaskstabstatus.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mttsuo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.TeammateTable,
			Columns: []string{mytaskstabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mttsuo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mytaskstabstatus.TeammateTable,
			Columns: []string{mytaskstabstatus.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MyTasksTabStatus{config: mttsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mttsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mytaskstabstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
