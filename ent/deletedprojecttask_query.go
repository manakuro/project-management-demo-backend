// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"project-management-demo-backend/ent/deletedprojecttask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeletedProjectTaskQuery is the builder for querying DeletedProjectTask entities.
type DeletedProjectTaskQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.DeletedProjectTask
	// eager-loading edges.
	withProject *ProjectQuery
	withTask    *TaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeletedProjectTaskQuery builder.
func (dptq *DeletedProjectTaskQuery) Where(ps ...predicate.DeletedProjectTask) *DeletedProjectTaskQuery {
	dptq.predicates = append(dptq.predicates, ps...)
	return dptq
}

// Limit adds a limit step to the query.
func (dptq *DeletedProjectTaskQuery) Limit(limit int) *DeletedProjectTaskQuery {
	dptq.limit = &limit
	return dptq
}

// Offset adds an offset step to the query.
func (dptq *DeletedProjectTaskQuery) Offset(offset int) *DeletedProjectTaskQuery {
	dptq.offset = &offset
	return dptq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dptq *DeletedProjectTaskQuery) Unique(unique bool) *DeletedProjectTaskQuery {
	dptq.unique = &unique
	return dptq
}

// Order adds an order step to the query.
func (dptq *DeletedProjectTaskQuery) Order(o ...OrderFunc) *DeletedProjectTaskQuery {
	dptq.order = append(dptq.order, o...)
	return dptq
}

// QueryProject chains the current query on the "project" edge.
func (dptq *DeletedProjectTaskQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: dptq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dptq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dptq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deletedprojecttask.Table, deletedprojecttask.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deletedprojecttask.ProjectTable, deletedprojecttask.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(dptq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTask chains the current query on the "task" edge.
func (dptq *DeletedProjectTaskQuery) QueryTask() *TaskQuery {
	query := &TaskQuery{config: dptq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dptq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dptq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deletedprojecttask.Table, deletedprojecttask.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deletedprojecttask.TaskTable, deletedprojecttask.TaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(dptq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeletedProjectTask entity from the query.
// Returns a *NotFoundError when no DeletedProjectTask was found.
func (dptq *DeletedProjectTaskQuery) First(ctx context.Context) (*DeletedProjectTask, error) {
	nodes, err := dptq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deletedprojecttask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) FirstX(ctx context.Context) *DeletedProjectTask {
	node, err := dptq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeletedProjectTask ID from the query.
// Returns a *NotFoundError when no DeletedProjectTask ID was found.
func (dptq *DeletedProjectTaskQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = dptq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deletedprojecttask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := dptq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeletedProjectTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeletedProjectTask entity is found.
// Returns a *NotFoundError when no DeletedProjectTask entities are found.
func (dptq *DeletedProjectTaskQuery) Only(ctx context.Context) (*DeletedProjectTask, error) {
	nodes, err := dptq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deletedprojecttask.Label}
	default:
		return nil, &NotSingularError{deletedprojecttask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) OnlyX(ctx context.Context) *DeletedProjectTask {
	node, err := dptq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeletedProjectTask ID in the query.
// Returns a *NotSingularError when more than one DeletedProjectTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (dptq *DeletedProjectTaskQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = dptq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = &NotSingularError{deletedprojecttask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := dptq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeletedProjectTasks.
func (dptq *DeletedProjectTaskQuery) All(ctx context.Context) ([]*DeletedProjectTask, error) {
	if err := dptq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dptq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) AllX(ctx context.Context) []*DeletedProjectTask {
	nodes, err := dptq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeletedProjectTask IDs.
func (dptq *DeletedProjectTaskQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := dptq.Select(deletedprojecttask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := dptq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dptq *DeletedProjectTaskQuery) Count(ctx context.Context) (int, error) {
	if err := dptq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dptq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) CountX(ctx context.Context) int {
	count, err := dptq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dptq *DeletedProjectTaskQuery) Exist(ctx context.Context) (bool, error) {
	if err := dptq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dptq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dptq *DeletedProjectTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := dptq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeletedProjectTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dptq *DeletedProjectTaskQuery) Clone() *DeletedProjectTaskQuery {
	if dptq == nil {
		return nil
	}
	return &DeletedProjectTaskQuery{
		config:      dptq.config,
		limit:       dptq.limit,
		offset:      dptq.offset,
		order:       append([]OrderFunc{}, dptq.order...),
		predicates:  append([]predicate.DeletedProjectTask{}, dptq.predicates...),
		withProject: dptq.withProject.Clone(),
		withTask:    dptq.withTask.Clone(),
		// clone intermediate query.
		sql:    dptq.sql.Clone(),
		path:   dptq.path,
		unique: dptq.unique,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (dptq *DeletedProjectTaskQuery) WithProject(opts ...func(*ProjectQuery)) *DeletedProjectTaskQuery {
	query := &ProjectQuery{config: dptq.config}
	for _, opt := range opts {
		opt(query)
	}
	dptq.withProject = query
	return dptq
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (dptq *DeletedProjectTaskQuery) WithTask(opts ...func(*TaskQuery)) *DeletedProjectTaskQuery {
	query := &TaskQuery{config: dptq.config}
	for _, opt := range opts {
		opt(query)
	}
	dptq.withTask = query
	return dptq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID ulid.ID `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeletedProjectTask.Query().
//		GroupBy(deletedprojecttask.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (dptq *DeletedProjectTaskQuery) GroupBy(field string, fields ...string) *DeletedProjectTaskGroupBy {
	group := &DeletedProjectTaskGroupBy{config: dptq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dptq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dptq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID ulid.ID `json:"project_id,omitempty"`
//	}
//
//	client.DeletedProjectTask.Query().
//		Select(deletedprojecttask.FieldProjectID).
//		Scan(ctx, &v)
//
func (dptq *DeletedProjectTaskQuery) Select(fields ...string) *DeletedProjectTaskSelect {
	dptq.fields = append(dptq.fields, fields...)
	return &DeletedProjectTaskSelect{DeletedProjectTaskQuery: dptq}
}

func (dptq *DeletedProjectTaskQuery) prepareQuery(ctx context.Context) error {
	for _, f := range dptq.fields {
		if !deletedprojecttask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dptq.path != nil {
		prev, err := dptq.path(ctx)
		if err != nil {
			return err
		}
		dptq.sql = prev
	}
	return nil
}

func (dptq *DeletedProjectTaskQuery) sqlAll(ctx context.Context) ([]*DeletedProjectTask, error) {
	var (
		nodes       = []*DeletedProjectTask{}
		_spec       = dptq.querySpec()
		loadedTypes = [2]bool{
			dptq.withProject != nil,
			dptq.withTask != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &DeletedProjectTask{config: dptq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, dptq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := dptq.withProject; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*DeletedProjectTask)
		for i := range nodes {
			fk := nodes[i].ProjectID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(project.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Project = n
			}
		}
	}

	if query := dptq.withTask; query != nil {
		ids := make([]ulid.ID, 0, len(nodes))
		nodeids := make(map[ulid.ID][]*DeletedProjectTask)
		for i := range nodes {
			fk := nodes[i].TaskID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(task.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Task = n
			}
		}
	}

	return nodes, nil
}

func (dptq *DeletedProjectTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dptq.querySpec()
	_spec.Node.Columns = dptq.fields
	if len(dptq.fields) > 0 {
		_spec.Unique = dptq.unique != nil && *dptq.unique
	}
	return sqlgraph.CountNodes(ctx, dptq.driver, _spec)
}

func (dptq *DeletedProjectTaskQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := dptq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (dptq *DeletedProjectTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deletedprojecttask.Table,
			Columns: deletedprojecttask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deletedprojecttask.FieldID,
			},
		},
		From:   dptq.sql,
		Unique: true,
	}
	if unique := dptq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := dptq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deletedprojecttask.FieldID)
		for i := range fields {
			if fields[i] != deletedprojecttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dptq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dptq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dptq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dptq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dptq *DeletedProjectTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dptq.driver.Dialect())
	t1 := builder.Table(deletedprojecttask.Table)
	columns := dptq.fields
	if len(columns) == 0 {
		columns = deletedprojecttask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dptq.sql != nil {
		selector = dptq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dptq.unique != nil && *dptq.unique {
		selector.Distinct()
	}
	for _, p := range dptq.predicates {
		p(selector)
	}
	for _, p := range dptq.order {
		p(selector)
	}
	if offset := dptq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dptq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeletedProjectTaskGroupBy is the group-by builder for DeletedProjectTask entities.
type DeletedProjectTaskGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dptgb *DeletedProjectTaskGroupBy) Aggregate(fns ...AggregateFunc) *DeletedProjectTaskGroupBy {
	dptgb.fns = append(dptgb.fns, fns...)
	return dptgb
}

// Scan applies the group-by query and scans the result into the given value.
func (dptgb *DeletedProjectTaskGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dptgb.path(ctx)
	if err != nil {
		return err
	}
	dptgb.sql = query
	return dptgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := dptgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(dptgb.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := dptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) StringsX(ctx context.Context) []string {
	v, err := dptgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dptgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) StringX(ctx context.Context) string {
	v, err := dptgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(dptgb.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := dptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) IntsX(ctx context.Context) []int {
	v, err := dptgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dptgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) IntX(ctx context.Context) int {
	v, err := dptgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(dptgb.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := dptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := dptgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dptgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) Float64X(ctx context.Context) float64 {
	v, err := dptgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(dptgb.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := dptgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := dptgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dptgb *DeletedProjectTaskGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dptgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dptgb *DeletedProjectTaskGroupBy) BoolX(ctx context.Context) bool {
	v, err := dptgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dptgb *DeletedProjectTaskGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dptgb.fields {
		if !deletedprojecttask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dptgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dptgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dptgb *DeletedProjectTaskGroupBy) sqlQuery() *sql.Selector {
	selector := dptgb.sql.Select()
	aggregation := make([]string, 0, len(dptgb.fns))
	for _, fn := range dptgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dptgb.fields)+len(dptgb.fns))
		for _, f := range dptgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dptgb.fields...)...)
}

// DeletedProjectTaskSelect is the builder for selecting fields of DeletedProjectTask entities.
type DeletedProjectTaskSelect struct {
	*DeletedProjectTaskQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (dpts *DeletedProjectTaskSelect) Scan(ctx context.Context, v interface{}) error {
	if err := dpts.prepareQuery(ctx); err != nil {
		return err
	}
	dpts.sql = dpts.DeletedProjectTaskQuery.sqlQuery(ctx)
	return dpts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) ScanX(ctx context.Context, v interface{}) {
	if err := dpts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) Strings(ctx context.Context) ([]string, error) {
	if len(dpts.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := dpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) StringsX(ctx context.Context) []string {
	v, err := dpts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dpts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) StringX(ctx context.Context) string {
	v, err := dpts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) Ints(ctx context.Context) ([]int, error) {
	if len(dpts.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := dpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) IntsX(ctx context.Context) []int {
	v, err := dpts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dpts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) IntX(ctx context.Context) int {
	v, err := dpts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(dpts.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := dpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) Float64sX(ctx context.Context) []float64 {
	v, err := dpts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dpts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) Float64X(ctx context.Context) float64 {
	v, err := dpts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(dpts.fields) > 1 {
		return nil, errors.New("ent: DeletedProjectTaskSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := dpts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) BoolsX(ctx context.Context) []bool {
	v, err := dpts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (dpts *DeletedProjectTaskSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dpts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deletedprojecttask.Label}
	default:
		err = fmt.Errorf("ent: DeletedProjectTaskSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dpts *DeletedProjectTaskSelect) BoolX(ctx context.Context) bool {
	v, err := dpts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dpts *DeletedProjectTaskSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dpts.sql.Query()
	if err := dpts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
