// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskactivity"
	"project-management-demo-backend/ent/taskcollaborator"
	"project-management-demo-backend/ent/taskfeed"
	"project-management-demo-backend/ent/taskfeedlike"
	"project-management-demo-backend/ent/tasklike"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceactivity"
	"project-management-demo-backend/ent/workspaceteammate"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateCreate is the builder for creating a Teammate entity.
type TeammateCreate struct {
	config
	mutation *TeammateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TeammateCreate) SetName(s string) *TeammateCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetImage sets the "image" field.
func (tc *TeammateCreate) SetImage(s string) *TeammateCreate {
	tc.mutation.SetImage(s)
	return tc
}

// SetEmail sets the "email" field.
func (tc *TeammateCreate) SetEmail(s string) *TeammateCreate {
	tc.mutation.SetEmail(s)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TeammateCreate) SetCreatedAt(t time.Time) *TeammateCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TeammateCreate) SetNillableCreatedAt(t *time.Time) *TeammateCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TeammateCreate) SetUpdatedAt(t time.Time) *TeammateCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TeammateCreate) SetNillableUpdatedAt(t *time.Time) *TeammateCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TeammateCreate) SetID(u ulid.ID) *TeammateCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TeammateCreate) SetNillableID(u *ulid.ID) *TeammateCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddWorkspaceIDs adds the "workspaces" edge to the Workspace entity by IDs.
func (tc *TeammateCreate) AddWorkspaceIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddWorkspaceIDs(ids...)
	return tc
}

// AddWorkspaces adds the "workspaces" edges to the Workspace entity.
func (tc *TeammateCreate) AddWorkspaces(w ...*Workspace) *TeammateCreate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tc.AddWorkspaceIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (tc *TeammateCreate) AddProjectIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddProjectIDs(ids...)
	return tc
}

// AddProjects adds the "projects" edges to the Project entity.
func (tc *TeammateCreate) AddProjects(p ...*Project) *TeammateCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddProjectIDs(ids...)
}

// AddProjectTeammateIDs adds the "projectTeammates" edge to the ProjectTeammate entity by IDs.
func (tc *TeammateCreate) AddProjectTeammateIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddProjectTeammateIDs(ids...)
	return tc
}

// AddProjectTeammates adds the "projectTeammates" edges to the ProjectTeammate entity.
func (tc *TeammateCreate) AddProjectTeammates(p ...*ProjectTeammate) *TeammateCreate {
	ids := make([]ulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddProjectTeammateIDs(ids...)
}

// AddWorkspaceTeammateIDs adds the "workspaceTeammates" edge to the WorkspaceTeammate entity by IDs.
func (tc *TeammateCreate) AddWorkspaceTeammateIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddWorkspaceTeammateIDs(ids...)
	return tc
}

// AddWorkspaceTeammates adds the "workspaceTeammates" edges to the WorkspaceTeammate entity.
func (tc *TeammateCreate) AddWorkspaceTeammates(w ...*WorkspaceTeammate) *TeammateCreate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tc.AddWorkspaceTeammateIDs(ids...)
}

// AddFavoriteProjectIDs adds the "favoriteProjects" edge to the FavoriteProject entity by IDs.
func (tc *TeammateCreate) AddFavoriteProjectIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddFavoriteProjectIDs(ids...)
	return tc
}

// AddFavoriteProjects adds the "favoriteProjects" edges to the FavoriteProject entity.
func (tc *TeammateCreate) AddFavoriteProjects(f ...*FavoriteProject) *TeammateCreate {
	ids := make([]ulid.ID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tc.AddFavoriteProjectIDs(ids...)
}

// AddFavoriteWorkspaceIDs adds the "favoriteWorkspaces" edge to the FavoriteWorkspace entity by IDs.
func (tc *TeammateCreate) AddFavoriteWorkspaceIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddFavoriteWorkspaceIDs(ids...)
	return tc
}

// AddFavoriteWorkspaces adds the "favoriteWorkspaces" edges to the FavoriteWorkspace entity.
func (tc *TeammateCreate) AddFavoriteWorkspaces(f ...*FavoriteWorkspace) *TeammateCreate {
	ids := make([]ulid.ID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tc.AddFavoriteWorkspaceIDs(ids...)
}

// AddTeammateTaskTabStatuseIDs adds the "teammateTaskTabStatuses" edge to the TeammateTaskTabStatus entity by IDs.
func (tc *TeammateCreate) AddTeammateTaskTabStatuseIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTeammateTaskTabStatuseIDs(ids...)
	return tc
}

// AddTeammateTaskTabStatuses adds the "teammateTaskTabStatuses" edges to the TeammateTaskTabStatus entity.
func (tc *TeammateCreate) AddTeammateTaskTabStatuses(t ...*TeammateTaskTabStatus) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTeammateTaskTabStatuseIDs(ids...)
}

// AddTeammateTaskColumnIDs adds the "teammateTaskColumns" edge to the TeammateTaskColumn entity by IDs.
func (tc *TeammateCreate) AddTeammateTaskColumnIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTeammateTaskColumnIDs(ids...)
	return tc
}

// AddTeammateTaskColumns adds the "teammateTaskColumns" edges to the TeammateTaskColumn entity.
func (tc *TeammateCreate) AddTeammateTaskColumns(t ...*TeammateTaskColumn) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTeammateTaskColumnIDs(ids...)
}

// AddTeammateTaskListStatuseIDs adds the "teammateTaskListStatuses" edge to the TeammateTaskListStatus entity by IDs.
func (tc *TeammateCreate) AddTeammateTaskListStatuseIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTeammateTaskListStatuseIDs(ids...)
	return tc
}

// AddTeammateTaskListStatuses adds the "teammateTaskListStatuses" edges to the TeammateTaskListStatus entity.
func (tc *TeammateCreate) AddTeammateTaskListStatuses(t ...*TeammateTaskListStatus) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTeammateTaskListStatuseIDs(ids...)
}

// AddTeammateTaskSectionIDs adds the "teammateTaskSections" edge to the TeammateTaskSection entity by IDs.
func (tc *TeammateCreate) AddTeammateTaskSectionIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTeammateTaskSectionIDs(ids...)
	return tc
}

// AddTeammateTaskSections adds the "teammateTaskSections" edges to the TeammateTaskSection entity.
func (tc *TeammateCreate) AddTeammateTaskSections(t ...*TeammateTaskSection) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTeammateTaskSectionIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tc *TeammateCreate) AddTaskIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTaskIDs(ids...)
	return tc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tc *TeammateCreate) AddTasks(t ...*Task) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskIDs(ids...)
}

// AddTeammateTaskIDs adds the "teammateTasks" edge to the TeammateTask entity by IDs.
func (tc *TeammateCreate) AddTeammateTaskIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTeammateTaskIDs(ids...)
	return tc
}

// AddTeammateTasks adds the "teammateTasks" edges to the TeammateTask entity.
func (tc *TeammateCreate) AddTeammateTasks(t ...*TeammateTask) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTeammateTaskIDs(ids...)
}

// AddTaskLikeIDs adds the "taskLikes" edge to the TaskLike entity by IDs.
func (tc *TeammateCreate) AddTaskLikeIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTaskLikeIDs(ids...)
	return tc
}

// AddTaskLikes adds the "taskLikes" edges to the TaskLike entity.
func (tc *TeammateCreate) AddTaskLikes(t ...*TaskLike) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskLikeIDs(ids...)
}

// AddTaskCollaboratorIDs adds the "taskCollaborators" edge to the TaskCollaborator entity by IDs.
func (tc *TeammateCreate) AddTaskCollaboratorIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTaskCollaboratorIDs(ids...)
	return tc
}

// AddTaskCollaborators adds the "taskCollaborators" edges to the TaskCollaborator entity.
func (tc *TeammateCreate) AddTaskCollaborators(t ...*TaskCollaborator) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskCollaboratorIDs(ids...)
}

// AddTaskFeedIDs adds the "taskFeeds" edge to the TaskFeed entity by IDs.
func (tc *TeammateCreate) AddTaskFeedIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTaskFeedIDs(ids...)
	return tc
}

// AddTaskFeeds adds the "taskFeeds" edges to the TaskFeed entity.
func (tc *TeammateCreate) AddTaskFeeds(t ...*TaskFeed) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskFeedIDs(ids...)
}

// AddTaskFeedLikeIDs adds the "taskFeedLikes" edge to the TaskFeedLike entity by IDs.
func (tc *TeammateCreate) AddTaskFeedLikeIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTaskFeedLikeIDs(ids...)
	return tc
}

// AddTaskFeedLikes adds the "taskFeedLikes" edges to the TaskFeedLike entity.
func (tc *TeammateCreate) AddTaskFeedLikes(t ...*TaskFeedLike) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskFeedLikeIDs(ids...)
}

// AddTaskActivityIDs adds the "taskActivities" edge to the TaskActivity entity by IDs.
func (tc *TeammateCreate) AddTaskActivityIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddTaskActivityIDs(ids...)
	return tc
}

// AddTaskActivities adds the "taskActivities" edges to the TaskActivity entity.
func (tc *TeammateCreate) AddTaskActivities(t ...*TaskActivity) *TeammateCreate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskActivityIDs(ids...)
}

// AddWorkspaceActivityIDs adds the "workspaceActivities" edge to the WorkspaceActivity entity by IDs.
func (tc *TeammateCreate) AddWorkspaceActivityIDs(ids ...ulid.ID) *TeammateCreate {
	tc.mutation.AddWorkspaceActivityIDs(ids...)
	return tc
}

// AddWorkspaceActivities adds the "workspaceActivities" edges to the WorkspaceActivity entity.
func (tc *TeammateCreate) AddWorkspaceActivities(w ...*WorkspaceActivity) *TeammateCreate {
	ids := make([]ulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tc.AddWorkspaceActivityIDs(ids...)
}

// Mutation returns the TeammateMutation object of the builder.
func (tc *TeammateCreate) Mutation() *TeammateMutation {
	return tc.mutation
}

// Save creates the Teammate in the database.
func (tc *TeammateCreate) Save(ctx context.Context) (*Teammate, error) {
	var (
		err  error
		node *Teammate
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TeammateCreate) SaveX(ctx context.Context) *Teammate {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TeammateCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TeammateCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TeammateCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := teammate.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := teammate.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := teammate.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TeammateCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Teammate.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := teammate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Teammate.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Teammate.image"`)}
	}
	if v, ok := tc.mutation.Image(); ok {
		if err := teammate.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Teammate.image": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Teammate.email"`)}
	}
	if v, ok := tc.mutation.Email(); ok {
		if err := teammate.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Teammate.email": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Teammate.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Teammate.updated_at"`)}
	}
	return nil
}

func (tc *TeammateCreate) sqlSave(ctx context.Context) (*Teammate, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tc *TeammateCreate) createSpec() (*Teammate, *sqlgraph.CreateSpec) {
	var (
		_node = &Teammate{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teammate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammate.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := tc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teammate.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teammate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teammate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.WorkspacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspacesTable,
			Columns: []string{teammate.WorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectsTable,
			Columns: []string{teammate.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProjectTeammatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.ProjectTeammatesTable,
			Columns: []string{teammate.ProjectTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: projectteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.WorkspaceTeammatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceTeammatesTable,
			Columns: []string{teammate.WorkspaceTeammatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceteammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FavoriteProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.FavoriteProjectsTable,
			Columns: []string{teammate.FavoriteProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: favoriteproject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FavoriteWorkspacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.FavoriteWorkspacesTable,
			Columns: []string{teammate.FavoriteWorkspacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: favoriteworkspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeammateTaskTabStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TeammateTaskTabStatusesTable,
			Columns: []string{teammate.TeammateTaskTabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetasktabstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeammateTaskColumnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TeammateTaskColumnsTable,
			Columns: []string{teammate.TeammateTaskColumnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetaskcolumn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeammateTaskListStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TeammateTaskListStatusesTable,
			Columns: []string{teammate.TeammateTaskListStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetaskliststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeammateTaskSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TeammateTaskSectionsTable,
			Columns: []string{teammate.TeammateTaskSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetasksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TasksTable,
			Columns: []string{teammate.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TeammateTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TeammateTasksTable,
			Columns: []string{teammate.TeammateTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TaskLikesTable,
			Columns: []string{teammate.TaskLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tasklike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskCollaboratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TaskCollaboratorsTable,
			Columns: []string{teammate.TaskCollaboratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskcollaborator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskFeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TaskFeedsTable,
			Columns: []string{teammate.TaskFeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskFeedLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TaskFeedLikesTable,
			Columns: []string{teammate.TaskFeedLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskfeedlike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TaskActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.TaskActivitiesTable,
			Columns: []string{teammate.TaskActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.WorkspaceActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teammate.WorkspaceActivitiesTable,
			Columns: []string{teammate.WorkspaceActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspaceactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Teammate.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeammateUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tc *TeammateCreate) OnConflict(opts ...sql.ConflictOption) *TeammateUpsertOne {
	tc.conflict = opts
	return &TeammateUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Teammate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tc *TeammateCreate) OnConflictColumns(columns ...string) *TeammateUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TeammateUpsertOne{
		create: tc,
	}
}

type (
	// TeammateUpsertOne is the builder for "upsert"-ing
	//  one Teammate node.
	TeammateUpsertOne struct {
		create *TeammateCreate
	}

	// TeammateUpsert is the "OnConflict" setter.
	TeammateUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TeammateUpsert) SetName(v string) *TeammateUpsert {
	u.Set(teammate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeammateUpsert) UpdateName() *TeammateUpsert {
	u.SetExcluded(teammate.FieldName)
	return u
}

// SetImage sets the "image" field.
func (u *TeammateUpsert) SetImage(v string) *TeammateUpsert {
	u.Set(teammate.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *TeammateUpsert) UpdateImage() *TeammateUpsert {
	u.SetExcluded(teammate.FieldImage)
	return u
}

// SetEmail sets the "email" field.
func (u *TeammateUpsert) SetEmail(v string) *TeammateUpsert {
	u.Set(teammate.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TeammateUpsert) UpdateEmail() *TeammateUpsert {
	u.SetExcluded(teammate.FieldEmail)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateUpsert) SetCreatedAt(v time.Time) *TeammateUpsert {
	u.Set(teammate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateUpsert) UpdateCreatedAt() *TeammateUpsert {
	u.SetExcluded(teammate.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateUpsert) SetUpdatedAt(v time.Time) *TeammateUpsert {
	u.Set(teammate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateUpsert) UpdateUpdatedAt() *TeammateUpsert {
	u.SetExcluded(teammate.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Teammate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teammate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeammateUpsertOne) UpdateNewValues() *TeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(teammate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(teammate.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(teammate.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Teammate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TeammateUpsertOne) Ignore() *TeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeammateUpsertOne) DoNothing() *TeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeammateCreate.OnConflict
// documentation for more info.
func (u *TeammateUpsertOne) Update(set func(*TeammateUpsert)) *TeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeammateUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TeammateUpsertOne) SetName(v string) *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeammateUpsertOne) UpdateName() *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *TeammateUpsertOne) SetImage(v string) *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *TeammateUpsertOne) UpdateImage() *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateImage()
	})
}

// SetEmail sets the "email" field.
func (u *TeammateUpsertOne) SetEmail(v string) *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TeammateUpsertOne) UpdateEmail() *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateEmail()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateUpsertOne) SetCreatedAt(v time.Time) *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateUpsertOne) UpdateCreatedAt() *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateUpsertOne) SetUpdatedAt(v time.Time) *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateUpsertOne) UpdateUpdatedAt() *TeammateUpsertOne {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeammateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeammateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeammateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeammateUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TeammateUpsertOne.ID is not supported by MySQL driver. Use TeammateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeammateUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeammateCreateBulk is the builder for creating many Teammate entities in bulk.
type TeammateCreateBulk struct {
	config
	builders []*TeammateCreate
	conflict []sql.ConflictOption
}

// Save creates the Teammate entities in the database.
func (tcb *TeammateCreateBulk) Save(ctx context.Context) ([]*Teammate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Teammate, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeammateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TeammateCreateBulk) SaveX(ctx context.Context) []*Teammate {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TeammateCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TeammateCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Teammate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeammateUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tcb *TeammateCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeammateUpsertBulk {
	tcb.conflict = opts
	return &TeammateUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Teammate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcb *TeammateCreateBulk) OnConflictColumns(columns ...string) *TeammateUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TeammateUpsertBulk{
		create: tcb,
	}
}

// TeammateUpsertBulk is the builder for "upsert"-ing
// a bulk of Teammate nodes.
type TeammateUpsertBulk struct {
	create *TeammateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Teammate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teammate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeammateUpsertBulk) UpdateNewValues() *TeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(teammate.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(teammate.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(teammate.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Teammate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TeammateUpsertBulk) Ignore() *TeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeammateUpsertBulk) DoNothing() *TeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeammateCreateBulk.OnConflict
// documentation for more info.
func (u *TeammateUpsertBulk) Update(set func(*TeammateUpsert)) *TeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeammateUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TeammateUpsertBulk) SetName(v string) *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeammateUpsertBulk) UpdateName() *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *TeammateUpsertBulk) SetImage(v string) *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *TeammateUpsertBulk) UpdateImage() *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateImage()
	})
}

// SetEmail sets the "email" field.
func (u *TeammateUpsertBulk) SetEmail(v string) *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TeammateUpsertBulk) UpdateEmail() *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateEmail()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateUpsertBulk) SetCreatedAt(v time.Time) *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateUpsertBulk) UpdateCreatedAt() *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateUpsertBulk) SetUpdatedAt(v time.Time) *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateUpsertBulk) UpdateUpdatedAt() *TeammateUpsertBulk {
	return u.Update(func(s *TeammateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeammateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TeammateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeammateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeammateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
