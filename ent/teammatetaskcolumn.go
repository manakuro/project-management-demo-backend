// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/workspace"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TeammateTaskColumn is the model entity for the TeammateTaskColumn schema.
type TeammateTaskColumn struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// TeammateID holds the value of the "teammate_id" field.
	TeammateID ulid.ID `json:"teammate_id,omitempty"`
	// TaskColumnID holds the value of the "task_column_id" field.
	TaskColumnID ulid.ID `json:"task_column_id,omitempty"`
	// WorkspaceID holds the value of the "workspace_id" field.
	WorkspaceID ulid.ID `json:"workspace_id,omitempty"`
	// Width holds the value of the "width" field.
	Width string `json:"width,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Customizable holds the value of the "customizable" field.
	Customizable bool `json:"customizable,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeammateTaskColumnQuery when eager-loading is set.
	Edges TeammateTaskColumnEdges `json:"edges"`
}

// TeammateTaskColumnEdges holds the relations/edges for other nodes in the graph.
type TeammateTaskColumnEdges struct {
	// Teammate holds the value of the teammate edge.
	Teammate *Teammate `json:"teammate,omitempty"`
	// Workspace holds the value of the workspace edge.
	Workspace *Workspace `json:"workspace,omitempty"`
	// TaskColumn holds the value of the task_column edge.
	TaskColumn *TaskColumn `json:"task_column,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TeammateOrErr returns the Teammate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskColumnEdges) TeammateOrErr() (*Teammate, error) {
	if e.loadedTypes[0] {
		if e.Teammate == nil {
			// The edge teammate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teammate.Label}
		}
		return e.Teammate, nil
	}
	return nil, &NotLoadedError{edge: "teammate"}
}

// WorkspaceOrErr returns the Workspace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskColumnEdges) WorkspaceOrErr() (*Workspace, error) {
	if e.loadedTypes[1] {
		if e.Workspace == nil {
			// The edge workspace was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workspace.Label}
		}
		return e.Workspace, nil
	}
	return nil, &NotLoadedError{edge: "workspace"}
}

// TaskColumnOrErr returns the TaskColumn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeammateTaskColumnEdges) TaskColumnOrErr() (*TaskColumn, error) {
	if e.loadedTypes[2] {
		if e.TaskColumn == nil {
			// The edge task_column was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: taskcolumn.Label}
		}
		return e.TaskColumn, nil
	}
	return nil, &NotLoadedError{edge: "task_column"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeammateTaskColumn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case teammatetaskcolumn.FieldDisabled, teammatetaskcolumn.FieldCustomizable:
			values[i] = new(sql.NullBool)
		case teammatetaskcolumn.FieldOrder:
			values[i] = new(sql.NullInt64)
		case teammatetaskcolumn.FieldWidth:
			values[i] = new(sql.NullString)
		case teammatetaskcolumn.FieldCreatedAt, teammatetaskcolumn.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case teammatetaskcolumn.FieldID, teammatetaskcolumn.FieldTeammateID, teammatetaskcolumn.FieldTaskColumnID, teammatetaskcolumn.FieldWorkspaceID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TeammateTaskColumn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeammateTaskColumn fields.
func (ttc *TeammateTaskColumn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teammatetaskcolumn.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ttc.ID = *value
			}
		case teammatetaskcolumn.FieldTeammateID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field teammate_id", values[i])
			} else if value != nil {
				ttc.TeammateID = *value
			}
		case teammatetaskcolumn.FieldTaskColumnID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field task_column_id", values[i])
			} else if value != nil {
				ttc.TaskColumnID = *value
			}
		case teammatetaskcolumn.FieldWorkspaceID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value != nil {
				ttc.WorkspaceID = *value
			}
		case teammatetaskcolumn.FieldWidth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				ttc.Width = value.String
			}
		case teammatetaskcolumn.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				ttc.Disabled = value.Bool
			}
		case teammatetaskcolumn.FieldCustomizable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field customizable", values[i])
			} else if value.Valid {
				ttc.Customizable = value.Bool
			}
		case teammatetaskcolumn.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ttc.Order = int(value.Int64)
			}
		case teammatetaskcolumn.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ttc.CreatedAt = value.Time
			}
		case teammatetaskcolumn.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ttc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTeammate queries the "teammate" edge of the TeammateTaskColumn entity.
func (ttc *TeammateTaskColumn) QueryTeammate() *TeammateQuery {
	return (&TeammateTaskColumnClient{config: ttc.config}).QueryTeammate(ttc)
}

// QueryWorkspace queries the "workspace" edge of the TeammateTaskColumn entity.
func (ttc *TeammateTaskColumn) QueryWorkspace() *WorkspaceQuery {
	return (&TeammateTaskColumnClient{config: ttc.config}).QueryWorkspace(ttc)
}

// QueryTaskColumn queries the "task_column" edge of the TeammateTaskColumn entity.
func (ttc *TeammateTaskColumn) QueryTaskColumn() *TaskColumnQuery {
	return (&TeammateTaskColumnClient{config: ttc.config}).QueryTaskColumn(ttc)
}

// Update returns a builder for updating this TeammateTaskColumn.
// Note that you need to call TeammateTaskColumn.Unwrap() before calling this method if this TeammateTaskColumn
// was returned from a transaction, and the transaction was committed or rolled back.
func (ttc *TeammateTaskColumn) Update() *TeammateTaskColumnUpdateOne {
	return (&TeammateTaskColumnClient{config: ttc.config}).UpdateOne(ttc)
}

// Unwrap unwraps the TeammateTaskColumn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ttc *TeammateTaskColumn) Unwrap() *TeammateTaskColumn {
	tx, ok := ttc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeammateTaskColumn is not a transactional entity")
	}
	ttc.config.driver = tx.drv
	return ttc
}

// String implements the fmt.Stringer.
func (ttc *TeammateTaskColumn) String() string {
	var builder strings.Builder
	builder.WriteString("TeammateTaskColumn(")
	builder.WriteString(fmt.Sprintf("id=%v", ttc.ID))
	builder.WriteString(", teammate_id=")
	builder.WriteString(fmt.Sprintf("%v", ttc.TeammateID))
	builder.WriteString(", task_column_id=")
	builder.WriteString(fmt.Sprintf("%v", ttc.TaskColumnID))
	builder.WriteString(", workspace_id=")
	builder.WriteString(fmt.Sprintf("%v", ttc.WorkspaceID))
	builder.WriteString(", width=")
	builder.WriteString(ttc.Width)
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", ttc.Disabled))
	builder.WriteString(", customizable=")
	builder.WriteString(fmt.Sprintf("%v", ttc.Customizable))
	builder.WriteString(", order=")
	builder.WriteString(fmt.Sprintf("%v", ttc.Order))
	builder.WriteString(", created_at=")
	builder.WriteString(ttc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ttc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TeammateTaskColumns is a parsable slice of TeammateTaskColumn.
type TeammateTaskColumns []*TeammateTaskColumn

func (ttc TeammateTaskColumns) config(cfg config) {
	for _i := range ttc {
		ttc[_i].config = cfg
	}
}
