// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"project-management-demo-backend/ent/color"
	"project-management-demo-backend/ent/favoriteproject"
	"project-management-demo-backend/ent/favoriteworkspace"
	"project-management-demo-backend/ent/icon"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/project"
	"project-management-demo-backend/ent/projectbasecolor"
	"project-management-demo-backend/ent/projecticon"
	"project-management-demo-backend/ent/projectlightcolor"
	"project-management-demo-backend/ent/projecttaskcolumn"
	"project-management-demo-backend/ent/projecttaskliststatus"
	"project-management-demo-backend/ent/projecttasksection"
	"project-management-demo-backend/ent/projectteammate"
	"project-management-demo-backend/ent/schema/editor"
	"project-management-demo-backend/ent/schema/testuserprofile"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/taskcolumn"
	"project-management-demo-backend/ent/tasklistcompletedstatus"
	"project-management-demo-backend/ent/tasklistsortstatus"
	"project-management-demo-backend/ent/taskpriority"
	"project-management-demo-backend/ent/tasksection"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetaskcolumn"
	"project-management-demo-backend/ent/teammatetaskliststatus"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/teammatetasktabstatus"
	"project-management-demo-backend/ent/testtodo"
	"project-management-demo-backend/ent/testuser"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceteammate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeColor                   = "Color"
	TypeFavoriteProject         = "FavoriteProject"
	TypeFavoriteWorkspace       = "FavoriteWorkspace"
	TypeIcon                    = "Icon"
	TypeProject                 = "Project"
	TypeProjectBaseColor        = "ProjectBaseColor"
	TypeProjectIcon             = "ProjectIcon"
	TypeProjectLightColor       = "ProjectLightColor"
	TypeProjectTaskColumn       = "ProjectTaskColumn"
	TypeProjectTaskListStatus   = "ProjectTaskListStatus"
	TypeProjectTaskSection      = "ProjectTaskSection"
	TypeProjectTeammate         = "ProjectTeammate"
	TypeTask                    = "Task"
	TypeTaskColumn              = "TaskColumn"
	TypeTaskListCompletedStatus = "TaskListCompletedStatus"
	TypeTaskListSortStatus      = "TaskListSortStatus"
	TypeTaskPriority            = "TaskPriority"
	TypeTaskSection             = "TaskSection"
	TypeTeammate                = "Teammate"
	TypeTeammateTaskColumn      = "TeammateTaskColumn"
	TypeTeammateTaskListStatus  = "TeammateTaskListStatus"
	TypeTeammateTaskSection     = "TeammateTaskSection"
	TypeTeammateTaskTabStatus   = "TeammateTaskTabStatus"
	TypeTestTodo                = "TestTodo"
	TypeTestUser                = "TestUser"
	TypeWorkspace               = "Workspace"
	TypeWorkspaceTeammate       = "WorkspaceTeammate"
)

// ColorMutation represents an operation that mutates the Color nodes in the graph.
type ColorMutation struct {
	config
	op                          Op
	typ                         string
	id                          *ulid.ID
	name                        *string
	color                       *string
	hex                         *string
	created_at                  *time.Time
	updated_at                  *time.Time
	clearedFields               map[string]struct{}
	project_base_colors         map[ulid.ID]struct{}
	removedproject_base_colors  map[ulid.ID]struct{}
	clearedproject_base_colors  bool
	project_light_colors        map[ulid.ID]struct{}
	removedproject_light_colors map[ulid.ID]struct{}
	clearedproject_light_colors bool
	task_priorities             map[ulid.ID]struct{}
	removedtask_priorities      map[ulid.ID]struct{}
	clearedtask_priorities      bool
	done                        bool
	oldValue                    func(context.Context) (*Color, error)
	predicates                  []predicate.Color
}

var _ ent.Mutation = (*ColorMutation)(nil)

// colorOption allows management of the mutation configuration using functional options.
type colorOption func(*ColorMutation)

// newColorMutation creates new mutation for the Color entity.
func newColorMutation(c config, op Op, opts ...colorOption) *ColorMutation {
	m := &ColorMutation{
		config:        c,
		op:            op,
		typ:           TypeColor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withColorID sets the ID field of the mutation.
func withColorID(id ulid.ID) colorOption {
	return func(m *ColorMutation) {
		var (
			err   error
			once  sync.Once
			value *Color
		)
		m.oldValue = func(ctx context.Context) (*Color, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Color.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withColor sets the old Color of the mutation.
func withColor(node *Color) colorOption {
	return func(m *ColorMutation) {
		m.oldValue = func(context.Context) (*Color, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ColorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ColorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Color entities.
func (m *ColorMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ColorMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ColorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ColorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Color entity.
// If the Color object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ColorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ColorMutation) ResetName() {
	m.name = nil
}

// SetColor sets the "color" field.
func (m *ColorMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *ColorMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Color entity.
// If the Color object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ColorMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "color" field.
func (m *ColorMutation) ResetColor() {
	m.color = nil
}

// SetHex sets the "hex" field.
func (m *ColorMutation) SetHex(s string) {
	m.hex = &s
}

// Hex returns the value of the "hex" field in the mutation.
func (m *ColorMutation) Hex() (r string, exists bool) {
	v := m.hex
	if v == nil {
		return
	}
	return *v, true
}

// OldHex returns the old "hex" field's value of the Color entity.
// If the Color object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ColorMutation) OldHex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHex: %w", err)
	}
	return oldValue.Hex, nil
}

// ResetHex resets all changes to the "hex" field.
func (m *ColorMutation) ResetHex() {
	m.hex = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ColorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ColorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Color entity.
// If the Color object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ColorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ColorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ColorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ColorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Color entity.
// If the Color object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ColorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ColorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProjectBaseColorIDs adds the "project_base_colors" edge to the ProjectBaseColor entity by ids.
func (m *ColorMutation) AddProjectBaseColorIDs(ids ...ulid.ID) {
	if m.project_base_colors == nil {
		m.project_base_colors = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_base_colors[ids[i]] = struct{}{}
	}
}

// ClearProjectBaseColors clears the "project_base_colors" edge to the ProjectBaseColor entity.
func (m *ColorMutation) ClearProjectBaseColors() {
	m.clearedproject_base_colors = true
}

// ProjectBaseColorsCleared reports if the "project_base_colors" edge to the ProjectBaseColor entity was cleared.
func (m *ColorMutation) ProjectBaseColorsCleared() bool {
	return m.clearedproject_base_colors
}

// RemoveProjectBaseColorIDs removes the "project_base_colors" edge to the ProjectBaseColor entity by IDs.
func (m *ColorMutation) RemoveProjectBaseColorIDs(ids ...ulid.ID) {
	if m.removedproject_base_colors == nil {
		m.removedproject_base_colors = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_base_colors, ids[i])
		m.removedproject_base_colors[ids[i]] = struct{}{}
	}
}

// RemovedProjectBaseColors returns the removed IDs of the "project_base_colors" edge to the ProjectBaseColor entity.
func (m *ColorMutation) RemovedProjectBaseColorsIDs() (ids []ulid.ID) {
	for id := range m.removedproject_base_colors {
		ids = append(ids, id)
	}
	return
}

// ProjectBaseColorsIDs returns the "project_base_colors" edge IDs in the mutation.
func (m *ColorMutation) ProjectBaseColorsIDs() (ids []ulid.ID) {
	for id := range m.project_base_colors {
		ids = append(ids, id)
	}
	return
}

// ResetProjectBaseColors resets all changes to the "project_base_colors" edge.
func (m *ColorMutation) ResetProjectBaseColors() {
	m.project_base_colors = nil
	m.clearedproject_base_colors = false
	m.removedproject_base_colors = nil
}

// AddProjectLightColorIDs adds the "project_light_colors" edge to the ProjectLightColor entity by ids.
func (m *ColorMutation) AddProjectLightColorIDs(ids ...ulid.ID) {
	if m.project_light_colors == nil {
		m.project_light_colors = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_light_colors[ids[i]] = struct{}{}
	}
}

// ClearProjectLightColors clears the "project_light_colors" edge to the ProjectLightColor entity.
func (m *ColorMutation) ClearProjectLightColors() {
	m.clearedproject_light_colors = true
}

// ProjectLightColorsCleared reports if the "project_light_colors" edge to the ProjectLightColor entity was cleared.
func (m *ColorMutation) ProjectLightColorsCleared() bool {
	return m.clearedproject_light_colors
}

// RemoveProjectLightColorIDs removes the "project_light_colors" edge to the ProjectLightColor entity by IDs.
func (m *ColorMutation) RemoveProjectLightColorIDs(ids ...ulid.ID) {
	if m.removedproject_light_colors == nil {
		m.removedproject_light_colors = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_light_colors, ids[i])
		m.removedproject_light_colors[ids[i]] = struct{}{}
	}
}

// RemovedProjectLightColors returns the removed IDs of the "project_light_colors" edge to the ProjectLightColor entity.
func (m *ColorMutation) RemovedProjectLightColorsIDs() (ids []ulid.ID) {
	for id := range m.removedproject_light_colors {
		ids = append(ids, id)
	}
	return
}

// ProjectLightColorsIDs returns the "project_light_colors" edge IDs in the mutation.
func (m *ColorMutation) ProjectLightColorsIDs() (ids []ulid.ID) {
	for id := range m.project_light_colors {
		ids = append(ids, id)
	}
	return
}

// ResetProjectLightColors resets all changes to the "project_light_colors" edge.
func (m *ColorMutation) ResetProjectLightColors() {
	m.project_light_colors = nil
	m.clearedproject_light_colors = false
	m.removedproject_light_colors = nil
}

// AddTaskPriorityIDs adds the "task_priorities" edge to the TaskPriority entity by ids.
func (m *ColorMutation) AddTaskPriorityIDs(ids ...ulid.ID) {
	if m.task_priorities == nil {
		m.task_priorities = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.task_priorities[ids[i]] = struct{}{}
	}
}

// ClearTaskPriorities clears the "task_priorities" edge to the TaskPriority entity.
func (m *ColorMutation) ClearTaskPriorities() {
	m.clearedtask_priorities = true
}

// TaskPrioritiesCleared reports if the "task_priorities" edge to the TaskPriority entity was cleared.
func (m *ColorMutation) TaskPrioritiesCleared() bool {
	return m.clearedtask_priorities
}

// RemoveTaskPriorityIDs removes the "task_priorities" edge to the TaskPriority entity by IDs.
func (m *ColorMutation) RemoveTaskPriorityIDs(ids ...ulid.ID) {
	if m.removedtask_priorities == nil {
		m.removedtask_priorities = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.task_priorities, ids[i])
		m.removedtask_priorities[ids[i]] = struct{}{}
	}
}

// RemovedTaskPriorities returns the removed IDs of the "task_priorities" edge to the TaskPriority entity.
func (m *ColorMutation) RemovedTaskPrioritiesIDs() (ids []ulid.ID) {
	for id := range m.removedtask_priorities {
		ids = append(ids, id)
	}
	return
}

// TaskPrioritiesIDs returns the "task_priorities" edge IDs in the mutation.
func (m *ColorMutation) TaskPrioritiesIDs() (ids []ulid.ID) {
	for id := range m.task_priorities {
		ids = append(ids, id)
	}
	return
}

// ResetTaskPriorities resets all changes to the "task_priorities" edge.
func (m *ColorMutation) ResetTaskPriorities() {
	m.task_priorities = nil
	m.clearedtask_priorities = false
	m.removedtask_priorities = nil
}

// Where appends a list predicates to the ColorMutation builder.
func (m *ColorMutation) Where(ps ...predicate.Color) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ColorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Color).
func (m *ColorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ColorMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, color.FieldName)
	}
	if m.color != nil {
		fields = append(fields, color.FieldColor)
	}
	if m.hex != nil {
		fields = append(fields, color.FieldHex)
	}
	if m.created_at != nil {
		fields = append(fields, color.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, color.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ColorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case color.FieldName:
		return m.Name()
	case color.FieldColor:
		return m.Color()
	case color.FieldHex:
		return m.Hex()
	case color.FieldCreatedAt:
		return m.CreatedAt()
	case color.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ColorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case color.FieldName:
		return m.OldName(ctx)
	case color.FieldColor:
		return m.OldColor(ctx)
	case color.FieldHex:
		return m.OldHex(ctx)
	case color.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case color.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Color field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ColorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case color.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case color.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case color.FieldHex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHex(v)
		return nil
	case color.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case color.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Color field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ColorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ColorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ColorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Color numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ColorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ColorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ColorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Color nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ColorMutation) ResetField(name string) error {
	switch name {
	case color.FieldName:
		m.ResetName()
		return nil
	case color.FieldColor:
		m.ResetColor()
		return nil
	case color.FieldHex:
		m.ResetHex()
		return nil
	case color.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case color.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Color field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ColorMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.project_base_colors != nil {
		edges = append(edges, color.EdgeProjectBaseColors)
	}
	if m.project_light_colors != nil {
		edges = append(edges, color.EdgeProjectLightColors)
	}
	if m.task_priorities != nil {
		edges = append(edges, color.EdgeTaskPriorities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ColorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case color.EdgeProjectBaseColors:
		ids := make([]ent.Value, 0, len(m.project_base_colors))
		for id := range m.project_base_colors {
			ids = append(ids, id)
		}
		return ids
	case color.EdgeProjectLightColors:
		ids := make([]ent.Value, 0, len(m.project_light_colors))
		for id := range m.project_light_colors {
			ids = append(ids, id)
		}
		return ids
	case color.EdgeTaskPriorities:
		ids := make([]ent.Value, 0, len(m.task_priorities))
		for id := range m.task_priorities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ColorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedproject_base_colors != nil {
		edges = append(edges, color.EdgeProjectBaseColors)
	}
	if m.removedproject_light_colors != nil {
		edges = append(edges, color.EdgeProjectLightColors)
	}
	if m.removedtask_priorities != nil {
		edges = append(edges, color.EdgeTaskPriorities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ColorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case color.EdgeProjectBaseColors:
		ids := make([]ent.Value, 0, len(m.removedproject_base_colors))
		for id := range m.removedproject_base_colors {
			ids = append(ids, id)
		}
		return ids
	case color.EdgeProjectLightColors:
		ids := make([]ent.Value, 0, len(m.removedproject_light_colors))
		for id := range m.removedproject_light_colors {
			ids = append(ids, id)
		}
		return ids
	case color.EdgeTaskPriorities:
		ids := make([]ent.Value, 0, len(m.removedtask_priorities))
		for id := range m.removedtask_priorities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ColorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproject_base_colors {
		edges = append(edges, color.EdgeProjectBaseColors)
	}
	if m.clearedproject_light_colors {
		edges = append(edges, color.EdgeProjectLightColors)
	}
	if m.clearedtask_priorities {
		edges = append(edges, color.EdgeTaskPriorities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ColorMutation) EdgeCleared(name string) bool {
	switch name {
	case color.EdgeProjectBaseColors:
		return m.clearedproject_base_colors
	case color.EdgeProjectLightColors:
		return m.clearedproject_light_colors
	case color.EdgeTaskPriorities:
		return m.clearedtask_priorities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ColorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Color unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ColorMutation) ResetEdge(name string) error {
	switch name {
	case color.EdgeProjectBaseColors:
		m.ResetProjectBaseColors()
		return nil
	case color.EdgeProjectLightColors:
		m.ResetProjectLightColors()
		return nil
	case color.EdgeTaskPriorities:
		m.ResetTaskPriorities()
		return nil
	}
	return fmt.Errorf("unknown Color edge %s", name)
}

// FavoriteProjectMutation represents an operation that mutates the FavoriteProject nodes in the graph.
type FavoriteProjectMutation struct {
	config
	op              Op
	typ             string
	id              *ulid.ID
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	project         *ulid.ID
	clearedproject  bool
	teammate        *ulid.ID
	clearedteammate bool
	done            bool
	oldValue        func(context.Context) (*FavoriteProject, error)
	predicates      []predicate.FavoriteProject
}

var _ ent.Mutation = (*FavoriteProjectMutation)(nil)

// favoriteprojectOption allows management of the mutation configuration using functional options.
type favoriteprojectOption func(*FavoriteProjectMutation)

// newFavoriteProjectMutation creates new mutation for the FavoriteProject entity.
func newFavoriteProjectMutation(c config, op Op, opts ...favoriteprojectOption) *FavoriteProjectMutation {
	m := &FavoriteProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeFavoriteProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFavoriteProjectID sets the ID field of the mutation.
func withFavoriteProjectID(id ulid.ID) favoriteprojectOption {
	return func(m *FavoriteProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *FavoriteProject
		)
		m.oldValue = func(ctx context.Context) (*FavoriteProject, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FavoriteProject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFavoriteProject sets the old FavoriteProject of the mutation.
func withFavoriteProject(node *FavoriteProject) favoriteprojectOption {
	return func(m *FavoriteProjectMutation) {
		m.oldValue = func(context.Context) (*FavoriteProject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FavoriteProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FavoriteProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FavoriteProject entities.
func (m *FavoriteProjectMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FavoriteProjectMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProjectID sets the "project_id" field.
func (m *FavoriteProjectMutation) SetProjectID(u ulid.ID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *FavoriteProjectMutation) ProjectID() (r ulid.ID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the FavoriteProject entity.
// If the FavoriteProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteProjectMutation) OldProjectID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *FavoriteProjectMutation) ResetProjectID() {
	m.project = nil
}

// SetTeammateID sets the "teammate_id" field.
func (m *FavoriteProjectMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *FavoriteProjectMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the FavoriteProject entity.
// If the FavoriteProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteProjectMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *FavoriteProjectMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FavoriteProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FavoriteProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FavoriteProject entity.
// If the FavoriteProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FavoriteProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FavoriteProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FavoriteProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FavoriteProject entity.
// If the FavoriteProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FavoriteProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *FavoriteProjectMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *FavoriteProjectMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *FavoriteProjectMutation) ProjectIDs() (ids []ulid.ID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *FavoriteProjectMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *FavoriteProjectMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *FavoriteProjectMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *FavoriteProjectMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *FavoriteProjectMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// Where appends a list predicates to the FavoriteProjectMutation builder.
func (m *FavoriteProjectMutation) Where(ps ...predicate.FavoriteProject) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FavoriteProjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FavoriteProject).
func (m *FavoriteProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FavoriteProjectMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.project != nil {
		fields = append(fields, favoriteproject.FieldProjectID)
	}
	if m.teammate != nil {
		fields = append(fields, favoriteproject.FieldTeammateID)
	}
	if m.created_at != nil {
		fields = append(fields, favoriteproject.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, favoriteproject.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FavoriteProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case favoriteproject.FieldProjectID:
		return m.ProjectID()
	case favoriteproject.FieldTeammateID:
		return m.TeammateID()
	case favoriteproject.FieldCreatedAt:
		return m.CreatedAt()
	case favoriteproject.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FavoriteProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case favoriteproject.FieldProjectID:
		return m.OldProjectID(ctx)
	case favoriteproject.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case favoriteproject.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case favoriteproject.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FavoriteProject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FavoriteProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case favoriteproject.FieldProjectID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case favoriteproject.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case favoriteproject.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case favoriteproject.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FavoriteProject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FavoriteProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FavoriteProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FavoriteProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FavoriteProject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FavoriteProjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FavoriteProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FavoriteProjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FavoriteProject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FavoriteProjectMutation) ResetField(name string) error {
	switch name {
	case favoriteproject.FieldProjectID:
		m.ResetProjectID()
		return nil
	case favoriteproject.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case favoriteproject.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case favoriteproject.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FavoriteProject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FavoriteProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, favoriteproject.EdgeProject)
	}
	if m.teammate != nil {
		edges = append(edges, favoriteproject.EdgeTeammate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FavoriteProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case favoriteproject.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case favoriteproject.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FavoriteProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FavoriteProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FavoriteProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, favoriteproject.EdgeProject)
	}
	if m.clearedteammate {
		edges = append(edges, favoriteproject.EdgeTeammate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FavoriteProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case favoriteproject.EdgeProject:
		return m.clearedproject
	case favoriteproject.EdgeTeammate:
		return m.clearedteammate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FavoriteProjectMutation) ClearEdge(name string) error {
	switch name {
	case favoriteproject.EdgeProject:
		m.ClearProject()
		return nil
	case favoriteproject.EdgeTeammate:
		m.ClearTeammate()
		return nil
	}
	return fmt.Errorf("unknown FavoriteProject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FavoriteProjectMutation) ResetEdge(name string) error {
	switch name {
	case favoriteproject.EdgeProject:
		m.ResetProject()
		return nil
	case favoriteproject.EdgeTeammate:
		m.ResetTeammate()
		return nil
	}
	return fmt.Errorf("unknown FavoriteProject edge %s", name)
}

// FavoriteWorkspaceMutation represents an operation that mutates the FavoriteWorkspace nodes in the graph.
type FavoriteWorkspaceMutation struct {
	config
	op               Op
	typ              string
	id               *ulid.ID
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	workspace        *ulid.ID
	clearedworkspace bool
	teammate         *ulid.ID
	clearedteammate  bool
	done             bool
	oldValue         func(context.Context) (*FavoriteWorkspace, error)
	predicates       []predicate.FavoriteWorkspace
}

var _ ent.Mutation = (*FavoriteWorkspaceMutation)(nil)

// favoriteworkspaceOption allows management of the mutation configuration using functional options.
type favoriteworkspaceOption func(*FavoriteWorkspaceMutation)

// newFavoriteWorkspaceMutation creates new mutation for the FavoriteWorkspace entity.
func newFavoriteWorkspaceMutation(c config, op Op, opts ...favoriteworkspaceOption) *FavoriteWorkspaceMutation {
	m := &FavoriteWorkspaceMutation{
		config:        c,
		op:            op,
		typ:           TypeFavoriteWorkspace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFavoriteWorkspaceID sets the ID field of the mutation.
func withFavoriteWorkspaceID(id ulid.ID) favoriteworkspaceOption {
	return func(m *FavoriteWorkspaceMutation) {
		var (
			err   error
			once  sync.Once
			value *FavoriteWorkspace
		)
		m.oldValue = func(ctx context.Context) (*FavoriteWorkspace, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FavoriteWorkspace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFavoriteWorkspace sets the old FavoriteWorkspace of the mutation.
func withFavoriteWorkspace(node *FavoriteWorkspace) favoriteworkspaceOption {
	return func(m *FavoriteWorkspaceMutation) {
		m.oldValue = func(context.Context) (*FavoriteWorkspace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FavoriteWorkspaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FavoriteWorkspaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FavoriteWorkspace entities.
func (m *FavoriteWorkspaceMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FavoriteWorkspaceMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetWorkspaceID sets the "workspace_id" field.
func (m *FavoriteWorkspaceMutation) SetWorkspaceID(u ulid.ID) {
	m.workspace = &u
}

// WorkspaceID returns the value of the "workspace_id" field in the mutation.
func (m *FavoriteWorkspaceMutation) WorkspaceID() (r ulid.ID, exists bool) {
	v := m.workspace
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkspaceID returns the old "workspace_id" field's value of the FavoriteWorkspace entity.
// If the FavoriteWorkspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteWorkspaceMutation) OldWorkspaceID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWorkspaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWorkspaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkspaceID: %w", err)
	}
	return oldValue.WorkspaceID, nil
}

// ResetWorkspaceID resets all changes to the "workspace_id" field.
func (m *FavoriteWorkspaceMutation) ResetWorkspaceID() {
	m.workspace = nil
}

// SetTeammateID sets the "teammate_id" field.
func (m *FavoriteWorkspaceMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *FavoriteWorkspaceMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the FavoriteWorkspace entity.
// If the FavoriteWorkspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteWorkspaceMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *FavoriteWorkspaceMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FavoriteWorkspaceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FavoriteWorkspaceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FavoriteWorkspace entity.
// If the FavoriteWorkspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteWorkspaceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FavoriteWorkspaceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FavoriteWorkspaceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FavoriteWorkspaceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FavoriteWorkspace entity.
// If the FavoriteWorkspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteWorkspaceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FavoriteWorkspaceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (m *FavoriteWorkspaceMutation) ClearWorkspace() {
	m.clearedworkspace = true
}

// WorkspaceCleared reports if the "workspace" edge to the Workspace entity was cleared.
func (m *FavoriteWorkspaceMutation) WorkspaceCleared() bool {
	return m.clearedworkspace
}

// WorkspaceIDs returns the "workspace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkspaceID instead. It exists only for internal usage by the builders.
func (m *FavoriteWorkspaceMutation) WorkspaceIDs() (ids []ulid.ID) {
	if id := m.workspace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkspace resets all changes to the "workspace" edge.
func (m *FavoriteWorkspaceMutation) ResetWorkspace() {
	m.workspace = nil
	m.clearedworkspace = false
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *FavoriteWorkspaceMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *FavoriteWorkspaceMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *FavoriteWorkspaceMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *FavoriteWorkspaceMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// Where appends a list predicates to the FavoriteWorkspaceMutation builder.
func (m *FavoriteWorkspaceMutation) Where(ps ...predicate.FavoriteWorkspace) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FavoriteWorkspaceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FavoriteWorkspace).
func (m *FavoriteWorkspaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FavoriteWorkspaceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.workspace != nil {
		fields = append(fields, favoriteworkspace.FieldWorkspaceID)
	}
	if m.teammate != nil {
		fields = append(fields, favoriteworkspace.FieldTeammateID)
	}
	if m.created_at != nil {
		fields = append(fields, favoriteworkspace.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, favoriteworkspace.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FavoriteWorkspaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case favoriteworkspace.FieldWorkspaceID:
		return m.WorkspaceID()
	case favoriteworkspace.FieldTeammateID:
		return m.TeammateID()
	case favoriteworkspace.FieldCreatedAt:
		return m.CreatedAt()
	case favoriteworkspace.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FavoriteWorkspaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case favoriteworkspace.FieldWorkspaceID:
		return m.OldWorkspaceID(ctx)
	case favoriteworkspace.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case favoriteworkspace.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case favoriteworkspace.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FavoriteWorkspace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FavoriteWorkspaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case favoriteworkspace.FieldWorkspaceID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkspaceID(v)
		return nil
	case favoriteworkspace.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case favoriteworkspace.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case favoriteworkspace.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FavoriteWorkspace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FavoriteWorkspaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FavoriteWorkspaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FavoriteWorkspaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FavoriteWorkspace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FavoriteWorkspaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FavoriteWorkspaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FavoriteWorkspaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FavoriteWorkspace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FavoriteWorkspaceMutation) ResetField(name string) error {
	switch name {
	case favoriteworkspace.FieldWorkspaceID:
		m.ResetWorkspaceID()
		return nil
	case favoriteworkspace.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case favoriteworkspace.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case favoriteworkspace.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FavoriteWorkspace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FavoriteWorkspaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.workspace != nil {
		edges = append(edges, favoriteworkspace.EdgeWorkspace)
	}
	if m.teammate != nil {
		edges = append(edges, favoriteworkspace.EdgeTeammate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FavoriteWorkspaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case favoriteworkspace.EdgeWorkspace:
		if id := m.workspace; id != nil {
			return []ent.Value{*id}
		}
	case favoriteworkspace.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FavoriteWorkspaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FavoriteWorkspaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FavoriteWorkspaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedworkspace {
		edges = append(edges, favoriteworkspace.EdgeWorkspace)
	}
	if m.clearedteammate {
		edges = append(edges, favoriteworkspace.EdgeTeammate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FavoriteWorkspaceMutation) EdgeCleared(name string) bool {
	switch name {
	case favoriteworkspace.EdgeWorkspace:
		return m.clearedworkspace
	case favoriteworkspace.EdgeTeammate:
		return m.clearedteammate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FavoriteWorkspaceMutation) ClearEdge(name string) error {
	switch name {
	case favoriteworkspace.EdgeWorkspace:
		m.ClearWorkspace()
		return nil
	case favoriteworkspace.EdgeTeammate:
		m.ClearTeammate()
		return nil
	}
	return fmt.Errorf("unknown FavoriteWorkspace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FavoriteWorkspaceMutation) ResetEdge(name string) error {
	switch name {
	case favoriteworkspace.EdgeWorkspace:
		m.ResetWorkspace()
		return nil
	case favoriteworkspace.EdgeTeammate:
		m.ResetTeammate()
		return nil
	}
	return fmt.Errorf("unknown FavoriteWorkspace edge %s", name)
}

// IconMutation represents an operation that mutates the Icon nodes in the graph.
type IconMutation struct {
	config
	op                   Op
	typ                  string
	id                   *ulid.ID
	name                 *string
	icon                 *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	project_icons        map[ulid.ID]struct{}
	removedproject_icons map[ulid.ID]struct{}
	clearedproject_icons bool
	done                 bool
	oldValue             func(context.Context) (*Icon, error)
	predicates           []predicate.Icon
}

var _ ent.Mutation = (*IconMutation)(nil)

// iconOption allows management of the mutation configuration using functional options.
type iconOption func(*IconMutation)

// newIconMutation creates new mutation for the Icon entity.
func newIconMutation(c config, op Op, opts ...iconOption) *IconMutation {
	m := &IconMutation{
		config:        c,
		op:            op,
		typ:           TypeIcon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIconID sets the ID field of the mutation.
func withIconID(id ulid.ID) iconOption {
	return func(m *IconMutation) {
		var (
			err   error
			once  sync.Once
			value *Icon
		)
		m.oldValue = func(ctx context.Context) (*Icon, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Icon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIcon sets the old Icon of the mutation.
func withIcon(node *Icon) iconOption {
	return func(m *IconMutation) {
		m.oldValue = func(context.Context) (*Icon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IconMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IconMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Icon entities.
func (m *IconMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IconMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *IconMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IconMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Icon entity.
// If the Icon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IconMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IconMutation) ResetName() {
	m.name = nil
}

// SetIcon sets the "icon" field.
func (m *IconMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *IconMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Icon entity.
// If the Icon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IconMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *IconMutation) ResetIcon() {
	m.icon = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *IconMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IconMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Icon entity.
// If the Icon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IconMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IconMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IconMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IconMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Icon entity.
// If the Icon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IconMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IconMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProjectIconIDs adds the "project_icons" edge to the ProjectIcon entity by ids.
func (m *IconMutation) AddProjectIconIDs(ids ...ulid.ID) {
	if m.project_icons == nil {
		m.project_icons = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_icons[ids[i]] = struct{}{}
	}
}

// ClearProjectIcons clears the "project_icons" edge to the ProjectIcon entity.
func (m *IconMutation) ClearProjectIcons() {
	m.clearedproject_icons = true
}

// ProjectIconsCleared reports if the "project_icons" edge to the ProjectIcon entity was cleared.
func (m *IconMutation) ProjectIconsCleared() bool {
	return m.clearedproject_icons
}

// RemoveProjectIconIDs removes the "project_icons" edge to the ProjectIcon entity by IDs.
func (m *IconMutation) RemoveProjectIconIDs(ids ...ulid.ID) {
	if m.removedproject_icons == nil {
		m.removedproject_icons = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_icons, ids[i])
		m.removedproject_icons[ids[i]] = struct{}{}
	}
}

// RemovedProjectIcons returns the removed IDs of the "project_icons" edge to the ProjectIcon entity.
func (m *IconMutation) RemovedProjectIconsIDs() (ids []ulid.ID) {
	for id := range m.removedproject_icons {
		ids = append(ids, id)
	}
	return
}

// ProjectIconsIDs returns the "project_icons" edge IDs in the mutation.
func (m *IconMutation) ProjectIconsIDs() (ids []ulid.ID) {
	for id := range m.project_icons {
		ids = append(ids, id)
	}
	return
}

// ResetProjectIcons resets all changes to the "project_icons" edge.
func (m *IconMutation) ResetProjectIcons() {
	m.project_icons = nil
	m.clearedproject_icons = false
	m.removedproject_icons = nil
}

// Where appends a list predicates to the IconMutation builder.
func (m *IconMutation) Where(ps ...predicate.Icon) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *IconMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Icon).
func (m *IconMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IconMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, icon.FieldName)
	}
	if m.icon != nil {
		fields = append(fields, icon.FieldIcon)
	}
	if m.created_at != nil {
		fields = append(fields, icon.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, icon.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IconMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case icon.FieldName:
		return m.Name()
	case icon.FieldIcon:
		return m.Icon()
	case icon.FieldCreatedAt:
		return m.CreatedAt()
	case icon.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IconMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case icon.FieldName:
		return m.OldName(ctx)
	case icon.FieldIcon:
		return m.OldIcon(ctx)
	case icon.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case icon.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Icon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IconMutation) SetField(name string, value ent.Value) error {
	switch name {
	case icon.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case icon.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case icon.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case icon.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Icon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IconMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IconMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IconMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Icon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IconMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IconMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IconMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Icon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IconMutation) ResetField(name string) error {
	switch name {
	case icon.FieldName:
		m.ResetName()
		return nil
	case icon.FieldIcon:
		m.ResetIcon()
		return nil
	case icon.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case icon.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Icon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IconMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project_icons != nil {
		edges = append(edges, icon.EdgeProjectIcons)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IconMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case icon.EdgeProjectIcons:
		ids := make([]ent.Value, 0, len(m.project_icons))
		for id := range m.project_icons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IconMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproject_icons != nil {
		edges = append(edges, icon.EdgeProjectIcons)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IconMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case icon.EdgeProjectIcons:
		ids := make([]ent.Value, 0, len(m.removedproject_icons))
		for id := range m.removedproject_icons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IconMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject_icons {
		edges = append(edges, icon.EdgeProjectIcons)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IconMutation) EdgeCleared(name string) bool {
	switch name {
	case icon.EdgeProjectIcons:
		return m.clearedproject_icons
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IconMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Icon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IconMutation) ResetEdge(name string) error {
	switch name {
	case icon.EdgeProjectIcons:
		m.ResetProjectIcons()
		return nil
	}
	return fmt.Errorf("unknown Icon edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                                Op
	typ                               string
	id                                *ulid.ID
	name                              *string
	description                       *editor.Description
	description_title                 *string
	due_date                          *time.Time
	created_at                        *time.Time
	updated_at                        *time.Time
	clearedFields                     map[string]struct{}
	workspace                         *ulid.ID
	clearedworkspace                  bool
	project_base_color                *ulid.ID
	clearedproject_base_color         bool
	project_light_color               *ulid.ID
	clearedproject_light_color        bool
	project_icon                      *ulid.ID
	clearedproject_icon               bool
	teammate                          *ulid.ID
	clearedteammate                   bool
	project_teammates                 map[ulid.ID]struct{}
	removedproject_teammates          map[ulid.ID]struct{}
	clearedproject_teammates          bool
	favorite_projects                 map[ulid.ID]struct{}
	removedfavorite_projects          map[ulid.ID]struct{}
	clearedfavorite_projects          bool
	project_task_columns              map[ulid.ID]struct{}
	removedproject_task_columns       map[ulid.ID]struct{}
	clearedproject_task_columns       bool
	project_task_list_statuses        map[ulid.ID]struct{}
	removedproject_task_list_statuses map[ulid.ID]struct{}
	clearedproject_task_list_statuses bool
	project_task_sections             map[ulid.ID]struct{}
	removedproject_task_sections      map[ulid.ID]struct{}
	clearedproject_task_sections      bool
	done                              bool
	oldValue                          func(context.Context) (*Project, error)
	predicates                        []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id ulid.ID) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Project entities.
func (m *ProjectMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetWorkspaceID sets the "workspace_id" field.
func (m *ProjectMutation) SetWorkspaceID(u ulid.ID) {
	m.workspace = &u
}

// WorkspaceID returns the value of the "workspace_id" field in the mutation.
func (m *ProjectMutation) WorkspaceID() (r ulid.ID, exists bool) {
	v := m.workspace
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkspaceID returns the old "workspace_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldWorkspaceID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWorkspaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWorkspaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkspaceID: %w", err)
	}
	return oldValue.WorkspaceID, nil
}

// ResetWorkspaceID resets all changes to the "workspace_id" field.
func (m *ProjectMutation) ResetWorkspaceID() {
	m.workspace = nil
}

// SetProjectBaseColorID sets the "project_base_color_id" field.
func (m *ProjectMutation) SetProjectBaseColorID(u ulid.ID) {
	m.project_base_color = &u
}

// ProjectBaseColorID returns the value of the "project_base_color_id" field in the mutation.
func (m *ProjectMutation) ProjectBaseColorID() (r ulid.ID, exists bool) {
	v := m.project_base_color
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectBaseColorID returns the old "project_base_color_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldProjectBaseColorID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectBaseColorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectBaseColorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectBaseColorID: %w", err)
	}
	return oldValue.ProjectBaseColorID, nil
}

// ResetProjectBaseColorID resets all changes to the "project_base_color_id" field.
func (m *ProjectMutation) ResetProjectBaseColorID() {
	m.project_base_color = nil
}

// SetProjectLightColorID sets the "project_light_color_id" field.
func (m *ProjectMutation) SetProjectLightColorID(u ulid.ID) {
	m.project_light_color = &u
}

// ProjectLightColorID returns the value of the "project_light_color_id" field in the mutation.
func (m *ProjectMutation) ProjectLightColorID() (r ulid.ID, exists bool) {
	v := m.project_light_color
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectLightColorID returns the old "project_light_color_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldProjectLightColorID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectLightColorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectLightColorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectLightColorID: %w", err)
	}
	return oldValue.ProjectLightColorID, nil
}

// ResetProjectLightColorID resets all changes to the "project_light_color_id" field.
func (m *ProjectMutation) ResetProjectLightColorID() {
	m.project_light_color = nil
}

// SetProjectIconID sets the "project_icon_id" field.
func (m *ProjectMutation) SetProjectIconID(u ulid.ID) {
	m.project_icon = &u
}

// ProjectIconID returns the value of the "project_icon_id" field in the mutation.
func (m *ProjectMutation) ProjectIconID() (r ulid.ID, exists bool) {
	v := m.project_icon
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectIconID returns the old "project_icon_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldProjectIconID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectIconID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectIconID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectIconID: %w", err)
	}
	return oldValue.ProjectIconID, nil
}

// ResetProjectIconID resets all changes to the "project_icon_id" field.
func (m *ProjectMutation) ResetProjectIconID() {
	m.project_icon = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *ProjectMutation) SetCreatedBy(u ulid.ID) {
	m.teammate = &u
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *ProjectMutation) CreatedBy() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedBy(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *ProjectMutation) ResetCreatedBy() {
	m.teammate = nil
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(e editor.Description) {
	m.description = &e
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r editor.Description, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v editor.Description, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
}

// SetDescriptionTitle sets the "description_title" field.
func (m *ProjectMutation) SetDescriptionTitle(s string) {
	m.description_title = &s
}

// DescriptionTitle returns the value of the "description_title" field in the mutation.
func (m *ProjectMutation) DescriptionTitle() (r string, exists bool) {
	v := m.description_title
	if v == nil {
		return
	}
	return *v, true
}

// OldDescriptionTitle returns the old "description_title" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescriptionTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescriptionTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescriptionTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescriptionTitle: %w", err)
	}
	return oldValue.DescriptionTitle, nil
}

// ResetDescriptionTitle resets all changes to the "description_title" field.
func (m *ProjectMutation) ResetDescriptionTitle() {
	m.description_title = nil
}

// SetDueDate sets the "due_date" field.
func (m *ProjectMutation) SetDueDate(t time.Time) {
	m.due_date = &t
}

// DueDate returns the value of the "due_date" field in the mutation.
func (m *ProjectMutation) DueDate() (r time.Time, exists bool) {
	v := m.due_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "due_date" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDueDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ResetDueDate resets all changes to the "due_date" field.
func (m *ProjectMutation) ResetDueDate() {
	m.due_date = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (m *ProjectMutation) ClearWorkspace() {
	m.clearedworkspace = true
}

// WorkspaceCleared reports if the "workspace" edge to the Workspace entity was cleared.
func (m *ProjectMutation) WorkspaceCleared() bool {
	return m.clearedworkspace
}

// WorkspaceIDs returns the "workspace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkspaceID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) WorkspaceIDs() (ids []ulid.ID) {
	if id := m.workspace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkspace resets all changes to the "workspace" edge.
func (m *ProjectMutation) ResetWorkspace() {
	m.workspace = nil
	m.clearedworkspace = false
}

// ClearProjectBaseColor clears the "project_base_color" edge to the ProjectBaseColor entity.
func (m *ProjectMutation) ClearProjectBaseColor() {
	m.clearedproject_base_color = true
}

// ProjectBaseColorCleared reports if the "project_base_color" edge to the ProjectBaseColor entity was cleared.
func (m *ProjectMutation) ProjectBaseColorCleared() bool {
	return m.clearedproject_base_color
}

// ProjectBaseColorIDs returns the "project_base_color" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectBaseColorID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) ProjectBaseColorIDs() (ids []ulid.ID) {
	if id := m.project_base_color; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProjectBaseColor resets all changes to the "project_base_color" edge.
func (m *ProjectMutation) ResetProjectBaseColor() {
	m.project_base_color = nil
	m.clearedproject_base_color = false
}

// ClearProjectLightColor clears the "project_light_color" edge to the ProjectLightColor entity.
func (m *ProjectMutation) ClearProjectLightColor() {
	m.clearedproject_light_color = true
}

// ProjectLightColorCleared reports if the "project_light_color" edge to the ProjectLightColor entity was cleared.
func (m *ProjectMutation) ProjectLightColorCleared() bool {
	return m.clearedproject_light_color
}

// ProjectLightColorIDs returns the "project_light_color" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectLightColorID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) ProjectLightColorIDs() (ids []ulid.ID) {
	if id := m.project_light_color; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProjectLightColor resets all changes to the "project_light_color" edge.
func (m *ProjectMutation) ResetProjectLightColor() {
	m.project_light_color = nil
	m.clearedproject_light_color = false
}

// ClearProjectIcon clears the "project_icon" edge to the ProjectIcon entity.
func (m *ProjectMutation) ClearProjectIcon() {
	m.clearedproject_icon = true
}

// ProjectIconCleared reports if the "project_icon" edge to the ProjectIcon entity was cleared.
func (m *ProjectMutation) ProjectIconCleared() bool {
	return m.clearedproject_icon
}

// ProjectIconIDs returns the "project_icon" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectIconID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) ProjectIconIDs() (ids []ulid.ID) {
	if id := m.project_icon; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProjectIcon resets all changes to the "project_icon" edge.
func (m *ProjectMutation) ResetProjectIcon() {
	m.project_icon = nil
	m.clearedproject_icon = false
}

// SetTeammateID sets the "teammate" edge to the Teammate entity by id.
func (m *ProjectMutation) SetTeammateID(id ulid.ID) {
	m.teammate = &id
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *ProjectMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *ProjectMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateID returns the "teammate" edge ID in the mutation.
func (m *ProjectMutation) TeammateID() (id ulid.ID, exists bool) {
	if m.teammate != nil {
		return *m.teammate, true
	}
	return
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *ProjectMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// AddProjectTeammateIDs adds the "project_teammates" edge to the ProjectTeammate entity by ids.
func (m *ProjectMutation) AddProjectTeammateIDs(ids ...ulid.ID) {
	if m.project_teammates == nil {
		m.project_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_teammates[ids[i]] = struct{}{}
	}
}

// ClearProjectTeammates clears the "project_teammates" edge to the ProjectTeammate entity.
func (m *ProjectMutation) ClearProjectTeammates() {
	m.clearedproject_teammates = true
}

// ProjectTeammatesCleared reports if the "project_teammates" edge to the ProjectTeammate entity was cleared.
func (m *ProjectMutation) ProjectTeammatesCleared() bool {
	return m.clearedproject_teammates
}

// RemoveProjectTeammateIDs removes the "project_teammates" edge to the ProjectTeammate entity by IDs.
func (m *ProjectMutation) RemoveProjectTeammateIDs(ids ...ulid.ID) {
	if m.removedproject_teammates == nil {
		m.removedproject_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_teammates, ids[i])
		m.removedproject_teammates[ids[i]] = struct{}{}
	}
}

// RemovedProjectTeammates returns the removed IDs of the "project_teammates" edge to the ProjectTeammate entity.
func (m *ProjectMutation) RemovedProjectTeammatesIDs() (ids []ulid.ID) {
	for id := range m.removedproject_teammates {
		ids = append(ids, id)
	}
	return
}

// ProjectTeammatesIDs returns the "project_teammates" edge IDs in the mutation.
func (m *ProjectMutation) ProjectTeammatesIDs() (ids []ulid.ID) {
	for id := range m.project_teammates {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTeammates resets all changes to the "project_teammates" edge.
func (m *ProjectMutation) ResetProjectTeammates() {
	m.project_teammates = nil
	m.clearedproject_teammates = false
	m.removedproject_teammates = nil
}

// AddFavoriteProjectIDs adds the "favorite_projects" edge to the FavoriteProject entity by ids.
func (m *ProjectMutation) AddFavoriteProjectIDs(ids ...ulid.ID) {
	if m.favorite_projects == nil {
		m.favorite_projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.favorite_projects[ids[i]] = struct{}{}
	}
}

// ClearFavoriteProjects clears the "favorite_projects" edge to the FavoriteProject entity.
func (m *ProjectMutation) ClearFavoriteProjects() {
	m.clearedfavorite_projects = true
}

// FavoriteProjectsCleared reports if the "favorite_projects" edge to the FavoriteProject entity was cleared.
func (m *ProjectMutation) FavoriteProjectsCleared() bool {
	return m.clearedfavorite_projects
}

// RemoveFavoriteProjectIDs removes the "favorite_projects" edge to the FavoriteProject entity by IDs.
func (m *ProjectMutation) RemoveFavoriteProjectIDs(ids ...ulid.ID) {
	if m.removedfavorite_projects == nil {
		m.removedfavorite_projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.favorite_projects, ids[i])
		m.removedfavorite_projects[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteProjects returns the removed IDs of the "favorite_projects" edge to the FavoriteProject entity.
func (m *ProjectMutation) RemovedFavoriteProjectsIDs() (ids []ulid.ID) {
	for id := range m.removedfavorite_projects {
		ids = append(ids, id)
	}
	return
}

// FavoriteProjectsIDs returns the "favorite_projects" edge IDs in the mutation.
func (m *ProjectMutation) FavoriteProjectsIDs() (ids []ulid.ID) {
	for id := range m.favorite_projects {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteProjects resets all changes to the "favorite_projects" edge.
func (m *ProjectMutation) ResetFavoriteProjects() {
	m.favorite_projects = nil
	m.clearedfavorite_projects = false
	m.removedfavorite_projects = nil
}

// AddProjectTaskColumnIDs adds the "project_task_columns" edge to the ProjectTaskColumn entity by ids.
func (m *ProjectMutation) AddProjectTaskColumnIDs(ids ...ulid.ID) {
	if m.project_task_columns == nil {
		m.project_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_task_columns[ids[i]] = struct{}{}
	}
}

// ClearProjectTaskColumns clears the "project_task_columns" edge to the ProjectTaskColumn entity.
func (m *ProjectMutation) ClearProjectTaskColumns() {
	m.clearedproject_task_columns = true
}

// ProjectTaskColumnsCleared reports if the "project_task_columns" edge to the ProjectTaskColumn entity was cleared.
func (m *ProjectMutation) ProjectTaskColumnsCleared() bool {
	return m.clearedproject_task_columns
}

// RemoveProjectTaskColumnIDs removes the "project_task_columns" edge to the ProjectTaskColumn entity by IDs.
func (m *ProjectMutation) RemoveProjectTaskColumnIDs(ids ...ulid.ID) {
	if m.removedproject_task_columns == nil {
		m.removedproject_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_task_columns, ids[i])
		m.removedproject_task_columns[ids[i]] = struct{}{}
	}
}

// RemovedProjectTaskColumns returns the removed IDs of the "project_task_columns" edge to the ProjectTaskColumn entity.
func (m *ProjectMutation) RemovedProjectTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.removedproject_task_columns {
		ids = append(ids, id)
	}
	return
}

// ProjectTaskColumnsIDs returns the "project_task_columns" edge IDs in the mutation.
func (m *ProjectMutation) ProjectTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.project_task_columns {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTaskColumns resets all changes to the "project_task_columns" edge.
func (m *ProjectMutation) ResetProjectTaskColumns() {
	m.project_task_columns = nil
	m.clearedproject_task_columns = false
	m.removedproject_task_columns = nil
}

// AddProjectTaskListStatusIDs adds the "project_task_list_statuses" edge to the ProjectTaskListStatus entity by ids.
func (m *ProjectMutation) AddProjectTaskListStatusIDs(ids ...ulid.ID) {
	if m.project_task_list_statuses == nil {
		m.project_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_task_list_statuses[ids[i]] = struct{}{}
	}
}

// ClearProjectTaskListStatuses clears the "project_task_list_statuses" edge to the ProjectTaskListStatus entity.
func (m *ProjectMutation) ClearProjectTaskListStatuses() {
	m.clearedproject_task_list_statuses = true
}

// ProjectTaskListStatusesCleared reports if the "project_task_list_statuses" edge to the ProjectTaskListStatus entity was cleared.
func (m *ProjectMutation) ProjectTaskListStatusesCleared() bool {
	return m.clearedproject_task_list_statuses
}

// RemoveProjectTaskListStatusIDs removes the "project_task_list_statuses" edge to the ProjectTaskListStatus entity by IDs.
func (m *ProjectMutation) RemoveProjectTaskListStatusIDs(ids ...ulid.ID) {
	if m.removedproject_task_list_statuses == nil {
		m.removedproject_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_task_list_statuses, ids[i])
		m.removedproject_task_list_statuses[ids[i]] = struct{}{}
	}
}

// RemovedProjectTaskListStatuses returns the removed IDs of the "project_task_list_statuses" edge to the ProjectTaskListStatus entity.
func (m *ProjectMutation) RemovedProjectTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedproject_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ProjectTaskListStatusesIDs returns the "project_task_list_statuses" edge IDs in the mutation.
func (m *ProjectMutation) ProjectTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.project_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTaskListStatuses resets all changes to the "project_task_list_statuses" edge.
func (m *ProjectMutation) ResetProjectTaskListStatuses() {
	m.project_task_list_statuses = nil
	m.clearedproject_task_list_statuses = false
	m.removedproject_task_list_statuses = nil
}

// AddProjectTaskSectionIDs adds the "project_task_sections" edge to the ProjectTaskSection entity by ids.
func (m *ProjectMutation) AddProjectTaskSectionIDs(ids ...ulid.ID) {
	if m.project_task_sections == nil {
		m.project_task_sections = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_task_sections[ids[i]] = struct{}{}
	}
}

// ClearProjectTaskSections clears the "project_task_sections" edge to the ProjectTaskSection entity.
func (m *ProjectMutation) ClearProjectTaskSections() {
	m.clearedproject_task_sections = true
}

// ProjectTaskSectionsCleared reports if the "project_task_sections" edge to the ProjectTaskSection entity was cleared.
func (m *ProjectMutation) ProjectTaskSectionsCleared() bool {
	return m.clearedproject_task_sections
}

// RemoveProjectTaskSectionIDs removes the "project_task_sections" edge to the ProjectTaskSection entity by IDs.
func (m *ProjectMutation) RemoveProjectTaskSectionIDs(ids ...ulid.ID) {
	if m.removedproject_task_sections == nil {
		m.removedproject_task_sections = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_task_sections, ids[i])
		m.removedproject_task_sections[ids[i]] = struct{}{}
	}
}

// RemovedProjectTaskSections returns the removed IDs of the "project_task_sections" edge to the ProjectTaskSection entity.
func (m *ProjectMutation) RemovedProjectTaskSectionsIDs() (ids []ulid.ID) {
	for id := range m.removedproject_task_sections {
		ids = append(ids, id)
	}
	return
}

// ProjectTaskSectionsIDs returns the "project_task_sections" edge IDs in the mutation.
func (m *ProjectMutation) ProjectTaskSectionsIDs() (ids []ulid.ID) {
	for id := range m.project_task_sections {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTaskSections resets all changes to the "project_task_sections" edge.
func (m *ProjectMutation) ResetProjectTaskSections() {
	m.project_task_sections = nil
	m.clearedproject_task_sections = false
	m.removedproject_task_sections = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.workspace != nil {
		fields = append(fields, project.FieldWorkspaceID)
	}
	if m.project_base_color != nil {
		fields = append(fields, project.FieldProjectBaseColorID)
	}
	if m.project_light_color != nil {
		fields = append(fields, project.FieldProjectLightColorID)
	}
	if m.project_icon != nil {
		fields = append(fields, project.FieldProjectIconID)
	}
	if m.teammate != nil {
		fields = append(fields, project.FieldCreatedBy)
	}
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.description_title != nil {
		fields = append(fields, project.FieldDescriptionTitle)
	}
	if m.due_date != nil {
		fields = append(fields, project.FieldDueDate)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldWorkspaceID:
		return m.WorkspaceID()
	case project.FieldProjectBaseColorID:
		return m.ProjectBaseColorID()
	case project.FieldProjectLightColorID:
		return m.ProjectLightColorID()
	case project.FieldProjectIconID:
		return m.ProjectIconID()
	case project.FieldCreatedBy:
		return m.CreatedBy()
	case project.FieldName:
		return m.Name()
	case project.FieldDescription:
		return m.Description()
	case project.FieldDescriptionTitle:
		return m.DescriptionTitle()
	case project.FieldDueDate:
		return m.DueDate()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldWorkspaceID:
		return m.OldWorkspaceID(ctx)
	case project.FieldProjectBaseColorID:
		return m.OldProjectBaseColorID(ctx)
	case project.FieldProjectLightColorID:
		return m.OldProjectLightColorID(ctx)
	case project.FieldProjectIconID:
		return m.OldProjectIconID(ctx)
	case project.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldDescriptionTitle:
		return m.OldDescriptionTitle(ctx)
	case project.FieldDueDate:
		return m.OldDueDate(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldWorkspaceID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkspaceID(v)
		return nil
	case project.FieldProjectBaseColorID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectBaseColorID(v)
		return nil
	case project.FieldProjectLightColorID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectLightColorID(v)
		return nil
	case project.FieldProjectIconID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectIconID(v)
		return nil
	case project.FieldCreatedBy:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(editor.Description)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldDescriptionTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescriptionTitle(v)
		return nil
	case project.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldWorkspaceID:
		m.ResetWorkspaceID()
		return nil
	case project.FieldProjectBaseColorID:
		m.ResetProjectBaseColorID()
		return nil
	case project.FieldProjectLightColorID:
		m.ResetProjectLightColorID()
		return nil
	case project.FieldProjectIconID:
		m.ResetProjectIconID()
		return nil
	case project.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldDescriptionTitle:
		m.ResetDescriptionTitle()
		return nil
	case project.FieldDueDate:
		m.ResetDueDate()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 10)
	if m.workspace != nil {
		edges = append(edges, project.EdgeWorkspace)
	}
	if m.project_base_color != nil {
		edges = append(edges, project.EdgeProjectBaseColor)
	}
	if m.project_light_color != nil {
		edges = append(edges, project.EdgeProjectLightColor)
	}
	if m.project_icon != nil {
		edges = append(edges, project.EdgeProjectIcon)
	}
	if m.teammate != nil {
		edges = append(edges, project.EdgeTeammate)
	}
	if m.project_teammates != nil {
		edges = append(edges, project.EdgeProjectTeammates)
	}
	if m.favorite_projects != nil {
		edges = append(edges, project.EdgeFavoriteProjects)
	}
	if m.project_task_columns != nil {
		edges = append(edges, project.EdgeProjectTaskColumns)
	}
	if m.project_task_list_statuses != nil {
		edges = append(edges, project.EdgeProjectTaskListStatuses)
	}
	if m.project_task_sections != nil {
		edges = append(edges, project.EdgeProjectTaskSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeWorkspace:
		if id := m.workspace; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeProjectBaseColor:
		if id := m.project_base_color; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeProjectLightColor:
		if id := m.project_light_color; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeProjectIcon:
		if id := m.project_icon; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeProjectTeammates:
		ids := make([]ent.Value, 0, len(m.project_teammates))
		for id := range m.project_teammates {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeFavoriteProjects:
		ids := make([]ent.Value, 0, len(m.favorite_projects))
		for id := range m.favorite_projects {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeProjectTaskColumns:
		ids := make([]ent.Value, 0, len(m.project_task_columns))
		for id := range m.project_task_columns {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeProjectTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.project_task_list_statuses))
		for id := range m.project_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeProjectTaskSections:
		ids := make([]ent.Value, 0, len(m.project_task_sections))
		for id := range m.project_task_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 10)
	if m.removedproject_teammates != nil {
		edges = append(edges, project.EdgeProjectTeammates)
	}
	if m.removedfavorite_projects != nil {
		edges = append(edges, project.EdgeFavoriteProjects)
	}
	if m.removedproject_task_columns != nil {
		edges = append(edges, project.EdgeProjectTaskColumns)
	}
	if m.removedproject_task_list_statuses != nil {
		edges = append(edges, project.EdgeProjectTaskListStatuses)
	}
	if m.removedproject_task_sections != nil {
		edges = append(edges, project.EdgeProjectTaskSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeProjectTeammates:
		ids := make([]ent.Value, 0, len(m.removedproject_teammates))
		for id := range m.removedproject_teammates {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeFavoriteProjects:
		ids := make([]ent.Value, 0, len(m.removedfavorite_projects))
		for id := range m.removedfavorite_projects {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeProjectTaskColumns:
		ids := make([]ent.Value, 0, len(m.removedproject_task_columns))
		for id := range m.removedproject_task_columns {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeProjectTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.removedproject_task_list_statuses))
		for id := range m.removedproject_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeProjectTaskSections:
		ids := make([]ent.Value, 0, len(m.removedproject_task_sections))
		for id := range m.removedproject_task_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 10)
	if m.clearedworkspace {
		edges = append(edges, project.EdgeWorkspace)
	}
	if m.clearedproject_base_color {
		edges = append(edges, project.EdgeProjectBaseColor)
	}
	if m.clearedproject_light_color {
		edges = append(edges, project.EdgeProjectLightColor)
	}
	if m.clearedproject_icon {
		edges = append(edges, project.EdgeProjectIcon)
	}
	if m.clearedteammate {
		edges = append(edges, project.EdgeTeammate)
	}
	if m.clearedproject_teammates {
		edges = append(edges, project.EdgeProjectTeammates)
	}
	if m.clearedfavorite_projects {
		edges = append(edges, project.EdgeFavoriteProjects)
	}
	if m.clearedproject_task_columns {
		edges = append(edges, project.EdgeProjectTaskColumns)
	}
	if m.clearedproject_task_list_statuses {
		edges = append(edges, project.EdgeProjectTaskListStatuses)
	}
	if m.clearedproject_task_sections {
		edges = append(edges, project.EdgeProjectTaskSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeWorkspace:
		return m.clearedworkspace
	case project.EdgeProjectBaseColor:
		return m.clearedproject_base_color
	case project.EdgeProjectLightColor:
		return m.clearedproject_light_color
	case project.EdgeProjectIcon:
		return m.clearedproject_icon
	case project.EdgeTeammate:
		return m.clearedteammate
	case project.EdgeProjectTeammates:
		return m.clearedproject_teammates
	case project.EdgeFavoriteProjects:
		return m.clearedfavorite_projects
	case project.EdgeProjectTaskColumns:
		return m.clearedproject_task_columns
	case project.EdgeProjectTaskListStatuses:
		return m.clearedproject_task_list_statuses
	case project.EdgeProjectTaskSections:
		return m.clearedproject_task_sections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeWorkspace:
		m.ClearWorkspace()
		return nil
	case project.EdgeProjectBaseColor:
		m.ClearProjectBaseColor()
		return nil
	case project.EdgeProjectLightColor:
		m.ClearProjectLightColor()
		return nil
	case project.EdgeProjectIcon:
		m.ClearProjectIcon()
		return nil
	case project.EdgeTeammate:
		m.ClearTeammate()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeWorkspace:
		m.ResetWorkspace()
		return nil
	case project.EdgeProjectBaseColor:
		m.ResetProjectBaseColor()
		return nil
	case project.EdgeProjectLightColor:
		m.ResetProjectLightColor()
		return nil
	case project.EdgeProjectIcon:
		m.ResetProjectIcon()
		return nil
	case project.EdgeTeammate:
		m.ResetTeammate()
		return nil
	case project.EdgeProjectTeammates:
		m.ResetProjectTeammates()
		return nil
	case project.EdgeFavoriteProjects:
		m.ResetFavoriteProjects()
		return nil
	case project.EdgeProjectTaskColumns:
		m.ResetProjectTaskColumns()
		return nil
	case project.EdgeProjectTaskListStatuses:
		m.ResetProjectTaskListStatuses()
		return nil
	case project.EdgeProjectTaskSections:
		m.ResetProjectTaskSections()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// ProjectBaseColorMutation represents an operation that mutates the ProjectBaseColor nodes in the graph.
type ProjectBaseColorMutation struct {
	config
	op              Op
	typ             string
	id              *ulid.ID
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	projects        map[ulid.ID]struct{}
	removedprojects map[ulid.ID]struct{}
	clearedprojects bool
	color           *ulid.ID
	clearedcolor    bool
	done            bool
	oldValue        func(context.Context) (*ProjectBaseColor, error)
	predicates      []predicate.ProjectBaseColor
}

var _ ent.Mutation = (*ProjectBaseColorMutation)(nil)

// projectbasecolorOption allows management of the mutation configuration using functional options.
type projectbasecolorOption func(*ProjectBaseColorMutation)

// newProjectBaseColorMutation creates new mutation for the ProjectBaseColor entity.
func newProjectBaseColorMutation(c config, op Op, opts ...projectbasecolorOption) *ProjectBaseColorMutation {
	m := &ProjectBaseColorMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectBaseColor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectBaseColorID sets the ID field of the mutation.
func withProjectBaseColorID(id ulid.ID) projectbasecolorOption {
	return func(m *ProjectBaseColorMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectBaseColor
		)
		m.oldValue = func(ctx context.Context) (*ProjectBaseColor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectBaseColor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectBaseColor sets the old ProjectBaseColor of the mutation.
func withProjectBaseColor(node *ProjectBaseColor) projectbasecolorOption {
	return func(m *ProjectBaseColorMutation) {
		m.oldValue = func(context.Context) (*ProjectBaseColor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectBaseColorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectBaseColorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectBaseColor entities.
func (m *ProjectBaseColorMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectBaseColorMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetColorID sets the "color_id" field.
func (m *ProjectBaseColorMutation) SetColorID(u ulid.ID) {
	m.color = &u
}

// ColorID returns the value of the "color_id" field in the mutation.
func (m *ProjectBaseColorMutation) ColorID() (r ulid.ID, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColorID returns the old "color_id" field's value of the ProjectBaseColor entity.
// If the ProjectBaseColor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectBaseColorMutation) OldColorID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColorID: %w", err)
	}
	return oldValue.ColorID, nil
}

// ResetColorID resets all changes to the "color_id" field.
func (m *ProjectBaseColorMutation) ResetColorID() {
	m.color = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectBaseColorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectBaseColorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectBaseColor entity.
// If the ProjectBaseColor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectBaseColorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectBaseColorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectBaseColorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectBaseColorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectBaseColor entity.
// If the ProjectBaseColor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectBaseColorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectBaseColorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *ProjectBaseColorMutation) AddProjectIDs(ids ...ulid.ID) {
	if m.projects == nil {
		m.projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *ProjectBaseColorMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *ProjectBaseColorMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *ProjectBaseColorMutation) RemoveProjectIDs(ids ...ulid.ID) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *ProjectBaseColorMutation) RemovedProjectsIDs() (ids []ulid.ID) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *ProjectBaseColorMutation) ProjectsIDs() (ids []ulid.ID) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *ProjectBaseColorMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// ClearColor clears the "color" edge to the Color entity.
func (m *ProjectBaseColorMutation) ClearColor() {
	m.clearedcolor = true
}

// ColorCleared reports if the "color" edge to the Color entity was cleared.
func (m *ProjectBaseColorMutation) ColorCleared() bool {
	return m.clearedcolor
}

// ColorIDs returns the "color" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ColorID instead. It exists only for internal usage by the builders.
func (m *ProjectBaseColorMutation) ColorIDs() (ids []ulid.ID) {
	if id := m.color; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetColor resets all changes to the "color" edge.
func (m *ProjectBaseColorMutation) ResetColor() {
	m.color = nil
	m.clearedcolor = false
}

// Where appends a list predicates to the ProjectBaseColorMutation builder.
func (m *ProjectBaseColorMutation) Where(ps ...predicate.ProjectBaseColor) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectBaseColorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProjectBaseColor).
func (m *ProjectBaseColorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectBaseColorMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.color != nil {
		fields = append(fields, projectbasecolor.FieldColorID)
	}
	if m.created_at != nil {
		fields = append(fields, projectbasecolor.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projectbasecolor.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectBaseColorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projectbasecolor.FieldColorID:
		return m.ColorID()
	case projectbasecolor.FieldCreatedAt:
		return m.CreatedAt()
	case projectbasecolor.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectBaseColorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projectbasecolor.FieldColorID:
		return m.OldColorID(ctx)
	case projectbasecolor.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projectbasecolor.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectBaseColor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectBaseColorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projectbasecolor.FieldColorID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColorID(v)
		return nil
	case projectbasecolor.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projectbasecolor.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectBaseColor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectBaseColorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectBaseColorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectBaseColorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectBaseColor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectBaseColorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectBaseColorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectBaseColorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectBaseColor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectBaseColorMutation) ResetField(name string) error {
	switch name {
	case projectbasecolor.FieldColorID:
		m.ResetColorID()
		return nil
	case projectbasecolor.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projectbasecolor.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProjectBaseColor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectBaseColorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.projects != nil {
		edges = append(edges, projectbasecolor.EdgeProjects)
	}
	if m.color != nil {
		edges = append(edges, projectbasecolor.EdgeColor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectBaseColorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projectbasecolor.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case projectbasecolor.EdgeColor:
		if id := m.color; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectBaseColorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedprojects != nil {
		edges = append(edges, projectbasecolor.EdgeProjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectBaseColorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case projectbasecolor.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectBaseColorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprojects {
		edges = append(edges, projectbasecolor.EdgeProjects)
	}
	if m.clearedcolor {
		edges = append(edges, projectbasecolor.EdgeColor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectBaseColorMutation) EdgeCleared(name string) bool {
	switch name {
	case projectbasecolor.EdgeProjects:
		return m.clearedprojects
	case projectbasecolor.EdgeColor:
		return m.clearedcolor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectBaseColorMutation) ClearEdge(name string) error {
	switch name {
	case projectbasecolor.EdgeColor:
		m.ClearColor()
		return nil
	}
	return fmt.Errorf("unknown ProjectBaseColor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectBaseColorMutation) ResetEdge(name string) error {
	switch name {
	case projectbasecolor.EdgeProjects:
		m.ResetProjects()
		return nil
	case projectbasecolor.EdgeColor:
		m.ResetColor()
		return nil
	}
	return fmt.Errorf("unknown ProjectBaseColor edge %s", name)
}

// ProjectIconMutation represents an operation that mutates the ProjectIcon nodes in the graph.
type ProjectIconMutation struct {
	config
	op              Op
	typ             string
	id              *ulid.ID
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	projects        map[ulid.ID]struct{}
	removedprojects map[ulid.ID]struct{}
	clearedprojects bool
	icon            *ulid.ID
	clearedicon     bool
	done            bool
	oldValue        func(context.Context) (*ProjectIcon, error)
	predicates      []predicate.ProjectIcon
}

var _ ent.Mutation = (*ProjectIconMutation)(nil)

// projecticonOption allows management of the mutation configuration using functional options.
type projecticonOption func(*ProjectIconMutation)

// newProjectIconMutation creates new mutation for the ProjectIcon entity.
func newProjectIconMutation(c config, op Op, opts ...projecticonOption) *ProjectIconMutation {
	m := &ProjectIconMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectIcon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectIconID sets the ID field of the mutation.
func withProjectIconID(id ulid.ID) projecticonOption {
	return func(m *ProjectIconMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectIcon
		)
		m.oldValue = func(ctx context.Context) (*ProjectIcon, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectIcon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectIcon sets the old ProjectIcon of the mutation.
func withProjectIcon(node *ProjectIcon) projecticonOption {
	return func(m *ProjectIconMutation) {
		m.oldValue = func(context.Context) (*ProjectIcon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectIconMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectIconMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectIcon entities.
func (m *ProjectIconMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectIconMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIconID sets the "icon_id" field.
func (m *ProjectIconMutation) SetIconID(u ulid.ID) {
	m.icon = &u
}

// IconID returns the value of the "icon_id" field in the mutation.
func (m *ProjectIconMutation) IconID() (r ulid.ID, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIconID returns the old "icon_id" field's value of the ProjectIcon entity.
// If the ProjectIcon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectIconMutation) OldIconID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIconID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIconID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconID: %w", err)
	}
	return oldValue.IconID, nil
}

// ResetIconID resets all changes to the "icon_id" field.
func (m *ProjectIconMutation) ResetIconID() {
	m.icon = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectIconMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectIconMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectIcon entity.
// If the ProjectIcon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectIconMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectIconMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectIconMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectIconMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectIcon entity.
// If the ProjectIcon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectIconMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectIconMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *ProjectIconMutation) AddProjectIDs(ids ...ulid.ID) {
	if m.projects == nil {
		m.projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *ProjectIconMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *ProjectIconMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *ProjectIconMutation) RemoveProjectIDs(ids ...ulid.ID) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *ProjectIconMutation) RemovedProjectsIDs() (ids []ulid.ID) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *ProjectIconMutation) ProjectsIDs() (ids []ulid.ID) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *ProjectIconMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// ClearIcon clears the "icon" edge to the Icon entity.
func (m *ProjectIconMutation) ClearIcon() {
	m.clearedicon = true
}

// IconCleared reports if the "icon" edge to the Icon entity was cleared.
func (m *ProjectIconMutation) IconCleared() bool {
	return m.clearedicon
}

// IconIDs returns the "icon" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IconID instead. It exists only for internal usage by the builders.
func (m *ProjectIconMutation) IconIDs() (ids []ulid.ID) {
	if id := m.icon; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIcon resets all changes to the "icon" edge.
func (m *ProjectIconMutation) ResetIcon() {
	m.icon = nil
	m.clearedicon = false
}

// Where appends a list predicates to the ProjectIconMutation builder.
func (m *ProjectIconMutation) Where(ps ...predicate.ProjectIcon) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectIconMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProjectIcon).
func (m *ProjectIconMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectIconMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.icon != nil {
		fields = append(fields, projecticon.FieldIconID)
	}
	if m.created_at != nil {
		fields = append(fields, projecticon.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projecticon.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectIconMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projecticon.FieldIconID:
		return m.IconID()
	case projecticon.FieldCreatedAt:
		return m.CreatedAt()
	case projecticon.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectIconMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projecticon.FieldIconID:
		return m.OldIconID(ctx)
	case projecticon.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projecticon.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectIcon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectIconMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projecticon.FieldIconID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconID(v)
		return nil
	case projecticon.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projecticon.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectIcon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectIconMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectIconMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectIconMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectIcon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectIconMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectIconMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectIconMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectIcon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectIconMutation) ResetField(name string) error {
	switch name {
	case projecticon.FieldIconID:
		m.ResetIconID()
		return nil
	case projecticon.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projecticon.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProjectIcon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectIconMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.projects != nil {
		edges = append(edges, projecticon.EdgeProjects)
	}
	if m.icon != nil {
		edges = append(edges, projecticon.EdgeIcon)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectIconMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projecticon.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case projecticon.EdgeIcon:
		if id := m.icon; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectIconMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedprojects != nil {
		edges = append(edges, projecticon.EdgeProjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectIconMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case projecticon.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectIconMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprojects {
		edges = append(edges, projecticon.EdgeProjects)
	}
	if m.clearedicon {
		edges = append(edges, projecticon.EdgeIcon)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectIconMutation) EdgeCleared(name string) bool {
	switch name {
	case projecticon.EdgeProjects:
		return m.clearedprojects
	case projecticon.EdgeIcon:
		return m.clearedicon
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectIconMutation) ClearEdge(name string) error {
	switch name {
	case projecticon.EdgeIcon:
		m.ClearIcon()
		return nil
	}
	return fmt.Errorf("unknown ProjectIcon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectIconMutation) ResetEdge(name string) error {
	switch name {
	case projecticon.EdgeProjects:
		m.ResetProjects()
		return nil
	case projecticon.EdgeIcon:
		m.ResetIcon()
		return nil
	}
	return fmt.Errorf("unknown ProjectIcon edge %s", name)
}

// ProjectLightColorMutation represents an operation that mutates the ProjectLightColor nodes in the graph.
type ProjectLightColorMutation struct {
	config
	op              Op
	typ             string
	id              *ulid.ID
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	projects        map[ulid.ID]struct{}
	removedprojects map[ulid.ID]struct{}
	clearedprojects bool
	color           *ulid.ID
	clearedcolor    bool
	done            bool
	oldValue        func(context.Context) (*ProjectLightColor, error)
	predicates      []predicate.ProjectLightColor
}

var _ ent.Mutation = (*ProjectLightColorMutation)(nil)

// projectlightcolorOption allows management of the mutation configuration using functional options.
type projectlightcolorOption func(*ProjectLightColorMutation)

// newProjectLightColorMutation creates new mutation for the ProjectLightColor entity.
func newProjectLightColorMutation(c config, op Op, opts ...projectlightcolorOption) *ProjectLightColorMutation {
	m := &ProjectLightColorMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectLightColor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectLightColorID sets the ID field of the mutation.
func withProjectLightColorID(id ulid.ID) projectlightcolorOption {
	return func(m *ProjectLightColorMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectLightColor
		)
		m.oldValue = func(ctx context.Context) (*ProjectLightColor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectLightColor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectLightColor sets the old ProjectLightColor of the mutation.
func withProjectLightColor(node *ProjectLightColor) projectlightcolorOption {
	return func(m *ProjectLightColorMutation) {
		m.oldValue = func(context.Context) (*ProjectLightColor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectLightColorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectLightColorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectLightColor entities.
func (m *ProjectLightColorMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectLightColorMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetColorID sets the "color_id" field.
func (m *ProjectLightColorMutation) SetColorID(u ulid.ID) {
	m.color = &u
}

// ColorID returns the value of the "color_id" field in the mutation.
func (m *ProjectLightColorMutation) ColorID() (r ulid.ID, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColorID returns the old "color_id" field's value of the ProjectLightColor entity.
// If the ProjectLightColor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectLightColorMutation) OldColorID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColorID: %w", err)
	}
	return oldValue.ColorID, nil
}

// ResetColorID resets all changes to the "color_id" field.
func (m *ProjectLightColorMutation) ResetColorID() {
	m.color = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectLightColorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectLightColorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectLightColor entity.
// If the ProjectLightColor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectLightColorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectLightColorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectLightColorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectLightColorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectLightColor entity.
// If the ProjectLightColor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectLightColorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectLightColorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *ProjectLightColorMutation) AddProjectIDs(ids ...ulid.ID) {
	if m.projects == nil {
		m.projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *ProjectLightColorMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *ProjectLightColorMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *ProjectLightColorMutation) RemoveProjectIDs(ids ...ulid.ID) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *ProjectLightColorMutation) RemovedProjectsIDs() (ids []ulid.ID) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *ProjectLightColorMutation) ProjectsIDs() (ids []ulid.ID) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *ProjectLightColorMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// ClearColor clears the "color" edge to the Color entity.
func (m *ProjectLightColorMutation) ClearColor() {
	m.clearedcolor = true
}

// ColorCleared reports if the "color" edge to the Color entity was cleared.
func (m *ProjectLightColorMutation) ColorCleared() bool {
	return m.clearedcolor
}

// ColorIDs returns the "color" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ColorID instead. It exists only for internal usage by the builders.
func (m *ProjectLightColorMutation) ColorIDs() (ids []ulid.ID) {
	if id := m.color; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetColor resets all changes to the "color" edge.
func (m *ProjectLightColorMutation) ResetColor() {
	m.color = nil
	m.clearedcolor = false
}

// Where appends a list predicates to the ProjectLightColorMutation builder.
func (m *ProjectLightColorMutation) Where(ps ...predicate.ProjectLightColor) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectLightColorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProjectLightColor).
func (m *ProjectLightColorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectLightColorMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.color != nil {
		fields = append(fields, projectlightcolor.FieldColorID)
	}
	if m.created_at != nil {
		fields = append(fields, projectlightcolor.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projectlightcolor.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectLightColorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projectlightcolor.FieldColorID:
		return m.ColorID()
	case projectlightcolor.FieldCreatedAt:
		return m.CreatedAt()
	case projectlightcolor.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectLightColorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projectlightcolor.FieldColorID:
		return m.OldColorID(ctx)
	case projectlightcolor.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projectlightcolor.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectLightColor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectLightColorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projectlightcolor.FieldColorID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColorID(v)
		return nil
	case projectlightcolor.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projectlightcolor.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectLightColor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectLightColorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectLightColorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectLightColorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectLightColor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectLightColorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectLightColorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectLightColorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectLightColor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectLightColorMutation) ResetField(name string) error {
	switch name {
	case projectlightcolor.FieldColorID:
		m.ResetColorID()
		return nil
	case projectlightcolor.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projectlightcolor.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProjectLightColor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectLightColorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.projects != nil {
		edges = append(edges, projectlightcolor.EdgeProjects)
	}
	if m.color != nil {
		edges = append(edges, projectlightcolor.EdgeColor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectLightColorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projectlightcolor.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case projectlightcolor.EdgeColor:
		if id := m.color; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectLightColorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedprojects != nil {
		edges = append(edges, projectlightcolor.EdgeProjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectLightColorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case projectlightcolor.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectLightColorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprojects {
		edges = append(edges, projectlightcolor.EdgeProjects)
	}
	if m.clearedcolor {
		edges = append(edges, projectlightcolor.EdgeColor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectLightColorMutation) EdgeCleared(name string) bool {
	switch name {
	case projectlightcolor.EdgeProjects:
		return m.clearedprojects
	case projectlightcolor.EdgeColor:
		return m.clearedcolor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectLightColorMutation) ClearEdge(name string) error {
	switch name {
	case projectlightcolor.EdgeColor:
		m.ClearColor()
		return nil
	}
	return fmt.Errorf("unknown ProjectLightColor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectLightColorMutation) ResetEdge(name string) error {
	switch name {
	case projectlightcolor.EdgeProjects:
		m.ResetProjects()
		return nil
	case projectlightcolor.EdgeColor:
		m.ResetColor()
		return nil
	}
	return fmt.Errorf("unknown ProjectLightColor edge %s", name)
}

// ProjectTaskColumnMutation represents an operation that mutates the ProjectTaskColumn nodes in the graph.
type ProjectTaskColumnMutation struct {
	config
	op                 Op
	typ                string
	id                 *ulid.ID
	width              *string
	disabled           *bool
	customizable       *bool
	_order             *int
	add_order          *int
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	project            *ulid.ID
	clearedproject     bool
	task_column        *ulid.ID
	clearedtask_column bool
	done               bool
	oldValue           func(context.Context) (*ProjectTaskColumn, error)
	predicates         []predicate.ProjectTaskColumn
}

var _ ent.Mutation = (*ProjectTaskColumnMutation)(nil)

// projecttaskcolumnOption allows management of the mutation configuration using functional options.
type projecttaskcolumnOption func(*ProjectTaskColumnMutation)

// newProjectTaskColumnMutation creates new mutation for the ProjectTaskColumn entity.
func newProjectTaskColumnMutation(c config, op Op, opts ...projecttaskcolumnOption) *ProjectTaskColumnMutation {
	m := &ProjectTaskColumnMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectTaskColumn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectTaskColumnID sets the ID field of the mutation.
func withProjectTaskColumnID(id ulid.ID) projecttaskcolumnOption {
	return func(m *ProjectTaskColumnMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectTaskColumn
		)
		m.oldValue = func(ctx context.Context) (*ProjectTaskColumn, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectTaskColumn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectTaskColumn sets the old ProjectTaskColumn of the mutation.
func withProjectTaskColumn(node *ProjectTaskColumn) projecttaskcolumnOption {
	return func(m *ProjectTaskColumnMutation) {
		m.oldValue = func(context.Context) (*ProjectTaskColumn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectTaskColumnMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectTaskColumnMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectTaskColumn entities.
func (m *ProjectTaskColumnMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectTaskColumnMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProjectID sets the "project_id" field.
func (m *ProjectTaskColumnMutation) SetProjectID(u ulid.ID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *ProjectTaskColumnMutation) ProjectID() (r ulid.ID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldProjectID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *ProjectTaskColumnMutation) ResetProjectID() {
	m.project = nil
}

// SetTaskColumnID sets the "task_column_id" field.
func (m *ProjectTaskColumnMutation) SetTaskColumnID(u ulid.ID) {
	m.task_column = &u
}

// TaskColumnID returns the value of the "task_column_id" field in the mutation.
func (m *ProjectTaskColumnMutation) TaskColumnID() (r ulid.ID, exists bool) {
	v := m.task_column
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskColumnID returns the old "task_column_id" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldTaskColumnID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskColumnID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskColumnID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskColumnID: %w", err)
	}
	return oldValue.TaskColumnID, nil
}

// ResetTaskColumnID resets all changes to the "task_column_id" field.
func (m *ProjectTaskColumnMutation) ResetTaskColumnID() {
	m.task_column = nil
}

// SetWidth sets the "width" field.
func (m *ProjectTaskColumnMutation) SetWidth(s string) {
	m.width = &s
}

// Width returns the value of the "width" field in the mutation.
func (m *ProjectTaskColumnMutation) Width() (r string, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldWidth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// ResetWidth resets all changes to the "width" field.
func (m *ProjectTaskColumnMutation) ResetWidth() {
	m.width = nil
}

// SetDisabled sets the "disabled" field.
func (m *ProjectTaskColumnMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *ProjectTaskColumnMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *ProjectTaskColumnMutation) ResetDisabled() {
	m.disabled = nil
}

// SetCustomizable sets the "customizable" field.
func (m *ProjectTaskColumnMutation) SetCustomizable(b bool) {
	m.customizable = &b
}

// Customizable returns the value of the "customizable" field in the mutation.
func (m *ProjectTaskColumnMutation) Customizable() (r bool, exists bool) {
	v := m.customizable
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomizable returns the old "customizable" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldCustomizable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomizable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomizable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomizable: %w", err)
	}
	return oldValue.Customizable, nil
}

// ResetCustomizable resets all changes to the "customizable" field.
func (m *ProjectTaskColumnMutation) ResetCustomizable() {
	m.customizable = nil
}

// SetOrder sets the "order" field.
func (m *ProjectTaskColumnMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *ProjectTaskColumnMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *ProjectTaskColumnMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *ProjectTaskColumnMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *ProjectTaskColumnMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectTaskColumnMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectTaskColumnMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectTaskColumnMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectTaskColumnMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectTaskColumnMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectTaskColumn entity.
// If the ProjectTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskColumnMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectTaskColumnMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ProjectTaskColumnMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ProjectTaskColumnMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ProjectTaskColumnMutation) ProjectIDs() (ids []ulid.ID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ProjectTaskColumnMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// ClearTaskColumn clears the "task_column" edge to the TaskColumn entity.
func (m *ProjectTaskColumnMutation) ClearTaskColumn() {
	m.clearedtask_column = true
}

// TaskColumnCleared reports if the "task_column" edge to the TaskColumn entity was cleared.
func (m *ProjectTaskColumnMutation) TaskColumnCleared() bool {
	return m.clearedtask_column
}

// TaskColumnIDs returns the "task_column" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskColumnID instead. It exists only for internal usage by the builders.
func (m *ProjectTaskColumnMutation) TaskColumnIDs() (ids []ulid.ID) {
	if id := m.task_column; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskColumn resets all changes to the "task_column" edge.
func (m *ProjectTaskColumnMutation) ResetTaskColumn() {
	m.task_column = nil
	m.clearedtask_column = false
}

// Where appends a list predicates to the ProjectTaskColumnMutation builder.
func (m *ProjectTaskColumnMutation) Where(ps ...predicate.ProjectTaskColumn) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectTaskColumnMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProjectTaskColumn).
func (m *ProjectTaskColumnMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectTaskColumnMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.project != nil {
		fields = append(fields, projecttaskcolumn.FieldProjectID)
	}
	if m.task_column != nil {
		fields = append(fields, projecttaskcolumn.FieldTaskColumnID)
	}
	if m.width != nil {
		fields = append(fields, projecttaskcolumn.FieldWidth)
	}
	if m.disabled != nil {
		fields = append(fields, projecttaskcolumn.FieldDisabled)
	}
	if m.customizable != nil {
		fields = append(fields, projecttaskcolumn.FieldCustomizable)
	}
	if m._order != nil {
		fields = append(fields, projecttaskcolumn.FieldOrder)
	}
	if m.created_at != nil {
		fields = append(fields, projecttaskcolumn.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projecttaskcolumn.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectTaskColumnMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projecttaskcolumn.FieldProjectID:
		return m.ProjectID()
	case projecttaskcolumn.FieldTaskColumnID:
		return m.TaskColumnID()
	case projecttaskcolumn.FieldWidth:
		return m.Width()
	case projecttaskcolumn.FieldDisabled:
		return m.Disabled()
	case projecttaskcolumn.FieldCustomizable:
		return m.Customizable()
	case projecttaskcolumn.FieldOrder:
		return m.Order()
	case projecttaskcolumn.FieldCreatedAt:
		return m.CreatedAt()
	case projecttaskcolumn.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectTaskColumnMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projecttaskcolumn.FieldProjectID:
		return m.OldProjectID(ctx)
	case projecttaskcolumn.FieldTaskColumnID:
		return m.OldTaskColumnID(ctx)
	case projecttaskcolumn.FieldWidth:
		return m.OldWidth(ctx)
	case projecttaskcolumn.FieldDisabled:
		return m.OldDisabled(ctx)
	case projecttaskcolumn.FieldCustomizable:
		return m.OldCustomizable(ctx)
	case projecttaskcolumn.FieldOrder:
		return m.OldOrder(ctx)
	case projecttaskcolumn.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projecttaskcolumn.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectTaskColumn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTaskColumnMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projecttaskcolumn.FieldProjectID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case projecttaskcolumn.FieldTaskColumnID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskColumnID(v)
		return nil
	case projecttaskcolumn.FieldWidth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case projecttaskcolumn.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case projecttaskcolumn.FieldCustomizable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomizable(v)
		return nil
	case projecttaskcolumn.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case projecttaskcolumn.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projecttaskcolumn.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskColumn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectTaskColumnMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, projecttaskcolumn.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectTaskColumnMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case projecttaskcolumn.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTaskColumnMutation) AddField(name string, value ent.Value) error {
	switch name {
	case projecttaskcolumn.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskColumn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectTaskColumnMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectTaskColumnMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectTaskColumnMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectTaskColumn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectTaskColumnMutation) ResetField(name string) error {
	switch name {
	case projecttaskcolumn.FieldProjectID:
		m.ResetProjectID()
		return nil
	case projecttaskcolumn.FieldTaskColumnID:
		m.ResetTaskColumnID()
		return nil
	case projecttaskcolumn.FieldWidth:
		m.ResetWidth()
		return nil
	case projecttaskcolumn.FieldDisabled:
		m.ResetDisabled()
		return nil
	case projecttaskcolumn.FieldCustomizable:
		m.ResetCustomizable()
		return nil
	case projecttaskcolumn.FieldOrder:
		m.ResetOrder()
		return nil
	case projecttaskcolumn.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projecttaskcolumn.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskColumn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectTaskColumnMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, projecttaskcolumn.EdgeProject)
	}
	if m.task_column != nil {
		edges = append(edges, projecttaskcolumn.EdgeTaskColumn)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectTaskColumnMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projecttaskcolumn.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case projecttaskcolumn.EdgeTaskColumn:
		if id := m.task_column; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectTaskColumnMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectTaskColumnMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectTaskColumnMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, projecttaskcolumn.EdgeProject)
	}
	if m.clearedtask_column {
		edges = append(edges, projecttaskcolumn.EdgeTaskColumn)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectTaskColumnMutation) EdgeCleared(name string) bool {
	switch name {
	case projecttaskcolumn.EdgeProject:
		return m.clearedproject
	case projecttaskcolumn.EdgeTaskColumn:
		return m.clearedtask_column
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectTaskColumnMutation) ClearEdge(name string) error {
	switch name {
	case projecttaskcolumn.EdgeProject:
		m.ClearProject()
		return nil
	case projecttaskcolumn.EdgeTaskColumn:
		m.ClearTaskColumn()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskColumn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectTaskColumnMutation) ResetEdge(name string) error {
	switch name {
	case projecttaskcolumn.EdgeProject:
		m.ResetProject()
		return nil
	case projecttaskcolumn.EdgeTaskColumn:
		m.ResetTaskColumn()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskColumn edge %s", name)
}

// ProjectTaskListStatusMutation represents an operation that mutates the ProjectTaskListStatus nodes in the graph.
type ProjectTaskListStatusMutation struct {
	config
	op                                Op
	typ                               string
	id                                *ulid.ID
	created_at                        *time.Time
	updated_at                        *time.Time
	clearedFields                     map[string]struct{}
	project                           *ulid.ID
	clearedproject                    bool
	task_list_completed_status        *ulid.ID
	clearedtask_list_completed_status bool
	task_list_sort_status             *ulid.ID
	clearedtask_list_sort_status      bool
	done                              bool
	oldValue                          func(context.Context) (*ProjectTaskListStatus, error)
	predicates                        []predicate.ProjectTaskListStatus
}

var _ ent.Mutation = (*ProjectTaskListStatusMutation)(nil)

// projecttaskliststatusOption allows management of the mutation configuration using functional options.
type projecttaskliststatusOption func(*ProjectTaskListStatusMutation)

// newProjectTaskListStatusMutation creates new mutation for the ProjectTaskListStatus entity.
func newProjectTaskListStatusMutation(c config, op Op, opts ...projecttaskliststatusOption) *ProjectTaskListStatusMutation {
	m := &ProjectTaskListStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectTaskListStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectTaskListStatusID sets the ID field of the mutation.
func withProjectTaskListStatusID(id ulid.ID) projecttaskliststatusOption {
	return func(m *ProjectTaskListStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectTaskListStatus
		)
		m.oldValue = func(ctx context.Context) (*ProjectTaskListStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectTaskListStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectTaskListStatus sets the old ProjectTaskListStatus of the mutation.
func withProjectTaskListStatus(node *ProjectTaskListStatus) projecttaskliststatusOption {
	return func(m *ProjectTaskListStatusMutation) {
		m.oldValue = func(context.Context) (*ProjectTaskListStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectTaskListStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectTaskListStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectTaskListStatus entities.
func (m *ProjectTaskListStatusMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectTaskListStatusMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProjectID sets the "project_id" field.
func (m *ProjectTaskListStatusMutation) SetProjectID(u ulid.ID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *ProjectTaskListStatusMutation) ProjectID() (r ulid.ID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the ProjectTaskListStatus entity.
// If the ProjectTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskListStatusMutation) OldProjectID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *ProjectTaskListStatusMutation) ResetProjectID() {
	m.project = nil
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (m *ProjectTaskListStatusMutation) SetTaskListCompletedStatusID(u ulid.ID) {
	m.task_list_completed_status = &u
}

// TaskListCompletedStatusID returns the value of the "task_list_completed_status_id" field in the mutation.
func (m *ProjectTaskListStatusMutation) TaskListCompletedStatusID() (r ulid.ID, exists bool) {
	v := m.task_list_completed_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskListCompletedStatusID returns the old "task_list_completed_status_id" field's value of the ProjectTaskListStatus entity.
// If the ProjectTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskListStatusMutation) OldTaskListCompletedStatusID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskListCompletedStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskListCompletedStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskListCompletedStatusID: %w", err)
	}
	return oldValue.TaskListCompletedStatusID, nil
}

// ResetTaskListCompletedStatusID resets all changes to the "task_list_completed_status_id" field.
func (m *ProjectTaskListStatusMutation) ResetTaskListCompletedStatusID() {
	m.task_list_completed_status = nil
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (m *ProjectTaskListStatusMutation) SetTaskListSortStatusID(u ulid.ID) {
	m.task_list_sort_status = &u
}

// TaskListSortStatusID returns the value of the "task_list_sort_status_id" field in the mutation.
func (m *ProjectTaskListStatusMutation) TaskListSortStatusID() (r ulid.ID, exists bool) {
	v := m.task_list_sort_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskListSortStatusID returns the old "task_list_sort_status_id" field's value of the ProjectTaskListStatus entity.
// If the ProjectTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskListStatusMutation) OldTaskListSortStatusID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskListSortStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskListSortStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskListSortStatusID: %w", err)
	}
	return oldValue.TaskListSortStatusID, nil
}

// ResetTaskListSortStatusID resets all changes to the "task_list_sort_status_id" field.
func (m *ProjectTaskListStatusMutation) ResetTaskListSortStatusID() {
	m.task_list_sort_status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectTaskListStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectTaskListStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectTaskListStatus entity.
// If the ProjectTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskListStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectTaskListStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectTaskListStatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectTaskListStatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectTaskListStatus entity.
// If the ProjectTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskListStatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectTaskListStatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ProjectTaskListStatusMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ProjectTaskListStatusMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ProjectTaskListStatusMutation) ProjectIDs() (ids []ulid.ID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ProjectTaskListStatusMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// ClearTaskListCompletedStatus clears the "task_list_completed_status" edge to the TaskListCompletedStatus entity.
func (m *ProjectTaskListStatusMutation) ClearTaskListCompletedStatus() {
	m.clearedtask_list_completed_status = true
}

// TaskListCompletedStatusCleared reports if the "task_list_completed_status" edge to the TaskListCompletedStatus entity was cleared.
func (m *ProjectTaskListStatusMutation) TaskListCompletedStatusCleared() bool {
	return m.clearedtask_list_completed_status
}

// TaskListCompletedStatusIDs returns the "task_list_completed_status" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskListCompletedStatusID instead. It exists only for internal usage by the builders.
func (m *ProjectTaskListStatusMutation) TaskListCompletedStatusIDs() (ids []ulid.ID) {
	if id := m.task_list_completed_status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskListCompletedStatus resets all changes to the "task_list_completed_status" edge.
func (m *ProjectTaskListStatusMutation) ResetTaskListCompletedStatus() {
	m.task_list_completed_status = nil
	m.clearedtask_list_completed_status = false
}

// ClearTaskListSortStatus clears the "task_list_sort_status" edge to the TaskListSortStatus entity.
func (m *ProjectTaskListStatusMutation) ClearTaskListSortStatus() {
	m.clearedtask_list_sort_status = true
}

// TaskListSortStatusCleared reports if the "task_list_sort_status" edge to the TaskListSortStatus entity was cleared.
func (m *ProjectTaskListStatusMutation) TaskListSortStatusCleared() bool {
	return m.clearedtask_list_sort_status
}

// TaskListSortStatusIDs returns the "task_list_sort_status" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskListSortStatusID instead. It exists only for internal usage by the builders.
func (m *ProjectTaskListStatusMutation) TaskListSortStatusIDs() (ids []ulid.ID) {
	if id := m.task_list_sort_status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskListSortStatus resets all changes to the "task_list_sort_status" edge.
func (m *ProjectTaskListStatusMutation) ResetTaskListSortStatus() {
	m.task_list_sort_status = nil
	m.clearedtask_list_sort_status = false
}

// Where appends a list predicates to the ProjectTaskListStatusMutation builder.
func (m *ProjectTaskListStatusMutation) Where(ps ...predicate.ProjectTaskListStatus) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectTaskListStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProjectTaskListStatus).
func (m *ProjectTaskListStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectTaskListStatusMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.project != nil {
		fields = append(fields, projecttaskliststatus.FieldProjectID)
	}
	if m.task_list_completed_status != nil {
		fields = append(fields, projecttaskliststatus.FieldTaskListCompletedStatusID)
	}
	if m.task_list_sort_status != nil {
		fields = append(fields, projecttaskliststatus.FieldTaskListSortStatusID)
	}
	if m.created_at != nil {
		fields = append(fields, projecttaskliststatus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projecttaskliststatus.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectTaskListStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projecttaskliststatus.FieldProjectID:
		return m.ProjectID()
	case projecttaskliststatus.FieldTaskListCompletedStatusID:
		return m.TaskListCompletedStatusID()
	case projecttaskliststatus.FieldTaskListSortStatusID:
		return m.TaskListSortStatusID()
	case projecttaskliststatus.FieldCreatedAt:
		return m.CreatedAt()
	case projecttaskliststatus.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectTaskListStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projecttaskliststatus.FieldProjectID:
		return m.OldProjectID(ctx)
	case projecttaskliststatus.FieldTaskListCompletedStatusID:
		return m.OldTaskListCompletedStatusID(ctx)
	case projecttaskliststatus.FieldTaskListSortStatusID:
		return m.OldTaskListSortStatusID(ctx)
	case projecttaskliststatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projecttaskliststatus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectTaskListStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTaskListStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projecttaskliststatus.FieldProjectID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case projecttaskliststatus.FieldTaskListCompletedStatusID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskListCompletedStatusID(v)
		return nil
	case projecttaskliststatus.FieldTaskListSortStatusID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskListSortStatusID(v)
		return nil
	case projecttaskliststatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projecttaskliststatus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskListStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectTaskListStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectTaskListStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTaskListStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectTaskListStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectTaskListStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectTaskListStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectTaskListStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectTaskListStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectTaskListStatusMutation) ResetField(name string) error {
	switch name {
	case projecttaskliststatus.FieldProjectID:
		m.ResetProjectID()
		return nil
	case projecttaskliststatus.FieldTaskListCompletedStatusID:
		m.ResetTaskListCompletedStatusID()
		return nil
	case projecttaskliststatus.FieldTaskListSortStatusID:
		m.ResetTaskListSortStatusID()
		return nil
	case projecttaskliststatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projecttaskliststatus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskListStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectTaskListStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.project != nil {
		edges = append(edges, projecttaskliststatus.EdgeProject)
	}
	if m.task_list_completed_status != nil {
		edges = append(edges, projecttaskliststatus.EdgeTaskListCompletedStatus)
	}
	if m.task_list_sort_status != nil {
		edges = append(edges, projecttaskliststatus.EdgeTaskListSortStatus)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectTaskListStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projecttaskliststatus.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case projecttaskliststatus.EdgeTaskListCompletedStatus:
		if id := m.task_list_completed_status; id != nil {
			return []ent.Value{*id}
		}
	case projecttaskliststatus.EdgeTaskListSortStatus:
		if id := m.task_list_sort_status; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectTaskListStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectTaskListStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectTaskListStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproject {
		edges = append(edges, projecttaskliststatus.EdgeProject)
	}
	if m.clearedtask_list_completed_status {
		edges = append(edges, projecttaskliststatus.EdgeTaskListCompletedStatus)
	}
	if m.clearedtask_list_sort_status {
		edges = append(edges, projecttaskliststatus.EdgeTaskListSortStatus)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectTaskListStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case projecttaskliststatus.EdgeProject:
		return m.clearedproject
	case projecttaskliststatus.EdgeTaskListCompletedStatus:
		return m.clearedtask_list_completed_status
	case projecttaskliststatus.EdgeTaskListSortStatus:
		return m.clearedtask_list_sort_status
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectTaskListStatusMutation) ClearEdge(name string) error {
	switch name {
	case projecttaskliststatus.EdgeProject:
		m.ClearProject()
		return nil
	case projecttaskliststatus.EdgeTaskListCompletedStatus:
		m.ClearTaskListCompletedStatus()
		return nil
	case projecttaskliststatus.EdgeTaskListSortStatus:
		m.ClearTaskListSortStatus()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskListStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectTaskListStatusMutation) ResetEdge(name string) error {
	switch name {
	case projecttaskliststatus.EdgeProject:
		m.ResetProject()
		return nil
	case projecttaskliststatus.EdgeTaskListCompletedStatus:
		m.ResetTaskListCompletedStatus()
		return nil
	case projecttaskliststatus.EdgeTaskListSortStatus:
		m.ResetTaskListSortStatus()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskListStatus edge %s", name)
}

// ProjectTaskSectionMutation represents an operation that mutates the ProjectTaskSection nodes in the graph.
type ProjectTaskSectionMutation struct {
	config
	op             Op
	typ            string
	id             *ulid.ID
	name           *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	project        *ulid.ID
	clearedproject bool
	done           bool
	oldValue       func(context.Context) (*ProjectTaskSection, error)
	predicates     []predicate.ProjectTaskSection
}

var _ ent.Mutation = (*ProjectTaskSectionMutation)(nil)

// projecttasksectionOption allows management of the mutation configuration using functional options.
type projecttasksectionOption func(*ProjectTaskSectionMutation)

// newProjectTaskSectionMutation creates new mutation for the ProjectTaskSection entity.
func newProjectTaskSectionMutation(c config, op Op, opts ...projecttasksectionOption) *ProjectTaskSectionMutation {
	m := &ProjectTaskSectionMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectTaskSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectTaskSectionID sets the ID field of the mutation.
func withProjectTaskSectionID(id ulid.ID) projecttasksectionOption {
	return func(m *ProjectTaskSectionMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectTaskSection
		)
		m.oldValue = func(ctx context.Context) (*ProjectTaskSection, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectTaskSection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectTaskSection sets the old ProjectTaskSection of the mutation.
func withProjectTaskSection(node *ProjectTaskSection) projecttasksectionOption {
	return func(m *ProjectTaskSectionMutation) {
		m.oldValue = func(context.Context) (*ProjectTaskSection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectTaskSectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectTaskSectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectTaskSection entities.
func (m *ProjectTaskSectionMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectTaskSectionMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProjectID sets the "project_id" field.
func (m *ProjectTaskSectionMutation) SetProjectID(u ulid.ID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *ProjectTaskSectionMutation) ProjectID() (r ulid.ID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the ProjectTaskSection entity.
// If the ProjectTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskSectionMutation) OldProjectID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *ProjectTaskSectionMutation) ResetProjectID() {
	m.project = nil
}

// SetName sets the "name" field.
func (m *ProjectTaskSectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectTaskSectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ProjectTaskSection entity.
// If the ProjectTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskSectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectTaskSectionMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectTaskSectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectTaskSectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectTaskSection entity.
// If the ProjectTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskSectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectTaskSectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectTaskSectionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectTaskSectionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectTaskSection entity.
// If the ProjectTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTaskSectionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectTaskSectionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ProjectTaskSectionMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ProjectTaskSectionMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ProjectTaskSectionMutation) ProjectIDs() (ids []ulid.ID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ProjectTaskSectionMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the ProjectTaskSectionMutation builder.
func (m *ProjectTaskSectionMutation) Where(ps ...predicate.ProjectTaskSection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectTaskSectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProjectTaskSection).
func (m *ProjectTaskSectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectTaskSectionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.project != nil {
		fields = append(fields, projecttasksection.FieldProjectID)
	}
	if m.name != nil {
		fields = append(fields, projecttasksection.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, projecttasksection.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projecttasksection.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectTaskSectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projecttasksection.FieldProjectID:
		return m.ProjectID()
	case projecttasksection.FieldName:
		return m.Name()
	case projecttasksection.FieldCreatedAt:
		return m.CreatedAt()
	case projecttasksection.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectTaskSectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projecttasksection.FieldProjectID:
		return m.OldProjectID(ctx)
	case projecttasksection.FieldName:
		return m.OldName(ctx)
	case projecttasksection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projecttasksection.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectTaskSection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTaskSectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projecttasksection.FieldProjectID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case projecttasksection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case projecttasksection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projecttasksection.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskSection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectTaskSectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectTaskSectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTaskSectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectTaskSection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectTaskSectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectTaskSectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectTaskSectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectTaskSection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectTaskSectionMutation) ResetField(name string) error {
	switch name {
	case projecttasksection.FieldProjectID:
		m.ResetProjectID()
		return nil
	case projecttasksection.FieldName:
		m.ResetName()
		return nil
	case projecttasksection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projecttasksection.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskSection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectTaskSectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, projecttasksection.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectTaskSectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projecttasksection.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectTaskSectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectTaskSectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectTaskSectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, projecttasksection.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectTaskSectionMutation) EdgeCleared(name string) bool {
	switch name {
	case projecttasksection.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectTaskSectionMutation) ClearEdge(name string) error {
	switch name {
	case projecttasksection.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskSection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectTaskSectionMutation) ResetEdge(name string) error {
	switch name {
	case projecttasksection.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown ProjectTaskSection edge %s", name)
}

// ProjectTeammateMutation represents an operation that mutates the ProjectTeammate nodes in the graph.
type ProjectTeammateMutation struct {
	config
	op              Op
	typ             string
	id              *ulid.ID
	role            *string
	is_owner        *bool
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	project         *ulid.ID
	clearedproject  bool
	teammate        *ulid.ID
	clearedteammate bool
	done            bool
	oldValue        func(context.Context) (*ProjectTeammate, error)
	predicates      []predicate.ProjectTeammate
}

var _ ent.Mutation = (*ProjectTeammateMutation)(nil)

// projectteammateOption allows management of the mutation configuration using functional options.
type projectteammateOption func(*ProjectTeammateMutation)

// newProjectTeammateMutation creates new mutation for the ProjectTeammate entity.
func newProjectTeammateMutation(c config, op Op, opts ...projectteammateOption) *ProjectTeammateMutation {
	m := &ProjectTeammateMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectTeammate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectTeammateID sets the ID field of the mutation.
func withProjectTeammateID(id ulid.ID) projectteammateOption {
	return func(m *ProjectTeammateMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectTeammate
		)
		m.oldValue = func(ctx context.Context) (*ProjectTeammate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectTeammate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectTeammate sets the old ProjectTeammate of the mutation.
func withProjectTeammate(node *ProjectTeammate) projectteammateOption {
	return func(m *ProjectTeammateMutation) {
		m.oldValue = func(context.Context) (*ProjectTeammate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectTeammateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectTeammateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectTeammate entities.
func (m *ProjectTeammateMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectTeammateMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProjectID sets the "project_id" field.
func (m *ProjectTeammateMutation) SetProjectID(u ulid.ID) {
	m.project = &u
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *ProjectTeammateMutation) ProjectID() (r ulid.ID, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the ProjectTeammate entity.
// If the ProjectTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTeammateMutation) OldProjectID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *ProjectTeammateMutation) ResetProjectID() {
	m.project = nil
}

// SetTeammateID sets the "teammate_id" field.
func (m *ProjectTeammateMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *ProjectTeammateMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the ProjectTeammate entity.
// If the ProjectTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTeammateMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *ProjectTeammateMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetRole sets the "role" field.
func (m *ProjectTeammateMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *ProjectTeammateMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the ProjectTeammate entity.
// If the ProjectTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTeammateMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *ProjectTeammateMutation) ResetRole() {
	m.role = nil
}

// SetIsOwner sets the "is_owner" field.
func (m *ProjectTeammateMutation) SetIsOwner(b bool) {
	m.is_owner = &b
}

// IsOwner returns the value of the "is_owner" field in the mutation.
func (m *ProjectTeammateMutation) IsOwner() (r bool, exists bool) {
	v := m.is_owner
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOwner returns the old "is_owner" field's value of the ProjectTeammate entity.
// If the ProjectTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTeammateMutation) OldIsOwner(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOwner: %w", err)
	}
	return oldValue.IsOwner, nil
}

// ResetIsOwner resets all changes to the "is_owner" field.
func (m *ProjectTeammateMutation) ResetIsOwner() {
	m.is_owner = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectTeammateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectTeammateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProjectTeammate entity.
// If the ProjectTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTeammateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectTeammateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectTeammateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectTeammateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProjectTeammate entity.
// If the ProjectTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectTeammateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectTeammateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ProjectTeammateMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ProjectTeammateMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ProjectTeammateMutation) ProjectIDs() (ids []ulid.ID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ProjectTeammateMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *ProjectTeammateMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *ProjectTeammateMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *ProjectTeammateMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *ProjectTeammateMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// Where appends a list predicates to the ProjectTeammateMutation builder.
func (m *ProjectTeammateMutation) Where(ps ...predicate.ProjectTeammate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProjectTeammateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProjectTeammate).
func (m *ProjectTeammateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectTeammateMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.project != nil {
		fields = append(fields, projectteammate.FieldProjectID)
	}
	if m.teammate != nil {
		fields = append(fields, projectteammate.FieldTeammateID)
	}
	if m.role != nil {
		fields = append(fields, projectteammate.FieldRole)
	}
	if m.is_owner != nil {
		fields = append(fields, projectteammate.FieldIsOwner)
	}
	if m.created_at != nil {
		fields = append(fields, projectteammate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, projectteammate.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectTeammateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projectteammate.FieldProjectID:
		return m.ProjectID()
	case projectteammate.FieldTeammateID:
		return m.TeammateID()
	case projectteammate.FieldRole:
		return m.Role()
	case projectteammate.FieldIsOwner:
		return m.IsOwner()
	case projectteammate.FieldCreatedAt:
		return m.CreatedAt()
	case projectteammate.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectTeammateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projectteammate.FieldProjectID:
		return m.OldProjectID(ctx)
	case projectteammate.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case projectteammate.FieldRole:
		return m.OldRole(ctx)
	case projectteammate.FieldIsOwner:
		return m.OldIsOwner(ctx)
	case projectteammate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case projectteammate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectTeammate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTeammateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projectteammate.FieldProjectID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case projectteammate.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case projectteammate.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case projectteammate.FieldIsOwner:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOwner(v)
		return nil
	case projectteammate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case projectteammate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectTeammate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectTeammateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectTeammateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectTeammateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectTeammate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectTeammateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectTeammateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectTeammateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProjectTeammate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectTeammateMutation) ResetField(name string) error {
	switch name {
	case projectteammate.FieldProjectID:
		m.ResetProjectID()
		return nil
	case projectteammate.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case projectteammate.FieldRole:
		m.ResetRole()
		return nil
	case projectteammate.FieldIsOwner:
		m.ResetIsOwner()
		return nil
	case projectteammate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case projectteammate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProjectTeammate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectTeammateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, projectteammate.EdgeProject)
	}
	if m.teammate != nil {
		edges = append(edges, projectteammate.EdgeTeammate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectTeammateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projectteammate.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case projectteammate.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectTeammateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectTeammateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectTeammateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, projectteammate.EdgeProject)
	}
	if m.clearedteammate {
		edges = append(edges, projectteammate.EdgeTeammate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectTeammateMutation) EdgeCleared(name string) bool {
	switch name {
	case projectteammate.EdgeProject:
		return m.clearedproject
	case projectteammate.EdgeTeammate:
		return m.clearedteammate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectTeammateMutation) ClearEdge(name string) error {
	switch name {
	case projectteammate.EdgeProject:
		m.ClearProject()
		return nil
	case projectteammate.EdgeTeammate:
		m.ClearTeammate()
		return nil
	}
	return fmt.Errorf("unknown ProjectTeammate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectTeammateMutation) ResetEdge(name string) error {
	switch name {
	case projectteammate.EdgeProject:
		m.ResetProject()
		return nil
	case projectteammate.EdgeTeammate:
		m.ResetTeammate()
		return nil
	}
	return fmt.Errorf("unknown ProjectTeammate edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                   Op
	typ                  string
	id                   *ulid.ID
	created_by           *ulid.ID
	completed            *bool
	completed_at         *time.Time
	is_new               *bool
	name                 *string
	due_date             *time.Time
	due_time             *time.Time
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	teammate             *ulid.ID
	clearedteammate      bool
	task_priority        *ulid.ID
	clearedtask_priority bool
	parent               *ulid.ID
	clearedparent        bool
	sub_tasks            map[ulid.ID]struct{}
	removedsub_tasks     map[ulid.ID]struct{}
	clearedsub_tasks     bool
	done                 bool
	oldValue             func(context.Context) (*Task, error)
	predicates           []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id ulid.ID) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTaskParentID sets the "task_parent_id" field.
func (m *TaskMutation) SetTaskParentID(u ulid.ID) {
	m.parent = &u
}

// TaskParentID returns the value of the "task_parent_id" field in the mutation.
func (m *TaskMutation) TaskParentID() (r ulid.ID, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskParentID returns the old "task_parent_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTaskParentID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskParentID: %w", err)
	}
	return oldValue.TaskParentID, nil
}

// ClearTaskParentID clears the value of the "task_parent_id" field.
func (m *TaskMutation) ClearTaskParentID() {
	m.parent = nil
	m.clearedFields[task.FieldTaskParentID] = struct{}{}
}

// TaskParentIDCleared returns if the "task_parent_id" field was cleared in this mutation.
func (m *TaskMutation) TaskParentIDCleared() bool {
	_, ok := m.clearedFields[task.FieldTaskParentID]
	return ok
}

// ResetTaskParentID resets all changes to the "task_parent_id" field.
func (m *TaskMutation) ResetTaskParentID() {
	m.parent = nil
	delete(m.clearedFields, task.FieldTaskParentID)
}

// SetTaskPriorityID sets the "task_priority_id" field.
func (m *TaskMutation) SetTaskPriorityID(u ulid.ID) {
	m.task_priority = &u
}

// TaskPriorityID returns the value of the "task_priority_id" field in the mutation.
func (m *TaskMutation) TaskPriorityID() (r ulid.ID, exists bool) {
	v := m.task_priority
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskPriorityID returns the old "task_priority_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTaskPriorityID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskPriorityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskPriorityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskPriorityID: %w", err)
	}
	return oldValue.TaskPriorityID, nil
}

// ResetTaskPriorityID resets all changes to the "task_priority_id" field.
func (m *TaskMutation) ResetTaskPriorityID() {
	m.task_priority = nil
}

// SetAssigneeID sets the "assignee_id" field.
func (m *TaskMutation) SetAssigneeID(u ulid.ID) {
	m.teammate = &u
}

// AssigneeID returns the value of the "assignee_id" field in the mutation.
func (m *TaskMutation) AssigneeID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldAssigneeID returns the old "assignee_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldAssigneeID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAssigneeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAssigneeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssigneeID: %w", err)
	}
	return oldValue.AssigneeID, nil
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (m *TaskMutation) ClearAssigneeID() {
	m.teammate = nil
	m.clearedFields[task.FieldAssigneeID] = struct{}{}
}

// AssigneeIDCleared returns if the "assignee_id" field was cleared in this mutation.
func (m *TaskMutation) AssigneeIDCleared() bool {
	_, ok := m.clearedFields[task.FieldAssigneeID]
	return ok
}

// ResetAssigneeID resets all changes to the "assignee_id" field.
func (m *TaskMutation) ResetAssigneeID() {
	m.teammate = nil
	delete(m.clearedFields, task.FieldAssigneeID)
}

// SetCreatedBy sets the "created_by" field.
func (m *TaskMutation) SetCreatedBy(u ulid.ID) {
	m.created_by = &u
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TaskMutation) CreatedBy() (r ulid.ID, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedBy(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TaskMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetCompleted sets the "completed" field.
func (m *TaskMutation) SetCompleted(b bool) {
	m.completed = &b
}

// Completed returns the value of the "completed" field in the mutation.
func (m *TaskMutation) Completed() (r bool, exists bool) {
	v := m.completed
	if v == nil {
		return
	}
	return *v, true
}

// OldCompleted returns the old "completed" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompleted: %w", err)
	}
	return oldValue.Completed, nil
}

// ResetCompleted resets all changes to the "completed" field.
func (m *TaskMutation) ResetCompleted() {
	m.completed = nil
}

// SetCompletedAt sets the "completed_at" field.
func (m *TaskMutation) SetCompletedAt(t time.Time) {
	m.completed_at = &t
}

// CompletedAt returns the value of the "completed_at" field in the mutation.
func (m *TaskMutation) CompletedAt() (r time.Time, exists bool) {
	v := m.completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedAt returns the old "completed_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCompletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedAt: %w", err)
	}
	return oldValue.CompletedAt, nil
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (m *TaskMutation) ClearCompletedAt() {
	m.completed_at = nil
	m.clearedFields[task.FieldCompletedAt] = struct{}{}
}

// CompletedAtCleared returns if the "completed_at" field was cleared in this mutation.
func (m *TaskMutation) CompletedAtCleared() bool {
	_, ok := m.clearedFields[task.FieldCompletedAt]
	return ok
}

// ResetCompletedAt resets all changes to the "completed_at" field.
func (m *TaskMutation) ResetCompletedAt() {
	m.completed_at = nil
	delete(m.clearedFields, task.FieldCompletedAt)
}

// SetIsNew sets the "is_new" field.
func (m *TaskMutation) SetIsNew(b bool) {
	m.is_new = &b
}

// IsNew returns the value of the "is_new" field in the mutation.
func (m *TaskMutation) IsNew() (r bool, exists bool) {
	v := m.is_new
	if v == nil {
		return
	}
	return *v, true
}

// OldIsNew returns the old "is_new" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldIsNew(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsNew is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsNew requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsNew: %w", err)
	}
	return oldValue.IsNew, nil
}

// ResetIsNew resets all changes to the "is_new" field.
func (m *TaskMutation) ResetIsNew() {
	m.is_new = nil
}

// SetName sets the "name" field.
func (m *TaskMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskMutation) ResetName() {
	m.name = nil
}

// SetDueDate sets the "due_date" field.
func (m *TaskMutation) SetDueDate(t time.Time) {
	m.due_date = &t
}

// DueDate returns the value of the "due_date" field in the mutation.
func (m *TaskMutation) DueDate() (r time.Time, exists bool) {
	v := m.due_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "due_date" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDueDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ClearDueDate clears the value of the "due_date" field.
func (m *TaskMutation) ClearDueDate() {
	m.due_date = nil
	m.clearedFields[task.FieldDueDate] = struct{}{}
}

// DueDateCleared returns if the "due_date" field was cleared in this mutation.
func (m *TaskMutation) DueDateCleared() bool {
	_, ok := m.clearedFields[task.FieldDueDate]
	return ok
}

// ResetDueDate resets all changes to the "due_date" field.
func (m *TaskMutation) ResetDueDate() {
	m.due_date = nil
	delete(m.clearedFields, task.FieldDueDate)
}

// SetDueTime sets the "due_time" field.
func (m *TaskMutation) SetDueTime(t time.Time) {
	m.due_time = &t
}

// DueTime returns the value of the "due_time" field in the mutation.
func (m *TaskMutation) DueTime() (r time.Time, exists bool) {
	v := m.due_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDueTime returns the old "due_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDueTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDueTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDueTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueTime: %w", err)
	}
	return oldValue.DueTime, nil
}

// ClearDueTime clears the value of the "due_time" field.
func (m *TaskMutation) ClearDueTime() {
	m.due_time = nil
	m.clearedFields[task.FieldDueTime] = struct{}{}
}

// DueTimeCleared returns if the "due_time" field was cleared in this mutation.
func (m *TaskMutation) DueTimeCleared() bool {
	_, ok := m.clearedFields[task.FieldDueTime]
	return ok
}

// ResetDueTime resets all changes to the "due_time" field.
func (m *TaskMutation) ResetDueTime() {
	m.due_time = nil
	delete(m.clearedFields, task.FieldDueTime)
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTeammateID sets the "teammate" edge to the Teammate entity by id.
func (m *TaskMutation) SetTeammateID(id ulid.ID) {
	m.teammate = &id
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *TaskMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *TaskMutation) TeammateCleared() bool {
	return m.AssigneeIDCleared() || m.clearedteammate
}

// TeammateID returns the "teammate" edge ID in the mutation.
func (m *TaskMutation) TeammateID() (id ulid.ID, exists bool) {
	if m.teammate != nil {
		return *m.teammate, true
	}
	return
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *TaskMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// ClearTaskPriority clears the "task_priority" edge to the TaskPriority entity.
func (m *TaskMutation) ClearTaskPriority() {
	m.clearedtask_priority = true
}

// TaskPriorityCleared reports if the "task_priority" edge to the TaskPriority entity was cleared.
func (m *TaskMutation) TaskPriorityCleared() bool {
	return m.clearedtask_priority
}

// TaskPriorityIDs returns the "task_priority" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskPriorityID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) TaskPriorityIDs() (ids []ulid.ID) {
	if id := m.task_priority; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskPriority resets all changes to the "task_priority" edge.
func (m *TaskMutation) ResetTaskPriority() {
	m.task_priority = nil
	m.clearedtask_priority = false
}

// SetParentID sets the "parent" edge to the Task entity by id.
func (m *TaskMutation) SetParentID(id ulid.ID) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Task entity.
func (m *TaskMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Task entity was cleared.
func (m *TaskMutation) ParentCleared() bool {
	return m.TaskParentIDCleared() || m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *TaskMutation) ParentID() (id ulid.ID, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) ParentIDs() (ids []ulid.ID) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *TaskMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddSubTaskIDs adds the "sub_tasks" edge to the Task entity by ids.
func (m *TaskMutation) AddSubTaskIDs(ids ...ulid.ID) {
	if m.sub_tasks == nil {
		m.sub_tasks = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.sub_tasks[ids[i]] = struct{}{}
	}
}

// ClearSubTasks clears the "sub_tasks" edge to the Task entity.
func (m *TaskMutation) ClearSubTasks() {
	m.clearedsub_tasks = true
}

// SubTasksCleared reports if the "sub_tasks" edge to the Task entity was cleared.
func (m *TaskMutation) SubTasksCleared() bool {
	return m.clearedsub_tasks
}

// RemoveSubTaskIDs removes the "sub_tasks" edge to the Task entity by IDs.
func (m *TaskMutation) RemoveSubTaskIDs(ids ...ulid.ID) {
	if m.removedsub_tasks == nil {
		m.removedsub_tasks = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.sub_tasks, ids[i])
		m.removedsub_tasks[ids[i]] = struct{}{}
	}
}

// RemovedSubTasks returns the removed IDs of the "sub_tasks" edge to the Task entity.
func (m *TaskMutation) RemovedSubTasksIDs() (ids []ulid.ID) {
	for id := range m.removedsub_tasks {
		ids = append(ids, id)
	}
	return
}

// SubTasksIDs returns the "sub_tasks" edge IDs in the mutation.
func (m *TaskMutation) SubTasksIDs() (ids []ulid.ID) {
	for id := range m.sub_tasks {
		ids = append(ids, id)
	}
	return
}

// ResetSubTasks resets all changes to the "sub_tasks" edge.
func (m *TaskMutation) ResetSubTasks() {
	m.sub_tasks = nil
	m.clearedsub_tasks = false
	m.removedsub_tasks = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.parent != nil {
		fields = append(fields, task.FieldTaskParentID)
	}
	if m.task_priority != nil {
		fields = append(fields, task.FieldTaskPriorityID)
	}
	if m.teammate != nil {
		fields = append(fields, task.FieldAssigneeID)
	}
	if m.created_by != nil {
		fields = append(fields, task.FieldCreatedBy)
	}
	if m.completed != nil {
		fields = append(fields, task.FieldCompleted)
	}
	if m.completed_at != nil {
		fields = append(fields, task.FieldCompletedAt)
	}
	if m.is_new != nil {
		fields = append(fields, task.FieldIsNew)
	}
	if m.name != nil {
		fields = append(fields, task.FieldName)
	}
	if m.due_date != nil {
		fields = append(fields, task.FieldDueDate)
	}
	if m.due_time != nil {
		fields = append(fields, task.FieldDueTime)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, task.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldTaskParentID:
		return m.TaskParentID()
	case task.FieldTaskPriorityID:
		return m.TaskPriorityID()
	case task.FieldAssigneeID:
		return m.AssigneeID()
	case task.FieldCreatedBy:
		return m.CreatedBy()
	case task.FieldCompleted:
		return m.Completed()
	case task.FieldCompletedAt:
		return m.CompletedAt()
	case task.FieldIsNew:
		return m.IsNew()
	case task.FieldName:
		return m.Name()
	case task.FieldDueDate:
		return m.DueDate()
	case task.FieldDueTime:
		return m.DueTime()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldTaskParentID:
		return m.OldTaskParentID(ctx)
	case task.FieldTaskPriorityID:
		return m.OldTaskPriorityID(ctx)
	case task.FieldAssigneeID:
		return m.OldAssigneeID(ctx)
	case task.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case task.FieldCompleted:
		return m.OldCompleted(ctx)
	case task.FieldCompletedAt:
		return m.OldCompletedAt(ctx)
	case task.FieldIsNew:
		return m.OldIsNew(ctx)
	case task.FieldName:
		return m.OldName(ctx)
	case task.FieldDueDate:
		return m.OldDueDate(ctx)
	case task.FieldDueTime:
		return m.OldDueTime(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldTaskParentID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskParentID(v)
		return nil
	case task.FieldTaskPriorityID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskPriorityID(v)
		return nil
	case task.FieldAssigneeID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssigneeID(v)
		return nil
	case task.FieldCreatedBy:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case task.FieldCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompleted(v)
		return nil
	case task.FieldCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedAt(v)
		return nil
	case task.FieldIsNew:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsNew(v)
		return nil
	case task.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case task.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case task.FieldDueTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueTime(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldTaskParentID) {
		fields = append(fields, task.FieldTaskParentID)
	}
	if m.FieldCleared(task.FieldAssigneeID) {
		fields = append(fields, task.FieldAssigneeID)
	}
	if m.FieldCleared(task.FieldCompletedAt) {
		fields = append(fields, task.FieldCompletedAt)
	}
	if m.FieldCleared(task.FieldDueDate) {
		fields = append(fields, task.FieldDueDate)
	}
	if m.FieldCleared(task.FieldDueTime) {
		fields = append(fields, task.FieldDueTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldTaskParentID:
		m.ClearTaskParentID()
		return nil
	case task.FieldAssigneeID:
		m.ClearAssigneeID()
		return nil
	case task.FieldCompletedAt:
		m.ClearCompletedAt()
		return nil
	case task.FieldDueDate:
		m.ClearDueDate()
		return nil
	case task.FieldDueTime:
		m.ClearDueTime()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldTaskParentID:
		m.ResetTaskParentID()
		return nil
	case task.FieldTaskPriorityID:
		m.ResetTaskPriorityID()
		return nil
	case task.FieldAssigneeID:
		m.ResetAssigneeID()
		return nil
	case task.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case task.FieldCompleted:
		m.ResetCompleted()
		return nil
	case task.FieldCompletedAt:
		m.ResetCompletedAt()
		return nil
	case task.FieldIsNew:
		m.ResetIsNew()
		return nil
	case task.FieldName:
		m.ResetName()
		return nil
	case task.FieldDueDate:
		m.ResetDueDate()
		return nil
	case task.FieldDueTime:
		m.ResetDueTime()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.teammate != nil {
		edges = append(edges, task.EdgeTeammate)
	}
	if m.task_priority != nil {
		edges = append(edges, task.EdgeTaskPriority)
	}
	if m.parent != nil {
		edges = append(edges, task.EdgeParent)
	}
	if m.sub_tasks != nil {
		edges = append(edges, task.EdgeSubTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeTaskPriority:
		if id := m.task_priority; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeSubTasks:
		ids := make([]ent.Value, 0, len(m.sub_tasks))
		for id := range m.sub_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedsub_tasks != nil {
		edges = append(edges, task.EdgeSubTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeSubTasks:
		ids := make([]ent.Value, 0, len(m.removedsub_tasks))
		for id := range m.removedsub_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedteammate {
		edges = append(edges, task.EdgeTeammate)
	}
	if m.clearedtask_priority {
		edges = append(edges, task.EdgeTaskPriority)
	}
	if m.clearedparent {
		edges = append(edges, task.EdgeParent)
	}
	if m.clearedsub_tasks {
		edges = append(edges, task.EdgeSubTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeTeammate:
		return m.clearedteammate
	case task.EdgeTaskPriority:
		return m.clearedtask_priority
	case task.EdgeParent:
		return m.clearedparent
	case task.EdgeSubTasks:
		return m.clearedsub_tasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeTeammate:
		m.ClearTeammate()
		return nil
	case task.EdgeTaskPriority:
		m.ClearTaskPriority()
		return nil
	case task.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeTeammate:
		m.ResetTeammate()
		return nil
	case task.EdgeTaskPriority:
		m.ResetTaskPriority()
		return nil
	case task.EdgeParent:
		m.ResetParent()
		return nil
	case task.EdgeSubTasks:
		m.ResetSubTasks()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TaskColumnMutation represents an operation that mutates the TaskColumn nodes in the graph.
type TaskColumnMutation struct {
	config
	op                           Op
	typ                          string
	id                           *ulid.ID
	name                         *string
	_type                        *taskcolumn.Type
	created_at                   *time.Time
	updated_at                   *time.Time
	clearedFields                map[string]struct{}
	teammate_task_columns        map[ulid.ID]struct{}
	removedteammate_task_columns map[ulid.ID]struct{}
	clearedteammate_task_columns bool
	project_task_columns         map[ulid.ID]struct{}
	removedproject_task_columns  map[ulid.ID]struct{}
	clearedproject_task_columns  bool
	done                         bool
	oldValue                     func(context.Context) (*TaskColumn, error)
	predicates                   []predicate.TaskColumn
}

var _ ent.Mutation = (*TaskColumnMutation)(nil)

// taskcolumnOption allows management of the mutation configuration using functional options.
type taskcolumnOption func(*TaskColumnMutation)

// newTaskColumnMutation creates new mutation for the TaskColumn entity.
func newTaskColumnMutation(c config, op Op, opts ...taskcolumnOption) *TaskColumnMutation {
	m := &TaskColumnMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskColumn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskColumnID sets the ID field of the mutation.
func withTaskColumnID(id ulid.ID) taskcolumnOption {
	return func(m *TaskColumnMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskColumn
		)
		m.oldValue = func(ctx context.Context) (*TaskColumn, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskColumn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskColumn sets the old TaskColumn of the mutation.
func withTaskColumn(node *TaskColumn) taskcolumnOption {
	return func(m *TaskColumnMutation) {
		m.oldValue = func(context.Context) (*TaskColumn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskColumnMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskColumnMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskColumn entities.
func (m *TaskColumnMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskColumnMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *TaskColumnMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskColumnMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TaskColumn entity.
// If the TaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskColumnMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskColumnMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *TaskColumnMutation) SetType(t taskcolumn.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaskColumnMutation) GetType() (r taskcolumn.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the TaskColumn entity.
// If the TaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskColumnMutation) OldType(ctx context.Context) (v taskcolumn.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TaskColumnMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskColumnMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskColumnMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaskColumn entity.
// If the TaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskColumnMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskColumnMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskColumnMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskColumnMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TaskColumn entity.
// If the TaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskColumnMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskColumnMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTeammateTaskColumnIDs adds the "teammate_task_columns" edge to the TeammateTaskColumn entity by ids.
func (m *TaskColumnMutation) AddTeammateTaskColumnIDs(ids ...ulid.ID) {
	if m.teammate_task_columns == nil {
		m.teammate_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_columns[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskColumns clears the "teammate_task_columns" edge to the TeammateTaskColumn entity.
func (m *TaskColumnMutation) ClearTeammateTaskColumns() {
	m.clearedteammate_task_columns = true
}

// TeammateTaskColumnsCleared reports if the "teammate_task_columns" edge to the TeammateTaskColumn entity was cleared.
func (m *TaskColumnMutation) TeammateTaskColumnsCleared() bool {
	return m.clearedteammate_task_columns
}

// RemoveTeammateTaskColumnIDs removes the "teammate_task_columns" edge to the TeammateTaskColumn entity by IDs.
func (m *TaskColumnMutation) RemoveTeammateTaskColumnIDs(ids ...ulid.ID) {
	if m.removedteammate_task_columns == nil {
		m.removedteammate_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_columns, ids[i])
		m.removedteammate_task_columns[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskColumns returns the removed IDs of the "teammate_task_columns" edge to the TeammateTaskColumn entity.
func (m *TaskColumnMutation) RemovedTeammateTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_columns {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskColumnsIDs returns the "teammate_task_columns" edge IDs in the mutation.
func (m *TaskColumnMutation) TeammateTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_columns {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskColumns resets all changes to the "teammate_task_columns" edge.
func (m *TaskColumnMutation) ResetTeammateTaskColumns() {
	m.teammate_task_columns = nil
	m.clearedteammate_task_columns = false
	m.removedteammate_task_columns = nil
}

// AddProjectTaskColumnIDs adds the "project_task_columns" edge to the ProjectTaskColumn entity by ids.
func (m *TaskColumnMutation) AddProjectTaskColumnIDs(ids ...ulid.ID) {
	if m.project_task_columns == nil {
		m.project_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_task_columns[ids[i]] = struct{}{}
	}
}

// ClearProjectTaskColumns clears the "project_task_columns" edge to the ProjectTaskColumn entity.
func (m *TaskColumnMutation) ClearProjectTaskColumns() {
	m.clearedproject_task_columns = true
}

// ProjectTaskColumnsCleared reports if the "project_task_columns" edge to the ProjectTaskColumn entity was cleared.
func (m *TaskColumnMutation) ProjectTaskColumnsCleared() bool {
	return m.clearedproject_task_columns
}

// RemoveProjectTaskColumnIDs removes the "project_task_columns" edge to the ProjectTaskColumn entity by IDs.
func (m *TaskColumnMutation) RemoveProjectTaskColumnIDs(ids ...ulid.ID) {
	if m.removedproject_task_columns == nil {
		m.removedproject_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_task_columns, ids[i])
		m.removedproject_task_columns[ids[i]] = struct{}{}
	}
}

// RemovedProjectTaskColumns returns the removed IDs of the "project_task_columns" edge to the ProjectTaskColumn entity.
func (m *TaskColumnMutation) RemovedProjectTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.removedproject_task_columns {
		ids = append(ids, id)
	}
	return
}

// ProjectTaskColumnsIDs returns the "project_task_columns" edge IDs in the mutation.
func (m *TaskColumnMutation) ProjectTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.project_task_columns {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTaskColumns resets all changes to the "project_task_columns" edge.
func (m *TaskColumnMutation) ResetProjectTaskColumns() {
	m.project_task_columns = nil
	m.clearedproject_task_columns = false
	m.removedproject_task_columns = nil
}

// Where appends a list predicates to the TaskColumnMutation builder.
func (m *TaskColumnMutation) Where(ps ...predicate.TaskColumn) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskColumnMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskColumn).
func (m *TaskColumnMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskColumnMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, taskcolumn.FieldName)
	}
	if m._type != nil {
		fields = append(fields, taskcolumn.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, taskcolumn.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, taskcolumn.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskColumnMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskcolumn.FieldName:
		return m.Name()
	case taskcolumn.FieldType:
		return m.GetType()
	case taskcolumn.FieldCreatedAt:
		return m.CreatedAt()
	case taskcolumn.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskColumnMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskcolumn.FieldName:
		return m.OldName(ctx)
	case taskcolumn.FieldType:
		return m.OldType(ctx)
	case taskcolumn.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case taskcolumn.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaskColumn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskColumnMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskcolumn.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case taskcolumn.FieldType:
		v, ok := value.(taskcolumn.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case taskcolumn.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case taskcolumn.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskColumn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskColumnMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskColumnMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskColumnMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskColumn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskColumnMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskColumnMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskColumnMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskColumn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskColumnMutation) ResetField(name string) error {
	switch name {
	case taskcolumn.FieldName:
		m.ResetName()
		return nil
	case taskcolumn.FieldType:
		m.ResetType()
		return nil
	case taskcolumn.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case taskcolumn.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskColumn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskColumnMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.teammate_task_columns != nil {
		edges = append(edges, taskcolumn.EdgeTeammateTaskColumns)
	}
	if m.project_task_columns != nil {
		edges = append(edges, taskcolumn.EdgeProjectTaskColumns)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskColumnMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case taskcolumn.EdgeTeammateTaskColumns:
		ids := make([]ent.Value, 0, len(m.teammate_task_columns))
		for id := range m.teammate_task_columns {
			ids = append(ids, id)
		}
		return ids
	case taskcolumn.EdgeProjectTaskColumns:
		ids := make([]ent.Value, 0, len(m.project_task_columns))
		for id := range m.project_task_columns {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskColumnMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedteammate_task_columns != nil {
		edges = append(edges, taskcolumn.EdgeTeammateTaskColumns)
	}
	if m.removedproject_task_columns != nil {
		edges = append(edges, taskcolumn.EdgeProjectTaskColumns)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskColumnMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case taskcolumn.EdgeTeammateTaskColumns:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_columns))
		for id := range m.removedteammate_task_columns {
			ids = append(ids, id)
		}
		return ids
	case taskcolumn.EdgeProjectTaskColumns:
		ids := make([]ent.Value, 0, len(m.removedproject_task_columns))
		for id := range m.removedproject_task_columns {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskColumnMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteammate_task_columns {
		edges = append(edges, taskcolumn.EdgeTeammateTaskColumns)
	}
	if m.clearedproject_task_columns {
		edges = append(edges, taskcolumn.EdgeProjectTaskColumns)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskColumnMutation) EdgeCleared(name string) bool {
	switch name {
	case taskcolumn.EdgeTeammateTaskColumns:
		return m.clearedteammate_task_columns
	case taskcolumn.EdgeProjectTaskColumns:
		return m.clearedproject_task_columns
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskColumnMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskColumn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskColumnMutation) ResetEdge(name string) error {
	switch name {
	case taskcolumn.EdgeTeammateTaskColumns:
		m.ResetTeammateTaskColumns()
		return nil
	case taskcolumn.EdgeProjectTaskColumns:
		m.ResetProjectTaskColumns()
		return nil
	}
	return fmt.Errorf("unknown TaskColumn edge %s", name)
}

// TaskListCompletedStatusMutation represents an operation that mutates the TaskListCompletedStatus nodes in the graph.
type TaskListCompletedStatusMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *ulid.ID
	name                               *string
	status_code                        *tasklistcompletedstatus.StatusCode
	created_at                         *time.Time
	updated_at                         *time.Time
	clearedFields                      map[string]struct{}
	teammate_task_list_statuses        map[ulid.ID]struct{}
	removedteammate_task_list_statuses map[ulid.ID]struct{}
	clearedteammate_task_list_statuses bool
	project_task_list_statuses         map[ulid.ID]struct{}
	removedproject_task_list_statuses  map[ulid.ID]struct{}
	clearedproject_task_list_statuses  bool
	done                               bool
	oldValue                           func(context.Context) (*TaskListCompletedStatus, error)
	predicates                         []predicate.TaskListCompletedStatus
}

var _ ent.Mutation = (*TaskListCompletedStatusMutation)(nil)

// tasklistcompletedstatusOption allows management of the mutation configuration using functional options.
type tasklistcompletedstatusOption func(*TaskListCompletedStatusMutation)

// newTaskListCompletedStatusMutation creates new mutation for the TaskListCompletedStatus entity.
func newTaskListCompletedStatusMutation(c config, op Op, opts ...tasklistcompletedstatusOption) *TaskListCompletedStatusMutation {
	m := &TaskListCompletedStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskListCompletedStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskListCompletedStatusID sets the ID field of the mutation.
func withTaskListCompletedStatusID(id ulid.ID) tasklistcompletedstatusOption {
	return func(m *TaskListCompletedStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskListCompletedStatus
		)
		m.oldValue = func(ctx context.Context) (*TaskListCompletedStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskListCompletedStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskListCompletedStatus sets the old TaskListCompletedStatus of the mutation.
func withTaskListCompletedStatus(node *TaskListCompletedStatus) tasklistcompletedstatusOption {
	return func(m *TaskListCompletedStatusMutation) {
		m.oldValue = func(context.Context) (*TaskListCompletedStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskListCompletedStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskListCompletedStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskListCompletedStatus entities.
func (m *TaskListCompletedStatusMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskListCompletedStatusMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *TaskListCompletedStatusMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskListCompletedStatusMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TaskListCompletedStatus entity.
// If the TaskListCompletedStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListCompletedStatusMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskListCompletedStatusMutation) ResetName() {
	m.name = nil
}

// SetStatusCode sets the "status_code" field.
func (m *TaskListCompletedStatusMutation) SetStatusCode(tc tasklistcompletedstatus.StatusCode) {
	m.status_code = &tc
}

// StatusCode returns the value of the "status_code" field in the mutation.
func (m *TaskListCompletedStatusMutation) StatusCode() (r tasklistcompletedstatus.StatusCode, exists bool) {
	v := m.status_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusCode returns the old "status_code" field's value of the TaskListCompletedStatus entity.
// If the TaskListCompletedStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListCompletedStatusMutation) OldStatusCode(ctx context.Context) (v tasklistcompletedstatus.StatusCode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusCode: %w", err)
	}
	return oldValue.StatusCode, nil
}

// ResetStatusCode resets all changes to the "status_code" field.
func (m *TaskListCompletedStatusMutation) ResetStatusCode() {
	m.status_code = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskListCompletedStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskListCompletedStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaskListCompletedStatus entity.
// If the TaskListCompletedStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListCompletedStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskListCompletedStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskListCompletedStatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskListCompletedStatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TaskListCompletedStatus entity.
// If the TaskListCompletedStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListCompletedStatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskListCompletedStatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTeammateTaskListStatusIDs adds the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by ids.
func (m *TaskListCompletedStatusMutation) AddTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.teammate_task_list_statuses == nil {
		m.teammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskListStatuses clears the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *TaskListCompletedStatusMutation) ClearTeammateTaskListStatuses() {
	m.clearedteammate_task_list_statuses = true
}

// TeammateTaskListStatusesCleared reports if the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity was cleared.
func (m *TaskListCompletedStatusMutation) TeammateTaskListStatusesCleared() bool {
	return m.clearedteammate_task_list_statuses
}

// RemoveTeammateTaskListStatusIDs removes the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by IDs.
func (m *TaskListCompletedStatusMutation) RemoveTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.removedteammate_task_list_statuses == nil {
		m.removedteammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_list_statuses, ids[i])
		m.removedteammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskListStatuses returns the removed IDs of the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *TaskListCompletedStatusMutation) RemovedTeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskListStatusesIDs returns the "teammate_task_list_statuses" edge IDs in the mutation.
func (m *TaskListCompletedStatusMutation) TeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskListStatuses resets all changes to the "teammate_task_list_statuses" edge.
func (m *TaskListCompletedStatusMutation) ResetTeammateTaskListStatuses() {
	m.teammate_task_list_statuses = nil
	m.clearedteammate_task_list_statuses = false
	m.removedteammate_task_list_statuses = nil
}

// AddProjectTaskListStatusIDs adds the "project_task_list_statuses" edge to the ProjectTaskListStatus entity by ids.
func (m *TaskListCompletedStatusMutation) AddProjectTaskListStatusIDs(ids ...ulid.ID) {
	if m.project_task_list_statuses == nil {
		m.project_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_task_list_statuses[ids[i]] = struct{}{}
	}
}

// ClearProjectTaskListStatuses clears the "project_task_list_statuses" edge to the ProjectTaskListStatus entity.
func (m *TaskListCompletedStatusMutation) ClearProjectTaskListStatuses() {
	m.clearedproject_task_list_statuses = true
}

// ProjectTaskListStatusesCleared reports if the "project_task_list_statuses" edge to the ProjectTaskListStatus entity was cleared.
func (m *TaskListCompletedStatusMutation) ProjectTaskListStatusesCleared() bool {
	return m.clearedproject_task_list_statuses
}

// RemoveProjectTaskListStatusIDs removes the "project_task_list_statuses" edge to the ProjectTaskListStatus entity by IDs.
func (m *TaskListCompletedStatusMutation) RemoveProjectTaskListStatusIDs(ids ...ulid.ID) {
	if m.removedproject_task_list_statuses == nil {
		m.removedproject_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_task_list_statuses, ids[i])
		m.removedproject_task_list_statuses[ids[i]] = struct{}{}
	}
}

// RemovedProjectTaskListStatuses returns the removed IDs of the "project_task_list_statuses" edge to the ProjectTaskListStatus entity.
func (m *TaskListCompletedStatusMutation) RemovedProjectTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedproject_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ProjectTaskListStatusesIDs returns the "project_task_list_statuses" edge IDs in the mutation.
func (m *TaskListCompletedStatusMutation) ProjectTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.project_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTaskListStatuses resets all changes to the "project_task_list_statuses" edge.
func (m *TaskListCompletedStatusMutation) ResetProjectTaskListStatuses() {
	m.project_task_list_statuses = nil
	m.clearedproject_task_list_statuses = false
	m.removedproject_task_list_statuses = nil
}

// Where appends a list predicates to the TaskListCompletedStatusMutation builder.
func (m *TaskListCompletedStatusMutation) Where(ps ...predicate.TaskListCompletedStatus) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskListCompletedStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskListCompletedStatus).
func (m *TaskListCompletedStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskListCompletedStatusMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, tasklistcompletedstatus.FieldName)
	}
	if m.status_code != nil {
		fields = append(fields, tasklistcompletedstatus.FieldStatusCode)
	}
	if m.created_at != nil {
		fields = append(fields, tasklistcompletedstatus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tasklistcompletedstatus.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskListCompletedStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tasklistcompletedstatus.FieldName:
		return m.Name()
	case tasklistcompletedstatus.FieldStatusCode:
		return m.StatusCode()
	case tasklistcompletedstatus.FieldCreatedAt:
		return m.CreatedAt()
	case tasklistcompletedstatus.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskListCompletedStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tasklistcompletedstatus.FieldName:
		return m.OldName(ctx)
	case tasklistcompletedstatus.FieldStatusCode:
		return m.OldStatusCode(ctx)
	case tasklistcompletedstatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tasklistcompletedstatus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaskListCompletedStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskListCompletedStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tasklistcompletedstatus.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tasklistcompletedstatus.FieldStatusCode:
		v, ok := value.(tasklistcompletedstatus.StatusCode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusCode(v)
		return nil
	case tasklistcompletedstatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tasklistcompletedstatus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskListCompletedStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskListCompletedStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskListCompletedStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskListCompletedStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskListCompletedStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskListCompletedStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskListCompletedStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskListCompletedStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskListCompletedStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskListCompletedStatusMutation) ResetField(name string) error {
	switch name {
	case tasklistcompletedstatus.FieldName:
		m.ResetName()
		return nil
	case tasklistcompletedstatus.FieldStatusCode:
		m.ResetStatusCode()
		return nil
	case tasklistcompletedstatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tasklistcompletedstatus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskListCompletedStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskListCompletedStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.teammate_task_list_statuses != nil {
		edges = append(edges, tasklistcompletedstatus.EdgeTeammateTaskListStatuses)
	}
	if m.project_task_list_statuses != nil {
		edges = append(edges, tasklistcompletedstatus.EdgeProjectTaskListStatuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskListCompletedStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tasklistcompletedstatus.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.teammate_task_list_statuses))
		for id := range m.teammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case tasklistcompletedstatus.EdgeProjectTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.project_task_list_statuses))
		for id := range m.project_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskListCompletedStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedteammate_task_list_statuses != nil {
		edges = append(edges, tasklistcompletedstatus.EdgeTeammateTaskListStatuses)
	}
	if m.removedproject_task_list_statuses != nil {
		edges = append(edges, tasklistcompletedstatus.EdgeProjectTaskListStatuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskListCompletedStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tasklistcompletedstatus.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_list_statuses))
		for id := range m.removedteammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case tasklistcompletedstatus.EdgeProjectTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.removedproject_task_list_statuses))
		for id := range m.removedproject_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskListCompletedStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteammate_task_list_statuses {
		edges = append(edges, tasklistcompletedstatus.EdgeTeammateTaskListStatuses)
	}
	if m.clearedproject_task_list_statuses {
		edges = append(edges, tasklistcompletedstatus.EdgeProjectTaskListStatuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskListCompletedStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case tasklistcompletedstatus.EdgeTeammateTaskListStatuses:
		return m.clearedteammate_task_list_statuses
	case tasklistcompletedstatus.EdgeProjectTaskListStatuses:
		return m.clearedproject_task_list_statuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskListCompletedStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskListCompletedStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskListCompletedStatusMutation) ResetEdge(name string) error {
	switch name {
	case tasklistcompletedstatus.EdgeTeammateTaskListStatuses:
		m.ResetTeammateTaskListStatuses()
		return nil
	case tasklistcompletedstatus.EdgeProjectTaskListStatuses:
		m.ResetProjectTaskListStatuses()
		return nil
	}
	return fmt.Errorf("unknown TaskListCompletedStatus edge %s", name)
}

// TaskListSortStatusMutation represents an operation that mutates the TaskListSortStatus nodes in the graph.
type TaskListSortStatusMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *ulid.ID
	name                               *string
	status_code                        *tasklistsortstatus.StatusCode
	created_at                         *time.Time
	updated_at                         *time.Time
	clearedFields                      map[string]struct{}
	teammate_task_list_statuses        map[ulid.ID]struct{}
	removedteammate_task_list_statuses map[ulid.ID]struct{}
	clearedteammate_task_list_statuses bool
	project_task_list_statuses         map[ulid.ID]struct{}
	removedproject_task_list_statuses  map[ulid.ID]struct{}
	clearedproject_task_list_statuses  bool
	done                               bool
	oldValue                           func(context.Context) (*TaskListSortStatus, error)
	predicates                         []predicate.TaskListSortStatus
}

var _ ent.Mutation = (*TaskListSortStatusMutation)(nil)

// tasklistsortstatusOption allows management of the mutation configuration using functional options.
type tasklistsortstatusOption func(*TaskListSortStatusMutation)

// newTaskListSortStatusMutation creates new mutation for the TaskListSortStatus entity.
func newTaskListSortStatusMutation(c config, op Op, opts ...tasklistsortstatusOption) *TaskListSortStatusMutation {
	m := &TaskListSortStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskListSortStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskListSortStatusID sets the ID field of the mutation.
func withTaskListSortStatusID(id ulid.ID) tasklistsortstatusOption {
	return func(m *TaskListSortStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskListSortStatus
		)
		m.oldValue = func(ctx context.Context) (*TaskListSortStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskListSortStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskListSortStatus sets the old TaskListSortStatus of the mutation.
func withTaskListSortStatus(node *TaskListSortStatus) tasklistsortstatusOption {
	return func(m *TaskListSortStatusMutation) {
		m.oldValue = func(context.Context) (*TaskListSortStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskListSortStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskListSortStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskListSortStatus entities.
func (m *TaskListSortStatusMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskListSortStatusMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *TaskListSortStatusMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskListSortStatusMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TaskListSortStatus entity.
// If the TaskListSortStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListSortStatusMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskListSortStatusMutation) ResetName() {
	m.name = nil
}

// SetStatusCode sets the "status_code" field.
func (m *TaskListSortStatusMutation) SetStatusCode(tc tasklistsortstatus.StatusCode) {
	m.status_code = &tc
}

// StatusCode returns the value of the "status_code" field in the mutation.
func (m *TaskListSortStatusMutation) StatusCode() (r tasklistsortstatus.StatusCode, exists bool) {
	v := m.status_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusCode returns the old "status_code" field's value of the TaskListSortStatus entity.
// If the TaskListSortStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListSortStatusMutation) OldStatusCode(ctx context.Context) (v tasklistsortstatus.StatusCode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusCode: %w", err)
	}
	return oldValue.StatusCode, nil
}

// ResetStatusCode resets all changes to the "status_code" field.
func (m *TaskListSortStatusMutation) ResetStatusCode() {
	m.status_code = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskListSortStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskListSortStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaskListSortStatus entity.
// If the TaskListSortStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListSortStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskListSortStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskListSortStatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskListSortStatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TaskListSortStatus entity.
// If the TaskListSortStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskListSortStatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskListSortStatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTeammateTaskListStatusIDs adds the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by ids.
func (m *TaskListSortStatusMutation) AddTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.teammate_task_list_statuses == nil {
		m.teammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskListStatuses clears the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *TaskListSortStatusMutation) ClearTeammateTaskListStatuses() {
	m.clearedteammate_task_list_statuses = true
}

// TeammateTaskListStatusesCleared reports if the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity was cleared.
func (m *TaskListSortStatusMutation) TeammateTaskListStatusesCleared() bool {
	return m.clearedteammate_task_list_statuses
}

// RemoveTeammateTaskListStatusIDs removes the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by IDs.
func (m *TaskListSortStatusMutation) RemoveTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.removedteammate_task_list_statuses == nil {
		m.removedteammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_list_statuses, ids[i])
		m.removedteammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskListStatuses returns the removed IDs of the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *TaskListSortStatusMutation) RemovedTeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskListStatusesIDs returns the "teammate_task_list_statuses" edge IDs in the mutation.
func (m *TaskListSortStatusMutation) TeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskListStatuses resets all changes to the "teammate_task_list_statuses" edge.
func (m *TaskListSortStatusMutation) ResetTeammateTaskListStatuses() {
	m.teammate_task_list_statuses = nil
	m.clearedteammate_task_list_statuses = false
	m.removedteammate_task_list_statuses = nil
}

// AddProjectTaskListStatusIDs adds the "project_task_list_statuses" edge to the ProjectTaskListStatus entity by ids.
func (m *TaskListSortStatusMutation) AddProjectTaskListStatusIDs(ids ...ulid.ID) {
	if m.project_task_list_statuses == nil {
		m.project_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_task_list_statuses[ids[i]] = struct{}{}
	}
}

// ClearProjectTaskListStatuses clears the "project_task_list_statuses" edge to the ProjectTaskListStatus entity.
func (m *TaskListSortStatusMutation) ClearProjectTaskListStatuses() {
	m.clearedproject_task_list_statuses = true
}

// ProjectTaskListStatusesCleared reports if the "project_task_list_statuses" edge to the ProjectTaskListStatus entity was cleared.
func (m *TaskListSortStatusMutation) ProjectTaskListStatusesCleared() bool {
	return m.clearedproject_task_list_statuses
}

// RemoveProjectTaskListStatusIDs removes the "project_task_list_statuses" edge to the ProjectTaskListStatus entity by IDs.
func (m *TaskListSortStatusMutation) RemoveProjectTaskListStatusIDs(ids ...ulid.ID) {
	if m.removedproject_task_list_statuses == nil {
		m.removedproject_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_task_list_statuses, ids[i])
		m.removedproject_task_list_statuses[ids[i]] = struct{}{}
	}
}

// RemovedProjectTaskListStatuses returns the removed IDs of the "project_task_list_statuses" edge to the ProjectTaskListStatus entity.
func (m *TaskListSortStatusMutation) RemovedProjectTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedproject_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ProjectTaskListStatusesIDs returns the "project_task_list_statuses" edge IDs in the mutation.
func (m *TaskListSortStatusMutation) ProjectTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.project_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTaskListStatuses resets all changes to the "project_task_list_statuses" edge.
func (m *TaskListSortStatusMutation) ResetProjectTaskListStatuses() {
	m.project_task_list_statuses = nil
	m.clearedproject_task_list_statuses = false
	m.removedproject_task_list_statuses = nil
}

// Where appends a list predicates to the TaskListSortStatusMutation builder.
func (m *TaskListSortStatusMutation) Where(ps ...predicate.TaskListSortStatus) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskListSortStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskListSortStatus).
func (m *TaskListSortStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskListSortStatusMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, tasklistsortstatus.FieldName)
	}
	if m.status_code != nil {
		fields = append(fields, tasklistsortstatus.FieldStatusCode)
	}
	if m.created_at != nil {
		fields = append(fields, tasklistsortstatus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tasklistsortstatus.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskListSortStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tasklistsortstatus.FieldName:
		return m.Name()
	case tasklistsortstatus.FieldStatusCode:
		return m.StatusCode()
	case tasklistsortstatus.FieldCreatedAt:
		return m.CreatedAt()
	case tasklistsortstatus.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskListSortStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tasklistsortstatus.FieldName:
		return m.OldName(ctx)
	case tasklistsortstatus.FieldStatusCode:
		return m.OldStatusCode(ctx)
	case tasklistsortstatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tasklistsortstatus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaskListSortStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskListSortStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tasklistsortstatus.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tasklistsortstatus.FieldStatusCode:
		v, ok := value.(tasklistsortstatus.StatusCode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusCode(v)
		return nil
	case tasklistsortstatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tasklistsortstatus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskListSortStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskListSortStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskListSortStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskListSortStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskListSortStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskListSortStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskListSortStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskListSortStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskListSortStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskListSortStatusMutation) ResetField(name string) error {
	switch name {
	case tasklistsortstatus.FieldName:
		m.ResetName()
		return nil
	case tasklistsortstatus.FieldStatusCode:
		m.ResetStatusCode()
		return nil
	case tasklistsortstatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tasklistsortstatus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskListSortStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskListSortStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.teammate_task_list_statuses != nil {
		edges = append(edges, tasklistsortstatus.EdgeTeammateTaskListStatuses)
	}
	if m.project_task_list_statuses != nil {
		edges = append(edges, tasklistsortstatus.EdgeProjectTaskListStatuses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskListSortStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tasklistsortstatus.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.teammate_task_list_statuses))
		for id := range m.teammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case tasklistsortstatus.EdgeProjectTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.project_task_list_statuses))
		for id := range m.project_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskListSortStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedteammate_task_list_statuses != nil {
		edges = append(edges, tasklistsortstatus.EdgeTeammateTaskListStatuses)
	}
	if m.removedproject_task_list_statuses != nil {
		edges = append(edges, tasklistsortstatus.EdgeProjectTaskListStatuses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskListSortStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tasklistsortstatus.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_list_statuses))
		for id := range m.removedteammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case tasklistsortstatus.EdgeProjectTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.removedproject_task_list_statuses))
		for id := range m.removedproject_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskListSortStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteammate_task_list_statuses {
		edges = append(edges, tasklistsortstatus.EdgeTeammateTaskListStatuses)
	}
	if m.clearedproject_task_list_statuses {
		edges = append(edges, tasklistsortstatus.EdgeProjectTaskListStatuses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskListSortStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case tasklistsortstatus.EdgeTeammateTaskListStatuses:
		return m.clearedteammate_task_list_statuses
	case tasklistsortstatus.EdgeProjectTaskListStatuses:
		return m.clearedproject_task_list_statuses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskListSortStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskListSortStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskListSortStatusMutation) ResetEdge(name string) error {
	switch name {
	case tasklistsortstatus.EdgeTeammateTaskListStatuses:
		m.ResetTeammateTaskListStatuses()
		return nil
	case tasklistsortstatus.EdgeProjectTaskListStatuses:
		m.ResetProjectTaskListStatuses()
		return nil
	}
	return fmt.Errorf("unknown TaskListSortStatus edge %s", name)
}

// TaskPriorityMutation represents an operation that mutates the TaskPriority nodes in the graph.
type TaskPriorityMutation struct {
	config
	op            Op
	typ           string
	id            *ulid.ID
	name          *string
	priority_type *taskpriority.PriorityType
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	color         *ulid.ID
	clearedcolor  bool
	tasks         map[ulid.ID]struct{}
	removedtasks  map[ulid.ID]struct{}
	clearedtasks  bool
	done          bool
	oldValue      func(context.Context) (*TaskPriority, error)
	predicates    []predicate.TaskPriority
}

var _ ent.Mutation = (*TaskPriorityMutation)(nil)

// taskpriorityOption allows management of the mutation configuration using functional options.
type taskpriorityOption func(*TaskPriorityMutation)

// newTaskPriorityMutation creates new mutation for the TaskPriority entity.
func newTaskPriorityMutation(c config, op Op, opts ...taskpriorityOption) *TaskPriorityMutation {
	m := &TaskPriorityMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskPriority,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskPriorityID sets the ID field of the mutation.
func withTaskPriorityID(id ulid.ID) taskpriorityOption {
	return func(m *TaskPriorityMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskPriority
		)
		m.oldValue = func(ctx context.Context) (*TaskPriority, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskPriority.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskPriority sets the old TaskPriority of the mutation.
func withTaskPriority(node *TaskPriority) taskpriorityOption {
	return func(m *TaskPriorityMutation) {
		m.oldValue = func(context.Context) (*TaskPriority, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskPriorityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskPriorityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskPriority entities.
func (m *TaskPriorityMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskPriorityMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetColorID sets the "color_id" field.
func (m *TaskPriorityMutation) SetColorID(u ulid.ID) {
	m.color = &u
}

// ColorID returns the value of the "color_id" field in the mutation.
func (m *TaskPriorityMutation) ColorID() (r ulid.ID, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColorID returns the old "color_id" field's value of the TaskPriority entity.
// If the TaskPriority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskPriorityMutation) OldColorID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColorID: %w", err)
	}
	return oldValue.ColorID, nil
}

// ResetColorID resets all changes to the "color_id" field.
func (m *TaskPriorityMutation) ResetColorID() {
	m.color = nil
}

// SetName sets the "name" field.
func (m *TaskPriorityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskPriorityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TaskPriority entity.
// If the TaskPriority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskPriorityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskPriorityMutation) ResetName() {
	m.name = nil
}

// SetPriorityType sets the "priority_type" field.
func (m *TaskPriorityMutation) SetPriorityType(tt taskpriority.PriorityType) {
	m.priority_type = &tt
}

// PriorityType returns the value of the "priority_type" field in the mutation.
func (m *TaskPriorityMutation) PriorityType() (r taskpriority.PriorityType, exists bool) {
	v := m.priority_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPriorityType returns the old "priority_type" field's value of the TaskPriority entity.
// If the TaskPriority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskPriorityMutation) OldPriorityType(ctx context.Context) (v taskpriority.PriorityType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPriorityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPriorityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriorityType: %w", err)
	}
	return oldValue.PriorityType, nil
}

// ResetPriorityType resets all changes to the "priority_type" field.
func (m *TaskPriorityMutation) ResetPriorityType() {
	m.priority_type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskPriorityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskPriorityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaskPriority entity.
// If the TaskPriority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskPriorityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskPriorityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskPriorityMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskPriorityMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TaskPriority entity.
// If the TaskPriority object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskPriorityMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskPriorityMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearColor clears the "color" edge to the Color entity.
func (m *TaskPriorityMutation) ClearColor() {
	m.clearedcolor = true
}

// ColorCleared reports if the "color" edge to the Color entity was cleared.
func (m *TaskPriorityMutation) ColorCleared() bool {
	return m.clearedcolor
}

// ColorIDs returns the "color" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ColorID instead. It exists only for internal usage by the builders.
func (m *TaskPriorityMutation) ColorIDs() (ids []ulid.ID) {
	if id := m.color; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetColor resets all changes to the "color" edge.
func (m *TaskPriorityMutation) ResetColor() {
	m.color = nil
	m.clearedcolor = false
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *TaskPriorityMutation) AddTaskIDs(ids ...ulid.ID) {
	if m.tasks == nil {
		m.tasks = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *TaskPriorityMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *TaskPriorityMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *TaskPriorityMutation) RemoveTaskIDs(ids ...ulid.ID) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *TaskPriorityMutation) RemovedTasksIDs() (ids []ulid.ID) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *TaskPriorityMutation) TasksIDs() (ids []ulid.ID) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *TaskPriorityMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the TaskPriorityMutation builder.
func (m *TaskPriorityMutation) Where(ps ...predicate.TaskPriority) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskPriorityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskPriority).
func (m *TaskPriorityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskPriorityMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.color != nil {
		fields = append(fields, taskpriority.FieldColorID)
	}
	if m.name != nil {
		fields = append(fields, taskpriority.FieldName)
	}
	if m.priority_type != nil {
		fields = append(fields, taskpriority.FieldPriorityType)
	}
	if m.created_at != nil {
		fields = append(fields, taskpriority.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, taskpriority.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskPriorityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskpriority.FieldColorID:
		return m.ColorID()
	case taskpriority.FieldName:
		return m.Name()
	case taskpriority.FieldPriorityType:
		return m.PriorityType()
	case taskpriority.FieldCreatedAt:
		return m.CreatedAt()
	case taskpriority.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskPriorityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskpriority.FieldColorID:
		return m.OldColorID(ctx)
	case taskpriority.FieldName:
		return m.OldName(ctx)
	case taskpriority.FieldPriorityType:
		return m.OldPriorityType(ctx)
	case taskpriority.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case taskpriority.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaskPriority field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskPriorityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskpriority.FieldColorID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColorID(v)
		return nil
	case taskpriority.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case taskpriority.FieldPriorityType:
		v, ok := value.(taskpriority.PriorityType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriorityType(v)
		return nil
	case taskpriority.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case taskpriority.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskPriority field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskPriorityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskPriorityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskPriorityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskPriority numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskPriorityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskPriorityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskPriorityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskPriority nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskPriorityMutation) ResetField(name string) error {
	switch name {
	case taskpriority.FieldColorID:
		m.ResetColorID()
		return nil
	case taskpriority.FieldName:
		m.ResetName()
		return nil
	case taskpriority.FieldPriorityType:
		m.ResetPriorityType()
		return nil
	case taskpriority.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case taskpriority.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskPriority field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskPriorityMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.color != nil {
		edges = append(edges, taskpriority.EdgeColor)
	}
	if m.tasks != nil {
		edges = append(edges, taskpriority.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskPriorityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case taskpriority.EdgeColor:
		if id := m.color; id != nil {
			return []ent.Value{*id}
		}
	case taskpriority.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskPriorityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtasks != nil {
		edges = append(edges, taskpriority.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskPriorityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case taskpriority.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskPriorityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcolor {
		edges = append(edges, taskpriority.EdgeColor)
	}
	if m.clearedtasks {
		edges = append(edges, taskpriority.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskPriorityMutation) EdgeCleared(name string) bool {
	switch name {
	case taskpriority.EdgeColor:
		return m.clearedcolor
	case taskpriority.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskPriorityMutation) ClearEdge(name string) error {
	switch name {
	case taskpriority.EdgeColor:
		m.ClearColor()
		return nil
	}
	return fmt.Errorf("unknown TaskPriority unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskPriorityMutation) ResetEdge(name string) error {
	switch name {
	case taskpriority.EdgeColor:
		m.ResetColor()
		return nil
	case taskpriority.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown TaskPriority edge %s", name)
}

// TaskSectionMutation represents an operation that mutates the TaskSection nodes in the graph.
type TaskSectionMutation struct {
	config
	op            Op
	typ           string
	id            *ulid.ID
	name          *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TaskSection, error)
	predicates    []predicate.TaskSection
}

var _ ent.Mutation = (*TaskSectionMutation)(nil)

// tasksectionOption allows management of the mutation configuration using functional options.
type tasksectionOption func(*TaskSectionMutation)

// newTaskSectionMutation creates new mutation for the TaskSection entity.
func newTaskSectionMutation(c config, op Op, opts ...tasksectionOption) *TaskSectionMutation {
	m := &TaskSectionMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskSectionID sets the ID field of the mutation.
func withTaskSectionID(id ulid.ID) tasksectionOption {
	return func(m *TaskSectionMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskSection
		)
		m.oldValue = func(ctx context.Context) (*TaskSection, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskSection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskSection sets the old TaskSection of the mutation.
func withTaskSection(node *TaskSection) tasksectionOption {
	return func(m *TaskSectionMutation) {
		m.oldValue = func(context.Context) (*TaskSection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskSectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskSectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskSection entities.
func (m *TaskSectionMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskSectionMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *TaskSectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskSectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TaskSection entity.
// If the TaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskSectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskSectionMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskSectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskSectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaskSection entity.
// If the TaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskSectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskSectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskSectionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskSectionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TaskSection entity.
// If the TaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskSectionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskSectionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the TaskSectionMutation builder.
func (m *TaskSectionMutation) Where(ps ...predicate.TaskSection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskSectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TaskSection).
func (m *TaskSectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskSectionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, tasksection.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, tasksection.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tasksection.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskSectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tasksection.FieldName:
		return m.Name()
	case tasksection.FieldCreatedAt:
		return m.CreatedAt()
	case tasksection.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskSectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tasksection.FieldName:
		return m.OldName(ctx)
	case tasksection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tasksection.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaskSection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskSectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tasksection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tasksection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tasksection.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskSection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskSectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskSectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskSectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TaskSection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskSectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskSectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskSectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskSection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskSectionMutation) ResetField(name string) error {
	switch name {
	case tasksection.FieldName:
		m.ResetName()
		return nil
	case tasksection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tasksection.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskSection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskSectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskSectionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskSectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskSectionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskSectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskSectionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskSectionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TaskSection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskSectionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TaskSection edge %s", name)
}

// TeammateMutation represents an operation that mutates the Teammate nodes in the graph.
type TeammateMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *ulid.ID
	name                               *string
	image                              *string
	email                              *string
	created_at                         *time.Time
	updated_at                         *time.Time
	clearedFields                      map[string]struct{}
	workspaces                         map[ulid.ID]struct{}
	removedworkspaces                  map[ulid.ID]struct{}
	clearedworkspaces                  bool
	projects                           map[ulid.ID]struct{}
	removedprojects                    map[ulid.ID]struct{}
	clearedprojects                    bool
	project_teammates                  map[ulid.ID]struct{}
	removedproject_teammates           map[ulid.ID]struct{}
	clearedproject_teammates           bool
	workspace_teammates                map[ulid.ID]struct{}
	removedworkspace_teammates         map[ulid.ID]struct{}
	clearedworkspace_teammates         bool
	favorite_projects                  map[ulid.ID]struct{}
	removedfavorite_projects           map[ulid.ID]struct{}
	clearedfavorite_projects           bool
	favorite_workspaces                map[ulid.ID]struct{}
	removedfavorite_workspaces         map[ulid.ID]struct{}
	clearedfavorite_workspaces         bool
	teammate_task_tab_statuses         map[ulid.ID]struct{}
	removedteammate_task_tab_statuses  map[ulid.ID]struct{}
	clearedteammate_task_tab_statuses  bool
	teammate_task_columns              map[ulid.ID]struct{}
	removedteammate_task_columns       map[ulid.ID]struct{}
	clearedteammate_task_columns       bool
	teammate_task_list_statuses        map[ulid.ID]struct{}
	removedteammate_task_list_statuses map[ulid.ID]struct{}
	clearedteammate_task_list_statuses bool
	teammate_task_sections             map[ulid.ID]struct{}
	removedteammate_task_sections      map[ulid.ID]struct{}
	clearedteammate_task_sections      bool
	tasks                              map[ulid.ID]struct{}
	removedtasks                       map[ulid.ID]struct{}
	clearedtasks                       bool
	done                               bool
	oldValue                           func(context.Context) (*Teammate, error)
	predicates                         []predicate.Teammate
}

var _ ent.Mutation = (*TeammateMutation)(nil)

// teammateOption allows management of the mutation configuration using functional options.
type teammateOption func(*TeammateMutation)

// newTeammateMutation creates new mutation for the Teammate entity.
func newTeammateMutation(c config, op Op, opts ...teammateOption) *TeammateMutation {
	m := &TeammateMutation{
		config:        c,
		op:            op,
		typ:           TypeTeammate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeammateID sets the ID field of the mutation.
func withTeammateID(id ulid.ID) teammateOption {
	return func(m *TeammateMutation) {
		var (
			err   error
			once  sync.Once
			value *Teammate
		)
		m.oldValue = func(ctx context.Context) (*Teammate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Teammate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeammate sets the old Teammate of the mutation.
func withTeammate(node *Teammate) teammateOption {
	return func(m *TeammateMutation) {
		m.oldValue = func(context.Context) (*Teammate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeammateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeammateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Teammate entities.
func (m *TeammateMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeammateMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *TeammateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeammateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Teammate entity.
// If the Teammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TeammateMutation) ResetName() {
	m.name = nil
}

// SetImage sets the "image" field.
func (m *TeammateMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *TeammateMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Teammate entity.
// If the Teammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *TeammateMutation) ResetImage() {
	m.image = nil
}

// SetEmail sets the "email" field.
func (m *TeammateMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *TeammateMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Teammate entity.
// If the Teammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *TeammateMutation) ResetEmail() {
	m.email = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TeammateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TeammateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Teammate entity.
// If the Teammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TeammateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TeammateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TeammateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Teammate entity.
// If the Teammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TeammateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddWorkspaceIDs adds the "workspaces" edge to the Workspace entity by ids.
func (m *TeammateMutation) AddWorkspaceIDs(ids ...ulid.ID) {
	if m.workspaces == nil {
		m.workspaces = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.workspaces[ids[i]] = struct{}{}
	}
}

// ClearWorkspaces clears the "workspaces" edge to the Workspace entity.
func (m *TeammateMutation) ClearWorkspaces() {
	m.clearedworkspaces = true
}

// WorkspacesCleared reports if the "workspaces" edge to the Workspace entity was cleared.
func (m *TeammateMutation) WorkspacesCleared() bool {
	return m.clearedworkspaces
}

// RemoveWorkspaceIDs removes the "workspaces" edge to the Workspace entity by IDs.
func (m *TeammateMutation) RemoveWorkspaceIDs(ids ...ulid.ID) {
	if m.removedworkspaces == nil {
		m.removedworkspaces = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.workspaces, ids[i])
		m.removedworkspaces[ids[i]] = struct{}{}
	}
}

// RemovedWorkspaces returns the removed IDs of the "workspaces" edge to the Workspace entity.
func (m *TeammateMutation) RemovedWorkspacesIDs() (ids []ulid.ID) {
	for id := range m.removedworkspaces {
		ids = append(ids, id)
	}
	return
}

// WorkspacesIDs returns the "workspaces" edge IDs in the mutation.
func (m *TeammateMutation) WorkspacesIDs() (ids []ulid.ID) {
	for id := range m.workspaces {
		ids = append(ids, id)
	}
	return
}

// ResetWorkspaces resets all changes to the "workspaces" edge.
func (m *TeammateMutation) ResetWorkspaces() {
	m.workspaces = nil
	m.clearedworkspaces = false
	m.removedworkspaces = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *TeammateMutation) AddProjectIDs(ids ...ulid.ID) {
	if m.projects == nil {
		m.projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *TeammateMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *TeammateMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *TeammateMutation) RemoveProjectIDs(ids ...ulid.ID) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *TeammateMutation) RemovedProjectsIDs() (ids []ulid.ID) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *TeammateMutation) ProjectsIDs() (ids []ulid.ID) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *TeammateMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// AddProjectTeammateIDs adds the "project_teammates" edge to the ProjectTeammate entity by ids.
func (m *TeammateMutation) AddProjectTeammateIDs(ids ...ulid.ID) {
	if m.project_teammates == nil {
		m.project_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.project_teammates[ids[i]] = struct{}{}
	}
}

// ClearProjectTeammates clears the "project_teammates" edge to the ProjectTeammate entity.
func (m *TeammateMutation) ClearProjectTeammates() {
	m.clearedproject_teammates = true
}

// ProjectTeammatesCleared reports if the "project_teammates" edge to the ProjectTeammate entity was cleared.
func (m *TeammateMutation) ProjectTeammatesCleared() bool {
	return m.clearedproject_teammates
}

// RemoveProjectTeammateIDs removes the "project_teammates" edge to the ProjectTeammate entity by IDs.
func (m *TeammateMutation) RemoveProjectTeammateIDs(ids ...ulid.ID) {
	if m.removedproject_teammates == nil {
		m.removedproject_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.project_teammates, ids[i])
		m.removedproject_teammates[ids[i]] = struct{}{}
	}
}

// RemovedProjectTeammates returns the removed IDs of the "project_teammates" edge to the ProjectTeammate entity.
func (m *TeammateMutation) RemovedProjectTeammatesIDs() (ids []ulid.ID) {
	for id := range m.removedproject_teammates {
		ids = append(ids, id)
	}
	return
}

// ProjectTeammatesIDs returns the "project_teammates" edge IDs in the mutation.
func (m *TeammateMutation) ProjectTeammatesIDs() (ids []ulid.ID) {
	for id := range m.project_teammates {
		ids = append(ids, id)
	}
	return
}

// ResetProjectTeammates resets all changes to the "project_teammates" edge.
func (m *TeammateMutation) ResetProjectTeammates() {
	m.project_teammates = nil
	m.clearedproject_teammates = false
	m.removedproject_teammates = nil
}

// AddWorkspaceTeammateIDs adds the "workspace_teammates" edge to the WorkspaceTeammate entity by ids.
func (m *TeammateMutation) AddWorkspaceTeammateIDs(ids ...ulid.ID) {
	if m.workspace_teammates == nil {
		m.workspace_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.workspace_teammates[ids[i]] = struct{}{}
	}
}

// ClearWorkspaceTeammates clears the "workspace_teammates" edge to the WorkspaceTeammate entity.
func (m *TeammateMutation) ClearWorkspaceTeammates() {
	m.clearedworkspace_teammates = true
}

// WorkspaceTeammatesCleared reports if the "workspace_teammates" edge to the WorkspaceTeammate entity was cleared.
func (m *TeammateMutation) WorkspaceTeammatesCleared() bool {
	return m.clearedworkspace_teammates
}

// RemoveWorkspaceTeammateIDs removes the "workspace_teammates" edge to the WorkspaceTeammate entity by IDs.
func (m *TeammateMutation) RemoveWorkspaceTeammateIDs(ids ...ulid.ID) {
	if m.removedworkspace_teammates == nil {
		m.removedworkspace_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.workspace_teammates, ids[i])
		m.removedworkspace_teammates[ids[i]] = struct{}{}
	}
}

// RemovedWorkspaceTeammates returns the removed IDs of the "workspace_teammates" edge to the WorkspaceTeammate entity.
func (m *TeammateMutation) RemovedWorkspaceTeammatesIDs() (ids []ulid.ID) {
	for id := range m.removedworkspace_teammates {
		ids = append(ids, id)
	}
	return
}

// WorkspaceTeammatesIDs returns the "workspace_teammates" edge IDs in the mutation.
func (m *TeammateMutation) WorkspaceTeammatesIDs() (ids []ulid.ID) {
	for id := range m.workspace_teammates {
		ids = append(ids, id)
	}
	return
}

// ResetWorkspaceTeammates resets all changes to the "workspace_teammates" edge.
func (m *TeammateMutation) ResetWorkspaceTeammates() {
	m.workspace_teammates = nil
	m.clearedworkspace_teammates = false
	m.removedworkspace_teammates = nil
}

// AddFavoriteProjectIDs adds the "favorite_projects" edge to the FavoriteProject entity by ids.
func (m *TeammateMutation) AddFavoriteProjectIDs(ids ...ulid.ID) {
	if m.favorite_projects == nil {
		m.favorite_projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.favorite_projects[ids[i]] = struct{}{}
	}
}

// ClearFavoriteProjects clears the "favorite_projects" edge to the FavoriteProject entity.
func (m *TeammateMutation) ClearFavoriteProjects() {
	m.clearedfavorite_projects = true
}

// FavoriteProjectsCleared reports if the "favorite_projects" edge to the FavoriteProject entity was cleared.
func (m *TeammateMutation) FavoriteProjectsCleared() bool {
	return m.clearedfavorite_projects
}

// RemoveFavoriteProjectIDs removes the "favorite_projects" edge to the FavoriteProject entity by IDs.
func (m *TeammateMutation) RemoveFavoriteProjectIDs(ids ...ulid.ID) {
	if m.removedfavorite_projects == nil {
		m.removedfavorite_projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.favorite_projects, ids[i])
		m.removedfavorite_projects[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteProjects returns the removed IDs of the "favorite_projects" edge to the FavoriteProject entity.
func (m *TeammateMutation) RemovedFavoriteProjectsIDs() (ids []ulid.ID) {
	for id := range m.removedfavorite_projects {
		ids = append(ids, id)
	}
	return
}

// FavoriteProjectsIDs returns the "favorite_projects" edge IDs in the mutation.
func (m *TeammateMutation) FavoriteProjectsIDs() (ids []ulid.ID) {
	for id := range m.favorite_projects {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteProjects resets all changes to the "favorite_projects" edge.
func (m *TeammateMutation) ResetFavoriteProjects() {
	m.favorite_projects = nil
	m.clearedfavorite_projects = false
	m.removedfavorite_projects = nil
}

// AddFavoriteWorkspaceIDs adds the "favorite_workspaces" edge to the FavoriteWorkspace entity by ids.
func (m *TeammateMutation) AddFavoriteWorkspaceIDs(ids ...ulid.ID) {
	if m.favorite_workspaces == nil {
		m.favorite_workspaces = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.favorite_workspaces[ids[i]] = struct{}{}
	}
}

// ClearFavoriteWorkspaces clears the "favorite_workspaces" edge to the FavoriteWorkspace entity.
func (m *TeammateMutation) ClearFavoriteWorkspaces() {
	m.clearedfavorite_workspaces = true
}

// FavoriteWorkspacesCleared reports if the "favorite_workspaces" edge to the FavoriteWorkspace entity was cleared.
func (m *TeammateMutation) FavoriteWorkspacesCleared() bool {
	return m.clearedfavorite_workspaces
}

// RemoveFavoriteWorkspaceIDs removes the "favorite_workspaces" edge to the FavoriteWorkspace entity by IDs.
func (m *TeammateMutation) RemoveFavoriteWorkspaceIDs(ids ...ulid.ID) {
	if m.removedfavorite_workspaces == nil {
		m.removedfavorite_workspaces = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.favorite_workspaces, ids[i])
		m.removedfavorite_workspaces[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteWorkspaces returns the removed IDs of the "favorite_workspaces" edge to the FavoriteWorkspace entity.
func (m *TeammateMutation) RemovedFavoriteWorkspacesIDs() (ids []ulid.ID) {
	for id := range m.removedfavorite_workspaces {
		ids = append(ids, id)
	}
	return
}

// FavoriteWorkspacesIDs returns the "favorite_workspaces" edge IDs in the mutation.
func (m *TeammateMutation) FavoriteWorkspacesIDs() (ids []ulid.ID) {
	for id := range m.favorite_workspaces {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteWorkspaces resets all changes to the "favorite_workspaces" edge.
func (m *TeammateMutation) ResetFavoriteWorkspaces() {
	m.favorite_workspaces = nil
	m.clearedfavorite_workspaces = false
	m.removedfavorite_workspaces = nil
}

// AddTeammateTaskTabStatusIDs adds the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity by ids.
func (m *TeammateMutation) AddTeammateTaskTabStatusIDs(ids ...ulid.ID) {
	if m.teammate_task_tab_statuses == nil {
		m.teammate_task_tab_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_tab_statuses[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskTabStatuses clears the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity.
func (m *TeammateMutation) ClearTeammateTaskTabStatuses() {
	m.clearedteammate_task_tab_statuses = true
}

// TeammateTaskTabStatusesCleared reports if the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity was cleared.
func (m *TeammateMutation) TeammateTaskTabStatusesCleared() bool {
	return m.clearedteammate_task_tab_statuses
}

// RemoveTeammateTaskTabStatusIDs removes the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity by IDs.
func (m *TeammateMutation) RemoveTeammateTaskTabStatusIDs(ids ...ulid.ID) {
	if m.removedteammate_task_tab_statuses == nil {
		m.removedteammate_task_tab_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_tab_statuses, ids[i])
		m.removedteammate_task_tab_statuses[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskTabStatuses returns the removed IDs of the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity.
func (m *TeammateMutation) RemovedTeammateTaskTabStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_tab_statuses {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskTabStatusesIDs returns the "teammate_task_tab_statuses" edge IDs in the mutation.
func (m *TeammateMutation) TeammateTaskTabStatusesIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_tab_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskTabStatuses resets all changes to the "teammate_task_tab_statuses" edge.
func (m *TeammateMutation) ResetTeammateTaskTabStatuses() {
	m.teammate_task_tab_statuses = nil
	m.clearedteammate_task_tab_statuses = false
	m.removedteammate_task_tab_statuses = nil
}

// AddTeammateTaskColumnIDs adds the "teammate_task_columns" edge to the TeammateTaskColumn entity by ids.
func (m *TeammateMutation) AddTeammateTaskColumnIDs(ids ...ulid.ID) {
	if m.teammate_task_columns == nil {
		m.teammate_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_columns[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskColumns clears the "teammate_task_columns" edge to the TeammateTaskColumn entity.
func (m *TeammateMutation) ClearTeammateTaskColumns() {
	m.clearedteammate_task_columns = true
}

// TeammateTaskColumnsCleared reports if the "teammate_task_columns" edge to the TeammateTaskColumn entity was cleared.
func (m *TeammateMutation) TeammateTaskColumnsCleared() bool {
	return m.clearedteammate_task_columns
}

// RemoveTeammateTaskColumnIDs removes the "teammate_task_columns" edge to the TeammateTaskColumn entity by IDs.
func (m *TeammateMutation) RemoveTeammateTaskColumnIDs(ids ...ulid.ID) {
	if m.removedteammate_task_columns == nil {
		m.removedteammate_task_columns = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_columns, ids[i])
		m.removedteammate_task_columns[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskColumns returns the removed IDs of the "teammate_task_columns" edge to the TeammateTaskColumn entity.
func (m *TeammateMutation) RemovedTeammateTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_columns {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskColumnsIDs returns the "teammate_task_columns" edge IDs in the mutation.
func (m *TeammateMutation) TeammateTaskColumnsIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_columns {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskColumns resets all changes to the "teammate_task_columns" edge.
func (m *TeammateMutation) ResetTeammateTaskColumns() {
	m.teammate_task_columns = nil
	m.clearedteammate_task_columns = false
	m.removedteammate_task_columns = nil
}

// AddTeammateTaskListStatusIDs adds the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by ids.
func (m *TeammateMutation) AddTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.teammate_task_list_statuses == nil {
		m.teammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskListStatuses clears the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *TeammateMutation) ClearTeammateTaskListStatuses() {
	m.clearedteammate_task_list_statuses = true
}

// TeammateTaskListStatusesCleared reports if the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity was cleared.
func (m *TeammateMutation) TeammateTaskListStatusesCleared() bool {
	return m.clearedteammate_task_list_statuses
}

// RemoveTeammateTaskListStatusIDs removes the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by IDs.
func (m *TeammateMutation) RemoveTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.removedteammate_task_list_statuses == nil {
		m.removedteammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_list_statuses, ids[i])
		m.removedteammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskListStatuses returns the removed IDs of the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *TeammateMutation) RemovedTeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskListStatusesIDs returns the "teammate_task_list_statuses" edge IDs in the mutation.
func (m *TeammateMutation) TeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskListStatuses resets all changes to the "teammate_task_list_statuses" edge.
func (m *TeammateMutation) ResetTeammateTaskListStatuses() {
	m.teammate_task_list_statuses = nil
	m.clearedteammate_task_list_statuses = false
	m.removedteammate_task_list_statuses = nil
}

// AddTeammateTaskSectionIDs adds the "teammate_task_sections" edge to the TeammateTaskSection entity by ids.
func (m *TeammateMutation) AddTeammateTaskSectionIDs(ids ...ulid.ID) {
	if m.teammate_task_sections == nil {
		m.teammate_task_sections = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_sections[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskSections clears the "teammate_task_sections" edge to the TeammateTaskSection entity.
func (m *TeammateMutation) ClearTeammateTaskSections() {
	m.clearedteammate_task_sections = true
}

// TeammateTaskSectionsCleared reports if the "teammate_task_sections" edge to the TeammateTaskSection entity was cleared.
func (m *TeammateMutation) TeammateTaskSectionsCleared() bool {
	return m.clearedteammate_task_sections
}

// RemoveTeammateTaskSectionIDs removes the "teammate_task_sections" edge to the TeammateTaskSection entity by IDs.
func (m *TeammateMutation) RemoveTeammateTaskSectionIDs(ids ...ulid.ID) {
	if m.removedteammate_task_sections == nil {
		m.removedteammate_task_sections = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_sections, ids[i])
		m.removedteammate_task_sections[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskSections returns the removed IDs of the "teammate_task_sections" edge to the TeammateTaskSection entity.
func (m *TeammateMutation) RemovedTeammateTaskSectionsIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_sections {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskSectionsIDs returns the "teammate_task_sections" edge IDs in the mutation.
func (m *TeammateMutation) TeammateTaskSectionsIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_sections {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskSections resets all changes to the "teammate_task_sections" edge.
func (m *TeammateMutation) ResetTeammateTaskSections() {
	m.teammate_task_sections = nil
	m.clearedteammate_task_sections = false
	m.removedteammate_task_sections = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *TeammateMutation) AddTaskIDs(ids ...ulid.ID) {
	if m.tasks == nil {
		m.tasks = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *TeammateMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *TeammateMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *TeammateMutation) RemoveTaskIDs(ids ...ulid.ID) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *TeammateMutation) RemovedTasksIDs() (ids []ulid.ID) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *TeammateMutation) TasksIDs() (ids []ulid.ID) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *TeammateMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the TeammateMutation builder.
func (m *TeammateMutation) Where(ps ...predicate.Teammate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeammateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Teammate).
func (m *TeammateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeammateMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, teammate.FieldName)
	}
	if m.image != nil {
		fields = append(fields, teammate.FieldImage)
	}
	if m.email != nil {
		fields = append(fields, teammate.FieldEmail)
	}
	if m.created_at != nil {
		fields = append(fields, teammate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, teammate.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeammateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case teammate.FieldName:
		return m.Name()
	case teammate.FieldImage:
		return m.Image()
	case teammate.FieldEmail:
		return m.Email()
	case teammate.FieldCreatedAt:
		return m.CreatedAt()
	case teammate.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeammateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case teammate.FieldName:
		return m.OldName(ctx)
	case teammate.FieldImage:
		return m.OldImage(ctx)
	case teammate.FieldEmail:
		return m.OldEmail(ctx)
	case teammate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case teammate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Teammate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case teammate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case teammate.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case teammate.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case teammate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case teammate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Teammate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeammateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeammateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Teammate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeammateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeammateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeammateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Teammate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeammateMutation) ResetField(name string) error {
	switch name {
	case teammate.FieldName:
		m.ResetName()
		return nil
	case teammate.FieldImage:
		m.ResetImage()
		return nil
	case teammate.FieldEmail:
		m.ResetEmail()
		return nil
	case teammate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case teammate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Teammate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeammateMutation) AddedEdges() []string {
	edges := make([]string, 0, 11)
	if m.workspaces != nil {
		edges = append(edges, teammate.EdgeWorkspaces)
	}
	if m.projects != nil {
		edges = append(edges, teammate.EdgeProjects)
	}
	if m.project_teammates != nil {
		edges = append(edges, teammate.EdgeProjectTeammates)
	}
	if m.workspace_teammates != nil {
		edges = append(edges, teammate.EdgeWorkspaceTeammates)
	}
	if m.favorite_projects != nil {
		edges = append(edges, teammate.EdgeFavoriteProjects)
	}
	if m.favorite_workspaces != nil {
		edges = append(edges, teammate.EdgeFavoriteWorkspaces)
	}
	if m.teammate_task_tab_statuses != nil {
		edges = append(edges, teammate.EdgeTeammateTaskTabStatuses)
	}
	if m.teammate_task_columns != nil {
		edges = append(edges, teammate.EdgeTeammateTaskColumns)
	}
	if m.teammate_task_list_statuses != nil {
		edges = append(edges, teammate.EdgeTeammateTaskListStatuses)
	}
	if m.teammate_task_sections != nil {
		edges = append(edges, teammate.EdgeTeammateTaskSections)
	}
	if m.tasks != nil {
		edges = append(edges, teammate.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeammateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case teammate.EdgeWorkspaces:
		ids := make([]ent.Value, 0, len(m.workspaces))
		for id := range m.workspaces {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeProjectTeammates:
		ids := make([]ent.Value, 0, len(m.project_teammates))
		for id := range m.project_teammates {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeWorkspaceTeammates:
		ids := make([]ent.Value, 0, len(m.workspace_teammates))
		for id := range m.workspace_teammates {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeFavoriteProjects:
		ids := make([]ent.Value, 0, len(m.favorite_projects))
		for id := range m.favorite_projects {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeFavoriteWorkspaces:
		ids := make([]ent.Value, 0, len(m.favorite_workspaces))
		for id := range m.favorite_workspaces {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskTabStatuses:
		ids := make([]ent.Value, 0, len(m.teammate_task_tab_statuses))
		for id := range m.teammate_task_tab_statuses {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskColumns:
		ids := make([]ent.Value, 0, len(m.teammate_task_columns))
		for id := range m.teammate_task_columns {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.teammate_task_list_statuses))
		for id := range m.teammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskSections:
		ids := make([]ent.Value, 0, len(m.teammate_task_sections))
		for id := range m.teammate_task_sections {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeammateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 11)
	if m.removedworkspaces != nil {
		edges = append(edges, teammate.EdgeWorkspaces)
	}
	if m.removedprojects != nil {
		edges = append(edges, teammate.EdgeProjects)
	}
	if m.removedproject_teammates != nil {
		edges = append(edges, teammate.EdgeProjectTeammates)
	}
	if m.removedworkspace_teammates != nil {
		edges = append(edges, teammate.EdgeWorkspaceTeammates)
	}
	if m.removedfavorite_projects != nil {
		edges = append(edges, teammate.EdgeFavoriteProjects)
	}
	if m.removedfavorite_workspaces != nil {
		edges = append(edges, teammate.EdgeFavoriteWorkspaces)
	}
	if m.removedteammate_task_tab_statuses != nil {
		edges = append(edges, teammate.EdgeTeammateTaskTabStatuses)
	}
	if m.removedteammate_task_columns != nil {
		edges = append(edges, teammate.EdgeTeammateTaskColumns)
	}
	if m.removedteammate_task_list_statuses != nil {
		edges = append(edges, teammate.EdgeTeammateTaskListStatuses)
	}
	if m.removedteammate_task_sections != nil {
		edges = append(edges, teammate.EdgeTeammateTaskSections)
	}
	if m.removedtasks != nil {
		edges = append(edges, teammate.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeammateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case teammate.EdgeWorkspaces:
		ids := make([]ent.Value, 0, len(m.removedworkspaces))
		for id := range m.removedworkspaces {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeProjectTeammates:
		ids := make([]ent.Value, 0, len(m.removedproject_teammates))
		for id := range m.removedproject_teammates {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeWorkspaceTeammates:
		ids := make([]ent.Value, 0, len(m.removedworkspace_teammates))
		for id := range m.removedworkspace_teammates {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeFavoriteProjects:
		ids := make([]ent.Value, 0, len(m.removedfavorite_projects))
		for id := range m.removedfavorite_projects {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeFavoriteWorkspaces:
		ids := make([]ent.Value, 0, len(m.removedfavorite_workspaces))
		for id := range m.removedfavorite_workspaces {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskTabStatuses:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_tab_statuses))
		for id := range m.removedteammate_task_tab_statuses {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskColumns:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_columns))
		for id := range m.removedteammate_task_columns {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_list_statuses))
		for id := range m.removedteammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTeammateTaskSections:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_sections))
		for id := range m.removedteammate_task_sections {
			ids = append(ids, id)
		}
		return ids
	case teammate.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeammateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 11)
	if m.clearedworkspaces {
		edges = append(edges, teammate.EdgeWorkspaces)
	}
	if m.clearedprojects {
		edges = append(edges, teammate.EdgeProjects)
	}
	if m.clearedproject_teammates {
		edges = append(edges, teammate.EdgeProjectTeammates)
	}
	if m.clearedworkspace_teammates {
		edges = append(edges, teammate.EdgeWorkspaceTeammates)
	}
	if m.clearedfavorite_projects {
		edges = append(edges, teammate.EdgeFavoriteProjects)
	}
	if m.clearedfavorite_workspaces {
		edges = append(edges, teammate.EdgeFavoriteWorkspaces)
	}
	if m.clearedteammate_task_tab_statuses {
		edges = append(edges, teammate.EdgeTeammateTaskTabStatuses)
	}
	if m.clearedteammate_task_columns {
		edges = append(edges, teammate.EdgeTeammateTaskColumns)
	}
	if m.clearedteammate_task_list_statuses {
		edges = append(edges, teammate.EdgeTeammateTaskListStatuses)
	}
	if m.clearedteammate_task_sections {
		edges = append(edges, teammate.EdgeTeammateTaskSections)
	}
	if m.clearedtasks {
		edges = append(edges, teammate.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeammateMutation) EdgeCleared(name string) bool {
	switch name {
	case teammate.EdgeWorkspaces:
		return m.clearedworkspaces
	case teammate.EdgeProjects:
		return m.clearedprojects
	case teammate.EdgeProjectTeammates:
		return m.clearedproject_teammates
	case teammate.EdgeWorkspaceTeammates:
		return m.clearedworkspace_teammates
	case teammate.EdgeFavoriteProjects:
		return m.clearedfavorite_projects
	case teammate.EdgeFavoriteWorkspaces:
		return m.clearedfavorite_workspaces
	case teammate.EdgeTeammateTaskTabStatuses:
		return m.clearedteammate_task_tab_statuses
	case teammate.EdgeTeammateTaskColumns:
		return m.clearedteammate_task_columns
	case teammate.EdgeTeammateTaskListStatuses:
		return m.clearedteammate_task_list_statuses
	case teammate.EdgeTeammateTaskSections:
		return m.clearedteammate_task_sections
	case teammate.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeammateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Teammate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeammateMutation) ResetEdge(name string) error {
	switch name {
	case teammate.EdgeWorkspaces:
		m.ResetWorkspaces()
		return nil
	case teammate.EdgeProjects:
		m.ResetProjects()
		return nil
	case teammate.EdgeProjectTeammates:
		m.ResetProjectTeammates()
		return nil
	case teammate.EdgeWorkspaceTeammates:
		m.ResetWorkspaceTeammates()
		return nil
	case teammate.EdgeFavoriteProjects:
		m.ResetFavoriteProjects()
		return nil
	case teammate.EdgeFavoriteWorkspaces:
		m.ResetFavoriteWorkspaces()
		return nil
	case teammate.EdgeTeammateTaskTabStatuses:
		m.ResetTeammateTaskTabStatuses()
		return nil
	case teammate.EdgeTeammateTaskColumns:
		m.ResetTeammateTaskColumns()
		return nil
	case teammate.EdgeTeammateTaskListStatuses:
		m.ResetTeammateTaskListStatuses()
		return nil
	case teammate.EdgeTeammateTaskSections:
		m.ResetTeammateTaskSections()
		return nil
	case teammate.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown Teammate edge %s", name)
}

// TeammateTaskColumnMutation represents an operation that mutates the TeammateTaskColumn nodes in the graph.
type TeammateTaskColumnMutation struct {
	config
	op                 Op
	typ                string
	id                 *ulid.ID
	width              *string
	disabled           *bool
	customizable       *bool
	_order             *int
	add_order          *int
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	teammate           *ulid.ID
	clearedteammate    bool
	task_column        *ulid.ID
	clearedtask_column bool
	done               bool
	oldValue           func(context.Context) (*TeammateTaskColumn, error)
	predicates         []predicate.TeammateTaskColumn
}

var _ ent.Mutation = (*TeammateTaskColumnMutation)(nil)

// teammatetaskcolumnOption allows management of the mutation configuration using functional options.
type teammatetaskcolumnOption func(*TeammateTaskColumnMutation)

// newTeammateTaskColumnMutation creates new mutation for the TeammateTaskColumn entity.
func newTeammateTaskColumnMutation(c config, op Op, opts ...teammatetaskcolumnOption) *TeammateTaskColumnMutation {
	m := &TeammateTaskColumnMutation{
		config:        c,
		op:            op,
		typ:           TypeTeammateTaskColumn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeammateTaskColumnID sets the ID field of the mutation.
func withTeammateTaskColumnID(id ulid.ID) teammatetaskcolumnOption {
	return func(m *TeammateTaskColumnMutation) {
		var (
			err   error
			once  sync.Once
			value *TeammateTaskColumn
		)
		m.oldValue = func(ctx context.Context) (*TeammateTaskColumn, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TeammateTaskColumn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeammateTaskColumn sets the old TeammateTaskColumn of the mutation.
func withTeammateTaskColumn(node *TeammateTaskColumn) teammatetaskcolumnOption {
	return func(m *TeammateTaskColumnMutation) {
		m.oldValue = func(context.Context) (*TeammateTaskColumn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeammateTaskColumnMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeammateTaskColumnMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TeammateTaskColumn entities.
func (m *TeammateTaskColumnMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeammateTaskColumnMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTeammateID sets the "teammate_id" field.
func (m *TeammateTaskColumnMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *TeammateTaskColumnMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *TeammateTaskColumnMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetTaskColumnID sets the "task_column_id" field.
func (m *TeammateTaskColumnMutation) SetTaskColumnID(u ulid.ID) {
	m.task_column = &u
}

// TaskColumnID returns the value of the "task_column_id" field in the mutation.
func (m *TeammateTaskColumnMutation) TaskColumnID() (r ulid.ID, exists bool) {
	v := m.task_column
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskColumnID returns the old "task_column_id" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldTaskColumnID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskColumnID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskColumnID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskColumnID: %w", err)
	}
	return oldValue.TaskColumnID, nil
}

// ResetTaskColumnID resets all changes to the "task_column_id" field.
func (m *TeammateTaskColumnMutation) ResetTaskColumnID() {
	m.task_column = nil
}

// SetWidth sets the "width" field.
func (m *TeammateTaskColumnMutation) SetWidth(s string) {
	m.width = &s
}

// Width returns the value of the "width" field in the mutation.
func (m *TeammateTaskColumnMutation) Width() (r string, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldWidth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// ResetWidth resets all changes to the "width" field.
func (m *TeammateTaskColumnMutation) ResetWidth() {
	m.width = nil
}

// SetDisabled sets the "disabled" field.
func (m *TeammateTaskColumnMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *TeammateTaskColumnMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *TeammateTaskColumnMutation) ResetDisabled() {
	m.disabled = nil
}

// SetCustomizable sets the "customizable" field.
func (m *TeammateTaskColumnMutation) SetCustomizable(b bool) {
	m.customizable = &b
}

// Customizable returns the value of the "customizable" field in the mutation.
func (m *TeammateTaskColumnMutation) Customizable() (r bool, exists bool) {
	v := m.customizable
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomizable returns the old "customizable" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldCustomizable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomizable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomizable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomizable: %w", err)
	}
	return oldValue.Customizable, nil
}

// ResetCustomizable resets all changes to the "customizable" field.
func (m *TeammateTaskColumnMutation) ResetCustomizable() {
	m.customizable = nil
}

// SetOrder sets the "order" field.
func (m *TeammateTaskColumnMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *TeammateTaskColumnMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *TeammateTaskColumnMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *TeammateTaskColumnMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *TeammateTaskColumnMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TeammateTaskColumnMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TeammateTaskColumnMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TeammateTaskColumnMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TeammateTaskColumnMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TeammateTaskColumnMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TeammateTaskColumn entity.
// If the TeammateTaskColumn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskColumnMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TeammateTaskColumnMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *TeammateTaskColumnMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *TeammateTaskColumnMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskColumnMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *TeammateTaskColumnMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// ClearTaskColumn clears the "task_column" edge to the TaskColumn entity.
func (m *TeammateTaskColumnMutation) ClearTaskColumn() {
	m.clearedtask_column = true
}

// TaskColumnCleared reports if the "task_column" edge to the TaskColumn entity was cleared.
func (m *TeammateTaskColumnMutation) TaskColumnCleared() bool {
	return m.clearedtask_column
}

// TaskColumnIDs returns the "task_column" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskColumnID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskColumnMutation) TaskColumnIDs() (ids []ulid.ID) {
	if id := m.task_column; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskColumn resets all changes to the "task_column" edge.
func (m *TeammateTaskColumnMutation) ResetTaskColumn() {
	m.task_column = nil
	m.clearedtask_column = false
}

// Where appends a list predicates to the TeammateTaskColumnMutation builder.
func (m *TeammateTaskColumnMutation) Where(ps ...predicate.TeammateTaskColumn) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeammateTaskColumnMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TeammateTaskColumn).
func (m *TeammateTaskColumnMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeammateTaskColumnMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.teammate != nil {
		fields = append(fields, teammatetaskcolumn.FieldTeammateID)
	}
	if m.task_column != nil {
		fields = append(fields, teammatetaskcolumn.FieldTaskColumnID)
	}
	if m.width != nil {
		fields = append(fields, teammatetaskcolumn.FieldWidth)
	}
	if m.disabled != nil {
		fields = append(fields, teammatetaskcolumn.FieldDisabled)
	}
	if m.customizable != nil {
		fields = append(fields, teammatetaskcolumn.FieldCustomizable)
	}
	if m._order != nil {
		fields = append(fields, teammatetaskcolumn.FieldOrder)
	}
	if m.created_at != nil {
		fields = append(fields, teammatetaskcolumn.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, teammatetaskcolumn.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeammateTaskColumnMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case teammatetaskcolumn.FieldTeammateID:
		return m.TeammateID()
	case teammatetaskcolumn.FieldTaskColumnID:
		return m.TaskColumnID()
	case teammatetaskcolumn.FieldWidth:
		return m.Width()
	case teammatetaskcolumn.FieldDisabled:
		return m.Disabled()
	case teammatetaskcolumn.FieldCustomizable:
		return m.Customizable()
	case teammatetaskcolumn.FieldOrder:
		return m.Order()
	case teammatetaskcolumn.FieldCreatedAt:
		return m.CreatedAt()
	case teammatetaskcolumn.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeammateTaskColumnMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case teammatetaskcolumn.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case teammatetaskcolumn.FieldTaskColumnID:
		return m.OldTaskColumnID(ctx)
	case teammatetaskcolumn.FieldWidth:
		return m.OldWidth(ctx)
	case teammatetaskcolumn.FieldDisabled:
		return m.OldDisabled(ctx)
	case teammatetaskcolumn.FieldCustomizable:
		return m.OldCustomizable(ctx)
	case teammatetaskcolumn.FieldOrder:
		return m.OldOrder(ctx)
	case teammatetaskcolumn.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case teammatetaskcolumn.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TeammateTaskColumn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskColumnMutation) SetField(name string, value ent.Value) error {
	switch name {
	case teammatetaskcolumn.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case teammatetaskcolumn.FieldTaskColumnID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskColumnID(v)
		return nil
	case teammatetaskcolumn.FieldWidth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case teammatetaskcolumn.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case teammatetaskcolumn.FieldCustomizable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomizable(v)
		return nil
	case teammatetaskcolumn.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case teammatetaskcolumn.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case teammatetaskcolumn.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskColumn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeammateTaskColumnMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, teammatetaskcolumn.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeammateTaskColumnMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case teammatetaskcolumn.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskColumnMutation) AddField(name string, value ent.Value) error {
	switch name {
	case teammatetaskcolumn.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskColumn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeammateTaskColumnMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeammateTaskColumnMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeammateTaskColumnMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TeammateTaskColumn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeammateTaskColumnMutation) ResetField(name string) error {
	switch name {
	case teammatetaskcolumn.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case teammatetaskcolumn.FieldTaskColumnID:
		m.ResetTaskColumnID()
		return nil
	case teammatetaskcolumn.FieldWidth:
		m.ResetWidth()
		return nil
	case teammatetaskcolumn.FieldDisabled:
		m.ResetDisabled()
		return nil
	case teammatetaskcolumn.FieldCustomizable:
		m.ResetCustomizable()
		return nil
	case teammatetaskcolumn.FieldOrder:
		m.ResetOrder()
		return nil
	case teammatetaskcolumn.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case teammatetaskcolumn.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskColumn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeammateTaskColumnMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.teammate != nil {
		edges = append(edges, teammatetaskcolumn.EdgeTeammate)
	}
	if m.task_column != nil {
		edges = append(edges, teammatetaskcolumn.EdgeTaskColumn)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeammateTaskColumnMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case teammatetaskcolumn.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	case teammatetaskcolumn.EdgeTaskColumn:
		if id := m.task_column; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeammateTaskColumnMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeammateTaskColumnMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeammateTaskColumnMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteammate {
		edges = append(edges, teammatetaskcolumn.EdgeTeammate)
	}
	if m.clearedtask_column {
		edges = append(edges, teammatetaskcolumn.EdgeTaskColumn)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeammateTaskColumnMutation) EdgeCleared(name string) bool {
	switch name {
	case teammatetaskcolumn.EdgeTeammate:
		return m.clearedteammate
	case teammatetaskcolumn.EdgeTaskColumn:
		return m.clearedtask_column
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeammateTaskColumnMutation) ClearEdge(name string) error {
	switch name {
	case teammatetaskcolumn.EdgeTeammate:
		m.ClearTeammate()
		return nil
	case teammatetaskcolumn.EdgeTaskColumn:
		m.ClearTaskColumn()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskColumn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeammateTaskColumnMutation) ResetEdge(name string) error {
	switch name {
	case teammatetaskcolumn.EdgeTeammate:
		m.ResetTeammate()
		return nil
	case teammatetaskcolumn.EdgeTaskColumn:
		m.ResetTaskColumn()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskColumn edge %s", name)
}

// TeammateTaskListStatusMutation represents an operation that mutates the TeammateTaskListStatus nodes in the graph.
type TeammateTaskListStatusMutation struct {
	config
	op                                Op
	typ                               string
	id                                *ulid.ID
	created_at                        *time.Time
	updated_at                        *time.Time
	clearedFields                     map[string]struct{}
	workspace                         *ulid.ID
	clearedworkspace                  bool
	teammate                          *ulid.ID
	clearedteammate                   bool
	task_list_completed_status        *ulid.ID
	clearedtask_list_completed_status bool
	task_list_sort_status             *ulid.ID
	clearedtask_list_sort_status      bool
	done                              bool
	oldValue                          func(context.Context) (*TeammateTaskListStatus, error)
	predicates                        []predicate.TeammateTaskListStatus
}

var _ ent.Mutation = (*TeammateTaskListStatusMutation)(nil)

// teammatetaskliststatusOption allows management of the mutation configuration using functional options.
type teammatetaskliststatusOption func(*TeammateTaskListStatusMutation)

// newTeammateTaskListStatusMutation creates new mutation for the TeammateTaskListStatus entity.
func newTeammateTaskListStatusMutation(c config, op Op, opts ...teammatetaskliststatusOption) *TeammateTaskListStatusMutation {
	m := &TeammateTaskListStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeTeammateTaskListStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeammateTaskListStatusID sets the ID field of the mutation.
func withTeammateTaskListStatusID(id ulid.ID) teammatetaskliststatusOption {
	return func(m *TeammateTaskListStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *TeammateTaskListStatus
		)
		m.oldValue = func(ctx context.Context) (*TeammateTaskListStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TeammateTaskListStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeammateTaskListStatus sets the old TeammateTaskListStatus of the mutation.
func withTeammateTaskListStatus(node *TeammateTaskListStatus) teammatetaskliststatusOption {
	return func(m *TeammateTaskListStatusMutation) {
		m.oldValue = func(context.Context) (*TeammateTaskListStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeammateTaskListStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeammateTaskListStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TeammateTaskListStatus entities.
func (m *TeammateTaskListStatusMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeammateTaskListStatusMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetWorkspaceID sets the "workspace_id" field.
func (m *TeammateTaskListStatusMutation) SetWorkspaceID(u ulid.ID) {
	m.workspace = &u
}

// WorkspaceID returns the value of the "workspace_id" field in the mutation.
func (m *TeammateTaskListStatusMutation) WorkspaceID() (r ulid.ID, exists bool) {
	v := m.workspace
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkspaceID returns the old "workspace_id" field's value of the TeammateTaskListStatus entity.
// If the TeammateTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskListStatusMutation) OldWorkspaceID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWorkspaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWorkspaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkspaceID: %w", err)
	}
	return oldValue.WorkspaceID, nil
}

// ResetWorkspaceID resets all changes to the "workspace_id" field.
func (m *TeammateTaskListStatusMutation) ResetWorkspaceID() {
	m.workspace = nil
}

// SetTeammateID sets the "teammate_id" field.
func (m *TeammateTaskListStatusMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *TeammateTaskListStatusMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the TeammateTaskListStatus entity.
// If the TeammateTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskListStatusMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *TeammateTaskListStatusMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetTaskListCompletedStatusID sets the "task_list_completed_status_id" field.
func (m *TeammateTaskListStatusMutation) SetTaskListCompletedStatusID(u ulid.ID) {
	m.task_list_completed_status = &u
}

// TaskListCompletedStatusID returns the value of the "task_list_completed_status_id" field in the mutation.
func (m *TeammateTaskListStatusMutation) TaskListCompletedStatusID() (r ulid.ID, exists bool) {
	v := m.task_list_completed_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskListCompletedStatusID returns the old "task_list_completed_status_id" field's value of the TeammateTaskListStatus entity.
// If the TeammateTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskListStatusMutation) OldTaskListCompletedStatusID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskListCompletedStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskListCompletedStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskListCompletedStatusID: %w", err)
	}
	return oldValue.TaskListCompletedStatusID, nil
}

// ResetTaskListCompletedStatusID resets all changes to the "task_list_completed_status_id" field.
func (m *TeammateTaskListStatusMutation) ResetTaskListCompletedStatusID() {
	m.task_list_completed_status = nil
}

// SetTaskListSortStatusID sets the "task_list_sort_status_id" field.
func (m *TeammateTaskListStatusMutation) SetTaskListSortStatusID(u ulid.ID) {
	m.task_list_sort_status = &u
}

// TaskListSortStatusID returns the value of the "task_list_sort_status_id" field in the mutation.
func (m *TeammateTaskListStatusMutation) TaskListSortStatusID() (r ulid.ID, exists bool) {
	v := m.task_list_sort_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskListSortStatusID returns the old "task_list_sort_status_id" field's value of the TeammateTaskListStatus entity.
// If the TeammateTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskListStatusMutation) OldTaskListSortStatusID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaskListSortStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaskListSortStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskListSortStatusID: %w", err)
	}
	return oldValue.TaskListSortStatusID, nil
}

// ResetTaskListSortStatusID resets all changes to the "task_list_sort_status_id" field.
func (m *TeammateTaskListStatusMutation) ResetTaskListSortStatusID() {
	m.task_list_sort_status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TeammateTaskListStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TeammateTaskListStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TeammateTaskListStatus entity.
// If the TeammateTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskListStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TeammateTaskListStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TeammateTaskListStatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TeammateTaskListStatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TeammateTaskListStatus entity.
// If the TeammateTaskListStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskListStatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TeammateTaskListStatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (m *TeammateTaskListStatusMutation) ClearWorkspace() {
	m.clearedworkspace = true
}

// WorkspaceCleared reports if the "workspace" edge to the Workspace entity was cleared.
func (m *TeammateTaskListStatusMutation) WorkspaceCleared() bool {
	return m.clearedworkspace
}

// WorkspaceIDs returns the "workspace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkspaceID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskListStatusMutation) WorkspaceIDs() (ids []ulid.ID) {
	if id := m.workspace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkspace resets all changes to the "workspace" edge.
func (m *TeammateTaskListStatusMutation) ResetWorkspace() {
	m.workspace = nil
	m.clearedworkspace = false
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *TeammateTaskListStatusMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *TeammateTaskListStatusMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskListStatusMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *TeammateTaskListStatusMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// ClearTaskListCompletedStatus clears the "task_list_completed_status" edge to the TaskListCompletedStatus entity.
func (m *TeammateTaskListStatusMutation) ClearTaskListCompletedStatus() {
	m.clearedtask_list_completed_status = true
}

// TaskListCompletedStatusCleared reports if the "task_list_completed_status" edge to the TaskListCompletedStatus entity was cleared.
func (m *TeammateTaskListStatusMutation) TaskListCompletedStatusCleared() bool {
	return m.clearedtask_list_completed_status
}

// TaskListCompletedStatusIDs returns the "task_list_completed_status" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskListCompletedStatusID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskListStatusMutation) TaskListCompletedStatusIDs() (ids []ulid.ID) {
	if id := m.task_list_completed_status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskListCompletedStatus resets all changes to the "task_list_completed_status" edge.
func (m *TeammateTaskListStatusMutation) ResetTaskListCompletedStatus() {
	m.task_list_completed_status = nil
	m.clearedtask_list_completed_status = false
}

// ClearTaskListSortStatus clears the "task_list_sort_status" edge to the TaskListSortStatus entity.
func (m *TeammateTaskListStatusMutation) ClearTaskListSortStatus() {
	m.clearedtask_list_sort_status = true
}

// TaskListSortStatusCleared reports if the "task_list_sort_status" edge to the TaskListSortStatus entity was cleared.
func (m *TeammateTaskListStatusMutation) TaskListSortStatusCleared() bool {
	return m.clearedtask_list_sort_status
}

// TaskListSortStatusIDs returns the "task_list_sort_status" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskListSortStatusID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskListStatusMutation) TaskListSortStatusIDs() (ids []ulid.ID) {
	if id := m.task_list_sort_status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskListSortStatus resets all changes to the "task_list_sort_status" edge.
func (m *TeammateTaskListStatusMutation) ResetTaskListSortStatus() {
	m.task_list_sort_status = nil
	m.clearedtask_list_sort_status = false
}

// Where appends a list predicates to the TeammateTaskListStatusMutation builder.
func (m *TeammateTaskListStatusMutation) Where(ps ...predicate.TeammateTaskListStatus) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeammateTaskListStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TeammateTaskListStatus).
func (m *TeammateTaskListStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeammateTaskListStatusMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.workspace != nil {
		fields = append(fields, teammatetaskliststatus.FieldWorkspaceID)
	}
	if m.teammate != nil {
		fields = append(fields, teammatetaskliststatus.FieldTeammateID)
	}
	if m.task_list_completed_status != nil {
		fields = append(fields, teammatetaskliststatus.FieldTaskListCompletedStatusID)
	}
	if m.task_list_sort_status != nil {
		fields = append(fields, teammatetaskliststatus.FieldTaskListSortStatusID)
	}
	if m.created_at != nil {
		fields = append(fields, teammatetaskliststatus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, teammatetaskliststatus.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeammateTaskListStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case teammatetaskliststatus.FieldWorkspaceID:
		return m.WorkspaceID()
	case teammatetaskliststatus.FieldTeammateID:
		return m.TeammateID()
	case teammatetaskliststatus.FieldTaskListCompletedStatusID:
		return m.TaskListCompletedStatusID()
	case teammatetaskliststatus.FieldTaskListSortStatusID:
		return m.TaskListSortStatusID()
	case teammatetaskliststatus.FieldCreatedAt:
		return m.CreatedAt()
	case teammatetaskliststatus.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeammateTaskListStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case teammatetaskliststatus.FieldWorkspaceID:
		return m.OldWorkspaceID(ctx)
	case teammatetaskliststatus.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case teammatetaskliststatus.FieldTaskListCompletedStatusID:
		return m.OldTaskListCompletedStatusID(ctx)
	case teammatetaskliststatus.FieldTaskListSortStatusID:
		return m.OldTaskListSortStatusID(ctx)
	case teammatetaskliststatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case teammatetaskliststatus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TeammateTaskListStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskListStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case teammatetaskliststatus.FieldWorkspaceID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkspaceID(v)
		return nil
	case teammatetaskliststatus.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case teammatetaskliststatus.FieldTaskListCompletedStatusID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskListCompletedStatusID(v)
		return nil
	case teammatetaskliststatus.FieldTaskListSortStatusID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskListSortStatusID(v)
		return nil
	case teammatetaskliststatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case teammatetaskliststatus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskListStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeammateTaskListStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeammateTaskListStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskListStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TeammateTaskListStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeammateTaskListStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeammateTaskListStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeammateTaskListStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TeammateTaskListStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeammateTaskListStatusMutation) ResetField(name string) error {
	switch name {
	case teammatetaskliststatus.FieldWorkspaceID:
		m.ResetWorkspaceID()
		return nil
	case teammatetaskliststatus.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case teammatetaskliststatus.FieldTaskListCompletedStatusID:
		m.ResetTaskListCompletedStatusID()
		return nil
	case teammatetaskliststatus.FieldTaskListSortStatusID:
		m.ResetTaskListSortStatusID()
		return nil
	case teammatetaskliststatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case teammatetaskliststatus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskListStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeammateTaskListStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.workspace != nil {
		edges = append(edges, teammatetaskliststatus.EdgeWorkspace)
	}
	if m.teammate != nil {
		edges = append(edges, teammatetaskliststatus.EdgeTeammate)
	}
	if m.task_list_completed_status != nil {
		edges = append(edges, teammatetaskliststatus.EdgeTaskListCompletedStatus)
	}
	if m.task_list_sort_status != nil {
		edges = append(edges, teammatetaskliststatus.EdgeTaskListSortStatus)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeammateTaskListStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case teammatetaskliststatus.EdgeWorkspace:
		if id := m.workspace; id != nil {
			return []ent.Value{*id}
		}
	case teammatetaskliststatus.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	case teammatetaskliststatus.EdgeTaskListCompletedStatus:
		if id := m.task_list_completed_status; id != nil {
			return []ent.Value{*id}
		}
	case teammatetaskliststatus.EdgeTaskListSortStatus:
		if id := m.task_list_sort_status; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeammateTaskListStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeammateTaskListStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeammateTaskListStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedworkspace {
		edges = append(edges, teammatetaskliststatus.EdgeWorkspace)
	}
	if m.clearedteammate {
		edges = append(edges, teammatetaskliststatus.EdgeTeammate)
	}
	if m.clearedtask_list_completed_status {
		edges = append(edges, teammatetaskliststatus.EdgeTaskListCompletedStatus)
	}
	if m.clearedtask_list_sort_status {
		edges = append(edges, teammatetaskliststatus.EdgeTaskListSortStatus)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeammateTaskListStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case teammatetaskliststatus.EdgeWorkspace:
		return m.clearedworkspace
	case teammatetaskliststatus.EdgeTeammate:
		return m.clearedteammate
	case teammatetaskliststatus.EdgeTaskListCompletedStatus:
		return m.clearedtask_list_completed_status
	case teammatetaskliststatus.EdgeTaskListSortStatus:
		return m.clearedtask_list_sort_status
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeammateTaskListStatusMutation) ClearEdge(name string) error {
	switch name {
	case teammatetaskliststatus.EdgeWorkspace:
		m.ClearWorkspace()
		return nil
	case teammatetaskliststatus.EdgeTeammate:
		m.ClearTeammate()
		return nil
	case teammatetaskliststatus.EdgeTaskListCompletedStatus:
		m.ClearTaskListCompletedStatus()
		return nil
	case teammatetaskliststatus.EdgeTaskListSortStatus:
		m.ClearTaskListSortStatus()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskListStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeammateTaskListStatusMutation) ResetEdge(name string) error {
	switch name {
	case teammatetaskliststatus.EdgeWorkspace:
		m.ResetWorkspace()
		return nil
	case teammatetaskliststatus.EdgeTeammate:
		m.ResetTeammate()
		return nil
	case teammatetaskliststatus.EdgeTaskListCompletedStatus:
		m.ResetTaskListCompletedStatus()
		return nil
	case teammatetaskliststatus.EdgeTaskListSortStatus:
		m.ResetTaskListSortStatus()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskListStatus edge %s", name)
}

// TeammateTaskSectionMutation represents an operation that mutates the TeammateTaskSection nodes in the graph.
type TeammateTaskSectionMutation struct {
	config
	op               Op
	typ              string
	id               *ulid.ID
	name             *string
	assigned         *bool
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	teammate         *ulid.ID
	clearedteammate  bool
	workspace        *ulid.ID
	clearedworkspace bool
	done             bool
	oldValue         func(context.Context) (*TeammateTaskSection, error)
	predicates       []predicate.TeammateTaskSection
}

var _ ent.Mutation = (*TeammateTaskSectionMutation)(nil)

// teammatetasksectionOption allows management of the mutation configuration using functional options.
type teammatetasksectionOption func(*TeammateTaskSectionMutation)

// newTeammateTaskSectionMutation creates new mutation for the TeammateTaskSection entity.
func newTeammateTaskSectionMutation(c config, op Op, opts ...teammatetasksectionOption) *TeammateTaskSectionMutation {
	m := &TeammateTaskSectionMutation{
		config:        c,
		op:            op,
		typ:           TypeTeammateTaskSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeammateTaskSectionID sets the ID field of the mutation.
func withTeammateTaskSectionID(id ulid.ID) teammatetasksectionOption {
	return func(m *TeammateTaskSectionMutation) {
		var (
			err   error
			once  sync.Once
			value *TeammateTaskSection
		)
		m.oldValue = func(ctx context.Context) (*TeammateTaskSection, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TeammateTaskSection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeammateTaskSection sets the old TeammateTaskSection of the mutation.
func withTeammateTaskSection(node *TeammateTaskSection) teammatetasksectionOption {
	return func(m *TeammateTaskSectionMutation) {
		m.oldValue = func(context.Context) (*TeammateTaskSection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeammateTaskSectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeammateTaskSectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TeammateTaskSection entities.
func (m *TeammateTaskSectionMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeammateTaskSectionMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTeammateID sets the "teammate_id" field.
func (m *TeammateTaskSectionMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *TeammateTaskSectionMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the TeammateTaskSection entity.
// If the TeammateTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskSectionMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *TeammateTaskSectionMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetWorkspaceID sets the "workspace_id" field.
func (m *TeammateTaskSectionMutation) SetWorkspaceID(u ulid.ID) {
	m.workspace = &u
}

// WorkspaceID returns the value of the "workspace_id" field in the mutation.
func (m *TeammateTaskSectionMutation) WorkspaceID() (r ulid.ID, exists bool) {
	v := m.workspace
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkspaceID returns the old "workspace_id" field's value of the TeammateTaskSection entity.
// If the TeammateTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskSectionMutation) OldWorkspaceID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWorkspaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWorkspaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkspaceID: %w", err)
	}
	return oldValue.WorkspaceID, nil
}

// ResetWorkspaceID resets all changes to the "workspace_id" field.
func (m *TeammateTaskSectionMutation) ResetWorkspaceID() {
	m.workspace = nil
}

// SetName sets the "name" field.
func (m *TeammateTaskSectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeammateTaskSectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TeammateTaskSection entity.
// If the TeammateTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskSectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TeammateTaskSectionMutation) ResetName() {
	m.name = nil
}

// SetAssigned sets the "assigned" field.
func (m *TeammateTaskSectionMutation) SetAssigned(b bool) {
	m.assigned = &b
}

// Assigned returns the value of the "assigned" field in the mutation.
func (m *TeammateTaskSectionMutation) Assigned() (r bool, exists bool) {
	v := m.assigned
	if v == nil {
		return
	}
	return *v, true
}

// OldAssigned returns the old "assigned" field's value of the TeammateTaskSection entity.
// If the TeammateTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskSectionMutation) OldAssigned(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAssigned is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAssigned requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssigned: %w", err)
	}
	return oldValue.Assigned, nil
}

// ResetAssigned resets all changes to the "assigned" field.
func (m *TeammateTaskSectionMutation) ResetAssigned() {
	m.assigned = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TeammateTaskSectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TeammateTaskSectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TeammateTaskSection entity.
// If the TeammateTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskSectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TeammateTaskSectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TeammateTaskSectionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TeammateTaskSectionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TeammateTaskSection entity.
// If the TeammateTaskSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskSectionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TeammateTaskSectionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *TeammateTaskSectionMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *TeammateTaskSectionMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskSectionMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *TeammateTaskSectionMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (m *TeammateTaskSectionMutation) ClearWorkspace() {
	m.clearedworkspace = true
}

// WorkspaceCleared reports if the "workspace" edge to the Workspace entity was cleared.
func (m *TeammateTaskSectionMutation) WorkspaceCleared() bool {
	return m.clearedworkspace
}

// WorkspaceIDs returns the "workspace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkspaceID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskSectionMutation) WorkspaceIDs() (ids []ulid.ID) {
	if id := m.workspace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkspace resets all changes to the "workspace" edge.
func (m *TeammateTaskSectionMutation) ResetWorkspace() {
	m.workspace = nil
	m.clearedworkspace = false
}

// Where appends a list predicates to the TeammateTaskSectionMutation builder.
func (m *TeammateTaskSectionMutation) Where(ps ...predicate.TeammateTaskSection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeammateTaskSectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TeammateTaskSection).
func (m *TeammateTaskSectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeammateTaskSectionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.teammate != nil {
		fields = append(fields, teammatetasksection.FieldTeammateID)
	}
	if m.workspace != nil {
		fields = append(fields, teammatetasksection.FieldWorkspaceID)
	}
	if m.name != nil {
		fields = append(fields, teammatetasksection.FieldName)
	}
	if m.assigned != nil {
		fields = append(fields, teammatetasksection.FieldAssigned)
	}
	if m.created_at != nil {
		fields = append(fields, teammatetasksection.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, teammatetasksection.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeammateTaskSectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case teammatetasksection.FieldTeammateID:
		return m.TeammateID()
	case teammatetasksection.FieldWorkspaceID:
		return m.WorkspaceID()
	case teammatetasksection.FieldName:
		return m.Name()
	case teammatetasksection.FieldAssigned:
		return m.Assigned()
	case teammatetasksection.FieldCreatedAt:
		return m.CreatedAt()
	case teammatetasksection.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeammateTaskSectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case teammatetasksection.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case teammatetasksection.FieldWorkspaceID:
		return m.OldWorkspaceID(ctx)
	case teammatetasksection.FieldName:
		return m.OldName(ctx)
	case teammatetasksection.FieldAssigned:
		return m.OldAssigned(ctx)
	case teammatetasksection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case teammatetasksection.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TeammateTaskSection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskSectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case teammatetasksection.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case teammatetasksection.FieldWorkspaceID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkspaceID(v)
		return nil
	case teammatetasksection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case teammatetasksection.FieldAssigned:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssigned(v)
		return nil
	case teammatetasksection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case teammatetasksection.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskSection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeammateTaskSectionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeammateTaskSectionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskSectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TeammateTaskSection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeammateTaskSectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeammateTaskSectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeammateTaskSectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TeammateTaskSection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeammateTaskSectionMutation) ResetField(name string) error {
	switch name {
	case teammatetasksection.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case teammatetasksection.FieldWorkspaceID:
		m.ResetWorkspaceID()
		return nil
	case teammatetasksection.FieldName:
		m.ResetName()
		return nil
	case teammatetasksection.FieldAssigned:
		m.ResetAssigned()
		return nil
	case teammatetasksection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case teammatetasksection.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskSection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeammateTaskSectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.teammate != nil {
		edges = append(edges, teammatetasksection.EdgeTeammate)
	}
	if m.workspace != nil {
		edges = append(edges, teammatetasksection.EdgeWorkspace)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeammateTaskSectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case teammatetasksection.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	case teammatetasksection.EdgeWorkspace:
		if id := m.workspace; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeammateTaskSectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeammateTaskSectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeammateTaskSectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedteammate {
		edges = append(edges, teammatetasksection.EdgeTeammate)
	}
	if m.clearedworkspace {
		edges = append(edges, teammatetasksection.EdgeWorkspace)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeammateTaskSectionMutation) EdgeCleared(name string) bool {
	switch name {
	case teammatetasksection.EdgeTeammate:
		return m.clearedteammate
	case teammatetasksection.EdgeWorkspace:
		return m.clearedworkspace
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeammateTaskSectionMutation) ClearEdge(name string) error {
	switch name {
	case teammatetasksection.EdgeTeammate:
		m.ClearTeammate()
		return nil
	case teammatetasksection.EdgeWorkspace:
		m.ClearWorkspace()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskSection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeammateTaskSectionMutation) ResetEdge(name string) error {
	switch name {
	case teammatetasksection.EdgeTeammate:
		m.ResetTeammate()
		return nil
	case teammatetasksection.EdgeWorkspace:
		m.ResetWorkspace()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskSection edge %s", name)
}

// TeammateTaskTabStatusMutation represents an operation that mutates the TeammateTaskTabStatus nodes in the graph.
type TeammateTaskTabStatusMutation struct {
	config
	op               Op
	typ              string
	id               *ulid.ID
	status_code      *teammatetasktabstatus.StatusCode
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	workspace        *ulid.ID
	clearedworkspace bool
	teammate         *ulid.ID
	clearedteammate  bool
	done             bool
	oldValue         func(context.Context) (*TeammateTaskTabStatus, error)
	predicates       []predicate.TeammateTaskTabStatus
}

var _ ent.Mutation = (*TeammateTaskTabStatusMutation)(nil)

// teammatetasktabstatusOption allows management of the mutation configuration using functional options.
type teammatetasktabstatusOption func(*TeammateTaskTabStatusMutation)

// newTeammateTaskTabStatusMutation creates new mutation for the TeammateTaskTabStatus entity.
func newTeammateTaskTabStatusMutation(c config, op Op, opts ...teammatetasktabstatusOption) *TeammateTaskTabStatusMutation {
	m := &TeammateTaskTabStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeTeammateTaskTabStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeammateTaskTabStatusID sets the ID field of the mutation.
func withTeammateTaskTabStatusID(id ulid.ID) teammatetasktabstatusOption {
	return func(m *TeammateTaskTabStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *TeammateTaskTabStatus
		)
		m.oldValue = func(ctx context.Context) (*TeammateTaskTabStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TeammateTaskTabStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeammateTaskTabStatus sets the old TeammateTaskTabStatus of the mutation.
func withTeammateTaskTabStatus(node *TeammateTaskTabStatus) teammatetasktabstatusOption {
	return func(m *TeammateTaskTabStatusMutation) {
		m.oldValue = func(context.Context) (*TeammateTaskTabStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeammateTaskTabStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeammateTaskTabStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TeammateTaskTabStatus entities.
func (m *TeammateTaskTabStatusMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeammateTaskTabStatusMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetWorkspaceID sets the "workspace_id" field.
func (m *TeammateTaskTabStatusMutation) SetWorkspaceID(u ulid.ID) {
	m.workspace = &u
}

// WorkspaceID returns the value of the "workspace_id" field in the mutation.
func (m *TeammateTaskTabStatusMutation) WorkspaceID() (r ulid.ID, exists bool) {
	v := m.workspace
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkspaceID returns the old "workspace_id" field's value of the TeammateTaskTabStatus entity.
// If the TeammateTaskTabStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskTabStatusMutation) OldWorkspaceID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWorkspaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWorkspaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkspaceID: %w", err)
	}
	return oldValue.WorkspaceID, nil
}

// ResetWorkspaceID resets all changes to the "workspace_id" field.
func (m *TeammateTaskTabStatusMutation) ResetWorkspaceID() {
	m.workspace = nil
}

// SetTeammateID sets the "teammate_id" field.
func (m *TeammateTaskTabStatusMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *TeammateTaskTabStatusMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the TeammateTaskTabStatus entity.
// If the TeammateTaskTabStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskTabStatusMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *TeammateTaskTabStatusMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetStatusCode sets the "status_code" field.
func (m *TeammateTaskTabStatusMutation) SetStatusCode(tc teammatetasktabstatus.StatusCode) {
	m.status_code = &tc
}

// StatusCode returns the value of the "status_code" field in the mutation.
func (m *TeammateTaskTabStatusMutation) StatusCode() (r teammatetasktabstatus.StatusCode, exists bool) {
	v := m.status_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusCode returns the old "status_code" field's value of the TeammateTaskTabStatus entity.
// If the TeammateTaskTabStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskTabStatusMutation) OldStatusCode(ctx context.Context) (v teammatetasktabstatus.StatusCode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusCode: %w", err)
	}
	return oldValue.StatusCode, nil
}

// ResetStatusCode resets all changes to the "status_code" field.
func (m *TeammateTaskTabStatusMutation) ResetStatusCode() {
	m.status_code = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TeammateTaskTabStatusMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TeammateTaskTabStatusMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TeammateTaskTabStatus entity.
// If the TeammateTaskTabStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskTabStatusMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TeammateTaskTabStatusMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TeammateTaskTabStatusMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TeammateTaskTabStatusMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TeammateTaskTabStatus entity.
// If the TeammateTaskTabStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeammateTaskTabStatusMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TeammateTaskTabStatusMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (m *TeammateTaskTabStatusMutation) ClearWorkspace() {
	m.clearedworkspace = true
}

// WorkspaceCleared reports if the "workspace" edge to the Workspace entity was cleared.
func (m *TeammateTaskTabStatusMutation) WorkspaceCleared() bool {
	return m.clearedworkspace
}

// WorkspaceIDs returns the "workspace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkspaceID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskTabStatusMutation) WorkspaceIDs() (ids []ulid.ID) {
	if id := m.workspace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkspace resets all changes to the "workspace" edge.
func (m *TeammateTaskTabStatusMutation) ResetWorkspace() {
	m.workspace = nil
	m.clearedworkspace = false
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *TeammateTaskTabStatusMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *TeammateTaskTabStatusMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *TeammateTaskTabStatusMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *TeammateTaskTabStatusMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// Where appends a list predicates to the TeammateTaskTabStatusMutation builder.
func (m *TeammateTaskTabStatusMutation) Where(ps ...predicate.TeammateTaskTabStatus) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeammateTaskTabStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TeammateTaskTabStatus).
func (m *TeammateTaskTabStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeammateTaskTabStatusMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.workspace != nil {
		fields = append(fields, teammatetasktabstatus.FieldWorkspaceID)
	}
	if m.teammate != nil {
		fields = append(fields, teammatetasktabstatus.FieldTeammateID)
	}
	if m.status_code != nil {
		fields = append(fields, teammatetasktabstatus.FieldStatusCode)
	}
	if m.created_at != nil {
		fields = append(fields, teammatetasktabstatus.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, teammatetasktabstatus.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeammateTaskTabStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case teammatetasktabstatus.FieldWorkspaceID:
		return m.WorkspaceID()
	case teammatetasktabstatus.FieldTeammateID:
		return m.TeammateID()
	case teammatetasktabstatus.FieldStatusCode:
		return m.StatusCode()
	case teammatetasktabstatus.FieldCreatedAt:
		return m.CreatedAt()
	case teammatetasktabstatus.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeammateTaskTabStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case teammatetasktabstatus.FieldWorkspaceID:
		return m.OldWorkspaceID(ctx)
	case teammatetasktabstatus.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case teammatetasktabstatus.FieldStatusCode:
		return m.OldStatusCode(ctx)
	case teammatetasktabstatus.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case teammatetasktabstatus.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TeammateTaskTabStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskTabStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case teammatetasktabstatus.FieldWorkspaceID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkspaceID(v)
		return nil
	case teammatetasktabstatus.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case teammatetasktabstatus.FieldStatusCode:
		v, ok := value.(teammatetasktabstatus.StatusCode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusCode(v)
		return nil
	case teammatetasktabstatus.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case teammatetasktabstatus.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskTabStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeammateTaskTabStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeammateTaskTabStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeammateTaskTabStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TeammateTaskTabStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeammateTaskTabStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeammateTaskTabStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeammateTaskTabStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TeammateTaskTabStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeammateTaskTabStatusMutation) ResetField(name string) error {
	switch name {
	case teammatetasktabstatus.FieldWorkspaceID:
		m.ResetWorkspaceID()
		return nil
	case teammatetasktabstatus.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case teammatetasktabstatus.FieldStatusCode:
		m.ResetStatusCode()
		return nil
	case teammatetasktabstatus.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case teammatetasktabstatus.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskTabStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeammateTaskTabStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.workspace != nil {
		edges = append(edges, teammatetasktabstatus.EdgeWorkspace)
	}
	if m.teammate != nil {
		edges = append(edges, teammatetasktabstatus.EdgeTeammate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeammateTaskTabStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case teammatetasktabstatus.EdgeWorkspace:
		if id := m.workspace; id != nil {
			return []ent.Value{*id}
		}
	case teammatetasktabstatus.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeammateTaskTabStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeammateTaskTabStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeammateTaskTabStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedworkspace {
		edges = append(edges, teammatetasktabstatus.EdgeWorkspace)
	}
	if m.clearedteammate {
		edges = append(edges, teammatetasktabstatus.EdgeTeammate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeammateTaskTabStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case teammatetasktabstatus.EdgeWorkspace:
		return m.clearedworkspace
	case teammatetasktabstatus.EdgeTeammate:
		return m.clearedteammate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeammateTaskTabStatusMutation) ClearEdge(name string) error {
	switch name {
	case teammatetasktabstatus.EdgeWorkspace:
		m.ClearWorkspace()
		return nil
	case teammatetasktabstatus.EdgeTeammate:
		m.ClearTeammate()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskTabStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeammateTaskTabStatusMutation) ResetEdge(name string) error {
	switch name {
	case teammatetasktabstatus.EdgeWorkspace:
		m.ResetWorkspace()
		return nil
	case teammatetasktabstatus.EdgeTeammate:
		m.ResetTeammate()
		return nil
	}
	return fmt.Errorf("unknown TeammateTaskTabStatus edge %s", name)
}

// TestTodoMutation represents an operation that mutates the TestTodo nodes in the graph.
type TestTodoMutation struct {
	config
	op               Op
	typ              string
	id               *ulid.ID
	created_by       *ulid.ID
	name             *string
	status           *testtodo.Status
	priority         *int
	addpriority      *int
	due_date         *time.Time
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	test_user        *ulid.ID
	clearedtest_user bool
	parent           *ulid.ID
	clearedparent    bool
	children         map[ulid.ID]struct{}
	removedchildren  map[ulid.ID]struct{}
	clearedchildren  bool
	done             bool
	oldValue         func(context.Context) (*TestTodo, error)
	predicates       []predicate.TestTodo
}

var _ ent.Mutation = (*TestTodoMutation)(nil)

// testtodoOption allows management of the mutation configuration using functional options.
type testtodoOption func(*TestTodoMutation)

// newTestTodoMutation creates new mutation for the TestTodo entity.
func newTestTodoMutation(c config, op Op, opts ...testtodoOption) *TestTodoMutation {
	m := &TestTodoMutation{
		config:        c,
		op:            op,
		typ:           TypeTestTodo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestTodoID sets the ID field of the mutation.
func withTestTodoID(id ulid.ID) testtodoOption {
	return func(m *TestTodoMutation) {
		var (
			err   error
			once  sync.Once
			value *TestTodo
		)
		m.oldValue = func(ctx context.Context) (*TestTodo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestTodo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestTodo sets the old TestTodo of the mutation.
func withTestTodo(node *TestTodo) testtodoOption {
	return func(m *TestTodoMutation) {
		m.oldValue = func(context.Context) (*TestTodo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestTodoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestTodoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestTodo entities.
func (m *TestTodoMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestTodoMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTestUserID sets the "test_user_id" field.
func (m *TestTodoMutation) SetTestUserID(u ulid.ID) {
	m.test_user = &u
}

// TestUserID returns the value of the "test_user_id" field in the mutation.
func (m *TestTodoMutation) TestUserID() (r ulid.ID, exists bool) {
	v := m.test_user
	if v == nil {
		return
	}
	return *v, true
}

// OldTestUserID returns the old "test_user_id" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldTestUserID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTestUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTestUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestUserID: %w", err)
	}
	return oldValue.TestUserID, nil
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (m *TestTodoMutation) ClearTestUserID() {
	m.test_user = nil
	m.clearedFields[testtodo.FieldTestUserID] = struct{}{}
}

// TestUserIDCleared returns if the "test_user_id" field was cleared in this mutation.
func (m *TestTodoMutation) TestUserIDCleared() bool {
	_, ok := m.clearedFields[testtodo.FieldTestUserID]
	return ok
}

// ResetTestUserID resets all changes to the "test_user_id" field.
func (m *TestTodoMutation) ResetTestUserID() {
	m.test_user = nil
	delete(m.clearedFields, testtodo.FieldTestUserID)
}

// SetCreatedBy sets the "created_by" field.
func (m *TestTodoMutation) SetCreatedBy(u ulid.ID) {
	m.created_by = &u
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TestTodoMutation) CreatedBy() (r ulid.ID, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldCreatedBy(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *TestTodoMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[testtodo.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *TestTodoMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[testtodo.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TestTodoMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, testtodo.FieldCreatedBy)
}

// SetParentTodoID sets the "parent_todo_id" field.
func (m *TestTodoMutation) SetParentTodoID(u ulid.ID) {
	m.parent = &u
}

// ParentTodoID returns the value of the "parent_todo_id" field in the mutation.
func (m *TestTodoMutation) ParentTodoID() (r ulid.ID, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentTodoID returns the old "parent_todo_id" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldParentTodoID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldParentTodoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldParentTodoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentTodoID: %w", err)
	}
	return oldValue.ParentTodoID, nil
}

// ClearParentTodoID clears the value of the "parent_todo_id" field.
func (m *TestTodoMutation) ClearParentTodoID() {
	m.parent = nil
	m.clearedFields[testtodo.FieldParentTodoID] = struct{}{}
}

// ParentTodoIDCleared returns if the "parent_todo_id" field was cleared in this mutation.
func (m *TestTodoMutation) ParentTodoIDCleared() bool {
	_, ok := m.clearedFields[testtodo.FieldParentTodoID]
	return ok
}

// ResetParentTodoID resets all changes to the "parent_todo_id" field.
func (m *TestTodoMutation) ResetParentTodoID() {
	m.parent = nil
	delete(m.clearedFields, testtodo.FieldParentTodoID)
}

// SetName sets the "name" field.
func (m *TestTodoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TestTodoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TestTodoMutation) ResetName() {
	m.name = nil
}

// SetStatus sets the "status" field.
func (m *TestTodoMutation) SetStatus(t testtodo.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TestTodoMutation) Status() (r testtodo.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldStatus(ctx context.Context) (v testtodo.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TestTodoMutation) ResetStatus() {
	m.status = nil
}

// SetPriority sets the "priority" field.
func (m *TestTodoMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *TestTodoMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *TestTodoMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *TestTodoMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *TestTodoMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetDueDate sets the "due_date" field.
func (m *TestTodoMutation) SetDueDate(t time.Time) {
	m.due_date = &t
}

// DueDate returns the value of the "due_date" field in the mutation.
func (m *TestTodoMutation) DueDate() (r time.Time, exists bool) {
	v := m.due_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "due_date" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldDueDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ClearDueDate clears the value of the "due_date" field.
func (m *TestTodoMutation) ClearDueDate() {
	m.due_date = nil
	m.clearedFields[testtodo.FieldDueDate] = struct{}{}
}

// DueDateCleared returns if the "due_date" field was cleared in this mutation.
func (m *TestTodoMutation) DueDateCleared() bool {
	_, ok := m.clearedFields[testtodo.FieldDueDate]
	return ok
}

// ResetDueDate resets all changes to the "due_date" field.
func (m *TestTodoMutation) ResetDueDate() {
	m.due_date = nil
	delete(m.clearedFields, testtodo.FieldDueDate)
}

// SetCreatedAt sets the "created_at" field.
func (m *TestTodoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestTodoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestTodoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestTodoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestTodoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestTodo entity.
// If the TestTodo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestTodoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestTodoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearTestUser clears the "test_user" edge to the TestUser entity.
func (m *TestTodoMutation) ClearTestUser() {
	m.clearedtest_user = true
}

// TestUserCleared reports if the "test_user" edge to the TestUser entity was cleared.
func (m *TestTodoMutation) TestUserCleared() bool {
	return m.TestUserIDCleared() || m.clearedtest_user
}

// TestUserIDs returns the "test_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TestUserID instead. It exists only for internal usage by the builders.
func (m *TestTodoMutation) TestUserIDs() (ids []ulid.ID) {
	if id := m.test_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTestUser resets all changes to the "test_user" edge.
func (m *TestTodoMutation) ResetTestUser() {
	m.test_user = nil
	m.clearedtest_user = false
}

// SetParentID sets the "parent" edge to the TestTodo entity by id.
func (m *TestTodoMutation) SetParentID(id ulid.ID) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the TestTodo entity.
func (m *TestTodoMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the TestTodo entity was cleared.
func (m *TestTodoMutation) ParentCleared() bool {
	return m.ParentTodoIDCleared() || m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *TestTodoMutation) ParentID() (id ulid.ID, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *TestTodoMutation) ParentIDs() (ids []ulid.ID) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *TestTodoMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the TestTodo entity by ids.
func (m *TestTodoMutation) AddChildIDs(ids ...ulid.ID) {
	if m.children == nil {
		m.children = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the TestTodo entity.
func (m *TestTodoMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the TestTodo entity was cleared.
func (m *TestTodoMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the TestTodo entity by IDs.
func (m *TestTodoMutation) RemoveChildIDs(ids ...ulid.ID) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the TestTodo entity.
func (m *TestTodoMutation) RemovedChildrenIDs() (ids []ulid.ID) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *TestTodoMutation) ChildrenIDs() (ids []ulid.ID) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *TestTodoMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the TestTodoMutation builder.
func (m *TestTodoMutation) Where(ps ...predicate.TestTodo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TestTodoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TestTodo).
func (m *TestTodoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestTodoMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.test_user != nil {
		fields = append(fields, testtodo.FieldTestUserID)
	}
	if m.created_by != nil {
		fields = append(fields, testtodo.FieldCreatedBy)
	}
	if m.parent != nil {
		fields = append(fields, testtodo.FieldParentTodoID)
	}
	if m.name != nil {
		fields = append(fields, testtodo.FieldName)
	}
	if m.status != nil {
		fields = append(fields, testtodo.FieldStatus)
	}
	if m.priority != nil {
		fields = append(fields, testtodo.FieldPriority)
	}
	if m.due_date != nil {
		fields = append(fields, testtodo.FieldDueDate)
	}
	if m.created_at != nil {
		fields = append(fields, testtodo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testtodo.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestTodoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testtodo.FieldTestUserID:
		return m.TestUserID()
	case testtodo.FieldCreatedBy:
		return m.CreatedBy()
	case testtodo.FieldParentTodoID:
		return m.ParentTodoID()
	case testtodo.FieldName:
		return m.Name()
	case testtodo.FieldStatus:
		return m.Status()
	case testtodo.FieldPriority:
		return m.Priority()
	case testtodo.FieldDueDate:
		return m.DueDate()
	case testtodo.FieldCreatedAt:
		return m.CreatedAt()
	case testtodo.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestTodoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testtodo.FieldTestUserID:
		return m.OldTestUserID(ctx)
	case testtodo.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case testtodo.FieldParentTodoID:
		return m.OldParentTodoID(ctx)
	case testtodo.FieldName:
		return m.OldName(ctx)
	case testtodo.FieldStatus:
		return m.OldStatus(ctx)
	case testtodo.FieldPriority:
		return m.OldPriority(ctx)
	case testtodo.FieldDueDate:
		return m.OldDueDate(ctx)
	case testtodo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testtodo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TestTodo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestTodoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testtodo.FieldTestUserID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestUserID(v)
		return nil
	case testtodo.FieldCreatedBy:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case testtodo.FieldParentTodoID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentTodoID(v)
		return nil
	case testtodo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case testtodo.FieldStatus:
		v, ok := value.(testtodo.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case testtodo.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case testtodo.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case testtodo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testtodo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TestTodo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestTodoMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, testtodo.FieldPriority)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestTodoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testtodo.FieldPriority:
		return m.AddedPriority()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestTodoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testtodo.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	}
	return fmt.Errorf("unknown TestTodo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestTodoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testtodo.FieldTestUserID) {
		fields = append(fields, testtodo.FieldTestUserID)
	}
	if m.FieldCleared(testtodo.FieldCreatedBy) {
		fields = append(fields, testtodo.FieldCreatedBy)
	}
	if m.FieldCleared(testtodo.FieldParentTodoID) {
		fields = append(fields, testtodo.FieldParentTodoID)
	}
	if m.FieldCleared(testtodo.FieldDueDate) {
		fields = append(fields, testtodo.FieldDueDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestTodoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestTodoMutation) ClearField(name string) error {
	switch name {
	case testtodo.FieldTestUserID:
		m.ClearTestUserID()
		return nil
	case testtodo.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case testtodo.FieldParentTodoID:
		m.ClearParentTodoID()
		return nil
	case testtodo.FieldDueDate:
		m.ClearDueDate()
		return nil
	}
	return fmt.Errorf("unknown TestTodo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestTodoMutation) ResetField(name string) error {
	switch name {
	case testtodo.FieldTestUserID:
		m.ResetTestUserID()
		return nil
	case testtodo.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case testtodo.FieldParentTodoID:
		m.ResetParentTodoID()
		return nil
	case testtodo.FieldName:
		m.ResetName()
		return nil
	case testtodo.FieldStatus:
		m.ResetStatus()
		return nil
	case testtodo.FieldPriority:
		m.ResetPriority()
		return nil
	case testtodo.FieldDueDate:
		m.ResetDueDate()
		return nil
	case testtodo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testtodo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TestTodo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestTodoMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.test_user != nil {
		edges = append(edges, testtodo.EdgeTestUser)
	}
	if m.parent != nil {
		edges = append(edges, testtodo.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, testtodo.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestTodoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testtodo.EdgeTestUser:
		if id := m.test_user; id != nil {
			return []ent.Value{*id}
		}
	case testtodo.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case testtodo.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestTodoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchildren != nil {
		edges = append(edges, testtodo.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestTodoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case testtodo.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestTodoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtest_user {
		edges = append(edges, testtodo.EdgeTestUser)
	}
	if m.clearedparent {
		edges = append(edges, testtodo.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, testtodo.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestTodoMutation) EdgeCleared(name string) bool {
	switch name {
	case testtodo.EdgeTestUser:
		return m.clearedtest_user
	case testtodo.EdgeParent:
		return m.clearedparent
	case testtodo.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestTodoMutation) ClearEdge(name string) error {
	switch name {
	case testtodo.EdgeTestUser:
		m.ClearTestUser()
		return nil
	case testtodo.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown TestTodo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestTodoMutation) ResetEdge(name string) error {
	switch name {
	case testtodo.EdgeTestUser:
		m.ResetTestUser()
		return nil
	case testtodo.EdgeParent:
		m.ResetParent()
		return nil
	case testtodo.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown TestTodo edge %s", name)
}

// TestUserMutation represents an operation that mutates the TestUser nodes in the graph.
type TestUserMutation struct {
	config
	op                Op
	typ               string
	id                *ulid.ID
	name              *string
	age               *int
	addage            *int
	profile           *testuserprofile.TestUserProfile
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	test_todos        map[ulid.ID]struct{}
	removedtest_todos map[ulid.ID]struct{}
	clearedtest_todos bool
	done              bool
	oldValue          func(context.Context) (*TestUser, error)
	predicates        []predicate.TestUser
}

var _ ent.Mutation = (*TestUserMutation)(nil)

// testuserOption allows management of the mutation configuration using functional options.
type testuserOption func(*TestUserMutation)

// newTestUserMutation creates new mutation for the TestUser entity.
func newTestUserMutation(c config, op Op, opts ...testuserOption) *TestUserMutation {
	m := &TestUserMutation{
		config:        c,
		op:            op,
		typ:           TypeTestUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestUserID sets the ID field of the mutation.
func withTestUserID(id ulid.ID) testuserOption {
	return func(m *TestUserMutation) {
		var (
			err   error
			once  sync.Once
			value *TestUser
		)
		m.oldValue = func(ctx context.Context) (*TestUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestUser sets the old TestUser of the mutation.
func withTestUser(node *TestUser) testuserOption {
	return func(m *TestUserMutation) {
		m.oldValue = func(context.Context) (*TestUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestUser entities.
func (m *TestUserMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestUserMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *TestUserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TestUserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TestUser entity.
// If the TestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestUserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TestUserMutation) ResetName() {
	m.name = nil
}

// SetAge sets the "age" field.
func (m *TestUserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *TestUserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the TestUser entity.
// If the TestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestUserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *TestUserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *TestUserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *TestUserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetProfile sets the "profile" field.
func (m *TestUserMutation) SetProfile(tup testuserprofile.TestUserProfile) {
	m.profile = &tup
}

// Profile returns the value of the "profile" field in the mutation.
func (m *TestUserMutation) Profile() (r testuserprofile.TestUserProfile, exists bool) {
	v := m.profile
	if v == nil {
		return
	}
	return *v, true
}

// OldProfile returns the old "profile" field's value of the TestUser entity.
// If the TestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestUserMutation) OldProfile(ctx context.Context) (v testuserprofile.TestUserProfile, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfile: %w", err)
	}
	return oldValue.Profile, nil
}

// ResetProfile resets all changes to the "profile" field.
func (m *TestUserMutation) ResetProfile() {
	m.profile = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TestUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestUser entity.
// If the TestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestUser entity.
// If the TestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTestTodoIDs adds the "test_todos" edge to the TestTodo entity by ids.
func (m *TestUserMutation) AddTestTodoIDs(ids ...ulid.ID) {
	if m.test_todos == nil {
		m.test_todos = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.test_todos[ids[i]] = struct{}{}
	}
}

// ClearTestTodos clears the "test_todos" edge to the TestTodo entity.
func (m *TestUserMutation) ClearTestTodos() {
	m.clearedtest_todos = true
}

// TestTodosCleared reports if the "test_todos" edge to the TestTodo entity was cleared.
func (m *TestUserMutation) TestTodosCleared() bool {
	return m.clearedtest_todos
}

// RemoveTestTodoIDs removes the "test_todos" edge to the TestTodo entity by IDs.
func (m *TestUserMutation) RemoveTestTodoIDs(ids ...ulid.ID) {
	if m.removedtest_todos == nil {
		m.removedtest_todos = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.test_todos, ids[i])
		m.removedtest_todos[ids[i]] = struct{}{}
	}
}

// RemovedTestTodos returns the removed IDs of the "test_todos" edge to the TestTodo entity.
func (m *TestUserMutation) RemovedTestTodosIDs() (ids []ulid.ID) {
	for id := range m.removedtest_todos {
		ids = append(ids, id)
	}
	return
}

// TestTodosIDs returns the "test_todos" edge IDs in the mutation.
func (m *TestUserMutation) TestTodosIDs() (ids []ulid.ID) {
	for id := range m.test_todos {
		ids = append(ids, id)
	}
	return
}

// ResetTestTodos resets all changes to the "test_todos" edge.
func (m *TestUserMutation) ResetTestTodos() {
	m.test_todos = nil
	m.clearedtest_todos = false
	m.removedtest_todos = nil
}

// Where appends a list predicates to the TestUserMutation builder.
func (m *TestUserMutation) Where(ps ...predicate.TestUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TestUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TestUser).
func (m *TestUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestUserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, testuser.FieldName)
	}
	if m.age != nil {
		fields = append(fields, testuser.FieldAge)
	}
	if m.profile != nil {
		fields = append(fields, testuser.FieldProfile)
	}
	if m.created_at != nil {
		fields = append(fields, testuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testuser.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testuser.FieldName:
		return m.Name()
	case testuser.FieldAge:
		return m.Age()
	case testuser.FieldProfile:
		return m.Profile()
	case testuser.FieldCreatedAt:
		return m.CreatedAt()
	case testuser.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testuser.FieldName:
		return m.OldName(ctx)
	case testuser.FieldAge:
		return m.OldAge(ctx)
	case testuser.FieldProfile:
		return m.OldProfile(ctx)
	case testuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TestUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testuser.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case testuser.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case testuser.FieldProfile:
		v, ok := value.(testuserprofile.TestUserProfile)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfile(v)
		return nil
	case testuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TestUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestUserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, testuser.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testuser.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testuser.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown TestUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TestUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestUserMutation) ResetField(name string) error {
	switch name {
	case testuser.FieldName:
		m.ResetName()
		return nil
	case testuser.FieldAge:
		m.ResetAge()
		return nil
	case testuser.FieldProfile:
		m.ResetProfile()
		return nil
	case testuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TestUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.test_todos != nil {
		edges = append(edges, testuser.EdgeTestTodos)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case testuser.EdgeTestTodos:
		ids := make([]ent.Value, 0, len(m.test_todos))
		for id := range m.test_todos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtest_todos != nil {
		edges = append(edges, testuser.EdgeTestTodos)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case testuser.EdgeTestTodos:
		ids := make([]ent.Value, 0, len(m.removedtest_todos))
		for id := range m.removedtest_todos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtest_todos {
		edges = append(edges, testuser.EdgeTestTodos)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestUserMutation) EdgeCleared(name string) bool {
	switch name {
	case testuser.EdgeTestTodos:
		return m.clearedtest_todos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TestUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestUserMutation) ResetEdge(name string) error {
	switch name {
	case testuser.EdgeTestTodos:
		m.ResetTestTodos()
		return nil
	}
	return fmt.Errorf("unknown TestUser edge %s", name)
}

// WorkspaceMutation represents an operation that mutates the Workspace nodes in the graph.
type WorkspaceMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *ulid.ID
	name                               *string
	description                        *editor.Description
	created_at                         *time.Time
	updated_at                         *time.Time
	clearedFields                      map[string]struct{}
	teammate                           *ulid.ID
	clearedteammate                    bool
	projects                           map[ulid.ID]struct{}
	removedprojects                    map[ulid.ID]struct{}
	clearedprojects                    bool
	workspace_teammates                map[ulid.ID]struct{}
	removedworkspace_teammates         map[ulid.ID]struct{}
	clearedworkspace_teammates         bool
	favorite_workspaces                map[ulid.ID]struct{}
	removedfavorite_workspaces         map[ulid.ID]struct{}
	clearedfavorite_workspaces         bool
	teammate_task_tab_statuses         map[ulid.ID]struct{}
	removedteammate_task_tab_statuses  map[ulid.ID]struct{}
	clearedteammate_task_tab_statuses  bool
	teammate_task_list_statuses        map[ulid.ID]struct{}
	removedteammate_task_list_statuses map[ulid.ID]struct{}
	clearedteammate_task_list_statuses bool
	teammate_task_sections             map[ulid.ID]struct{}
	removedteammate_task_sections      map[ulid.ID]struct{}
	clearedteammate_task_sections      bool
	done                               bool
	oldValue                           func(context.Context) (*Workspace, error)
	predicates                         []predicate.Workspace
}

var _ ent.Mutation = (*WorkspaceMutation)(nil)

// workspaceOption allows management of the mutation configuration using functional options.
type workspaceOption func(*WorkspaceMutation)

// newWorkspaceMutation creates new mutation for the Workspace entity.
func newWorkspaceMutation(c config, op Op, opts ...workspaceOption) *WorkspaceMutation {
	m := &WorkspaceMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkspace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkspaceID sets the ID field of the mutation.
func withWorkspaceID(id ulid.ID) workspaceOption {
	return func(m *WorkspaceMutation) {
		var (
			err   error
			once  sync.Once
			value *Workspace
		)
		m.oldValue = func(ctx context.Context) (*Workspace, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Workspace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkspace sets the old Workspace of the mutation.
func withWorkspace(node *Workspace) workspaceOption {
	return func(m *WorkspaceMutation) {
		m.oldValue = func(context.Context) (*Workspace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkspaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkspaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Workspace entities.
func (m *WorkspaceMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkspaceMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedBy sets the "created_by" field.
func (m *WorkspaceMutation) SetCreatedBy(u ulid.ID) {
	m.teammate = &u
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *WorkspaceMutation) CreatedBy() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Workspace entity.
// If the Workspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceMutation) OldCreatedBy(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *WorkspaceMutation) ResetCreatedBy() {
	m.teammate = nil
}

// SetName sets the "name" field.
func (m *WorkspaceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WorkspaceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Workspace entity.
// If the Workspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WorkspaceMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *WorkspaceMutation) SetDescription(e editor.Description) {
	m.description = &e
}

// Description returns the value of the "description" field in the mutation.
func (m *WorkspaceMutation) Description() (r editor.Description, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Workspace entity.
// If the Workspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceMutation) OldDescription(ctx context.Context) (v editor.Description, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *WorkspaceMutation) ResetDescription() {
	m.description = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkspaceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkspaceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Workspace entity.
// If the Workspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkspaceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkspaceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkspaceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Workspace entity.
// If the Workspace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkspaceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTeammateID sets the "teammate" edge to the Teammate entity by id.
func (m *WorkspaceMutation) SetTeammateID(id ulid.ID) {
	m.teammate = &id
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *WorkspaceMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *WorkspaceMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateID returns the "teammate" edge ID in the mutation.
func (m *WorkspaceMutation) TeammateID() (id ulid.ID, exists bool) {
	if m.teammate != nil {
		return *m.teammate, true
	}
	return
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *WorkspaceMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *WorkspaceMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *WorkspaceMutation) AddProjectIDs(ids ...ulid.ID) {
	if m.projects == nil {
		m.projects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *WorkspaceMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *WorkspaceMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *WorkspaceMutation) RemoveProjectIDs(ids ...ulid.ID) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *WorkspaceMutation) RemovedProjectsIDs() (ids []ulid.ID) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *WorkspaceMutation) ProjectsIDs() (ids []ulid.ID) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *WorkspaceMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// AddWorkspaceTeammateIDs adds the "workspace_teammates" edge to the WorkspaceTeammate entity by ids.
func (m *WorkspaceMutation) AddWorkspaceTeammateIDs(ids ...ulid.ID) {
	if m.workspace_teammates == nil {
		m.workspace_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.workspace_teammates[ids[i]] = struct{}{}
	}
}

// ClearWorkspaceTeammates clears the "workspace_teammates" edge to the WorkspaceTeammate entity.
func (m *WorkspaceMutation) ClearWorkspaceTeammates() {
	m.clearedworkspace_teammates = true
}

// WorkspaceTeammatesCleared reports if the "workspace_teammates" edge to the WorkspaceTeammate entity was cleared.
func (m *WorkspaceMutation) WorkspaceTeammatesCleared() bool {
	return m.clearedworkspace_teammates
}

// RemoveWorkspaceTeammateIDs removes the "workspace_teammates" edge to the WorkspaceTeammate entity by IDs.
func (m *WorkspaceMutation) RemoveWorkspaceTeammateIDs(ids ...ulid.ID) {
	if m.removedworkspace_teammates == nil {
		m.removedworkspace_teammates = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.workspace_teammates, ids[i])
		m.removedworkspace_teammates[ids[i]] = struct{}{}
	}
}

// RemovedWorkspaceTeammates returns the removed IDs of the "workspace_teammates" edge to the WorkspaceTeammate entity.
func (m *WorkspaceMutation) RemovedWorkspaceTeammatesIDs() (ids []ulid.ID) {
	for id := range m.removedworkspace_teammates {
		ids = append(ids, id)
	}
	return
}

// WorkspaceTeammatesIDs returns the "workspace_teammates" edge IDs in the mutation.
func (m *WorkspaceMutation) WorkspaceTeammatesIDs() (ids []ulid.ID) {
	for id := range m.workspace_teammates {
		ids = append(ids, id)
	}
	return
}

// ResetWorkspaceTeammates resets all changes to the "workspace_teammates" edge.
func (m *WorkspaceMutation) ResetWorkspaceTeammates() {
	m.workspace_teammates = nil
	m.clearedworkspace_teammates = false
	m.removedworkspace_teammates = nil
}

// AddFavoriteWorkspaceIDs adds the "favorite_workspaces" edge to the FavoriteWorkspace entity by ids.
func (m *WorkspaceMutation) AddFavoriteWorkspaceIDs(ids ...ulid.ID) {
	if m.favorite_workspaces == nil {
		m.favorite_workspaces = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.favorite_workspaces[ids[i]] = struct{}{}
	}
}

// ClearFavoriteWorkspaces clears the "favorite_workspaces" edge to the FavoriteWorkspace entity.
func (m *WorkspaceMutation) ClearFavoriteWorkspaces() {
	m.clearedfavorite_workspaces = true
}

// FavoriteWorkspacesCleared reports if the "favorite_workspaces" edge to the FavoriteWorkspace entity was cleared.
func (m *WorkspaceMutation) FavoriteWorkspacesCleared() bool {
	return m.clearedfavorite_workspaces
}

// RemoveFavoriteWorkspaceIDs removes the "favorite_workspaces" edge to the FavoriteWorkspace entity by IDs.
func (m *WorkspaceMutation) RemoveFavoriteWorkspaceIDs(ids ...ulid.ID) {
	if m.removedfavorite_workspaces == nil {
		m.removedfavorite_workspaces = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.favorite_workspaces, ids[i])
		m.removedfavorite_workspaces[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteWorkspaces returns the removed IDs of the "favorite_workspaces" edge to the FavoriteWorkspace entity.
func (m *WorkspaceMutation) RemovedFavoriteWorkspacesIDs() (ids []ulid.ID) {
	for id := range m.removedfavorite_workspaces {
		ids = append(ids, id)
	}
	return
}

// FavoriteWorkspacesIDs returns the "favorite_workspaces" edge IDs in the mutation.
func (m *WorkspaceMutation) FavoriteWorkspacesIDs() (ids []ulid.ID) {
	for id := range m.favorite_workspaces {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteWorkspaces resets all changes to the "favorite_workspaces" edge.
func (m *WorkspaceMutation) ResetFavoriteWorkspaces() {
	m.favorite_workspaces = nil
	m.clearedfavorite_workspaces = false
	m.removedfavorite_workspaces = nil
}

// AddTeammateTaskTabStatusIDs adds the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity by ids.
func (m *WorkspaceMutation) AddTeammateTaskTabStatusIDs(ids ...ulid.ID) {
	if m.teammate_task_tab_statuses == nil {
		m.teammate_task_tab_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_tab_statuses[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskTabStatuses clears the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity.
func (m *WorkspaceMutation) ClearTeammateTaskTabStatuses() {
	m.clearedteammate_task_tab_statuses = true
}

// TeammateTaskTabStatusesCleared reports if the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity was cleared.
func (m *WorkspaceMutation) TeammateTaskTabStatusesCleared() bool {
	return m.clearedteammate_task_tab_statuses
}

// RemoveTeammateTaskTabStatusIDs removes the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity by IDs.
func (m *WorkspaceMutation) RemoveTeammateTaskTabStatusIDs(ids ...ulid.ID) {
	if m.removedteammate_task_tab_statuses == nil {
		m.removedteammate_task_tab_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_tab_statuses, ids[i])
		m.removedteammate_task_tab_statuses[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskTabStatuses returns the removed IDs of the "teammate_task_tab_statuses" edge to the TeammateTaskTabStatus entity.
func (m *WorkspaceMutation) RemovedTeammateTaskTabStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_tab_statuses {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskTabStatusesIDs returns the "teammate_task_tab_statuses" edge IDs in the mutation.
func (m *WorkspaceMutation) TeammateTaskTabStatusesIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_tab_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskTabStatuses resets all changes to the "teammate_task_tab_statuses" edge.
func (m *WorkspaceMutation) ResetTeammateTaskTabStatuses() {
	m.teammate_task_tab_statuses = nil
	m.clearedteammate_task_tab_statuses = false
	m.removedteammate_task_tab_statuses = nil
}

// AddTeammateTaskListStatusIDs adds the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by ids.
func (m *WorkspaceMutation) AddTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.teammate_task_list_statuses == nil {
		m.teammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskListStatuses clears the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *WorkspaceMutation) ClearTeammateTaskListStatuses() {
	m.clearedteammate_task_list_statuses = true
}

// TeammateTaskListStatusesCleared reports if the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity was cleared.
func (m *WorkspaceMutation) TeammateTaskListStatusesCleared() bool {
	return m.clearedteammate_task_list_statuses
}

// RemoveTeammateTaskListStatusIDs removes the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity by IDs.
func (m *WorkspaceMutation) RemoveTeammateTaskListStatusIDs(ids ...ulid.ID) {
	if m.removedteammate_task_list_statuses == nil {
		m.removedteammate_task_list_statuses = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_list_statuses, ids[i])
		m.removedteammate_task_list_statuses[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskListStatuses returns the removed IDs of the "teammate_task_list_statuses" edge to the TeammateTaskListStatus entity.
func (m *WorkspaceMutation) RemovedTeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskListStatusesIDs returns the "teammate_task_list_statuses" edge IDs in the mutation.
func (m *WorkspaceMutation) TeammateTaskListStatusesIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_list_statuses {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskListStatuses resets all changes to the "teammate_task_list_statuses" edge.
func (m *WorkspaceMutation) ResetTeammateTaskListStatuses() {
	m.teammate_task_list_statuses = nil
	m.clearedteammate_task_list_statuses = false
	m.removedteammate_task_list_statuses = nil
}

// AddTeammateTaskSectionIDs adds the "teammate_task_sections" edge to the TeammateTaskSection entity by ids.
func (m *WorkspaceMutation) AddTeammateTaskSectionIDs(ids ...ulid.ID) {
	if m.teammate_task_sections == nil {
		m.teammate_task_sections = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.teammate_task_sections[ids[i]] = struct{}{}
	}
}

// ClearTeammateTaskSections clears the "teammate_task_sections" edge to the TeammateTaskSection entity.
func (m *WorkspaceMutation) ClearTeammateTaskSections() {
	m.clearedteammate_task_sections = true
}

// TeammateTaskSectionsCleared reports if the "teammate_task_sections" edge to the TeammateTaskSection entity was cleared.
func (m *WorkspaceMutation) TeammateTaskSectionsCleared() bool {
	return m.clearedteammate_task_sections
}

// RemoveTeammateTaskSectionIDs removes the "teammate_task_sections" edge to the TeammateTaskSection entity by IDs.
func (m *WorkspaceMutation) RemoveTeammateTaskSectionIDs(ids ...ulid.ID) {
	if m.removedteammate_task_sections == nil {
		m.removedteammate_task_sections = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.teammate_task_sections, ids[i])
		m.removedteammate_task_sections[ids[i]] = struct{}{}
	}
}

// RemovedTeammateTaskSections returns the removed IDs of the "teammate_task_sections" edge to the TeammateTaskSection entity.
func (m *WorkspaceMutation) RemovedTeammateTaskSectionsIDs() (ids []ulid.ID) {
	for id := range m.removedteammate_task_sections {
		ids = append(ids, id)
	}
	return
}

// TeammateTaskSectionsIDs returns the "teammate_task_sections" edge IDs in the mutation.
func (m *WorkspaceMutation) TeammateTaskSectionsIDs() (ids []ulid.ID) {
	for id := range m.teammate_task_sections {
		ids = append(ids, id)
	}
	return
}

// ResetTeammateTaskSections resets all changes to the "teammate_task_sections" edge.
func (m *WorkspaceMutation) ResetTeammateTaskSections() {
	m.teammate_task_sections = nil
	m.clearedteammate_task_sections = false
	m.removedteammate_task_sections = nil
}

// Where appends a list predicates to the WorkspaceMutation builder.
func (m *WorkspaceMutation) Where(ps ...predicate.Workspace) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WorkspaceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Workspace).
func (m *WorkspaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkspaceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.teammate != nil {
		fields = append(fields, workspace.FieldCreatedBy)
	}
	if m.name != nil {
		fields = append(fields, workspace.FieldName)
	}
	if m.description != nil {
		fields = append(fields, workspace.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, workspace.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workspace.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkspaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workspace.FieldCreatedBy:
		return m.CreatedBy()
	case workspace.FieldName:
		return m.Name()
	case workspace.FieldDescription:
		return m.Description()
	case workspace.FieldCreatedAt:
		return m.CreatedAt()
	case workspace.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkspaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workspace.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case workspace.FieldName:
		return m.OldName(ctx)
	case workspace.FieldDescription:
		return m.OldDescription(ctx)
	case workspace.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workspace.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Workspace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkspaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workspace.FieldCreatedBy:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case workspace.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case workspace.FieldDescription:
		v, ok := value.(editor.Description)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case workspace.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workspace.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Workspace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkspaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkspaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkspaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Workspace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkspaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkspaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkspaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Workspace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkspaceMutation) ResetField(name string) error {
	switch name {
	case workspace.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case workspace.FieldName:
		m.ResetName()
		return nil
	case workspace.FieldDescription:
		m.ResetDescription()
		return nil
	case workspace.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workspace.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Workspace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkspaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.teammate != nil {
		edges = append(edges, workspace.EdgeTeammate)
	}
	if m.projects != nil {
		edges = append(edges, workspace.EdgeProjects)
	}
	if m.workspace_teammates != nil {
		edges = append(edges, workspace.EdgeWorkspaceTeammates)
	}
	if m.favorite_workspaces != nil {
		edges = append(edges, workspace.EdgeFavoriteWorkspaces)
	}
	if m.teammate_task_tab_statuses != nil {
		edges = append(edges, workspace.EdgeTeammateTaskTabStatuses)
	}
	if m.teammate_task_list_statuses != nil {
		edges = append(edges, workspace.EdgeTeammateTaskListStatuses)
	}
	if m.teammate_task_sections != nil {
		edges = append(edges, workspace.EdgeTeammateTaskSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkspaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workspace.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	case workspace.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeWorkspaceTeammates:
		ids := make([]ent.Value, 0, len(m.workspace_teammates))
		for id := range m.workspace_teammates {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeFavoriteWorkspaces:
		ids := make([]ent.Value, 0, len(m.favorite_workspaces))
		for id := range m.favorite_workspaces {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeTeammateTaskTabStatuses:
		ids := make([]ent.Value, 0, len(m.teammate_task_tab_statuses))
		for id := range m.teammate_task_tab_statuses {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.teammate_task_list_statuses))
		for id := range m.teammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeTeammateTaskSections:
		ids := make([]ent.Value, 0, len(m.teammate_task_sections))
		for id := range m.teammate_task_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkspaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedprojects != nil {
		edges = append(edges, workspace.EdgeProjects)
	}
	if m.removedworkspace_teammates != nil {
		edges = append(edges, workspace.EdgeWorkspaceTeammates)
	}
	if m.removedfavorite_workspaces != nil {
		edges = append(edges, workspace.EdgeFavoriteWorkspaces)
	}
	if m.removedteammate_task_tab_statuses != nil {
		edges = append(edges, workspace.EdgeTeammateTaskTabStatuses)
	}
	if m.removedteammate_task_list_statuses != nil {
		edges = append(edges, workspace.EdgeTeammateTaskListStatuses)
	}
	if m.removedteammate_task_sections != nil {
		edges = append(edges, workspace.EdgeTeammateTaskSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkspaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workspace.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeWorkspaceTeammates:
		ids := make([]ent.Value, 0, len(m.removedworkspace_teammates))
		for id := range m.removedworkspace_teammates {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeFavoriteWorkspaces:
		ids := make([]ent.Value, 0, len(m.removedfavorite_workspaces))
		for id := range m.removedfavorite_workspaces {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeTeammateTaskTabStatuses:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_tab_statuses))
		for id := range m.removedteammate_task_tab_statuses {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeTeammateTaskListStatuses:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_list_statuses))
		for id := range m.removedteammate_task_list_statuses {
			ids = append(ids, id)
		}
		return ids
	case workspace.EdgeTeammateTaskSections:
		ids := make([]ent.Value, 0, len(m.removedteammate_task_sections))
		for id := range m.removedteammate_task_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkspaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedteammate {
		edges = append(edges, workspace.EdgeTeammate)
	}
	if m.clearedprojects {
		edges = append(edges, workspace.EdgeProjects)
	}
	if m.clearedworkspace_teammates {
		edges = append(edges, workspace.EdgeWorkspaceTeammates)
	}
	if m.clearedfavorite_workspaces {
		edges = append(edges, workspace.EdgeFavoriteWorkspaces)
	}
	if m.clearedteammate_task_tab_statuses {
		edges = append(edges, workspace.EdgeTeammateTaskTabStatuses)
	}
	if m.clearedteammate_task_list_statuses {
		edges = append(edges, workspace.EdgeTeammateTaskListStatuses)
	}
	if m.clearedteammate_task_sections {
		edges = append(edges, workspace.EdgeTeammateTaskSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkspaceMutation) EdgeCleared(name string) bool {
	switch name {
	case workspace.EdgeTeammate:
		return m.clearedteammate
	case workspace.EdgeProjects:
		return m.clearedprojects
	case workspace.EdgeWorkspaceTeammates:
		return m.clearedworkspace_teammates
	case workspace.EdgeFavoriteWorkspaces:
		return m.clearedfavorite_workspaces
	case workspace.EdgeTeammateTaskTabStatuses:
		return m.clearedteammate_task_tab_statuses
	case workspace.EdgeTeammateTaskListStatuses:
		return m.clearedteammate_task_list_statuses
	case workspace.EdgeTeammateTaskSections:
		return m.clearedteammate_task_sections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkspaceMutation) ClearEdge(name string) error {
	switch name {
	case workspace.EdgeTeammate:
		m.ClearTeammate()
		return nil
	}
	return fmt.Errorf("unknown Workspace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkspaceMutation) ResetEdge(name string) error {
	switch name {
	case workspace.EdgeTeammate:
		m.ResetTeammate()
		return nil
	case workspace.EdgeProjects:
		m.ResetProjects()
		return nil
	case workspace.EdgeWorkspaceTeammates:
		m.ResetWorkspaceTeammates()
		return nil
	case workspace.EdgeFavoriteWorkspaces:
		m.ResetFavoriteWorkspaces()
		return nil
	case workspace.EdgeTeammateTaskTabStatuses:
		m.ResetTeammateTaskTabStatuses()
		return nil
	case workspace.EdgeTeammateTaskListStatuses:
		m.ResetTeammateTaskListStatuses()
		return nil
	case workspace.EdgeTeammateTaskSections:
		m.ResetTeammateTaskSections()
		return nil
	}
	return fmt.Errorf("unknown Workspace edge %s", name)
}

// WorkspaceTeammateMutation represents an operation that mutates the WorkspaceTeammate nodes in the graph.
type WorkspaceTeammateMutation struct {
	config
	op               Op
	typ              string
	id               *ulid.ID
	role             *string
	is_owner         *bool
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	workspace        *ulid.ID
	clearedworkspace bool
	teammate         *ulid.ID
	clearedteammate  bool
	done             bool
	oldValue         func(context.Context) (*WorkspaceTeammate, error)
	predicates       []predicate.WorkspaceTeammate
}

var _ ent.Mutation = (*WorkspaceTeammateMutation)(nil)

// workspaceteammateOption allows management of the mutation configuration using functional options.
type workspaceteammateOption func(*WorkspaceTeammateMutation)

// newWorkspaceTeammateMutation creates new mutation for the WorkspaceTeammate entity.
func newWorkspaceTeammateMutation(c config, op Op, opts ...workspaceteammateOption) *WorkspaceTeammateMutation {
	m := &WorkspaceTeammateMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkspaceTeammate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkspaceTeammateID sets the ID field of the mutation.
func withWorkspaceTeammateID(id ulid.ID) workspaceteammateOption {
	return func(m *WorkspaceTeammateMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkspaceTeammate
		)
		m.oldValue = func(ctx context.Context) (*WorkspaceTeammate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkspaceTeammate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkspaceTeammate sets the old WorkspaceTeammate of the mutation.
func withWorkspaceTeammate(node *WorkspaceTeammate) workspaceteammateOption {
	return func(m *WorkspaceTeammateMutation) {
		m.oldValue = func(context.Context) (*WorkspaceTeammate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkspaceTeammateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkspaceTeammateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WorkspaceTeammate entities.
func (m *WorkspaceTeammateMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkspaceTeammateMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetWorkspaceID sets the "workspace_id" field.
func (m *WorkspaceTeammateMutation) SetWorkspaceID(u ulid.ID) {
	m.workspace = &u
}

// WorkspaceID returns the value of the "workspace_id" field in the mutation.
func (m *WorkspaceTeammateMutation) WorkspaceID() (r ulid.ID, exists bool) {
	v := m.workspace
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkspaceID returns the old "workspace_id" field's value of the WorkspaceTeammate entity.
// If the WorkspaceTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceTeammateMutation) OldWorkspaceID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWorkspaceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWorkspaceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkspaceID: %w", err)
	}
	return oldValue.WorkspaceID, nil
}

// ResetWorkspaceID resets all changes to the "workspace_id" field.
func (m *WorkspaceTeammateMutation) ResetWorkspaceID() {
	m.workspace = nil
}

// SetTeammateID sets the "teammate_id" field.
func (m *WorkspaceTeammateMutation) SetTeammateID(u ulid.ID) {
	m.teammate = &u
}

// TeammateID returns the value of the "teammate_id" field in the mutation.
func (m *WorkspaceTeammateMutation) TeammateID() (r ulid.ID, exists bool) {
	v := m.teammate
	if v == nil {
		return
	}
	return *v, true
}

// OldTeammateID returns the old "teammate_id" field's value of the WorkspaceTeammate entity.
// If the WorkspaceTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceTeammateMutation) OldTeammateID(ctx context.Context) (v ulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeammateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeammateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeammateID: %w", err)
	}
	return oldValue.TeammateID, nil
}

// ResetTeammateID resets all changes to the "teammate_id" field.
func (m *WorkspaceTeammateMutation) ResetTeammateID() {
	m.teammate = nil
}

// SetRole sets the "role" field.
func (m *WorkspaceTeammateMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *WorkspaceTeammateMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the WorkspaceTeammate entity.
// If the WorkspaceTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceTeammateMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *WorkspaceTeammateMutation) ResetRole() {
	m.role = nil
}

// SetIsOwner sets the "is_owner" field.
func (m *WorkspaceTeammateMutation) SetIsOwner(b bool) {
	m.is_owner = &b
}

// IsOwner returns the value of the "is_owner" field in the mutation.
func (m *WorkspaceTeammateMutation) IsOwner() (r bool, exists bool) {
	v := m.is_owner
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOwner returns the old "is_owner" field's value of the WorkspaceTeammate entity.
// If the WorkspaceTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceTeammateMutation) OldIsOwner(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOwner: %w", err)
	}
	return oldValue.IsOwner, nil
}

// ResetIsOwner resets all changes to the "is_owner" field.
func (m *WorkspaceTeammateMutation) ResetIsOwner() {
	m.is_owner = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkspaceTeammateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkspaceTeammateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WorkspaceTeammate entity.
// If the WorkspaceTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceTeammateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkspaceTeammateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkspaceTeammateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkspaceTeammateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WorkspaceTeammate entity.
// If the WorkspaceTeammate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkspaceTeammateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkspaceTeammateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (m *WorkspaceTeammateMutation) ClearWorkspace() {
	m.clearedworkspace = true
}

// WorkspaceCleared reports if the "workspace" edge to the Workspace entity was cleared.
func (m *WorkspaceTeammateMutation) WorkspaceCleared() bool {
	return m.clearedworkspace
}

// WorkspaceIDs returns the "workspace" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkspaceID instead. It exists only for internal usage by the builders.
func (m *WorkspaceTeammateMutation) WorkspaceIDs() (ids []ulid.ID) {
	if id := m.workspace; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkspace resets all changes to the "workspace" edge.
func (m *WorkspaceTeammateMutation) ResetWorkspace() {
	m.workspace = nil
	m.clearedworkspace = false
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (m *WorkspaceTeammateMutation) ClearTeammate() {
	m.clearedteammate = true
}

// TeammateCleared reports if the "teammate" edge to the Teammate entity was cleared.
func (m *WorkspaceTeammateMutation) TeammateCleared() bool {
	return m.clearedteammate
}

// TeammateIDs returns the "teammate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeammateID instead. It exists only for internal usage by the builders.
func (m *WorkspaceTeammateMutation) TeammateIDs() (ids []ulid.ID) {
	if id := m.teammate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeammate resets all changes to the "teammate" edge.
func (m *WorkspaceTeammateMutation) ResetTeammate() {
	m.teammate = nil
	m.clearedteammate = false
}

// Where appends a list predicates to the WorkspaceTeammateMutation builder.
func (m *WorkspaceTeammateMutation) Where(ps ...predicate.WorkspaceTeammate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WorkspaceTeammateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WorkspaceTeammate).
func (m *WorkspaceTeammateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkspaceTeammateMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.workspace != nil {
		fields = append(fields, workspaceteammate.FieldWorkspaceID)
	}
	if m.teammate != nil {
		fields = append(fields, workspaceteammate.FieldTeammateID)
	}
	if m.role != nil {
		fields = append(fields, workspaceteammate.FieldRole)
	}
	if m.is_owner != nil {
		fields = append(fields, workspaceteammate.FieldIsOwner)
	}
	if m.created_at != nil {
		fields = append(fields, workspaceteammate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workspaceteammate.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkspaceTeammateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workspaceteammate.FieldWorkspaceID:
		return m.WorkspaceID()
	case workspaceteammate.FieldTeammateID:
		return m.TeammateID()
	case workspaceteammate.FieldRole:
		return m.Role()
	case workspaceteammate.FieldIsOwner:
		return m.IsOwner()
	case workspaceteammate.FieldCreatedAt:
		return m.CreatedAt()
	case workspaceteammate.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkspaceTeammateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workspaceteammate.FieldWorkspaceID:
		return m.OldWorkspaceID(ctx)
	case workspaceteammate.FieldTeammateID:
		return m.OldTeammateID(ctx)
	case workspaceteammate.FieldRole:
		return m.OldRole(ctx)
	case workspaceteammate.FieldIsOwner:
		return m.OldIsOwner(ctx)
	case workspaceteammate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workspaceteammate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown WorkspaceTeammate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkspaceTeammateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workspaceteammate.FieldWorkspaceID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkspaceID(v)
		return nil
	case workspaceteammate.FieldTeammateID:
		v, ok := value.(ulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeammateID(v)
		return nil
	case workspaceteammate.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case workspaceteammate.FieldIsOwner:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOwner(v)
		return nil
	case workspaceteammate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workspaceteammate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown WorkspaceTeammate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkspaceTeammateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkspaceTeammateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkspaceTeammateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkspaceTeammate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkspaceTeammateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkspaceTeammateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkspaceTeammateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WorkspaceTeammate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkspaceTeammateMutation) ResetField(name string) error {
	switch name {
	case workspaceteammate.FieldWorkspaceID:
		m.ResetWorkspaceID()
		return nil
	case workspaceteammate.FieldTeammateID:
		m.ResetTeammateID()
		return nil
	case workspaceteammate.FieldRole:
		m.ResetRole()
		return nil
	case workspaceteammate.FieldIsOwner:
		m.ResetIsOwner()
		return nil
	case workspaceteammate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workspaceteammate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown WorkspaceTeammate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkspaceTeammateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.workspace != nil {
		edges = append(edges, workspaceteammate.EdgeWorkspace)
	}
	if m.teammate != nil {
		edges = append(edges, workspaceteammate.EdgeTeammate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkspaceTeammateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workspaceteammate.EdgeWorkspace:
		if id := m.workspace; id != nil {
			return []ent.Value{*id}
		}
	case workspaceteammate.EdgeTeammate:
		if id := m.teammate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkspaceTeammateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkspaceTeammateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkspaceTeammateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedworkspace {
		edges = append(edges, workspaceteammate.EdgeWorkspace)
	}
	if m.clearedteammate {
		edges = append(edges, workspaceteammate.EdgeTeammate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkspaceTeammateMutation) EdgeCleared(name string) bool {
	switch name {
	case workspaceteammate.EdgeWorkspace:
		return m.clearedworkspace
	case workspaceteammate.EdgeTeammate:
		return m.clearedteammate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkspaceTeammateMutation) ClearEdge(name string) error {
	switch name {
	case workspaceteammate.EdgeWorkspace:
		m.ClearWorkspace()
		return nil
	case workspaceteammate.EdgeTeammate:
		m.ClearTeammate()
		return nil
	}
	return fmt.Errorf("unknown WorkspaceTeammate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkspaceTeammateMutation) ResetEdge(name string) error {
	switch name {
	case workspaceteammate.EdgeWorkspace:
		m.ResetWorkspace()
		return nil
	case workspaceteammate.EdgeTeammate:
		m.ResetTeammate()
		return nil
	}
	return fmt.Errorf("unknown WorkspaceTeammate edge %s", name)
}
