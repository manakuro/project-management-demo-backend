// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/archivedworkspaceactivity"
	"project-management-demo-backend/ent/archivedworkspaceactivitytask"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArchivedWorkspaceActivityTaskUpdate is the builder for updating ArchivedWorkspaceActivityTask entities.
type ArchivedWorkspaceActivityTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ArchivedWorkspaceActivityTaskMutation
}

// Where appends a list predicates to the ArchivedWorkspaceActivityTaskUpdate builder.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) Where(ps ...predicate.ArchivedWorkspaceActivityTask) *ArchivedWorkspaceActivityTaskUpdate {
	awatu.mutation.Where(ps...)
	return awatu
}

// SetArchivedWorkspaceActivityID sets the "archived_workspace_activity_id" field.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) SetArchivedWorkspaceActivityID(u ulid.ID) *ArchivedWorkspaceActivityTaskUpdate {
	awatu.mutation.SetArchivedWorkspaceActivityID(u)
	return awatu
}

// SetTaskID sets the "task_id" field.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) SetTaskID(u ulid.ID) *ArchivedWorkspaceActivityTaskUpdate {
	awatu.mutation.SetTaskID(u)
	return awatu
}

// SetTask sets the "task" edge to the Task entity.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) SetTask(t *Task) *ArchivedWorkspaceActivityTaskUpdate {
	return awatu.SetTaskID(t.ID)
}

// SetArchivedWorkspaceActivity sets the "archivedWorkspaceActivity" edge to the ArchivedWorkspaceActivity entity.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) SetArchivedWorkspaceActivity(a *ArchivedWorkspaceActivity) *ArchivedWorkspaceActivityTaskUpdate {
	return awatu.SetArchivedWorkspaceActivityID(a.ID)
}

// Mutation returns the ArchivedWorkspaceActivityTaskMutation object of the builder.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) Mutation() *ArchivedWorkspaceActivityTaskMutation {
	return awatu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) ClearTask() *ArchivedWorkspaceActivityTaskUpdate {
	awatu.mutation.ClearTask()
	return awatu
}

// ClearArchivedWorkspaceActivity clears the "archivedWorkspaceActivity" edge to the ArchivedWorkspaceActivity entity.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) ClearArchivedWorkspaceActivity() *ArchivedWorkspaceActivityTaskUpdate {
	awatu.mutation.ClearArchivedWorkspaceActivity()
	return awatu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(awatu.hooks) == 0 {
		if err = awatu.check(); err != nil {
			return 0, err
		}
		affected, err = awatu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivedWorkspaceActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = awatu.check(); err != nil {
				return 0, err
			}
			awatu.mutation = mutation
			affected, err = awatu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(awatu.hooks) - 1; i >= 0; i-- {
			if awatu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = awatu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, awatu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := awatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) Exec(ctx context.Context) error {
	_, err := awatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) ExecX(ctx context.Context) {
	if err := awatu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (awatu *ArchivedWorkspaceActivityTaskUpdate) check() error {
	if _, ok := awatu.mutation.TaskID(); awatu.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedWorkspaceActivityTask.task"`)
	}
	if _, ok := awatu.mutation.ArchivedWorkspaceActivityID(); awatu.mutation.ArchivedWorkspaceActivityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedWorkspaceActivityTask.archivedWorkspaceActivity"`)
	}
	return nil
}

func (awatu *ArchivedWorkspaceActivityTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivedworkspaceactivitytask.Table,
			Columns: archivedworkspaceactivitytask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: archivedworkspaceactivitytask.FieldID,
			},
		},
	}
	if ps := awatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if awatu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.TaskTable,
			Columns: []string{archivedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awatu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.TaskTable,
			Columns: []string{archivedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if awatu.mutation.ArchivedWorkspaceActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.ArchivedWorkspaceActivityTable,
			Columns: []string{archivedworkspaceactivitytask.ArchivedWorkspaceActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: archivedworkspaceactivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awatu.mutation.ArchivedWorkspaceActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.ArchivedWorkspaceActivityTable,
			Columns: []string{archivedworkspaceactivitytask.ArchivedWorkspaceActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: archivedworkspaceactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, awatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivedworkspaceactivitytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ArchivedWorkspaceActivityTaskUpdateOne is the builder for updating a single ArchivedWorkspaceActivityTask entity.
type ArchivedWorkspaceActivityTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArchivedWorkspaceActivityTaskMutation
}

// SetArchivedWorkspaceActivityID sets the "archived_workspace_activity_id" field.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) SetArchivedWorkspaceActivityID(u ulid.ID) *ArchivedWorkspaceActivityTaskUpdateOne {
	awatuo.mutation.SetArchivedWorkspaceActivityID(u)
	return awatuo
}

// SetTaskID sets the "task_id" field.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) SetTaskID(u ulid.ID) *ArchivedWorkspaceActivityTaskUpdateOne {
	awatuo.mutation.SetTaskID(u)
	return awatuo
}

// SetTask sets the "task" edge to the Task entity.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) SetTask(t *Task) *ArchivedWorkspaceActivityTaskUpdateOne {
	return awatuo.SetTaskID(t.ID)
}

// SetArchivedWorkspaceActivity sets the "archivedWorkspaceActivity" edge to the ArchivedWorkspaceActivity entity.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) SetArchivedWorkspaceActivity(a *ArchivedWorkspaceActivity) *ArchivedWorkspaceActivityTaskUpdateOne {
	return awatuo.SetArchivedWorkspaceActivityID(a.ID)
}

// Mutation returns the ArchivedWorkspaceActivityTaskMutation object of the builder.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) Mutation() *ArchivedWorkspaceActivityTaskMutation {
	return awatuo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) ClearTask() *ArchivedWorkspaceActivityTaskUpdateOne {
	awatuo.mutation.ClearTask()
	return awatuo
}

// ClearArchivedWorkspaceActivity clears the "archivedWorkspaceActivity" edge to the ArchivedWorkspaceActivity entity.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) ClearArchivedWorkspaceActivity() *ArchivedWorkspaceActivityTaskUpdateOne {
	awatuo.mutation.ClearArchivedWorkspaceActivity()
	return awatuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) Select(field string, fields ...string) *ArchivedWorkspaceActivityTaskUpdateOne {
	awatuo.fields = append([]string{field}, fields...)
	return awatuo
}

// Save executes the query and returns the updated ArchivedWorkspaceActivityTask entity.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) Save(ctx context.Context) (*ArchivedWorkspaceActivityTask, error) {
	var (
		err  error
		node *ArchivedWorkspaceActivityTask
	)
	if len(awatuo.hooks) == 0 {
		if err = awatuo.check(); err != nil {
			return nil, err
		}
		node, err = awatuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArchivedWorkspaceActivityTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = awatuo.check(); err != nil {
				return nil, err
			}
			awatuo.mutation = mutation
			node, err = awatuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(awatuo.hooks) - 1; i >= 0; i-- {
			if awatuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = awatuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, awatuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) SaveX(ctx context.Context) *ArchivedWorkspaceActivityTask {
	node, err := awatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := awatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) ExecX(ctx context.Context) {
	if err := awatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) check() error {
	if _, ok := awatuo.mutation.TaskID(); awatuo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedWorkspaceActivityTask.task"`)
	}
	if _, ok := awatuo.mutation.ArchivedWorkspaceActivityID(); awatuo.mutation.ArchivedWorkspaceActivityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ArchivedWorkspaceActivityTask.archivedWorkspaceActivity"`)
	}
	return nil
}

func (awatuo *ArchivedWorkspaceActivityTaskUpdateOne) sqlSave(ctx context.Context) (_node *ArchivedWorkspaceActivityTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   archivedworkspaceactivitytask.Table,
			Columns: archivedworkspaceactivitytask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: archivedworkspaceactivitytask.FieldID,
			},
		},
	}
	id, ok := awatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArchivedWorkspaceActivityTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := awatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, archivedworkspaceactivitytask.FieldID)
		for _, f := range fields {
			if !archivedworkspaceactivitytask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != archivedworkspaceactivitytask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := awatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if awatuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.TaskTable,
			Columns: []string{archivedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awatuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.TaskTable,
			Columns: []string{archivedworkspaceactivitytask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if awatuo.mutation.ArchivedWorkspaceActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.ArchivedWorkspaceActivityTable,
			Columns: []string{archivedworkspaceactivitytask.ArchivedWorkspaceActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: archivedworkspaceactivity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awatuo.mutation.ArchivedWorkspaceActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   archivedworkspaceactivitytask.ArchivedWorkspaceActivityTable,
			Columns: []string{archivedworkspaceactivitytask.ArchivedWorkspaceActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: archivedworkspaceactivity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArchivedWorkspaceActivityTask{config: awatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, awatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{archivedworkspaceactivitytask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
