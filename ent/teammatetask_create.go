// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/task"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/teammatetask"
	"project-management-demo-backend/ent/teammatetasksection"
	"project-management-demo-backend/ent/workspace"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeammateTaskCreate is the builder for creating a TeammateTask entity.
type TeammateTaskCreate struct {
	config
	mutation *TeammateTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTeammateID sets the "teammate_id" field.
func (ttc *TeammateTaskCreate) SetTeammateID(u ulid.ID) *TeammateTaskCreate {
	ttc.mutation.SetTeammateID(u)
	return ttc
}

// SetTaskID sets the "task_id" field.
func (ttc *TeammateTaskCreate) SetTaskID(u ulid.ID) *TeammateTaskCreate {
	ttc.mutation.SetTaskID(u)
	return ttc
}

// SetTeammateTaskSectionID sets the "teammate_task_section_id" field.
func (ttc *TeammateTaskCreate) SetTeammateTaskSectionID(u ulid.ID) *TeammateTaskCreate {
	ttc.mutation.SetTeammateTaskSectionID(u)
	return ttc
}

// SetWorkspaceID sets the "workspace_id" field.
func (ttc *TeammateTaskCreate) SetWorkspaceID(u ulid.ID) *TeammateTaskCreate {
	ttc.mutation.SetWorkspaceID(u)
	return ttc
}

// SetCreatedAt sets the "created_at" field.
func (ttc *TeammateTaskCreate) SetCreatedAt(t time.Time) *TeammateTaskCreate {
	ttc.mutation.SetCreatedAt(t)
	return ttc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttc *TeammateTaskCreate) SetNillableCreatedAt(t *time.Time) *TeammateTaskCreate {
	if t != nil {
		ttc.SetCreatedAt(*t)
	}
	return ttc
}

// SetUpdatedAt sets the "updated_at" field.
func (ttc *TeammateTaskCreate) SetUpdatedAt(t time.Time) *TeammateTaskCreate {
	ttc.mutation.SetUpdatedAt(t)
	return ttc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttc *TeammateTaskCreate) SetNillableUpdatedAt(t *time.Time) *TeammateTaskCreate {
	if t != nil {
		ttc.SetUpdatedAt(*t)
	}
	return ttc
}

// SetID sets the "id" field.
func (ttc *TeammateTaskCreate) SetID(u ulid.ID) *TeammateTaskCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *TeammateTaskCreate) SetNillableID(u *ulid.ID) *TeammateTaskCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (ttc *TeammateTaskCreate) SetTeammate(t *Teammate) *TeammateTaskCreate {
	return ttc.SetTeammateID(t.ID)
}

// SetTask sets the "task" edge to the Task entity.
func (ttc *TeammateTaskCreate) SetTask(t *Task) *TeammateTaskCreate {
	return ttc.SetTaskID(t.ID)
}

// SetTeammateTaskSection sets the "teammateTaskSection" edge to the TeammateTaskSection entity.
func (ttc *TeammateTaskCreate) SetTeammateTaskSection(t *TeammateTaskSection) *TeammateTaskCreate {
	return ttc.SetTeammateTaskSectionID(t.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (ttc *TeammateTaskCreate) SetWorkspace(w *Workspace) *TeammateTaskCreate {
	return ttc.SetWorkspaceID(w.ID)
}

// Mutation returns the TeammateTaskMutation object of the builder.
func (ttc *TeammateTaskCreate) Mutation() *TeammateTaskMutation {
	return ttc.mutation
}

// Save creates the TeammateTask in the database.
func (ttc *TeammateTaskCreate) Save(ctx context.Context) (*TeammateTask, error) {
	var (
		err  error
		node *TeammateTask
	)
	ttc.defaults()
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeammateTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			if node, err = ttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			if ttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TeammateTaskCreate) SaveX(ctx context.Context) *TeammateTask {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TeammateTaskCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TeammateTaskCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TeammateTaskCreate) defaults() {
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		v := teammatetask.DefaultCreatedAt()
		ttc.mutation.SetCreatedAt(v)
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		v := teammatetask.DefaultUpdatedAt()
		ttc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ttc.mutation.ID(); !ok {
		v := teammatetask.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TeammateTaskCreate) check() error {
	if _, ok := ttc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "teammate_id"`)}
	}
	if _, ok := ttc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "task_id"`)}
	}
	if _, ok := ttc.mutation.TeammateTaskSectionID(); !ok {
		return &ValidationError{Name: "teammate_task_section_id", err: errors.New(`ent: missing required field "teammate_task_section_id"`)}
	}
	if _, ok := ttc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "workspace_id"`)}
	}
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ttc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New("ent: missing required edge \"teammate\"")}
	}
	if _, ok := ttc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New("ent: missing required edge \"task\"")}
	}
	if _, ok := ttc.mutation.TeammateTaskSectionID(); !ok {
		return &ValidationError{Name: "teammateTaskSection", err: errors.New("ent: missing required edge \"teammateTaskSection\"")}
	}
	if _, ok := ttc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New("ent: missing required edge \"workspace\"")}
	}
	return nil
}

func (ttc *TeammateTaskCreate) sqlSave(ctx context.Context) (*TeammateTask, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(ulid.ID)
	}
	return _node, nil
}

func (ttc *TeammateTaskCreate) createSpec() (*TeammateTask, *sqlgraph.CreateSpec) {
	var (
		_node = &TeammateTask{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teammatetask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: teammatetask.FieldID,
			},
		}
	)
	_spec.OnConflict = ttc.conflict
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ttc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teammatetask.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ttc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teammatetask.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ttc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetask.TeammateTable,
			Columns: []string{teammatetask.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetask.TaskTable,
			Columns: []string{teammatetask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TeammateTaskSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetask.TeammateTaskSectionTable,
			Columns: []string{teammatetask.TeammateTaskSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammatetasksection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateTaskSectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   teammatetask.WorkspaceTable,
			Columns: []string{teammatetask.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeammateTask.Create().
//		SetTeammateID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeammateTaskUpsert) {
//			SetTeammateID(v+v).
//		}).
//		Exec(ctx)
//
func (ttc *TeammateTaskCreate) OnConflict(opts ...sql.ConflictOption) *TeammateTaskUpsertOne {
	ttc.conflict = opts
	return &TeammateTaskUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeammateTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ttc *TeammateTaskCreate) OnConflictColumns(columns ...string) *TeammateTaskUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &TeammateTaskUpsertOne{
		create: ttc,
	}
}

type (
	// TeammateTaskUpsertOne is the builder for "upsert"-ing
	//  one TeammateTask node.
	TeammateTaskUpsertOne struct {
		create *TeammateTaskCreate
	}

	// TeammateTaskUpsert is the "OnConflict" setter.
	TeammateTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetTeammateID sets the "teammate_id" field.
func (u *TeammateTaskUpsert) SetTeammateID(v ulid.ID) *TeammateTaskUpsert {
	u.Set(teammatetask.FieldTeammateID, v)
	return u
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TeammateTaskUpsert) UpdateTeammateID() *TeammateTaskUpsert {
	u.SetExcluded(teammatetask.FieldTeammateID)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *TeammateTaskUpsert) SetTaskID(v ulid.ID) *TeammateTaskUpsert {
	u.Set(teammatetask.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TeammateTaskUpsert) UpdateTaskID() *TeammateTaskUpsert {
	u.SetExcluded(teammatetask.FieldTaskID)
	return u
}

// SetTeammateTaskSectionID sets the "teammate_task_section_id" field.
func (u *TeammateTaskUpsert) SetTeammateTaskSectionID(v ulid.ID) *TeammateTaskUpsert {
	u.Set(teammatetask.FieldTeammateTaskSectionID, v)
	return u
}

// UpdateTeammateTaskSectionID sets the "teammate_task_section_id" field to the value that was provided on create.
func (u *TeammateTaskUpsert) UpdateTeammateTaskSectionID() *TeammateTaskUpsert {
	u.SetExcluded(teammatetask.FieldTeammateTaskSectionID)
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TeammateTaskUpsert) SetWorkspaceID(v ulid.ID) *TeammateTaskUpsert {
	u.Set(teammatetask.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TeammateTaskUpsert) UpdateWorkspaceID() *TeammateTaskUpsert {
	u.SetExcluded(teammatetask.FieldWorkspaceID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateTaskUpsert) SetCreatedAt(v time.Time) *TeammateTaskUpsert {
	u.Set(teammatetask.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateTaskUpsert) UpdateCreatedAt() *TeammateTaskUpsert {
	u.SetExcluded(teammatetask.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateTaskUpsert) SetUpdatedAt(v time.Time) *TeammateTaskUpsert {
	u.Set(teammatetask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateTaskUpsert) UpdateUpdatedAt() *TeammateTaskUpsert {
	u.SetExcluded(teammatetask.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TeammateTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teammatetask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeammateTaskUpsertOne) UpdateNewValues() *TeammateTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(teammatetask.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TeammateTask.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TeammateTaskUpsertOne) Ignore() *TeammateTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeammateTaskUpsertOne) DoNothing() *TeammateTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeammateTaskCreate.OnConflict
// documentation for more info.
func (u *TeammateTaskUpsertOne) Update(set func(*TeammateTaskUpsert)) *TeammateTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeammateTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *TeammateTaskUpsertOne) SetTeammateID(v ulid.ID) *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertOne) UpdateTeammateID() *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateTeammateID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TeammateTaskUpsertOne) SetTaskID(v ulid.ID) *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertOne) UpdateTaskID() *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetTeammateTaskSectionID sets the "teammate_task_section_id" field.
func (u *TeammateTaskUpsertOne) SetTeammateTaskSectionID(v ulid.ID) *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetTeammateTaskSectionID(v)
	})
}

// UpdateTeammateTaskSectionID sets the "teammate_task_section_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertOne) UpdateTeammateTaskSectionID() *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateTeammateTaskSectionID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TeammateTaskUpsertOne) SetWorkspaceID(v ulid.ID) *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertOne) UpdateWorkspaceID() *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateTaskUpsertOne) SetCreatedAt(v time.Time) *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateTaskUpsertOne) UpdateCreatedAt() *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateTaskUpsertOne) SetUpdatedAt(v time.Time) *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateTaskUpsertOne) UpdateUpdatedAt() *TeammateTaskUpsertOne {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeammateTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeammateTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeammateTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeammateTaskUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TeammateTaskUpsertOne.ID is not supported by MySQL driver. Use TeammateTaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeammateTaskUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeammateTaskCreateBulk is the builder for creating many TeammateTask entities in bulk.
type TeammateTaskCreateBulk struct {
	config
	builders []*TeammateTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the TeammateTask entities in the database.
func (ttcb *TeammateTaskCreateBulk) Save(ctx context.Context) ([]*TeammateTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TeammateTask, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeammateTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TeammateTaskCreateBulk) SaveX(ctx context.Context) []*TeammateTask {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TeammateTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TeammateTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeammateTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeammateTaskUpsert) {
//			SetTeammateID(v+v).
//		}).
//		Exec(ctx)
//
func (ttcb *TeammateTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeammateTaskUpsertBulk {
	ttcb.conflict = opts
	return &TeammateTaskUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeammateTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ttcb *TeammateTaskCreateBulk) OnConflictColumns(columns ...string) *TeammateTaskUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &TeammateTaskUpsertBulk{
		create: ttcb,
	}
}

// TeammateTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of TeammateTask nodes.
type TeammateTaskUpsertBulk struct {
	create *TeammateTaskCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeammateTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teammatetask.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeammateTaskUpsertBulk) UpdateNewValues() *TeammateTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(teammatetask.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeammateTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TeammateTaskUpsertBulk) Ignore() *TeammateTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeammateTaskUpsertBulk) DoNothing() *TeammateTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeammateTaskCreateBulk.OnConflict
// documentation for more info.
func (u *TeammateTaskUpsertBulk) Update(set func(*TeammateTaskUpsert)) *TeammateTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeammateTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *TeammateTaskUpsertBulk) SetTeammateID(v ulid.ID) *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertBulk) UpdateTeammateID() *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateTeammateID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TeammateTaskUpsertBulk) SetTaskID(v ulid.ID) *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertBulk) UpdateTaskID() *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetTeammateTaskSectionID sets the "teammate_task_section_id" field.
func (u *TeammateTaskUpsertBulk) SetTeammateTaskSectionID(v ulid.ID) *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetTeammateTaskSectionID(v)
	})
}

// UpdateTeammateTaskSectionID sets the "teammate_task_section_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertBulk) UpdateTeammateTaskSectionID() *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateTeammateTaskSectionID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *TeammateTaskUpsertBulk) SetWorkspaceID(v ulid.ID) *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *TeammateTaskUpsertBulk) UpdateWorkspaceID() *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeammateTaskUpsertBulk) SetCreatedAt(v time.Time) *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeammateTaskUpsertBulk) UpdateCreatedAt() *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeammateTaskUpsertBulk) SetUpdatedAt(v time.Time) *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeammateTaskUpsertBulk) UpdateUpdatedAt() *TeammateTaskUpsertBulk {
	return u.Update(func(s *TeammateTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TeammateTaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TeammateTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeammateTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeammateTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
