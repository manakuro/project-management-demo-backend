// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"
	"project-management-demo-backend/ent/workspaceteammate"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceTeammateCreate is the builder for creating a WorkspaceTeammate entity.
type WorkspaceTeammateCreate struct {
	config
	mutation *WorkspaceTeammateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetWorkspaceID sets the "workspace_id" field.
func (wtc *WorkspaceTeammateCreate) SetWorkspaceID(u ulid.ID) *WorkspaceTeammateCreate {
	wtc.mutation.SetWorkspaceID(u)
	return wtc
}

// SetTeammateID sets the "teammate_id" field.
func (wtc *WorkspaceTeammateCreate) SetTeammateID(u ulid.ID) *WorkspaceTeammateCreate {
	wtc.mutation.SetTeammateID(u)
	return wtc
}

// SetRole sets the "role" field.
func (wtc *WorkspaceTeammateCreate) SetRole(s string) *WorkspaceTeammateCreate {
	wtc.mutation.SetRole(s)
	return wtc
}

// SetIsOwner sets the "is_owner" field.
func (wtc *WorkspaceTeammateCreate) SetIsOwner(b bool) *WorkspaceTeammateCreate {
	wtc.mutation.SetIsOwner(b)
	return wtc
}

// SetCreatedAt sets the "created_at" field.
func (wtc *WorkspaceTeammateCreate) SetCreatedAt(t time.Time) *WorkspaceTeammateCreate {
	wtc.mutation.SetCreatedAt(t)
	return wtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wtc *WorkspaceTeammateCreate) SetNillableCreatedAt(t *time.Time) *WorkspaceTeammateCreate {
	if t != nil {
		wtc.SetCreatedAt(*t)
	}
	return wtc
}

// SetUpdatedAt sets the "updated_at" field.
func (wtc *WorkspaceTeammateCreate) SetUpdatedAt(t time.Time) *WorkspaceTeammateCreate {
	wtc.mutation.SetUpdatedAt(t)
	return wtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wtc *WorkspaceTeammateCreate) SetNillableUpdatedAt(t *time.Time) *WorkspaceTeammateCreate {
	if t != nil {
		wtc.SetUpdatedAt(*t)
	}
	return wtc
}

// SetID sets the "id" field.
func (wtc *WorkspaceTeammateCreate) SetID(u ulid.ID) *WorkspaceTeammateCreate {
	wtc.mutation.SetID(u)
	return wtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wtc *WorkspaceTeammateCreate) SetNillableID(u *ulid.ID) *WorkspaceTeammateCreate {
	if u != nil {
		wtc.SetID(*u)
	}
	return wtc
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (wtc *WorkspaceTeammateCreate) SetWorkspace(w *Workspace) *WorkspaceTeammateCreate {
	return wtc.SetWorkspaceID(w.ID)
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (wtc *WorkspaceTeammateCreate) SetTeammate(t *Teammate) *WorkspaceTeammateCreate {
	return wtc.SetTeammateID(t.ID)
}

// Mutation returns the WorkspaceTeammateMutation object of the builder.
func (wtc *WorkspaceTeammateCreate) Mutation() *WorkspaceTeammateMutation {
	return wtc.mutation
}

// Save creates the WorkspaceTeammate in the database.
func (wtc *WorkspaceTeammateCreate) Save(ctx context.Context) (*WorkspaceTeammate, error) {
	var (
		err  error
		node *WorkspaceTeammate
	)
	wtc.defaults()
	if len(wtc.hooks) == 0 {
		if err = wtc.check(); err != nil {
			return nil, err
		}
		node, err = wtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkspaceTeammateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wtc.check(); err != nil {
				return nil, err
			}
			wtc.mutation = mutation
			if node, err = wtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wtc.hooks) - 1; i >= 0; i-- {
			if wtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wtc *WorkspaceTeammateCreate) SaveX(ctx context.Context) *WorkspaceTeammate {
	v, err := wtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtc *WorkspaceTeammateCreate) Exec(ctx context.Context) error {
	_, err := wtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtc *WorkspaceTeammateCreate) ExecX(ctx context.Context) {
	if err := wtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtc *WorkspaceTeammateCreate) defaults() {
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		v := workspaceteammate.DefaultCreatedAt()
		wtc.mutation.SetCreatedAt(v)
	}
	if _, ok := wtc.mutation.UpdatedAt(); !ok {
		v := workspaceteammate.DefaultUpdatedAt()
		wtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wtc.mutation.ID(); !ok {
		v := workspaceteammate.DefaultID()
		wtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wtc *WorkspaceTeammateCreate) check() error {
	if _, ok := wtc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "WorkspaceTeammate.workspace_id"`)}
	}
	if _, ok := wtc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate_id", err: errors.New(`ent: missing required field "WorkspaceTeammate.teammate_id"`)}
	}
	if _, ok := wtc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "WorkspaceTeammate.role"`)}
	}
	if v, ok := wtc.mutation.Role(); ok {
		if err := workspaceteammate.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "WorkspaceTeammate.role": %w`, err)}
		}
	}
	if _, ok := wtc.mutation.IsOwner(); !ok {
		return &ValidationError{Name: "is_owner", err: errors.New(`ent: missing required field "WorkspaceTeammate.is_owner"`)}
	}
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkspaceTeammate.created_at"`)}
	}
	if _, ok := wtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkspaceTeammate.updated_at"`)}
	}
	if _, ok := wtc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New(`ent: missing required edge "WorkspaceTeammate.workspace"`)}
	}
	if _, ok := wtc.mutation.TeammateID(); !ok {
		return &ValidationError{Name: "teammate", err: errors.New(`ent: missing required edge "WorkspaceTeammate.teammate"`)}
	}
	return nil
}

func (wtc *WorkspaceTeammateCreate) sqlSave(ctx context.Context) (*WorkspaceTeammate, error) {
	_node, _spec := wtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*ulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (wtc *WorkspaceTeammateCreate) createSpec() (*WorkspaceTeammate, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkspaceTeammate{config: wtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workspaceteammate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: workspaceteammate.FieldID,
			},
		}
	)
	_spec.OnConflict = wtc.conflict
	if id, ok := wtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wtc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workspaceteammate.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := wtc.mutation.IsOwner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: workspaceteammate.FieldIsOwner,
		})
		_node.IsOwner = value
	}
	if value, ok := wtc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workspaceteammate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wtc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workspaceteammate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := wtc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceteammate.WorkspaceTable,
			Columns: []string{workspaceteammate.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wtc.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceteammate.TeammateTable,
			Columns: []string{workspaceteammate.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeammateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceTeammate.Create().
//		SetWorkspaceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceTeammateUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (wtc *WorkspaceTeammateCreate) OnConflict(opts ...sql.ConflictOption) *WorkspaceTeammateUpsertOne {
	wtc.conflict = opts
	return &WorkspaceTeammateUpsertOne{
		create: wtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceTeammate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wtc *WorkspaceTeammateCreate) OnConflictColumns(columns ...string) *WorkspaceTeammateUpsertOne {
	wtc.conflict = append(wtc.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceTeammateUpsertOne{
		create: wtc,
	}
}

type (
	// WorkspaceTeammateUpsertOne is the builder for "upsert"-ing
	//  one WorkspaceTeammate node.
	WorkspaceTeammateUpsertOne struct {
		create *WorkspaceTeammateCreate
	}

	// WorkspaceTeammateUpsert is the "OnConflict" setter.
	WorkspaceTeammateUpsert struct {
		*sql.UpdateSet
	}
)

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceTeammateUpsert) SetWorkspaceID(v ulid.ID) *WorkspaceTeammateUpsert {
	u.Set(workspaceteammate.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsert) UpdateWorkspaceID() *WorkspaceTeammateUpsert {
	u.SetExcluded(workspaceteammate.FieldWorkspaceID)
	return u
}

// SetTeammateID sets the "teammate_id" field.
func (u *WorkspaceTeammateUpsert) SetTeammateID(v ulid.ID) *WorkspaceTeammateUpsert {
	u.Set(workspaceteammate.FieldTeammateID, v)
	return u
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsert) UpdateTeammateID() *WorkspaceTeammateUpsert {
	u.SetExcluded(workspaceteammate.FieldTeammateID)
	return u
}

// SetRole sets the "role" field.
func (u *WorkspaceTeammateUpsert) SetRole(v string) *WorkspaceTeammateUpsert {
	u.Set(workspaceteammate.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsert) UpdateRole() *WorkspaceTeammateUpsert {
	u.SetExcluded(workspaceteammate.FieldRole)
	return u
}

// SetIsOwner sets the "is_owner" field.
func (u *WorkspaceTeammateUpsert) SetIsOwner(v bool) *WorkspaceTeammateUpsert {
	u.Set(workspaceteammate.FieldIsOwner, v)
	return u
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsert) UpdateIsOwner() *WorkspaceTeammateUpsert {
	u.SetExcluded(workspaceteammate.FieldIsOwner)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceTeammateUpsert) SetCreatedAt(v time.Time) *WorkspaceTeammateUpsert {
	u.Set(workspaceteammate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsert) UpdateCreatedAt() *WorkspaceTeammateUpsert {
	u.SetExcluded(workspaceteammate.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceTeammateUpsert) SetUpdatedAt(v time.Time) *WorkspaceTeammateUpsert {
	u.Set(workspaceteammate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsert) UpdateUpdatedAt() *WorkspaceTeammateUpsert {
	u.SetExcluded(workspaceteammate.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkspaceTeammate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceteammate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WorkspaceTeammateUpsertOne) UpdateNewValues() *WorkspaceTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workspaceteammate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workspaceteammate.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UpdatedAt(); exists {
			s.SetIgnore(workspaceteammate.FieldUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.WorkspaceTeammate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *WorkspaceTeammateUpsertOne) Ignore() *WorkspaceTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceTeammateUpsertOne) DoNothing() *WorkspaceTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceTeammateCreate.OnConflict
// documentation for more info.
func (u *WorkspaceTeammateUpsertOne) Update(set func(*WorkspaceTeammateUpsert)) *WorkspaceTeammateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceTeammateUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceTeammateUpsertOne) SetWorkspaceID(v ulid.ID) *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertOne) UpdateWorkspaceID() *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *WorkspaceTeammateUpsertOne) SetTeammateID(v ulid.ID) *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertOne) UpdateTeammateID() *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateTeammateID()
	})
}

// SetRole sets the "role" field.
func (u *WorkspaceTeammateUpsertOne) SetRole(v string) *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertOne) UpdateRole() *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateRole()
	})
}

// SetIsOwner sets the "is_owner" field.
func (u *WorkspaceTeammateUpsertOne) SetIsOwner(v bool) *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetIsOwner(v)
	})
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertOne) UpdateIsOwner() *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateIsOwner()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceTeammateUpsertOne) SetCreatedAt(v time.Time) *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertOne) UpdateCreatedAt() *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceTeammateUpsertOne) SetUpdatedAt(v time.Time) *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertOne) UpdateUpdatedAt() *WorkspaceTeammateUpsertOne {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WorkspaceTeammateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceTeammateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceTeammateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkspaceTeammateUpsertOne) ID(ctx context.Context) (id ulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkspaceTeammateUpsertOne.ID is not supported by MySQL driver. Use WorkspaceTeammateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkspaceTeammateUpsertOne) IDX(ctx context.Context) ulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkspaceTeammateCreateBulk is the builder for creating many WorkspaceTeammate entities in bulk.
type WorkspaceTeammateCreateBulk struct {
	config
	builders []*WorkspaceTeammateCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkspaceTeammate entities in the database.
func (wtcb *WorkspaceTeammateCreateBulk) Save(ctx context.Context) ([]*WorkspaceTeammate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wtcb.builders))
	nodes := make([]*WorkspaceTeammate, len(wtcb.builders))
	mutators := make([]Mutator, len(wtcb.builders))
	for i := range wtcb.builders {
		func(i int, root context.Context) {
			builder := wtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkspaceTeammateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wtcb *WorkspaceTeammateCreateBulk) SaveX(ctx context.Context) []*WorkspaceTeammate {
	v, err := wtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtcb *WorkspaceTeammateCreateBulk) Exec(ctx context.Context) error {
	_, err := wtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtcb *WorkspaceTeammateCreateBulk) ExecX(ctx context.Context) {
	if err := wtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceTeammate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceTeammateUpsert) {
//			SetWorkspaceID(v+v).
//		}).
//		Exec(ctx)
//
func (wtcb *WorkspaceTeammateCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkspaceTeammateUpsertBulk {
	wtcb.conflict = opts
	return &WorkspaceTeammateUpsertBulk{
		create: wtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceTeammate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wtcb *WorkspaceTeammateCreateBulk) OnConflictColumns(columns ...string) *WorkspaceTeammateUpsertBulk {
	wtcb.conflict = append(wtcb.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceTeammateUpsertBulk{
		create: wtcb,
	}
}

// WorkspaceTeammateUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkspaceTeammate nodes.
type WorkspaceTeammateUpsertBulk struct {
	create *WorkspaceTeammateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkspaceTeammate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceteammate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WorkspaceTeammateUpsertBulk) UpdateNewValues() *WorkspaceTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workspaceteammate.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workspaceteammate.FieldCreatedAt)
			}
			if _, exists := b.mutation.UpdatedAt(); exists {
				s.SetIgnore(workspaceteammate.FieldUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceTeammate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *WorkspaceTeammateUpsertBulk) Ignore() *WorkspaceTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceTeammateUpsertBulk) DoNothing() *WorkspaceTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceTeammateCreateBulk.OnConflict
// documentation for more info.
func (u *WorkspaceTeammateUpsertBulk) Update(set func(*WorkspaceTeammateUpsert)) *WorkspaceTeammateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceTeammateUpsert{UpdateSet: update})
	}))
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceTeammateUpsertBulk) SetWorkspaceID(v ulid.ID) *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertBulk) UpdateWorkspaceID() *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetTeammateID sets the "teammate_id" field.
func (u *WorkspaceTeammateUpsertBulk) SetTeammateID(v ulid.ID) *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetTeammateID(v)
	})
}

// UpdateTeammateID sets the "teammate_id" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertBulk) UpdateTeammateID() *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateTeammateID()
	})
}

// SetRole sets the "role" field.
func (u *WorkspaceTeammateUpsertBulk) SetRole(v string) *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertBulk) UpdateRole() *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateRole()
	})
}

// SetIsOwner sets the "is_owner" field.
func (u *WorkspaceTeammateUpsertBulk) SetIsOwner(v bool) *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetIsOwner(v)
	})
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertBulk) UpdateIsOwner() *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateIsOwner()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceTeammateUpsertBulk) SetCreatedAt(v time.Time) *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertBulk) UpdateCreatedAt() *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceTeammateUpsertBulk) SetUpdatedAt(v time.Time) *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceTeammateUpsertBulk) UpdateUpdatedAt() *WorkspaceTeammateUpsertBulk {
	return u.Update(func(s *WorkspaceTeammateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *WorkspaceTeammateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkspaceTeammateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceTeammateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceTeammateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
