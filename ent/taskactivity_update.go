// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management-demo-backend/ent/activitytype"
	"project-management-demo-backend/ent/predicate"
	"project-management-demo-backend/ent/schema/ulid"
	"project-management-demo-backend/ent/taskactivity"
	"project-management-demo-backend/ent/taskactivitytask"
	"project-management-demo-backend/ent/teammate"
	"project-management-demo-backend/ent/workspace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskActivityUpdate is the builder for updating TaskActivity entities.
type TaskActivityUpdate struct {
	config
	hooks    []Hook
	mutation *TaskActivityMutation
}

// Where appends a list predicates to the TaskActivityUpdate builder.
func (tau *TaskActivityUpdate) Where(ps ...predicate.TaskActivity) *TaskActivityUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetActivityTypeID sets the "activity_type_id" field.
func (tau *TaskActivityUpdate) SetActivityTypeID(u ulid.ID) *TaskActivityUpdate {
	tau.mutation.SetActivityTypeID(u)
	return tau
}

// SetTeammateID sets the "teammate_id" field.
func (tau *TaskActivityUpdate) SetTeammateID(u ulid.ID) *TaskActivityUpdate {
	tau.mutation.SetTeammateID(u)
	return tau
}

// SetWorkspaceID sets the "workspace_id" field.
func (tau *TaskActivityUpdate) SetWorkspaceID(u ulid.ID) *TaskActivityUpdate {
	tau.mutation.SetWorkspaceID(u)
	return tau
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tau *TaskActivityUpdate) SetTeammate(t *Teammate) *TaskActivityUpdate {
	return tau.SetTeammateID(t.ID)
}

// SetActivityType sets the "activityType" edge to the ActivityType entity.
func (tau *TaskActivityUpdate) SetActivityType(a *ActivityType) *TaskActivityUpdate {
	return tau.SetActivityTypeID(a.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (tau *TaskActivityUpdate) SetWorkspace(w *Workspace) *TaskActivityUpdate {
	return tau.SetWorkspaceID(w.ID)
}

// AddTaskActivityTaskIDs adds the "taskActivityTasks" edge to the TaskActivityTask entity by IDs.
func (tau *TaskActivityUpdate) AddTaskActivityTaskIDs(ids ...ulid.ID) *TaskActivityUpdate {
	tau.mutation.AddTaskActivityTaskIDs(ids...)
	return tau
}

// AddTaskActivityTasks adds the "taskActivityTasks" edges to the TaskActivityTask entity.
func (tau *TaskActivityUpdate) AddTaskActivityTasks(t ...*TaskActivityTask) *TaskActivityUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tau.AddTaskActivityTaskIDs(ids...)
}

// Mutation returns the TaskActivityMutation object of the builder.
func (tau *TaskActivityUpdate) Mutation() *TaskActivityMutation {
	return tau.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tau *TaskActivityUpdate) ClearTeammate() *TaskActivityUpdate {
	tau.mutation.ClearTeammate()
	return tau
}

// ClearActivityType clears the "activityType" edge to the ActivityType entity.
func (tau *TaskActivityUpdate) ClearActivityType() *TaskActivityUpdate {
	tau.mutation.ClearActivityType()
	return tau
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (tau *TaskActivityUpdate) ClearWorkspace() *TaskActivityUpdate {
	tau.mutation.ClearWorkspace()
	return tau
}

// ClearTaskActivityTasks clears all "taskActivityTasks" edges to the TaskActivityTask entity.
func (tau *TaskActivityUpdate) ClearTaskActivityTasks() *TaskActivityUpdate {
	tau.mutation.ClearTaskActivityTasks()
	return tau
}

// RemoveTaskActivityTaskIDs removes the "taskActivityTasks" edge to TaskActivityTask entities by IDs.
func (tau *TaskActivityUpdate) RemoveTaskActivityTaskIDs(ids ...ulid.ID) *TaskActivityUpdate {
	tau.mutation.RemoveTaskActivityTaskIDs(ids...)
	return tau
}

// RemoveTaskActivityTasks removes "taskActivityTasks" edges to TaskActivityTask entities.
func (tau *TaskActivityUpdate) RemoveTaskActivityTasks(t ...*TaskActivityTask) *TaskActivityUpdate {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tau.RemoveTaskActivityTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TaskActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tau.hooks) == 0 {
		if err = tau.check(); err != nil {
			return 0, err
		}
		affected, err = tau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tau.check(); err != nil {
				return 0, err
			}
			tau.mutation = mutation
			affected, err = tau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tau.hooks) - 1; i >= 0; i-- {
			if tau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TaskActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TaskActivityUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TaskActivityUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TaskActivityUpdate) check() error {
	if _, ok := tau.mutation.TeammateID(); tau.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivity.teammate"`)
	}
	if _, ok := tau.mutation.ActivityTypeID(); tau.mutation.ActivityTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivity.activityType"`)
	}
	if _, ok := tau.mutation.WorkspaceID(); tau.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivity.workspace"`)
	}
	return nil
}

func (tau *TaskActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskactivity.Table,
			Columns: taskactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskactivity.FieldID,
			},
		},
	}
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tau.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.TeammateTable,
			Columns: []string{taskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.TeammateTable,
			Columns: []string{taskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tau.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.ActivityTypeTable,
			Columns: []string{taskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.ActivityTypeTable,
			Columns: []string{taskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tau.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.WorkspaceTable,
			Columns: []string{taskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.WorkspaceTable,
			Columns: []string{taskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tau.mutation.TaskActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskactivity.TaskActivityTasksTable,
			Columns: []string{taskactivity.TaskActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivitytask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.RemovedTaskActivityTasksIDs(); len(nodes) > 0 && !tau.mutation.TaskActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskactivity.TaskActivityTasksTable,
			Columns: []string{taskactivity.TaskActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.TaskActivityTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskactivity.TaskActivityTasksTable,
			Columns: []string{taskactivity.TaskActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskActivityUpdateOne is the builder for updating a single TaskActivity entity.
type TaskActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskActivityMutation
}

// SetActivityTypeID sets the "activity_type_id" field.
func (tauo *TaskActivityUpdateOne) SetActivityTypeID(u ulid.ID) *TaskActivityUpdateOne {
	tauo.mutation.SetActivityTypeID(u)
	return tauo
}

// SetTeammateID sets the "teammate_id" field.
func (tauo *TaskActivityUpdateOne) SetTeammateID(u ulid.ID) *TaskActivityUpdateOne {
	tauo.mutation.SetTeammateID(u)
	return tauo
}

// SetWorkspaceID sets the "workspace_id" field.
func (tauo *TaskActivityUpdateOne) SetWorkspaceID(u ulid.ID) *TaskActivityUpdateOne {
	tauo.mutation.SetWorkspaceID(u)
	return tauo
}

// SetTeammate sets the "teammate" edge to the Teammate entity.
func (tauo *TaskActivityUpdateOne) SetTeammate(t *Teammate) *TaskActivityUpdateOne {
	return tauo.SetTeammateID(t.ID)
}

// SetActivityType sets the "activityType" edge to the ActivityType entity.
func (tauo *TaskActivityUpdateOne) SetActivityType(a *ActivityType) *TaskActivityUpdateOne {
	return tauo.SetActivityTypeID(a.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (tauo *TaskActivityUpdateOne) SetWorkspace(w *Workspace) *TaskActivityUpdateOne {
	return tauo.SetWorkspaceID(w.ID)
}

// AddTaskActivityTaskIDs adds the "taskActivityTasks" edge to the TaskActivityTask entity by IDs.
func (tauo *TaskActivityUpdateOne) AddTaskActivityTaskIDs(ids ...ulid.ID) *TaskActivityUpdateOne {
	tauo.mutation.AddTaskActivityTaskIDs(ids...)
	return tauo
}

// AddTaskActivityTasks adds the "taskActivityTasks" edges to the TaskActivityTask entity.
func (tauo *TaskActivityUpdateOne) AddTaskActivityTasks(t ...*TaskActivityTask) *TaskActivityUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tauo.AddTaskActivityTaskIDs(ids...)
}

// Mutation returns the TaskActivityMutation object of the builder.
func (tauo *TaskActivityUpdateOne) Mutation() *TaskActivityMutation {
	return tauo.mutation
}

// ClearTeammate clears the "teammate" edge to the Teammate entity.
func (tauo *TaskActivityUpdateOne) ClearTeammate() *TaskActivityUpdateOne {
	tauo.mutation.ClearTeammate()
	return tauo
}

// ClearActivityType clears the "activityType" edge to the ActivityType entity.
func (tauo *TaskActivityUpdateOne) ClearActivityType() *TaskActivityUpdateOne {
	tauo.mutation.ClearActivityType()
	return tauo
}

// ClearWorkspace clears the "workspace" edge to the Workspace entity.
func (tauo *TaskActivityUpdateOne) ClearWorkspace() *TaskActivityUpdateOne {
	tauo.mutation.ClearWorkspace()
	return tauo
}

// ClearTaskActivityTasks clears all "taskActivityTasks" edges to the TaskActivityTask entity.
func (tauo *TaskActivityUpdateOne) ClearTaskActivityTasks() *TaskActivityUpdateOne {
	tauo.mutation.ClearTaskActivityTasks()
	return tauo
}

// RemoveTaskActivityTaskIDs removes the "taskActivityTasks" edge to TaskActivityTask entities by IDs.
func (tauo *TaskActivityUpdateOne) RemoveTaskActivityTaskIDs(ids ...ulid.ID) *TaskActivityUpdateOne {
	tauo.mutation.RemoveTaskActivityTaskIDs(ids...)
	return tauo
}

// RemoveTaskActivityTasks removes "taskActivityTasks" edges to TaskActivityTask entities.
func (tauo *TaskActivityUpdateOne) RemoveTaskActivityTasks(t ...*TaskActivityTask) *TaskActivityUpdateOne {
	ids := make([]ulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tauo.RemoveTaskActivityTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TaskActivityUpdateOne) Select(field string, fields ...string) *TaskActivityUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TaskActivity entity.
func (tauo *TaskActivityUpdateOne) Save(ctx context.Context) (*TaskActivity, error) {
	var (
		err  error
		node *TaskActivity
	)
	if len(tauo.hooks) == 0 {
		if err = tauo.check(); err != nil {
			return nil, err
		}
		node, err = tauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tauo.check(); err != nil {
				return nil, err
			}
			tauo.mutation = mutation
			node, err = tauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tauo.hooks) - 1; i >= 0; i-- {
			if tauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TaskActivityUpdateOne) SaveX(ctx context.Context) *TaskActivity {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TaskActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TaskActivityUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TaskActivityUpdateOne) check() error {
	if _, ok := tauo.mutation.TeammateID(); tauo.mutation.TeammateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivity.teammate"`)
	}
	if _, ok := tauo.mutation.ActivityTypeID(); tauo.mutation.ActivityTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivity.activityType"`)
	}
	if _, ok := tauo.mutation.WorkspaceID(); tauo.mutation.WorkspaceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskActivity.workspace"`)
	}
	return nil
}

func (tauo *TaskActivityUpdateOne) sqlSave(ctx context.Context) (_node *TaskActivity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskactivity.Table,
			Columns: taskactivity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: taskactivity.FieldID,
			},
		},
	}
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskactivity.FieldID)
		for _, f := range fields {
			if !taskactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tauo.mutation.TeammateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.TeammateTable,
			Columns: []string{taskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.TeammateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.TeammateTable,
			Columns: []string{taskactivity.TeammateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teammate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tauo.mutation.ActivityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.ActivityTypeTable,
			Columns: []string{taskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.ActivityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.ActivityTypeTable,
			Columns: []string{taskactivity.ActivityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tauo.mutation.WorkspaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.WorkspaceTable,
			Columns: []string{taskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskactivity.WorkspaceTable,
			Columns: []string{taskactivity.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: workspace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tauo.mutation.TaskActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskactivity.TaskActivityTasksTable,
			Columns: []string{taskactivity.TaskActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivitytask.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.RemovedTaskActivityTasksIDs(); len(nodes) > 0 && !tauo.mutation.TaskActivityTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskactivity.TaskActivityTasksTable,
			Columns: []string{taskactivity.TaskActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.TaskActivityTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taskactivity.TaskActivityTasksTable,
			Columns: []string{taskactivity.TaskActivityTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: taskactivitytask.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskActivity{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
